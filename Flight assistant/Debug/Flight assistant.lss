
Flight assistant.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00002ca6  00002d3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ca6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025e  00800154  00800154  00002d8e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002d8e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002dec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  00002e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003944  00000000  00000000  0000310c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001715  00000000  00000000  00006a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c64  00000000  00000000  00008165  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000968  00000000  00000000  00009dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bf6  00000000  00000000  0000a734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000031cd  00000000  00000000  0000b32a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  0000e4f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 18 01 	jmp	0x230	; 0x230 <__ctors_end>
       4:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
       8:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
       c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      10:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      14:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      18:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      1c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      20:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      24:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      28:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      2c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      30:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      34:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      38:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      3c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      40:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <__vector_16>
      44:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      48:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <__vector_18>
      4c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      50:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <__vector_20>
      54:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      58:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      5c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      60:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <__vector_24>
      64:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      68:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      6c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      70:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      74:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      78:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      7c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      80:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      84:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      88:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      8c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      90:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      94:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      98:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      9c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      a0:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      a4:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      a8:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      ac:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      b0:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
      b4:	6c 0a       	sbc	r6, r28
      b6:	80 0a       	sbc	r8, r16
      b8:	9c 0a       	sbc	r9, r28
      ba:	0c 0b       	sbc	r16, r28
      bc:	22 0b       	sbc	r18, r18
      be:	60 0b       	sbc	r22, r16
      c0:	b3 0b       	sbc	r27, r19
      c2:	e5 0b       	sbc	r30, r21
      c4:	38 0c       	add	r3, r8
      c6:	08 4a       	sbci	r16, 0xA8	; 168
      c8:	d7 3b       	cpi	r29, 0xB7	; 183
      ca:	3b ce       	rjmp	.-906    	; 0xfffffd42 <__eeprom_end+0xff7efd42>
      cc:	01 6e       	ori	r16, 0xE1	; 225
      ce:	84 bc       	out	0x24, r8	; 36
      d0:	bf fd       	.word	0xfdbf	; ????
      d2:	c1 2f       	mov	r28, r17
      d4:	3d 6c       	ori	r19, 0xCD	; 205
      d6:	74 31       	cpi	r23, 0x14	; 20
      d8:	9a bd       	out	0x2a, r25	; 42
      da:	56 83       	std	Z+6, r21	; 0x06
      dc:	3d da       	rcall	.-2950   	; 0xfffff558 <__eeprom_end+0xff7ef558>
      de:	3d 00       	.word	0x003d	; ????
      e0:	c7 7f       	andi	r28, 0xF7	; 247
      e2:	11 be       	out	0x31, r1	; 49
      e4:	d9 e4       	ldi	r29, 0x49	; 73
      e6:	bb 4c       	sbci	r27, 0xCB	; 203
      e8:	3e 91       	ld	r19, -X
      ea:	6b aa       	std	Y+51, r6	; 0x33
      ec:	aa be       	out	0x3a, r10	; 58
      ee:	00 00       	nop
      f0:	00 80       	ld	r0, Z
      f2:	3f 00       	.word	0x003f	; ????

000000f4 <__trampolines_end>:
      f4:	00 40       	sbci	r16, 0x00	; 0
      f6:	7a 10       	cpse	r7, r10
      f8:	f3 5a       	subi	r31, 0xA3	; 163
      fa:	00 a0       	ldd	r0, Z+32	; 0x20
      fc:	72 4e       	sbci	r23, 0xE2	; 226
      fe:	18 09       	sbc	r17, r8
     100:	00 10       	cpse	r0, r0
     102:	a5 d4       	rcall	.+2378   	; 0xa4e <main+0x54>
     104:	e8 00       	.word	0x00e8	; ????
     106:	00 e8       	ldi	r16, 0x80	; 128
     108:	76 48       	sbci	r23, 0x86	; 134
     10a:	17 00       	.word	0x0017	; ????
     10c:	00 e4       	ldi	r16, 0x40	; 64
     10e:	0b 54       	subi	r16, 0x4B	; 75
     110:	02 00       	.word	0x0002	; ????
     112:	00 ca       	rjmp	.-3072   	; 0xfffff514 <__eeprom_end+0xff7ef514>
     114:	9a 3b       	cpi	r25, 0xBA	; 186
     116:	00 00       	nop
     118:	00 e1       	ldi	r16, 0x10	; 16
     11a:	f5 05       	cpc	r31, r5
     11c:	00 00       	nop
     11e:	80 96       	adiw	r24, 0x20	; 32
     120:	98 00       	.word	0x0098	; ????
     122:	00 00       	nop
     124:	40 42       	sbci	r20, 0x20	; 32
     126:	0f 00       	.word	0x000f	; ????
     128:	00 00       	nop
     12a:	a0 86       	std	Z+8, r10	; 0x08
     12c:	01 00       	.word	0x0001	; ????
     12e:	00 00       	nop
     130:	10 27       	eor	r17, r16
     132:	00 00       	nop
     134:	00 00       	nop
     136:	e8 03       	fmulsu	r22, r16
     138:	00 00       	nop
     13a:	00 00       	nop
     13c:	64 00       	.word	0x0064	; ????
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	0a 00       	.word	0x000a	; ????
     144:	00 00       	nop
     146:	00 00       	nop
     148:	01 00       	.word	0x0001	; ????
     14a:	00 00       	nop
     14c:	00 00       	nop
     14e:	2c 76       	andi	r18, 0x6C	; 108
     150:	d8 88       	ldd	r13, Y+16	; 0x10
     152:	dc 67       	ori	r29, 0x7C	; 124
     154:	4f 08       	sbc	r4, r15
     156:	23 df       	rcall	.-442    	; 0xffffff9e <__eeprom_end+0xff7eff9e>
     158:	c1 df       	rcall	.-126    	; 0xdc <__SREG__+0x9d>
     15a:	ae 59       	subi	r26, 0x9E	; 158
     15c:	e1 b1       	in	r30, 0x01	; 1
     15e:	b7 96       	adiw	r30, 0x27	; 39
     160:	e5 e3       	ldi	r30, 0x35	; 53
     162:	e4 53       	subi	r30, 0x34	; 52
     164:	c6 3a       	cpi	r28, 0xA6	; 166
     166:	e6 51       	subi	r30, 0x16	; 22
     168:	99 76       	andi	r25, 0x69	; 105
     16a:	96 e8       	ldi	r25, 0x86	; 134
     16c:	e6 c2       	rjmp	.+1484   	; 0x73a <AveragingWeightingMPU6050+0xc0>
     16e:	84 26       	eor	r8, r20
     170:	eb 89       	ldd	r30, Y+19	; 0x13
     172:	8c 9b       	sbis	0x11, 4	; 17
     174:	62 ed       	ldi	r22, 0xD2	; 210
     176:	40 7c       	andi	r20, 0xC0	; 192
     178:	6f fc       	.word	0xfc6f	; ????
     17a:	ef bc       	out	0x2f, r14	; 47
     17c:	9c 9f       	mul	r25, r28
     17e:	40 f2       	brcs	.-112    	; 0x110 <__trampolines_end+0x1c>
     180:	ba a5       	ldd	r27, Y+42	; 0x2a
     182:	6f a5       	ldd	r22, Y+47	; 0x2f
     184:	f4 90       	lpm	r15, Z
     186:	05 5a       	subi	r16, 0xA5	; 165
     188:	2a f7       	brpl	.-54     	; 0x154 <__trampolines_end+0x60>
     18a:	5c 93       	st	X, r21
     18c:	6b 6c       	ori	r22, 0xCB	; 203
     18e:	f9 67       	ori	r31, 0x79	; 121
     190:	6d c1       	rjmp	.+730    	; 0x46c <ReadGyroBuf+0x52>
     192:	1b fc       	.word	0xfc1b	; ????
     194:	e0 e4       	ldi	r30, 0x40	; 64
     196:	0d 47       	sbci	r16, 0x7D	; 125
     198:	fe f5       	brtc	.+126    	; 0x218 <ER_commands+0x2a>
     19a:	20 e6       	ldi	r18, 0x60	; 96
     19c:	b5 00       	.word	0x00b5	; ????
     19e:	d0 ed       	ldi	r29, 0xD0	; 208
     1a0:	90 2e       	mov	r9, r16
     1a2:	03 00       	.word	0x0003	; ????
     1a4:	94 35       	cpi	r25, 0x54	; 84
     1a6:	77 05       	cpc	r23, r7
     1a8:	00 80       	ld	r0, Z
     1aa:	84 1e       	adc	r8, r20
     1ac:	08 00       	.word	0x0008	; ????
     1ae:	00 20       	and	r0, r0
     1b0:	4e 0a       	sbc	r4, r30
     1b2:	00 00       	nop
     1b4:	00 c8       	rjmp	.-4096   	; 0xfffff1b6 <__eeprom_end+0xff7ef1b6>
     1b6:	0c 33       	cpi	r16, 0x3C	; 60
     1b8:	33 33       	cpi	r19, 0x33	; 51
     1ba:	33 0f       	add	r19, r19
     1bc:	98 6e       	ori	r25, 0xE8	; 232
     1be:	12 83       	std	Z+2, r17	; 0x02
     1c0:	11 41       	sbci	r17, 0x11	; 17
     1c2:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1c4:	21 14       	cp	r2, r1
     1c6:	89 3b       	cpi	r24, 0xB9	; 185
     1c8:	e6 55       	subi	r30, 0x56	; 86
     1ca:	16 cf       	rjmp	.-468    	; 0xfffffff8 <__eeprom_end+0xff7efff8>
     1cc:	fe e6       	ldi	r31, 0x6E	; 110
     1ce:	db 18       	sub	r13, r11
     1d0:	d1 84       	ldd	r13, Z+9	; 0x09
     1d2:	4b 38       	cpi	r20, 0x8B	; 139
     1d4:	1b f7       	brvc	.-58     	; 0x19c <__trampolines_end+0xa8>
     1d6:	7c 1d       	adc	r23, r12
     1d8:	90 1d       	adc	r25, r0
     1da:	a4 bb       	out	0x14, r26	; 20
     1dc:	e4 24       	eor	r14, r4
     1de:	20 32       	cpi	r18, 0x20	; 32
     1e0:	84 72       	andi	r24, 0x24	; 36
     1e2:	5e 22       	and	r5, r30
     1e4:	81 00       	.word	0x0081	; ????
     1e6:	c9 f1       	breq	.+114    	; 0x25a <.do_clear_bss_loop>
     1e8:	24 ec       	ldi	r18, 0xC4	; 196
     1ea:	a1 e5       	ldi	r26, 0x51	; 81
     1ec:	3d 27       	eor	r19, r29

000001ee <ER_commands>:
     1ee:	45 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ER..............
     1fe:	00 00 00 00 49 08 45 52 5f 52 45 41 44 00 00 00     ....I.ER_READ...
	...
     216:	00 00 4f 08 45 52 5f 42 55 46 00 00 00 00 00 00     ..O.ER_BUF......
	...
     22e:	a7 08                                               ..

00000230 <__ctors_end>:
     230:	11 24       	eor	r1, r1
     232:	1f be       	out	0x3f, r1	; 63
     234:	cf ef       	ldi	r28, 0xFF	; 255
     236:	d8 e0       	ldi	r29, 0x08	; 8
     238:	de bf       	out	0x3e, r29	; 62
     23a:	cd bf       	out	0x3d, r28	; 61

0000023c <__do_copy_data>:
     23c:	11 e0       	ldi	r17, 0x01	; 1
     23e:	a0 e0       	ldi	r26, 0x00	; 0
     240:	b1 e0       	ldi	r27, 0x01	; 1
     242:	e6 ea       	ldi	r30, 0xA6	; 166
     244:	fc e2       	ldi	r31, 0x2C	; 44
     246:	02 c0       	rjmp	.+4      	; 0x24c <__do_copy_data+0x10>
     248:	05 90       	lpm	r0, Z+
     24a:	0d 92       	st	X+, r0
     24c:	a4 35       	cpi	r26, 0x54	; 84
     24e:	b1 07       	cpc	r27, r17
     250:	d9 f7       	brne	.-10     	; 0x248 <__do_copy_data+0xc>

00000252 <__do_clear_bss>:
     252:	23 e0       	ldi	r18, 0x03	; 3
     254:	a4 e5       	ldi	r26, 0x54	; 84
     256:	b1 e0       	ldi	r27, 0x01	; 1
     258:	01 c0       	rjmp	.+2      	; 0x25c <.do_clear_bss_start>

0000025a <.do_clear_bss_loop>:
     25a:	1d 92       	st	X+, r1

0000025c <.do_clear_bss_start>:
     25c:	a2 3b       	cpi	r26, 0xB2	; 178
     25e:	b2 07       	cpc	r27, r18
     260:	e1 f7       	brne	.-8      	; 0x25a <.do_clear_bss_loop>
     262:	0e 94 fd 04 	call	0x9fa	; 0x9fa <main>
     266:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <_exit>

0000026a <__bad_interrupt>:
     26a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000026e <PlaceInGyroBuffor>:

uint8_t counter_testing = 0;


void PlaceInGyroBuffor(int16_t gyro_samples[])
{
     26e:	fc 01       	movw	r30, r24
	X_gyro_buff[gyro_head] = gyro_samples[0];
     270:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <gyro_head>
     274:	29 2f       	mov	r18, r25
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	40 81       	ld	r20, Z
     27a:	51 81       	ldd	r21, Z+1	; 0x01
     27c:	22 0f       	add	r18, r18
     27e:	33 1f       	adc	r19, r19
     280:	d9 01       	movw	r26, r18
     282:	a4 5a       	subi	r26, 0xA4	; 164
     284:	be 4f       	sbci	r27, 0xFE	; 254
     286:	4d 93       	st	X+, r20
     288:	5c 93       	st	X, r21
	Y_gyro_buff[gyro_head] = gyro_samples[1];
     28a:	42 81       	ldd	r20, Z+2	; 0x02
     28c:	53 81       	ldd	r21, Z+3	; 0x03
     28e:	d9 01       	movw	r26, r18
     290:	aa 57       	subi	r26, 0x7A	; 122
     292:	be 4f       	sbci	r27, 0xFE	; 254
     294:	4d 93       	st	X+, r20
     296:	5c 93       	st	X, r21
	Z_gyro_buff[gyro_head] = gyro_samples[2];
     298:	44 81       	ldd	r20, Z+4	; 0x04
     29a:	55 81       	ldd	r21, Z+5	; 0x05
     29c:	f9 01       	movw	r30, r18
     29e:	ec 5b       	subi	r30, 0xBC	; 188
     2a0:	fd 4f       	sbci	r31, 0xFD	; 253
     2a2:	51 83       	std	Z+1, r21	; 0x01
     2a4:	40 83       	st	Z, r20

	gyro_head++;
     2a6:	9f 5f       	subi	r25, 0xFF	; 255
	if (gyro_head == SAMPLES)
     2a8:	95 31       	cpi	r25, 0x15	; 21
     2aa:	19 f0       	breq	.+6      	; 0x2b2 <PlaceInGyroBuffor+0x44>
{
	X_gyro_buff[gyro_head] = gyro_samples[0];
	Y_gyro_buff[gyro_head] = gyro_samples[1];
	Z_gyro_buff[gyro_head] = gyro_samples[2];

	gyro_head++;
     2ac:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <gyro_head>
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <PlaceInGyroBuffor+0x48>
	if (gyro_head == SAMPLES)
	gyro_head = 0;
     2b2:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <gyro_head>

	if (gyro_head == gyro_tail)
     2b6:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <gyro_head>
     2ba:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <gyro_tail>
     2be:	89 13       	cpse	r24, r25
     2c0:	03 c0       	rjmp	.+6      	; 0x2c8 <PlaceInGyroBuffor+0x5a>
		gyro_tail++;
     2c2:	8f 5f       	subi	r24, 0xFF	; 255
     2c4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <gyro_tail>

	if (gyro_tail == SAMPLES)
     2c8:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <gyro_tail>
     2cc:	85 31       	cpi	r24, 0x15	; 21
     2ce:	11 f4       	brne	.+4      	; 0x2d4 <PlaceInGyroBuffor+0x66>
		gyro_tail = 0;
     2d0:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <gyro_tail>
     2d4:	08 95       	ret

000002d6 <PlaceInAccBuffor>:
}

void PlaceInAccBuffor(int16_t acc_samples[])
{
     2d6:	fc 01       	movw	r30, r24
	X_acc_buff[acc_head] = acc_samples[0];
     2d8:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <acc_head>
     2dc:	29 2f       	mov	r18, r25
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	40 81       	ld	r20, Z
     2e2:	51 81       	ldd	r21, Z+1	; 0x01
     2e4:	22 0f       	add	r18, r18
     2e6:	33 1f       	adc	r19, r19
     2e8:	d9 01       	movw	r26, r18
     2ea:	a6 52       	subi	r26, 0x26	; 38
     2ec:	be 4f       	sbci	r27, 0xFE	; 254
     2ee:	4d 93       	st	X+, r20
     2f0:	5c 93       	st	X, r21
	Y_acc_buff[acc_head] = acc_samples[1];
     2f2:	42 81       	ldd	r20, Z+2	; 0x02
     2f4:	53 81       	ldd	r21, Z+3	; 0x03
     2f6:	d9 01       	movw	r26, r18
     2f8:	a6 5e       	subi	r26, 0xE6	; 230
     2fa:	bd 4f       	sbci	r27, 0xFD	; 253
     2fc:	4d 93       	st	X+, r20
     2fe:	5c 93       	st	X, r21
	Z_acc_buff[acc_head] = acc_samples[2];
     300:	44 81       	ldd	r20, Z+4	; 0x04
     302:	55 81       	ldd	r21, Z+5	; 0x05
     304:	f9 01       	movw	r30, r18
     306:	e0 55       	subi	r30, 0x50	; 80
     308:	fe 4f       	sbci	r31, 0xFE	; 254
     30a:	51 83       	std	Z+1, r21	; 0x01
     30c:	40 83       	st	Z, r20

	acc_head++;
     30e:	9f 5f       	subi	r25, 0xFF	; 255
	if (acc_head == SAMPLES)
     310:	95 31       	cpi	r25, 0x15	; 21
     312:	19 f0       	breq	.+6      	; 0x31a <PlaceInAccBuffor+0x44>
{
	X_acc_buff[acc_head] = acc_samples[0];
	Y_acc_buff[acc_head] = acc_samples[1];
	Z_acc_buff[acc_head] = acc_samples[2];

	acc_head++;
     314:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <acc_head>
     318:	02 c0       	rjmp	.+4      	; 0x31e <PlaceInAccBuffor+0x48>
	if (acc_head == SAMPLES)
		acc_head = 0;
     31a:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <acc_head>

	if (acc_head == acc_tail)
     31e:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <acc_head>
     322:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <__data_end>
     326:	89 13       	cpse	r24, r25
     328:	03 c0       	rjmp	.+6      	; 0x330 <PlaceInAccBuffor+0x5a>
		acc_tail++;
     32a:	8f 5f       	subi	r24, 0xFF	; 255
     32c:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__data_end>

	if (acc_tail == SAMPLES)
     330:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
     334:	85 31       	cpi	r24, 0x15	; 21
     336:	11 f4       	brne	.+4      	; 0x33c <PlaceInAccBuffor+0x66>
		acc_tail = 0;
     338:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <__data_end>
     33c:	08 95       	ret

0000033e <ReadGyroSample>:
}

void ReadGyroSample(int16_t reading_buf[])
{
     33e:	dc 01       	movw	r26, r24
	reading_buf[0] = X_gyro_buff[gyro_tail];
     340:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <gyro_tail>
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	ee 0f       	add	r30, r30
     348:	ff 1f       	adc	r31, r31
     34a:	e4 5a       	subi	r30, 0xA4	; 164
     34c:	fe 4f       	sbci	r31, 0xFE	; 254
     34e:	80 81       	ld	r24, Z
     350:	91 81       	ldd	r25, Z+1	; 0x01
     352:	11 96       	adiw	r26, 0x01	; 1
     354:	9c 93       	st	X, r25
     356:	8e 93       	st	-X, r24
	reading_buf[1] = Y_gyro_buff[gyro_tail];
     358:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <gyro_tail>
     35c:	29 2f       	mov	r18, r25
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	22 0f       	add	r18, r18
     362:	33 1f       	adc	r19, r19
     364:	f9 01       	movw	r30, r18
     366:	ea 57       	subi	r30, 0x7A	; 122
     368:	fe 4f       	sbci	r31, 0xFE	; 254
     36a:	40 81       	ld	r20, Z
     36c:	51 81       	ldd	r21, Z+1	; 0x01
     36e:	13 96       	adiw	r26, 0x03	; 3
     370:	5c 93       	st	X, r21
     372:	4e 93       	st	-X, r20
     374:	12 97       	sbiw	r26, 0x02	; 2
	reading_buf[2] = Z_gyro_buff[gyro_tail];
     376:	f9 01       	movw	r30, r18
     378:	ec 5b       	subi	r30, 0xBC	; 188
     37a:	fd 4f       	sbci	r31, 0xFD	; 253
     37c:	20 81       	ld	r18, Z
     37e:	31 81       	ldd	r19, Z+1	; 0x01
     380:	15 96       	adiw	r26, 0x05	; 5
     382:	3c 93       	st	X, r19
     384:	2e 93       	st	-X, r18
     386:	14 97       	sbiw	r26, 0x04	; 4

	gyro_tail++;
     388:	9f 5f       	subi	r25, 0xFF	; 255

	if (gyro_tail == SAMPLES)
     38a:	95 31       	cpi	r25, 0x15	; 21
     38c:	19 f0       	breq	.+6      	; 0x394 <ReadGyroSample+0x56>
{
	reading_buf[0] = X_gyro_buff[gyro_tail];
	reading_buf[1] = Y_gyro_buff[gyro_tail];
	reading_buf[2] = Z_gyro_buff[gyro_tail];

	gyro_tail++;
     38e:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <gyro_tail>
     392:	08 95       	ret

	if (gyro_tail == SAMPLES)
		gyro_tail = 0;
     394:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <gyro_tail>
     398:	08 95       	ret

0000039a <ReadAccSample>:
}

void ReadAccSample(int16_t reading_buf[])
{
     39a:	dc 01       	movw	r26, r24
	reading_buf[0] = X_acc_buff[acc_tail];
     39c:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <__data_end>
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	ee 0f       	add	r30, r30
     3a4:	ff 1f       	adc	r31, r31
     3a6:	e6 52       	subi	r30, 0x26	; 38
     3a8:	fe 4f       	sbci	r31, 0xFE	; 254
     3aa:	80 81       	ld	r24, Z
     3ac:	91 81       	ldd	r25, Z+1	; 0x01
     3ae:	11 96       	adiw	r26, 0x01	; 1
     3b0:	9c 93       	st	X, r25
     3b2:	8e 93       	st	-X, r24
	reading_buf[1] = Y_acc_buff[acc_tail];
     3b4:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <__data_end>
     3b8:	29 2f       	mov	r18, r25
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	22 0f       	add	r18, r18
     3be:	33 1f       	adc	r19, r19
     3c0:	f9 01       	movw	r30, r18
     3c2:	e6 5e       	subi	r30, 0xE6	; 230
     3c4:	fd 4f       	sbci	r31, 0xFD	; 253
     3c6:	40 81       	ld	r20, Z
     3c8:	51 81       	ldd	r21, Z+1	; 0x01
     3ca:	13 96       	adiw	r26, 0x03	; 3
     3cc:	5c 93       	st	X, r21
     3ce:	4e 93       	st	-X, r20
     3d0:	12 97       	sbiw	r26, 0x02	; 2
	reading_buf[2] = Z_acc_buff[acc_tail];
     3d2:	f9 01       	movw	r30, r18
     3d4:	e0 55       	subi	r30, 0x50	; 80
     3d6:	fe 4f       	sbci	r31, 0xFE	; 254
     3d8:	20 81       	ld	r18, Z
     3da:	31 81       	ldd	r19, Z+1	; 0x01
     3dc:	15 96       	adiw	r26, 0x05	; 5
     3de:	3c 93       	st	X, r19
     3e0:	2e 93       	st	-X, r18
     3e2:	14 97       	sbiw	r26, 0x04	; 4

	acc_tail++;
     3e4:	9f 5f       	subi	r25, 0xFF	; 255

	if (acc_tail == SAMPLES)
     3e6:	95 31       	cpi	r25, 0x15	; 21
     3e8:	19 f0       	breq	.+6      	; 0x3f0 <ReadAccSample+0x56>
{
	reading_buf[0] = X_acc_buff[acc_tail];
	reading_buf[1] = Y_acc_buff[acc_tail];
	reading_buf[2] = Z_acc_buff[acc_tail];

	acc_tail++;
     3ea:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <__data_end>
     3ee:	08 95       	ret

	if (acc_tail == SAMPLES)
		acc_tail = 0;
     3f0:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <__data_end>
     3f4:	08 95       	ret

000003f6 <SamplesGyroBuf>:
}

uint8_t SamplesGyroBuf()
{
	uint8_t gyro_samples;
	gyro_samples = gyro_head - gyro_tail;
     3f6:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <gyro_head>
     3fa:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <gyro_tail>
     3fe:	89 1b       	sub	r24, r25
	if (gyro_samples > SAMPLES_BUFF_SIZE)
     400:	85 31       	cpi	r24, 0x15	; 21
     402:	08 f0       	brcs	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	{
		gyro_samples -= (255 - SAMPLES_BUFF_SIZE);
     404:	8b 5e       	subi	r24, 0xEB	; 235
	}
	return gyro_samples;
}
     406:	08 95       	ret

00000408 <SamplesAccBuf>:

uint8_t SamplesAccBuf()
{
	uint8_t acc_samples;
	acc_samples = acc_head - acc_tail;
     408:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <acc_head>
     40c:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <__data_end>
     410:	89 1b       	sub	r24, r25
	if (acc_samples > SAMPLES_BUFF_SIZE)
     412:	85 31       	cpi	r24, 0x15	; 21
     414:	08 f0       	brcs	.+2      	; 0x418 <SamplesAccBuf+0x10>
	{
		acc_samples -= (255 - SAMPLES_BUFF_SIZE);
     416:	8b 5e       	subi	r24, 0xEB	; 235
	}
	return acc_samples;
}
     418:	08 95       	ret

0000041a <ReadGyroBuf>:

void ReadGyroBuf(int16_t  reading_buf[3][SAMPLES_BUFF_SIZE], uint8_t sam_nr)
{
     41a:	cf 92       	push	r12
     41c:	df 92       	push	r13
     41e:	ef 92       	push	r14
     420:	ff 92       	push	r15
     422:	0f 93       	push	r16
     424:	1f 93       	push	r17
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	00 d0       	rcall	.+0      	; 0x42c <ReadGyroBuf+0x12>
     42c:	00 d0       	rcall	.+0      	; 0x42e <ReadGyroBuf+0x14>
     42e:	00 d0       	rcall	.+0      	; 0x430 <ReadGyroBuf+0x16>
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
	int16_t bufor[3];
	uint8_t i;
	for(i = 0; i < sam_nr; i++)	//read all new samples from buffor
     434:	66 23       	and	r22, r22
     436:	29 f1       	breq	.+74     	; 0x482 <ReadGyroBuf+0x68>
     438:	6c 01       	movw	r12, r24
     43a:	7c 01       	movw	r14, r24
     43c:	8c 01       	movw	r16, r24
     43e:	08 5d       	subi	r16, 0xD8	; 216
     440:	1f 4f       	sbci	r17, 0xFF	; 255
     442:	61 50       	subi	r22, 0x01	; 1
     444:	26 2f       	mov	r18, r22
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	2f 5f       	subi	r18, 0xFF	; 255
     44a:	3f 4f       	sbci	r19, 0xFF	; 255
     44c:	22 0f       	add	r18, r18
     44e:	33 1f       	adc	r19, r19
     450:	c2 0e       	add	r12, r18
     452:	d3 1e       	adc	r13, r19
	{
 		ReadGyroSample(bufor);
     454:	ce 01       	movw	r24, r28
     456:	01 96       	adiw	r24, 0x01	; 1
     458:	0e 94 9f 01 	call	0x33e	; 0x33e <ReadGyroSample>
 		reading_buf[X_AXIS][i] = bufor[X_AXIS];
     45c:	89 81       	ldd	r24, Y+1	; 0x01
     45e:	9a 81       	ldd	r25, Y+2	; 0x02
     460:	f7 01       	movw	r30, r14
     462:	81 93       	st	Z+, r24
     464:	91 93       	st	Z+, r25
     466:	7f 01       	movw	r14, r30
 		reading_buf[Y_AXIS][i] = bufor[Y_AXIS];
     468:	2b 81       	ldd	r18, Y+3	; 0x03
     46a:	3c 81       	ldd	r19, Y+4	; 0x04
     46c:	f8 01       	movw	r30, r16
     46e:	21 93       	st	Z+, r18
     470:	31 93       	st	Z+, r19
     472:	8f 01       	movw	r16, r30
 		reading_buf[Z_AXIS][i] = bufor[Z_AXIS];
     474:	2d 81       	ldd	r18, Y+5	; 0x05
     476:	3e 81       	ldd	r19, Y+6	; 0x06
     478:	37 a3       	std	Z+39, r19	; 0x27
     47a:	26 a3       	std	Z+38, r18	; 0x26

void ReadGyroBuf(int16_t  reading_buf[3][SAMPLES_BUFF_SIZE], uint8_t sam_nr)
{
	int16_t bufor[3];
	uint8_t i;
	for(i = 0; i < sam_nr; i++)	//read all new samples from buffor
     47c:	ec 14       	cp	r14, r12
     47e:	fd 04       	cpc	r15, r13
     480:	49 f7       	brne	.-46     	; 0x454 <ReadGyroBuf+0x3a>
 		ReadGyroSample(bufor);
 		reading_buf[X_AXIS][i] = bufor[X_AXIS];
 		reading_buf[Y_AXIS][i] = bufor[Y_AXIS];
 		reading_buf[Z_AXIS][i] = bufor[Z_AXIS];
	}
}
     482:	26 96       	adiw	r28, 0x06	; 6
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	1f 91       	pop	r17
     494:	0f 91       	pop	r16
     496:	ff 90       	pop	r15
     498:	ef 90       	pop	r14
     49a:	df 90       	pop	r13
     49c:	cf 90       	pop	r12
     49e:	08 95       	ret

000004a0 <ReadAccBuf>:

void ReadAccBuf(int16_t  reading_buf[3][SAMPLES_BUFF_SIZE], uint8_t sam_nr)
{
     4a0:	cf 92       	push	r12
     4a2:	df 92       	push	r13
     4a4:	ef 92       	push	r14
     4a6:	ff 92       	push	r15
     4a8:	0f 93       	push	r16
     4aa:	1f 93       	push	r17
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	00 d0       	rcall	.+0      	; 0x4b2 <ReadAccBuf+0x12>
     4b2:	00 d0       	rcall	.+0      	; 0x4b4 <ReadAccBuf+0x14>
     4b4:	00 d0       	rcall	.+0      	; 0x4b6 <ReadAccBuf+0x16>
     4b6:	cd b7       	in	r28, 0x3d	; 61
     4b8:	de b7       	in	r29, 0x3e	; 62
	int16_t bufor[3];
	uint8_t i;
	for(i = 0; i < sam_nr; i++)	//read all new samples from buffor
     4ba:	66 23       	and	r22, r22
     4bc:	29 f1       	breq	.+74     	; 0x508 <ReadAccBuf+0x68>
     4be:	6c 01       	movw	r12, r24
     4c0:	7c 01       	movw	r14, r24
     4c2:	8c 01       	movw	r16, r24
     4c4:	08 5d       	subi	r16, 0xD8	; 216
     4c6:	1f 4f       	sbci	r17, 0xFF	; 255
     4c8:	61 50       	subi	r22, 0x01	; 1
     4ca:	26 2f       	mov	r18, r22
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	2f 5f       	subi	r18, 0xFF	; 255
     4d0:	3f 4f       	sbci	r19, 0xFF	; 255
     4d2:	22 0f       	add	r18, r18
     4d4:	33 1f       	adc	r19, r19
     4d6:	c2 0e       	add	r12, r18
     4d8:	d3 1e       	adc	r13, r19
	{
		ReadAccSample(bufor);
     4da:	ce 01       	movw	r24, r28
     4dc:	01 96       	adiw	r24, 0x01	; 1
     4de:	0e 94 cd 01 	call	0x39a	; 0x39a <ReadAccSample>
 		reading_buf[X_AXIS][i] = bufor[X_AXIS];
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	9a 81       	ldd	r25, Y+2	; 0x02
     4e6:	f7 01       	movw	r30, r14
     4e8:	81 93       	st	Z+, r24
     4ea:	91 93       	st	Z+, r25
     4ec:	7f 01       	movw	r14, r30
 		reading_buf[Y_AXIS][i] = bufor[Y_AXIS];
     4ee:	2b 81       	ldd	r18, Y+3	; 0x03
     4f0:	3c 81       	ldd	r19, Y+4	; 0x04
     4f2:	f8 01       	movw	r30, r16
     4f4:	21 93       	st	Z+, r18
     4f6:	31 93       	st	Z+, r19
     4f8:	8f 01       	movw	r16, r30
 		reading_buf[Z_AXIS][i] = bufor[Z_AXIS];
     4fa:	2d 81       	ldd	r18, Y+5	; 0x05
     4fc:	3e 81       	ldd	r19, Y+6	; 0x06
     4fe:	37 a3       	std	Z+39, r19	; 0x27
     500:	26 a3       	std	Z+38, r18	; 0x26

void ReadAccBuf(int16_t  reading_buf[3][SAMPLES_BUFF_SIZE], uint8_t sam_nr)
{
	int16_t bufor[3];
	uint8_t i;
	for(i = 0; i < sam_nr; i++)	//read all new samples from buffor
     502:	ec 14       	cp	r14, r12
     504:	fd 04       	cpc	r15, r13
     506:	49 f7       	brne	.-46     	; 0x4da <ReadAccBuf+0x3a>
		ReadAccSample(bufor);
 		reading_buf[X_AXIS][i] = bufor[X_AXIS];
 		reading_buf[Y_AXIS][i] = bufor[Y_AXIS];
 		reading_buf[Z_AXIS][i] = bufor[Z_AXIS];
	}
}
     508:	26 96       	adiw	r28, 0x06	; 6
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	de bf       	out	0x3e, r29	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	cd bf       	out	0x3d, r28	; 61
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	1f 91       	pop	r17
     51a:	0f 91       	pop	r16
     51c:	ff 90       	pop	r15
     51e:	ef 90       	pop	r14
     520:	df 90       	pop	r13
     522:	cf 90       	pop	r12
     524:	08 95       	ret

00000526 <AveragingLinearMPU6050>:
	ReadAccBuf(temp_buf, samples);
	AveragingWeightingMPU6050(temp_buf, samples, acc);
}

void AveragingLinearMPU6050(int16_t data[3][SAMPLES_BUFF_SIZE], uint8_t samples, int16_t results[3])
{
     526:	4f 92       	push	r4
     528:	5f 92       	push	r5
     52a:	6f 92       	push	r6
     52c:	7f 92       	push	r7
     52e:	8f 92       	push	r8
     530:	9f 92       	push	r9
     532:	af 92       	push	r10
     534:	bf 92       	push	r11
     536:	cf 92       	push	r12
     538:	df 92       	push	r13
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	ea 01       	movw	r28, r20
	int32_t sum[3];
	sum[0] = 0;
	sum[1] = 0;
	sum[2] = 0;

	for(uint8_t i = 0; i < samples; i++)
     548:	66 23       	and	r22, r22
     54a:	b9 f1       	breq	.+110    	; 0x5ba <AveragingLinearMPU6050+0x94>
     54c:	dc 01       	movw	r26, r24
     54e:	fc 01       	movw	r30, r24
     550:	b8 96       	adiw	r30, 0x28	; 40
     552:	2f ef       	ldi	r18, 0xFF	; 255
     554:	26 0f       	add	r18, r22
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	2f 5f       	subi	r18, 0xFF	; 255
     55a:	3f 4f       	sbci	r19, 0xFF	; 255
     55c:	22 0f       	add	r18, r18
     55e:	33 1f       	adc	r19, r19
     560:	82 0f       	add	r24, r18
     562:	93 1f       	adc	r25, r19
     564:	00 e0       	ldi	r16, 0x00	; 0
     566:	10 e0       	ldi	r17, 0x00	; 0
     568:	98 01       	movw	r18, r16
     56a:	81 2c       	mov	r8, r1
     56c:	91 2c       	mov	r9, r1
     56e:	54 01       	movw	r10, r8
     570:	c1 2c       	mov	r12, r1
     572:	d1 2c       	mov	r13, r1
     574:	76 01       	movw	r14, r12
	{
		sum[X_AXIS] += data[X_AXIS][i];
     576:	4d 91       	ld	r20, X+
     578:	5d 91       	ld	r21, X+
     57a:	2a 01       	movw	r4, r20
     57c:	55 0f       	add	r21, r21
     57e:	66 08       	sbc	r6, r6
     580:	77 08       	sbc	r7, r7
     582:	04 0d       	add	r16, r4
     584:	15 1d       	adc	r17, r5
     586:	26 1d       	adc	r18, r6
     588:	37 1d       	adc	r19, r7
		sum[Y_AXIS] += data[Y_AXIS][i];
     58a:	41 91       	ld	r20, Z+
     58c:	51 91       	ld	r21, Z+
     58e:	2a 01       	movw	r4, r20
     590:	55 0f       	add	r21, r21
     592:	66 08       	sbc	r6, r6
     594:	77 08       	sbc	r7, r7
     596:	84 0c       	add	r8, r4
     598:	95 1c       	adc	r9, r5
     59a:	a6 1c       	adc	r10, r6
     59c:	b7 1c       	adc	r11, r7
		sum[Z_AXIS] += data[Z_AXIS][i];
     59e:	46 a1       	ldd	r20, Z+38	; 0x26
     5a0:	57 a1       	ldd	r21, Z+39	; 0x27
     5a2:	2a 01       	movw	r4, r20
     5a4:	55 0f       	add	r21, r21
     5a6:	66 08       	sbc	r6, r6
     5a8:	77 08       	sbc	r7, r7
     5aa:	c4 0c       	add	r12, r4
     5ac:	d5 1c       	adc	r13, r5
     5ae:	e6 1c       	adc	r14, r6
     5b0:	f7 1c       	adc	r15, r7
	int32_t sum[3];
	sum[0] = 0;
	sum[1] = 0;
	sum[2] = 0;

	for(uint8_t i = 0; i < samples; i++)
     5b2:	a8 17       	cp	r26, r24
     5b4:	b9 07       	cpc	r27, r25
     5b6:	f9 f6       	brne	.-66     	; 0x576 <AveragingLinearMPU6050+0x50>
     5b8:	09 c0       	rjmp	.+18     	; 0x5cc <AveragingLinearMPU6050+0xa6>
}

void AveragingLinearMPU6050(int16_t data[3][SAMPLES_BUFF_SIZE], uint8_t samples, int16_t results[3])
{
	int32_t sum[3];
	sum[0] = 0;
     5ba:	00 e0       	ldi	r16, 0x00	; 0
     5bc:	10 e0       	ldi	r17, 0x00	; 0
     5be:	98 01       	movw	r18, r16
	sum[1] = 0;
     5c0:	81 2c       	mov	r8, r1
     5c2:	91 2c       	mov	r9, r1
     5c4:	54 01       	movw	r10, r8
	sum[2] = 0;
     5c6:	c1 2c       	mov	r12, r1
     5c8:	d1 2c       	mov	r13, r1
     5ca:	76 01       	movw	r14, r12
		sum[X_AXIS] += data[X_AXIS][i];
		sum[Y_AXIS] += data[Y_AXIS][i];
		sum[Z_AXIS] += data[Z_AXIS][i];
	}

	sum[X_AXIS] /= (int32_t) samples;
     5cc:	46 2e       	mov	r4, r22
     5ce:	51 2c       	mov	r5, r1
     5d0:	61 2c       	mov	r6, r1
     5d2:	71 2c       	mov	r7, r1
	sum[Y_AXIS] /= (int32_t) samples;
	sum[Z_AXIS] /= (int32_t) samples;

	results[X_AXIS] = (int16_t) sum[X_AXIS];
     5d4:	c9 01       	movw	r24, r18
     5d6:	b8 01       	movw	r22, r16
     5d8:	a3 01       	movw	r20, r6
     5da:	92 01       	movw	r18, r4
     5dc:	0e 94 86 10 	call	0x210c	; 0x210c <__divmodsi4>
     5e0:	39 83       	std	Y+1, r19	; 0x01
     5e2:	28 83       	st	Y, r18
	results[Y_AXIS] = (int16_t) sum[Y_AXIS];
     5e4:	c5 01       	movw	r24, r10
     5e6:	b4 01       	movw	r22, r8
     5e8:	a3 01       	movw	r20, r6
     5ea:	92 01       	movw	r18, r4
     5ec:	0e 94 86 10 	call	0x210c	; 0x210c <__divmodsi4>
     5f0:	3b 83       	std	Y+3, r19	; 0x03
     5f2:	2a 83       	std	Y+2, r18	; 0x02
	results[Z_AXIS] = (int16_t) sum[Z_AXIS];
     5f4:	c7 01       	movw	r24, r14
     5f6:	b6 01       	movw	r22, r12
     5f8:	a3 01       	movw	r20, r6
     5fa:	92 01       	movw	r18, r4
     5fc:	0e 94 86 10 	call	0x210c	; 0x210c <__divmodsi4>
     600:	3d 83       	std	Y+5, r19	; 0x05
     602:	2c 83       	std	Y+4, r18	; 0x04
}
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	1f 91       	pop	r17
     60a:	0f 91       	pop	r16
     60c:	ff 90       	pop	r15
     60e:	ef 90       	pop	r14
     610:	df 90       	pop	r13
     612:	cf 90       	pop	r12
     614:	bf 90       	pop	r11
     616:	af 90       	pop	r10
     618:	9f 90       	pop	r9
     61a:	8f 90       	pop	r8
     61c:	7f 90       	pop	r7
     61e:	6f 90       	pop	r6
     620:	5f 90       	pop	r5
     622:	4f 90       	pop	r4
     624:	08 95       	ret

00000626 <ReadGyroBufAveraged>:
	}
}

/*** Before calling this function, make sure there are samples in bufor ***/
void ReadGyroBufAveraged(int16_t gyro[3])
{
     626:	ef 92       	push	r14
     628:	ff 92       	push	r15
     62a:	1f 93       	push	r17
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
     634:	c8 57       	subi	r28, 0x78	; 120
     636:	d1 09       	sbc	r29, r1
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	f8 94       	cli
     63c:	de bf       	out	0x3e, r29	; 62
     63e:	0f be       	out	0x3f, r0	; 63
     640:	cd bf       	out	0x3d, r28	; 61
     642:	7c 01       	movw	r14, r24
	int16_t temp_buf[3][SAMPLES_BUFF_SIZE];	//bufor to store samples
	uint8_t samples;		//number of samples in bufor

	samples = SamplesGyroBuf();
     644:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <SamplesGyroBuf>
     648:	18 2f       	mov	r17, r24

	ReadGyroBuf(temp_buf, samples);
     64a:	68 2f       	mov	r22, r24
     64c:	ce 01       	movw	r24, r28
     64e:	01 96       	adiw	r24, 0x01	; 1
     650:	0e 94 0d 02 	call	0x41a	; 0x41a <ReadGyroBuf>
	AveragingLinearMPU6050(temp_buf, samples, gyro);
     654:	a7 01       	movw	r20, r14
     656:	61 2f       	mov	r22, r17
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	0e 94 93 02 	call	0x526	; 0x526 <AveragingLinearMPU6050>
}
     660:	c8 58       	subi	r28, 0x88	; 136
     662:	df 4f       	sbci	r29, 0xFF	; 255
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	f8 94       	cli
     668:	de bf       	out	0x3e, r29	; 62
     66a:	0f be       	out	0x3f, r0	; 63
     66c:	cd bf       	out	0x3d, r28	; 61
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	1f 91       	pop	r17
     674:	ff 90       	pop	r15
     676:	ef 90       	pop	r14
     678:	08 95       	ret

0000067a <AveragingWeightingMPU6050>:
	results[Y_AXIS] = (int16_t) sum[Y_AXIS];
	results[Z_AXIS] = (int16_t) sum[Z_AXIS];
}

void AveragingWeightingMPU6050(int16_t data[3][SAMPLES_BUFF_SIZE], uint8_t samples, int16_t results[3])
{
     67a:	2f 92       	push	r2
     67c:	3f 92       	push	r3
     67e:	4f 92       	push	r4
     680:	5f 92       	push	r5
     682:	6f 92       	push	r6
     684:	7f 92       	push	r7
     686:	8f 92       	push	r8
     688:	9f 92       	push	r9
     68a:	af 92       	push	r10
     68c:	bf 92       	push	r11
     68e:	cf 92       	push	r12
     690:	df 92       	push	r13
     692:	ef 92       	push	r14
     694:	ff 92       	push	r15
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	27 97       	sbiw	r28, 0x07	; 7
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	de bf       	out	0x3e, r29	; 62
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	cd bf       	out	0x3d, r28	; 61
     6ae:	5e 83       	std	Y+6, r21	; 0x06
     6b0:	4d 83       	std	Y+5, r20	; 0x05
	sum[0] = 0;
	sum[1] = 0;
	sum[2] = 0;
	uint8_t average = 0;

	for(uint8_t i = 0; i < samples; i++)
     6b2:	66 23       	and	r22, r22
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <AveragingWeightingMPU6050+0x3e>
     6b6:	66 c0       	rjmp	.+204    	; 0x784 <AveragingWeightingMPU6050+0x10a>
     6b8:	8c 01       	movw	r16, r24
     6ba:	fc 01       	movw	r30, r24
     6bc:	b8 96       	adiw	r30, 0x28	; 40
     6be:	61 50       	subi	r22, 0x01	; 1
     6c0:	26 2e       	mov	r2, r22
     6c2:	31 2c       	mov	r3, r1
     6c4:	25 e1       	ldi	r18, 0x15	; 21
     6c6:	22 0e       	add	r2, r18
     6c8:	31 1c       	adc	r3, r1
     6ca:	22 0c       	add	r2, r2
     6cc:	33 1c       	adc	r3, r3
     6ce:	28 0e       	add	r2, r24
     6d0:	39 1e       	adc	r3, r25
     6d2:	c1 2c       	mov	r12, r1
     6d4:	d1 2c       	mov	r13, r1
     6d6:	76 01       	movw	r14, r12
     6d8:	c3 94       	inc	r12
     6da:	19 82       	std	Y+1, r1	; 0x01
     6dc:	1a 82       	std	Y+2, r1	; 0x02
     6de:	1b 82       	std	Y+3, r1	; 0x03
     6e0:	1c 82       	std	Y+4, r1	; 0x04
     6e2:	41 2c       	mov	r4, r1
     6e4:	51 2c       	mov	r5, r1
     6e6:	32 01       	movw	r6, r4
     6e8:	81 2c       	mov	r8, r1
     6ea:	91 2c       	mov	r9, r1
     6ec:	54 01       	movw	r10, r8
     6ee:	1f 82       	std	Y+7, r1	; 0x07
	{
		average += (i+1)*(i+1);
     6f0:	4f 81       	ldd	r20, Y+7	; 0x07
     6f2:	cc 9c       	mul	r12, r12
     6f4:	40 0d       	add	r20, r0
     6f6:	11 24       	eor	r1, r1
     6f8:	4f 83       	std	Y+7, r20	; 0x07
		sum[X_AXIS] += ((int32_t)data[X_AXIS][i] * (i+1)*(i+1));
     6fa:	d8 01       	movw	r26, r16
     6fc:	8d 91       	ld	r24, X+
     6fe:	9d 91       	ld	r25, X+
     700:	8d 01       	movw	r16, r26
     702:	dc 01       	movw	r26, r24
     704:	a7 01       	movw	r20, r14
     706:	96 01       	movw	r18, r12
     708:	0e 94 c5 10 	call	0x218a	; 0x218a <__mulshisi3>
     70c:	9b 01       	movw	r18, r22
     70e:	ac 01       	movw	r20, r24
     710:	c7 01       	movw	r24, r14
     712:	b6 01       	movw	r22, r12
     714:	0e 94 76 10 	call	0x20ec	; 0x20ec <__mulsi3>
     718:	29 81       	ldd	r18, Y+1	; 0x01
     71a:	3a 81       	ldd	r19, Y+2	; 0x02
     71c:	4b 81       	ldd	r20, Y+3	; 0x03
     71e:	5c 81       	ldd	r21, Y+4	; 0x04
     720:	26 0f       	add	r18, r22
     722:	37 1f       	adc	r19, r23
     724:	48 1f       	adc	r20, r24
     726:	59 1f       	adc	r21, r25
     728:	29 83       	std	Y+1, r18	; 0x01
     72a:	3a 83       	std	Y+2, r19	; 0x02
     72c:	4b 83       	std	Y+3, r20	; 0x03
     72e:	5c 83       	std	Y+4, r21	; 0x04
		sum[Y_AXIS] += ((int32_t)data[Y_AXIS][i] * (i+1)*(i+1));
     730:	a1 91       	ld	r26, Z+
     732:	b1 91       	ld	r27, Z+
     734:	a7 01       	movw	r20, r14
     736:	96 01       	movw	r18, r12
     738:	0e 94 c5 10 	call	0x218a	; 0x218a <__mulshisi3>
     73c:	9b 01       	movw	r18, r22
     73e:	ac 01       	movw	r20, r24
     740:	c7 01       	movw	r24, r14
     742:	b6 01       	movw	r22, r12
     744:	0e 94 76 10 	call	0x20ec	; 0x20ec <__mulsi3>
     748:	46 0e       	add	r4, r22
     74a:	57 1e       	adc	r5, r23
     74c:	68 1e       	adc	r6, r24
     74e:	79 1e       	adc	r7, r25
		sum[Z_AXIS] += ((int32_t)data[Z_AXIS][i] * (i+1)*(i+1));
     750:	a6 a1       	ldd	r26, Z+38	; 0x26
     752:	b7 a1       	ldd	r27, Z+39	; 0x27
     754:	a7 01       	movw	r20, r14
     756:	96 01       	movw	r18, r12
     758:	0e 94 c5 10 	call	0x218a	; 0x218a <__mulshisi3>
     75c:	9b 01       	movw	r18, r22
     75e:	ac 01       	movw	r20, r24
     760:	c7 01       	movw	r24, r14
     762:	b6 01       	movw	r22, r12
     764:	0e 94 76 10 	call	0x20ec	; 0x20ec <__mulsi3>
     768:	86 0e       	add	r8, r22
     76a:	97 1e       	adc	r9, r23
     76c:	a8 1e       	adc	r10, r24
     76e:	b9 1e       	adc	r11, r25
     770:	3f ef       	ldi	r19, 0xFF	; 255
     772:	c3 1a       	sub	r12, r19
     774:	d3 0a       	sbc	r13, r19
     776:	e3 0a       	sbc	r14, r19
     778:	f3 0a       	sbc	r15, r19
	sum[0] = 0;
	sum[1] = 0;
	sum[2] = 0;
	uint8_t average = 0;

	for(uint8_t i = 0; i < samples; i++)
     77a:	e2 15       	cp	r30, r2
     77c:	f3 05       	cpc	r31, r3
     77e:	09 f0       	breq	.+2      	; 0x782 <AveragingWeightingMPU6050+0x108>
     780:	b7 cf       	rjmp	.-146    	; 0x6f0 <AveragingWeightingMPU6050+0x76>
     782:	0b c0       	rjmp	.+22     	; 0x79a <AveragingWeightingMPU6050+0x120>
}

void AveragingWeightingMPU6050(int16_t data[3][SAMPLES_BUFF_SIZE], uint8_t samples, int16_t results[3])
{
	int32_t sum[3];
	sum[0] = 0;
     784:	19 82       	std	Y+1, r1	; 0x01
     786:	1a 82       	std	Y+2, r1	; 0x02
     788:	1b 82       	std	Y+3, r1	; 0x03
     78a:	1c 82       	std	Y+4, r1	; 0x04
	sum[1] = 0;
     78c:	41 2c       	mov	r4, r1
     78e:	51 2c       	mov	r5, r1
     790:	32 01       	movw	r6, r4
	sum[2] = 0;
     792:	81 2c       	mov	r8, r1
     794:	91 2c       	mov	r9, r1
     796:	54 01       	movw	r10, r8
	uint8_t average = 0;
     798:	1f 82       	std	Y+7, r1	; 0x07
		sum[X_AXIS] += ((int32_t)data[X_AXIS][i] * (i+1)*(i+1));
		sum[Y_AXIS] += ((int32_t)data[Y_AXIS][i] * (i+1)*(i+1));
		sum[Z_AXIS] += ((int32_t)data[Z_AXIS][i] * (i+1)*(i+1));
	}

	sum[X_AXIS] /= (int32_t) average;
     79a:	ff 81       	ldd	r31, Y+7	; 0x07
     79c:	cf 2e       	mov	r12, r31
     79e:	d1 2c       	mov	r13, r1
     7a0:	e1 2c       	mov	r14, r1
     7a2:	f1 2c       	mov	r15, r1
	sum[Y_AXIS] /= (int32_t) average;
	sum[Z_AXIS] /= (int32_t) average;

	results[X_AXIS] = (int16_t) sum[X_AXIS];
     7a4:	69 81       	ldd	r22, Y+1	; 0x01
     7a6:	7a 81       	ldd	r23, Y+2	; 0x02
     7a8:	8b 81       	ldd	r24, Y+3	; 0x03
     7aa:	9c 81       	ldd	r25, Y+4	; 0x04
     7ac:	a7 01       	movw	r20, r14
     7ae:	96 01       	movw	r18, r12
     7b0:	0e 94 86 10 	call	0x210c	; 0x210c <__divmodsi4>
     7b4:	ad 81       	ldd	r26, Y+5	; 0x05
     7b6:	be 81       	ldd	r27, Y+6	; 0x06
     7b8:	2d 93       	st	X+, r18
     7ba:	3c 93       	st	X, r19
	results[Y_AXIS] = (int16_t) sum[Y_AXIS];
     7bc:	c3 01       	movw	r24, r6
     7be:	b2 01       	movw	r22, r4
     7c0:	a7 01       	movw	r20, r14
     7c2:	96 01       	movw	r18, r12
     7c4:	0e 94 86 10 	call	0x210c	; 0x210c <__divmodsi4>
     7c8:	ed 81       	ldd	r30, Y+5	; 0x05
     7ca:	fe 81       	ldd	r31, Y+6	; 0x06
     7cc:	33 83       	std	Z+3, r19	; 0x03
     7ce:	22 83       	std	Z+2, r18	; 0x02
	results[Z_AXIS] = (int16_t) sum[Z_AXIS];
     7d0:	c5 01       	movw	r24, r10
     7d2:	b4 01       	movw	r22, r8
     7d4:	a7 01       	movw	r20, r14
     7d6:	96 01       	movw	r18, r12
     7d8:	0e 94 86 10 	call	0x210c	; 0x210c <__divmodsi4>
     7dc:	ad 81       	ldd	r26, Y+5	; 0x05
     7de:	be 81       	ldd	r27, Y+6	; 0x06
     7e0:	15 96       	adiw	r26, 0x05	; 5
     7e2:	3c 93       	st	X, r19
     7e4:	2e 93       	st	-X, r18
     7e6:	14 97       	sbiw	r26, 0x04	; 4
     7e8:	27 96       	adiw	r28, 0x07	; 7
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	ff 90       	pop	r15
     7fe:	ef 90       	pop	r14
     800:	df 90       	pop	r13
     802:	cf 90       	pop	r12
     804:	bf 90       	pop	r11
     806:	af 90       	pop	r10
     808:	9f 90       	pop	r9
     80a:	8f 90       	pop	r8
     80c:	7f 90       	pop	r7
     80e:	6f 90       	pop	r6
     810:	5f 90       	pop	r5
     812:	4f 90       	pop	r4
     814:	3f 90       	pop	r3
     816:	2f 90       	pop	r2
     818:	08 95       	ret

0000081a <ReadAccBufAveraged>:
	AveragingLinearMPU6050(temp_buf, samples, gyro);
}

/*** Before calling this function, make sure there are samples in bufor ***/
void ReadAccBufAveraged(int16_t acc[3])
{
     81a:	ef 92       	push	r14
     81c:	ff 92       	push	r15
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
     828:	c8 57       	subi	r28, 0x78	; 120
     82a:	d1 09       	sbc	r29, r1
     82c:	0f b6       	in	r0, 0x3f	; 63
     82e:	f8 94       	cli
     830:	de bf       	out	0x3e, r29	; 62
     832:	0f be       	out	0x3f, r0	; 63
     834:	cd bf       	out	0x3d, r28	; 61
     836:	7c 01       	movw	r14, r24
	int16_t temp_buf[3][SAMPLES_BUFF_SIZE];	//bufor to store samples
	uint8_t samples;	//number of samples in bufor

	samples = SamplesAccBuf();
     838:	0e 94 04 02 	call	0x408	; 0x408 <SamplesAccBuf>
     83c:	18 2f       	mov	r17, r24

	ReadAccBuf(temp_buf, samples);
     83e:	68 2f       	mov	r22, r24
     840:	ce 01       	movw	r24, r28
     842:	01 96       	adiw	r24, 0x01	; 1
     844:	0e 94 50 02 	call	0x4a0	; 0x4a0 <ReadAccBuf>
	AveragingWeightingMPU6050(temp_buf, samples, acc);
     848:	a7 01       	movw	r20, r14
     84a:	61 2f       	mov	r22, r17
     84c:	ce 01       	movw	r24, r28
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	0e 94 3d 03 	call	0x67a	; 0x67a <AveragingWeightingMPU6050>
}
     854:	c8 58       	subi	r28, 0x88	; 136
     856:	df 4f       	sbci	r29, 0xFF	; 255
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	f8 94       	cli
     85c:	de bf       	out	0x3e, r29	; 62
     85e:	0f be       	out	0x3f, r0	; 63
     860:	cd bf       	out	0x3d, r28	; 61
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	1f 91       	pop	r17
     868:	ff 90       	pop	r15
     86a:	ef 90       	pop	r14
     86c:	08 95       	ret

0000086e <ProcessAngle>:
#include "Uart.h"
#include "Common.h"


double ProcessAngle(int16_t width, int16_t high)
{
     86e:	cf 92       	push	r12
     870:	df 92       	push	r13
     872:	ef 92       	push	r14
     874:	ff 92       	push	r15
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
	double angle = 0;
	if (width != 0)	//for 0 width atan can be 0 or 180, but should be 0
     87a:	00 97       	sbiw	r24, 0x00	; 0
     87c:	c1 f1       	breq	.+112    	; 0x8ee <ProcessAngle+0x80>
     87e:	ec 01       	movw	r28, r24
	{
		angle = atan((double)high / (double)width);
     880:	07 2e       	mov	r0, r23
     882:	00 0c       	add	r0, r0
     884:	88 0b       	sbc	r24, r24
     886:	99 0b       	sbc	r25, r25
     888:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__floatsisf>
     88c:	6b 01       	movw	r12, r22
     88e:	7c 01       	movw	r14, r24
     890:	be 01       	movw	r22, r28
     892:	0d 2e       	mov	r0, r29
     894:	00 0c       	add	r0, r0
     896:	88 0b       	sbc	r24, r24
     898:	99 0b       	sbc	r25, r25
     89a:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__floatsisf>
     89e:	9b 01       	movw	r18, r22
     8a0:	ac 01       	movw	r20, r24
     8a2:	c7 01       	movw	r24, r14
     8a4:	b6 01       	movw	r22, r12
     8a6:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__divsf3>
     8aa:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <atan>
		/* Process to correct angles */
		if (width > 0)
     8ae:	1c 16       	cp	r1, r28
     8b0:	1d 06       	cpc	r1, r29
     8b2:	4c f4       	brge	.+18     	; 0x8c6 <ProcessAngle+0x58>
			angle = M_PI_2 - angle;
     8b4:	9b 01       	movw	r18, r22
     8b6:	ac 01       	movw	r20, r24
     8b8:	6b ed       	ldi	r22, 0xDB	; 219
     8ba:	7f e0       	ldi	r23, 0x0F	; 15
     8bc:	89 ec       	ldi	r24, 0xC9	; 201
     8be:	9f e3       	ldi	r25, 0x3F	; 63
     8c0:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__subsf3>
     8c4:	07 c0       	rjmp	.+14     	; 0x8d4 <ProcessAngle+0x66>
		else
			angle = (M_PI_2 + angle) * (-1);
     8c6:	2b ed       	ldi	r18, 0xDB	; 219
     8c8:	3f e0       	ldi	r19, 0x0F	; 15
     8ca:	49 ec       	ldi	r20, 0xC9	; 201
     8cc:	5f e3       	ldi	r21, 0x3F	; 63
     8ce:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__addsf3>
     8d2:	90 58       	subi	r25, 0x80	; 128

		angle = (angle * 180) / M_PI;
     8d4:	20 e0       	ldi	r18, 0x00	; 0
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	44 e3       	ldi	r20, 0x34	; 52
     8da:	53 e4       	ldi	r21, 0x43	; 67
     8dc:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
     8e0:	2b ed       	ldi	r18, 0xDB	; 219
     8e2:	3f e0       	ldi	r19, 0x0F	; 15
     8e4:	49 e4       	ldi	r20, 0x49	; 73
     8e6:	50 e4       	ldi	r21, 0x40	; 64
     8e8:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__divsf3>
     8ec:	03 c0       	rjmp	.+6      	; 0x8f4 <ProcessAngle+0x86>
#include "Common.h"


double ProcessAngle(int16_t width, int16_t high)
{
	double angle = 0;
     8ee:	60 e0       	ldi	r22, 0x00	; 0
     8f0:	70 e0       	ldi	r23, 0x00	; 0
     8f2:	cb 01       	movw	r24, r22
			angle = (M_PI_2 + angle) * (-1);

		angle = (angle * 180) / M_PI;
	}
	return angle;
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	ff 90       	pop	r15
     8fa:	ef 90       	pop	r14
     8fc:	df 90       	pop	r13
     8fe:	cf 90       	pop	r12
     900:	08 95       	ret

00000902 <I2C_start>:
	I2C_start();
	I2C_write(SLA + 1);
	byte = I2C_read(NACK);
	I2C_stop();
	return byte;
}
     902:	84 ea       	ldi	r24, 0xA4	; 164
     904:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     908:	ec eb       	ldi	r30, 0xBC	; 188
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	80 81       	ld	r24, Z
     90e:	88 23       	and	r24, r24
     910:	ec f7       	brge	.-6      	; 0x90c <I2C_start+0xa>
     912:	08 95       	ret

00000914 <I2C_stop>:
     914:	84 e9       	ldi	r24, 0x94	; 148
     916:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     91a:	ec eb       	ldi	r30, 0xBC	; 188
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	80 81       	ld	r24, Z
     920:	84 fd       	sbrc	r24, 4
     922:	fd cf       	rjmp	.-6      	; 0x91e <I2C_stop+0xa>
     924:	08 95       	ret

00000926 <I2C_write>:
     926:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     92a:	84 e8       	ldi	r24, 0x84	; 132
     92c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     930:	ec eb       	ldi	r30, 0xBC	; 188
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	80 81       	ld	r24, Z
     936:	88 23       	and	r24, r24
     938:	ec f7       	brge	.-6      	; 0x934 <I2C_write+0xe>
     93a:	08 95       	ret

0000093c <I2C_read>:
     93c:	20 e4       	ldi	r18, 0x40	; 64
     93e:	82 9f       	mul	r24, r18
     940:	c0 01       	movw	r24, r0
     942:	11 24       	eor	r1, r1
     944:	84 68       	ori	r24, 0x84	; 132
     946:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     94a:	ec eb       	ldi	r30, 0xBC	; 188
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	80 81       	ld	r24, Z
     950:	88 23       	and	r24, r24
     952:	ec f7       	brge	.-6      	; 0x94e <I2C_read+0x12>
     954:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     958:	08 95       	ret

0000095a <I2C_write_byte>:
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	18 2f       	mov	r17, r24
     962:	d6 2f       	mov	r29, r22
     964:	c4 2f       	mov	r28, r20
     966:	0e 94 81 04 	call	0x902	; 0x902 <I2C_start>
     96a:	81 2f       	mov	r24, r17
     96c:	88 0f       	add	r24, r24
     96e:	0e 94 93 04 	call	0x926	; 0x926 <I2C_write>
     972:	8d 2f       	mov	r24, r29
     974:	0e 94 93 04 	call	0x926	; 0x926 <I2C_write>
     978:	8c 2f       	mov	r24, r28
     97a:	0e 94 93 04 	call	0x926	; 0x926 <I2C_write>
     97e:	0e 94 8a 04 	call	0x914	; 0x914 <I2C_stop>
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	1f 91       	pop	r17
     988:	08 95       	ret

0000098a <I2C_read_buf>:


void I2C_read_buf(uint8_t SLA, uint8_t adr, uint8_t len, uint8_t *buf) {
     98a:	ef 92       	push	r14
     98c:	ff 92       	push	r15
     98e:	0f 93       	push	r16
     990:	1f 93       	push	r17
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
     996:	16 2f       	mov	r17, r22
     998:	d4 2f       	mov	r29, r20
     99a:	e2 2e       	mov	r14, r18
     99c:	f3 2e       	mov	r15, r19
	SLA = (SLA<<1);
     99e:	c8 2f       	mov	r28, r24
     9a0:	cc 0f       	add	r28, r28
	I2C_start();
     9a2:	0e 94 81 04 	call	0x902	; 0x902 <I2C_start>
	I2C_write(SLA);
     9a6:	8c 2f       	mov	r24, r28
     9a8:	0e 94 93 04 	call	0x926	; 0x926 <I2C_write>
	I2C_write(adr);
     9ac:	81 2f       	mov	r24, r17
     9ae:	0e 94 93 04 	call	0x926	; 0x926 <I2C_write>
	I2C_start();
     9b2:	0e 94 81 04 	call	0x902	; 0x902 <I2C_start>
	I2C_write(SLA + 1);
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	8c 0f       	add	r24, r28
     9ba:	0e 94 93 04 	call	0x926	; 0x926 <I2C_write>
	while (len--) *buf++ = I2C_read( len ? ACK : NACK );
     9be:	cf ef       	ldi	r28, 0xFF	; 255
     9c0:	cd 0f       	add	r28, r29
     9c2:	dd 23       	and	r29, r29
     9c4:	89 f0       	breq	.+34     	; 0x9e8 <I2C_read_buf+0x5e>
     9c6:	0e 2d       	mov	r16, r14
     9c8:	1f 2d       	mov	r17, r15
     9ca:	d1 e0       	ldi	r29, 0x01	; 1
     9cc:	f1 2c       	mov	r15, r1
     9ce:	8d 2f       	mov	r24, r29
     9d0:	c1 11       	cpse	r28, r1
     9d2:	01 c0       	rjmp	.+2      	; 0x9d6 <I2C_read_buf+0x4c>
     9d4:	8f 2d       	mov	r24, r15
     9d6:	0e 94 9e 04 	call	0x93c	; 0x93c <I2C_read>
     9da:	f8 01       	movw	r30, r16
     9dc:	81 93       	st	Z+, r24
     9de:	8f 01       	movw	r16, r30
     9e0:	8c 2f       	mov	r24, r28
     9e2:	c1 50       	subi	r28, 0x01	; 1
     9e4:	81 11       	cpse	r24, r1
     9e6:	f3 cf       	rjmp	.-26     	; 0x9ce <I2C_read_buf+0x44>
	I2C_stop();
     9e8:	0e 94 8a 04 	call	0x914	; 0x914 <I2C_stop>
}
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
     9f4:	ff 90       	pop	r15
     9f6:	ef 90       	pop	r14
     9f8:	08 95       	ret

000009fa <main>:
#define LED_OFF PORTB &= ~(1<<PB5)
#define LED_TGL PORTB ^=  (1<<PB5)

int main(void)
{
	pos_x = 0;
     9fa:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <pos_x>
     9fe:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <pos_x+0x1>
     a02:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <pos_x+0x2>
     a06:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <pos_x+0x3>
	pox_y = 0;
     a0a:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <pox_y>
     a0e:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <pox_y+0x1>
     a12:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <pox_y+0x2>
     a16:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <pox_y+0x3>
//	InitTWI();
	DDRB = (1<<PB5);
     a1a:	80 e2       	ldi	r24, 0x20	; 32
     a1c:	84 b9       	out	0x04, r24	; 4
	TWSR0 = 0x00;
     a1e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR0 = 0x0C;
     a22:	8c e0       	ldi	r24, 0x0C	; 12
     a24:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWCR0 = (1<<TWEN);	//enable TWI
     a28:	84 e0       	ldi	r24, 0x04	; 4
     a2a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

// 	test = I2C_read_byte(0x68, 0x75);
// 	test = test & 0b01111110;

	InitUartCOM();
     a2e:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <InitUartCOM>
	sei();
     a32:	78 94       	sei
	SendLine("Uart dziala");
     a34:	84 e0       	ldi	r24, 0x04	; 4
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	0e 94 90 0c 	call	0x1920	; 0x1920 <SendLine>

	test_counter = 200;
     a3c:	88 ec       	ldi	r24, 0xC8	; 200
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <test_counter+0x1>
     a44:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <test_counter>

	CalibrateMPU6050(gyro_offset, acc_offset);
     a48:	68 e0       	ldi	r22, 0x08	; 8
     a4a:	72 e0       	ldi	r23, 0x02	; 2
     a4c:	8e e0       	ldi	r24, 0x0E	; 14
     a4e:	92 e0       	ldi	r25, 0x02	; 2
     a50:	0e 94 45 05 	call	0xa8a	; 0xa8a <CalibrateMPU6050>
     a54:	8a e0       	ldi	r24, 0x0A	; 10

	for (uint8_t i=0; i<10; i++){
		LED_TGL;
     a56:	20 e2       	ldi	r18, 0x20	; 32
     a58:	95 b1       	in	r25, 0x05	; 5
     a5a:	92 27       	eor	r25, r18
     a5c:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a5e:	3f ef       	ldi	r19, 0xFF	; 255
     a60:	41 ee       	ldi	r20, 0xE1	; 225
     a62:	94 e0       	ldi	r25, 0x04	; 4
     a64:	31 50       	subi	r19, 0x01	; 1
     a66:	40 40       	sbci	r20, 0x00	; 0
     a68:	90 40       	sbci	r25, 0x00	; 0
     a6a:	e1 f7       	brne	.-8      	; 0xa64 <main+0x6a>
     a6c:	00 c0       	rjmp	.+0      	; 0xa6e <main+0x74>
     a6e:	00 00       	nop
     a70:	81 50       	subi	r24, 0x01	; 1

	test_counter = 200;

	CalibrateMPU6050(gyro_offset, acc_offset);

	for (uint8_t i=0; i<10; i++){
     a72:	91 f7       	brne	.-28     	; 0xa58 <main+0x5e>
		LED_TGL;
		_delay_ms(100);
	}

	InitMPU6050();
     a74:	0e 94 41 07 	call	0xe82	; 0xe82 <InitMPU6050>
	InitCommonTimer();
     a78:	0e 94 07 0a 	call	0x140e	; 0x140e <InitCommonTimer>

    while (1) 
    {
		CheckRxBuffor();
     a7c:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <CheckRxBuffor>
		ReadMPU6050();
     a80:	0e 94 a5 07 	call	0xf4a	; 0xf4a <ReadMPU6050>
		CheckCommonTimer();
     a84:	0e 94 10 0a 	call	0x1420	; 0x1420 <CheckCommonTimer>
     a88:	f9 cf       	rjmp	.-14     	; 0xa7c <main+0x82>

00000a8a <CalibrateMPU6050>:
#include "Uart.h"
#include "Common.h"
#include "i2c_twi.h"

void CalibrateMPU6050(int16_t gyro_offset[], int16_t acc_offset[])
{
     a8a:	2f 92       	push	r2
     a8c:	3f 92       	push	r3
     a8e:	4f 92       	push	r4
     a90:	5f 92       	push	r5
     a92:	6f 92       	push	r6
     a94:	7f 92       	push	r7
     a96:	8f 92       	push	r8
     a98:	9f 92       	push	r9
     a9a:	af 92       	push	r10
     a9c:	bf 92       	push	r11
     a9e:	cf 92       	push	r12
     aa0:	df 92       	push	r13
     aa2:	ef 92       	push	r14
     aa4:	ff 92       	push	r15
     aa6:	0f 93       	push	r16
     aa8:	1f 93       	push	r17
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	cd b7       	in	r28, 0x3d	; 61
     ab0:	de b7       	in	r29, 0x3e	; 62
     ab2:	a4 97       	sbiw	r28, 0x24	; 36
     ab4:	0f b6       	in	r0, 0x3f	; 63
     ab6:	f8 94       	cli
     ab8:	de bf       	out	0x3e, r29	; 62
     aba:	0f be       	out	0x3f, r0	; 63
     abc:	cd bf       	out	0x3d, r28	; 61
     abe:	9a a3       	std	Y+34, r25	; 0x22
     ac0:	89 a3       	std	Y+33, r24	; 0x21
     ac2:	7c a3       	std	Y+36, r23	; 0x24
     ac4:	6b a3       	std	Y+35, r22	; 0x23
	int32_t gyro_bias[3] = {0, 0, 0};
	int32_t accel_bias[3] = {0, 0, 0};
	packet_total = 0;

	// reset device, reset all registers, clear gyro and accelerometer bias registers
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
     ac6:	40 e8       	ldi	r20, 0x80	; 128
     ac8:	6b e6       	ldi	r22, 0x6B	; 107
     aca:	88 e6       	ldi	r24, 0x68	; 104
     acc:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
     ad0:	2f ef       	ldi	r18, 0xFF	; 255
     ad2:	31 ee       	ldi	r19, 0xE1	; 225
     ad4:	44 e0       	ldi	r20, 0x04	; 4
     ad6:	21 50       	subi	r18, 0x01	; 1
     ad8:	30 40       	sbci	r19, 0x00	; 0
     ada:	40 40       	sbci	r20, 0x00	; 0
     adc:	e1 f7       	brne	.-8      	; 0xad6 <CalibrateMPU6050+0x4c>
     ade:	00 c0       	rjmp	.+0      	; 0xae0 <CalibrateMPU6050+0x56>
     ae0:	00 00       	nop
	_delay_ms(100);

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x01);
     ae2:	41 e0       	ldi	r20, 0x01	; 1
     ae4:	6b e6       	ldi	r22, 0x6B	; 107
     ae6:	88 e6       	ldi	r24, 0x68	; 104
     ae8:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_2, 0x00);
     aec:	40 e0       	ldi	r20, 0x00	; 0
     aee:	6c e6       	ldi	r22, 0x6C	; 108
     af0:	88 e6       	ldi	r24, 0x68	; 104
     af2:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
     af6:	5f ef       	ldi	r21, 0xFF	; 255
     af8:	63 ec       	ldi	r22, 0xC3	; 195
     afa:	79 e0       	ldi	r23, 0x09	; 9
     afc:	51 50       	subi	r21, 0x01	; 1
     afe:	60 40       	sbci	r22, 0x00	; 0
     b00:	70 40       	sbci	r23, 0x00	; 0
     b02:	e1 f7       	brne	.-8      	; 0xafc <CalibrateMPU6050+0x72>
     b04:	00 c0       	rjmp	.+0      	; 0xb06 <CalibrateMPU6050+0x7c>
     b06:	00 00       	nop
	_delay_ms(200);

	// Configure device for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
     b08:	40 e0       	ldi	r20, 0x00	; 0
     b0a:	68 e3       	ldi	r22, 0x38	; 56
     b0c:	88 e6       	ldi	r24, 0x68	; 104
     b0e:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
     b12:	40 e0       	ldi	r20, 0x00	; 0
     b14:	63 e2       	ldi	r22, 0x23	; 35
     b16:	88 e6       	ldi	r24, 0x68	; 104
     b18:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	6b e6       	ldi	r22, 0x6B	; 107
     b20:	88 e6       	ldi	r24, 0x68	; 104
     b22:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
     b26:	40 e0       	ldi	r20, 0x00	; 0
     b28:	64 e2       	ldi	r22, 0x24	; 36
     b2a:	88 e6       	ldi	r24, 0x68	; 104
     b2c:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
     b30:	40 e0       	ldi	r20, 0x00	; 0
     b32:	6a e6       	ldi	r22, 0x6A	; 106
     b34:	88 e6       	ldi	r24, 0x68	; 104
     b36:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
     b3a:	4c e0       	ldi	r20, 0x0C	; 12
     b3c:	6a e6       	ldi	r22, 0x6A	; 106
     b3e:	88 e6       	ldi	r24, 0x68	; 104
     b40:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
     b44:	8f e5       	ldi	r24, 0x5F	; 95
     b46:	9a ee       	ldi	r25, 0xEA	; 234
     b48:	01 97       	sbiw	r24, 0x01	; 1
     b4a:	f1 f7       	brne	.-4      	; 0xb48 <CalibrateMPU6050+0xbe>
     b4c:	00 c0       	rjmp	.+0      	; 0xb4e <CalibrateMPU6050+0xc4>
     b4e:	00 00       	nop
	_delay_ms(15);

	// Configure MPU6050 gyro and accelerometer for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
     b50:	41 e0       	ldi	r20, 0x01	; 1
     b52:	6a e1       	ldi	r22, 0x1A	; 26
     b54:	88 e6       	ldi	r24, 0x68	; 104
     b56:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	69 e1       	ldi	r22, 0x19	; 25
     b5e:	88 e6       	ldi	r24, 0x68	; 104
     b60:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
     b64:	40 e0       	ldi	r20, 0x00	; 0
     b66:	6b e1       	ldi	r22, 0x1B	; 27
     b68:	88 e6       	ldi	r24, 0x68	; 104
     b6a:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
     b6e:	40 e0       	ldi	r20, 0x00	; 0
     b70:	6c e1       	ldi	r22, 0x1C	; 28
     b72:	88 e6       	ldi	r24, 0x68	; 104
     b74:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
     b78:	40 e4       	ldi	r20, 0x40	; 64
     b7a:	6a e6       	ldi	r22, 0x6A	; 106
     b7c:	88 e6       	ldi	r24, 0x68	; 104
     b7e:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 1024 bytes in MPU-6050)
     b82:	48 e7       	ldi	r20, 0x78	; 120
     b84:	63 e2       	ldi	r22, 0x23	; 35
     b86:	88 e6       	ldi	r24, 0x68	; 104
     b88:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
     b8c:	af e1       	ldi	r26, 0x1F	; 31
     b8e:	be e4       	ldi	r27, 0x4E	; 78
     b90:	11 97       	sbiw	r26, 0x01	; 1
     b92:	f1 f7       	brne	.-4      	; 0xb90 <CalibrateMPU6050+0x106>
     b94:	00 c0       	rjmp	.+0      	; 0xb96 <CalibrateMPU6050+0x10c>
     b96:	00 00       	nop
     b98:	bf ef       	ldi	r27, 0xFF	; 255
     b9a:	ef e8       	ldi	r30, 0x8F	; 143
     b9c:	f1 e0       	ldi	r31, 0x01	; 1
     b9e:	b1 50       	subi	r27, 0x01	; 1
     ba0:	e0 40       	sbci	r30, 0x00	; 0
     ba2:	f0 40       	sbci	r31, 0x00	; 0
     ba4:	e1 f7       	brne	.-8      	; 0xb9e <CalibrateMPU6050+0x114>
     ba6:	00 c0       	rjmp	.+0      	; 0xba8 <CalibrateMPU6050+0x11e>
     ba8:	00 00       	nop

void CalibrateMPU6050(int16_t gyro_offset[], int16_t acc_offset[])
{
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, jj, packet_count, packet_total, fifo_count;
	int32_t gyro_bias[3] = {0, 0, 0};
     baa:	19 8e       	std	Y+25, r1	; 0x19
     bac:	1a 8e       	std	Y+26, r1	; 0x1a
     bae:	1b 8e       	std	Y+27, r1	; 0x1b
     bb0:	1c 8e       	std	Y+28, r1	; 0x1c
     bb2:	41 2c       	mov	r4, r1
     bb4:	51 2c       	mov	r5, r1
     bb6:	32 01       	movw	r6, r4
     bb8:	81 2c       	mov	r8, r1
     bba:	91 2c       	mov	r9, r1
     bbc:	54 01       	movw	r10, r8
	int32_t accel_bias[3] = {0, 0, 0};
     bbe:	1d 8a       	std	Y+21, r1	; 0x15
     bc0:	1e 8a       	std	Y+22, r1	; 0x16
     bc2:	1f 8a       	std	Y+23, r1	; 0x17
     bc4:	18 8e       	std	Y+24, r1	; 0x18
     bc6:	19 8a       	std	Y+17, r1	; 0x11
     bc8:	1a 8a       	std	Y+18, r1	; 0x12
     bca:	1b 8a       	std	Y+19, r1	; 0x13
     bcc:	1c 8a       	std	Y+20, r1	; 0x14
     bce:	1d 86       	std	Y+13, r1	; 0x0d
     bd0:	1e 86       	std	Y+14, r1	; 0x0e
     bd2:	1f 86       	std	Y+15, r1	; 0x0f
     bd4:	18 8a       	std	Y+16, r1	; 0x10
	packet_total = 0;
     bd6:	c1 2c       	mov	r12, r1
     bd8:	d1 2c       	mov	r13, r1
	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 1024 bytes in MPU-6050)
	_delay_ms(5);

	for (jj = 0; jj < 20; jj++)	//read samples for 1 second
     bda:	21 2c       	mov	r2, r1
     bdc:	31 2c       	mov	r3, r1
     bde:	12 c0       	rjmp	.+36     	; 0xc04 <CalibrateMPU6050+0x17a>
     be0:	2f ef       	ldi	r18, 0xFF	; 255
     be2:	3f e8       	ldi	r19, 0x8F	; 143
     be4:	41 e0       	ldi	r20, 0x01	; 1
     be6:	21 50       	subi	r18, 0x01	; 1
     be8:	30 40       	sbci	r19, 0x00	; 0
     bea:	40 40       	sbci	r20, 0x00	; 0
     bec:	e1 f7       	brne	.-8      	; 0xbe6 <CalibrateMPU6050+0x15c>
     bee:	00 c0       	rjmp	.+0      	; 0xbf0 <CalibrateMPU6050+0x166>
     bf0:	00 00       	nop
	{
		_delay_ms(32); // accumulate 50 samples in 50 milliseconds = 600 bytes
		// At end of sample accumulation, turn off FIFO sensor read
		if (jj == 19)	// Disable gyro and accelerometer sensors for FIFO
     bf2:	53 e1       	ldi	r21, 0x13	; 19
     bf4:	25 16       	cp	r2, r21
     bf6:	31 04       	cpc	r3, r1
     bf8:	29 f4       	brne	.+10     	; 0xc04 <CalibrateMPU6050+0x17a>
			I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x00);
     bfa:	40 e0       	ldi	r20, 0x00	; 0
     bfc:	63 e2       	ldi	r22, 0x23	; 35
     bfe:	88 e6       	ldi	r24, 0x68	; 104
     c00:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
		I2C_read_buf(MPU6050_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
     c04:	9e 01       	movw	r18, r28
     c06:	2f 5f       	subi	r18, 0xFF	; 255
     c08:	3f 4f       	sbci	r19, 0xFF	; 255
     c0a:	42 e0       	ldi	r20, 0x02	; 2
     c0c:	62 e7       	ldi	r22, 0x72	; 114
     c0e:	88 e6       	ldi	r24, 0x68	; 104
     c10:	0e 94 c5 04 	call	0x98a	; 0x98a <I2C_read_buf>
		fifo_count = ((uint16_t)data[0] << 8) | data[1];

		packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
     c14:	29 81       	ldd	r18, Y+1	; 0x01
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	32 2f       	mov	r19, r18
     c1a:	22 27       	eor	r18, r18
     c1c:	8a 81       	ldd	r24, Y+2	; 0x02
     c1e:	28 2b       	or	r18, r24
     c20:	ab ea       	ldi	r26, 0xAB	; 171
     c22:	ba ea       	ldi	r27, 0xAA	; 170
     c24:	0e 94 ab 10 	call	0x2156	; 0x2156 <__umulhisi3>
     c28:	7c 01       	movw	r14, r24
     c2a:	f6 94       	lsr	r15
     c2c:	e7 94       	ror	r14
     c2e:	f6 94       	lsr	r15
     c30:	e7 94       	ror	r14
     c32:	f6 94       	lsr	r15
     c34:	e7 94       	ror	r14

		for (ii = 0; ii < packet_count; ii++) 
     c36:	e1 14       	cp	r14, r1
     c38:	f1 04       	cpc	r15, r1
     c3a:	09 f4       	brne	.+2      	; 0xc3e <CalibrateMPU6050+0x1b4>
     c3c:	8c c0       	rjmp	.+280    	; 0xd56 <CalibrateMPU6050+0x2cc>
     c3e:	00 e0       	ldi	r16, 0x00	; 0
     c40:	10 e0       	ldi	r17, 0x00	; 0
		{
			int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
			I2C_read_buf(MPU6050_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
     c42:	9e 01       	movw	r18, r28
     c44:	2f 5f       	subi	r18, 0xFF	; 255
     c46:	3f 4f       	sbci	r19, 0xFF	; 255
     c48:	4c e0       	ldi	r20, 0x0C	; 12
     c4a:	64 e7       	ldi	r22, 0x74	; 116
     c4c:	88 e6       	ldi	r24, 0x68	; 104
     c4e:	0e 94 c5 04 	call	0x98a	; 0x98a <I2C_read_buf>
			if (packet_total < 1024)
     c52:	c1 14       	cp	r12, r1
     c54:	64 e0       	ldi	r22, 0x04	; 4
     c56:	d6 06       	cpc	r13, r22
     c58:	08 f0       	brcs	.+2      	; 0xc5c <CalibrateMPU6050+0x1d2>
     c5a:	77 c0       	rjmp	.+238    	; 0xd4a <CalibrateMPU6050+0x2c0>
			{
				packet_total++;
     c5c:	7f ef       	ldi	r23, 0xFF	; 255
     c5e:	c7 1a       	sub	r12, r23
     c60:	d7 0a       	sbc	r13, r23
				accel_temp[2] = (int16_t) (((int16_t)data[4] << 8)  | data[5] ) ;
				gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8)  | data[7] ) ;
				gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8)  | data[9] ) ;
				gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
		
				accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	98 2f       	mov	r25, r24
     c68:	88 27       	eor	r24, r24
     c6a:	2a 81       	ldd	r18, Y+2	; 0x02
     c6c:	82 2b       	or	r24, r18
     c6e:	09 2e       	mov	r0, r25
     c70:	00 0c       	add	r0, r0
     c72:	aa 0b       	sbc	r26, r26
     c74:	bb 0b       	sbc	r27, r27
     c76:	2d 89       	ldd	r18, Y+21	; 0x15
     c78:	3e 89       	ldd	r19, Y+22	; 0x16
     c7a:	4f 89       	ldd	r20, Y+23	; 0x17
     c7c:	58 8d       	ldd	r21, Y+24	; 0x18
     c7e:	28 0f       	add	r18, r24
     c80:	39 1f       	adc	r19, r25
     c82:	4a 1f       	adc	r20, r26
     c84:	5b 1f       	adc	r21, r27
     c86:	2d 8b       	std	Y+21, r18	; 0x15
     c88:	3e 8b       	std	Y+22, r19	; 0x16
     c8a:	4f 8b       	std	Y+23, r20	; 0x17
     c8c:	58 8f       	std	Y+24, r21	; 0x18
				accel_bias[1] += (int32_t) accel_temp[1];
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	98 2f       	mov	r25, r24
     c94:	88 27       	eor	r24, r24
     c96:	2c 81       	ldd	r18, Y+4	; 0x04
     c98:	82 2b       	or	r24, r18
     c9a:	09 2e       	mov	r0, r25
     c9c:	00 0c       	add	r0, r0
     c9e:	aa 0b       	sbc	r26, r26
     ca0:	bb 0b       	sbc	r27, r27
     ca2:	49 89       	ldd	r20, Y+17	; 0x11
     ca4:	5a 89       	ldd	r21, Y+18	; 0x12
     ca6:	6b 89       	ldd	r22, Y+19	; 0x13
     ca8:	7c 89       	ldd	r23, Y+20	; 0x14
     caa:	48 0f       	add	r20, r24
     cac:	59 1f       	adc	r21, r25
     cae:	6a 1f       	adc	r22, r26
     cb0:	7b 1f       	adc	r23, r27
     cb2:	49 8b       	std	Y+17, r20	; 0x11
     cb4:	5a 8b       	std	Y+18, r21	; 0x12
     cb6:	6b 8b       	std	Y+19, r22	; 0x13
     cb8:	7c 8b       	std	Y+20, r23	; 0x14
				accel_bias[2] += (int32_t) accel_temp[2];
     cba:	8d 81       	ldd	r24, Y+5	; 0x05
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	98 2f       	mov	r25, r24
     cc0:	88 27       	eor	r24, r24
     cc2:	2e 81       	ldd	r18, Y+6	; 0x06
     cc4:	82 2b       	or	r24, r18
     cc6:	09 2e       	mov	r0, r25
     cc8:	00 0c       	add	r0, r0
     cca:	aa 0b       	sbc	r26, r26
     ccc:	bb 0b       	sbc	r27, r27
     cce:	2d 85       	ldd	r18, Y+13	; 0x0d
     cd0:	3e 85       	ldd	r19, Y+14	; 0x0e
     cd2:	4f 85       	ldd	r20, Y+15	; 0x0f
     cd4:	58 89       	ldd	r21, Y+16	; 0x10
     cd6:	28 0f       	add	r18, r24
     cd8:	39 1f       	adc	r19, r25
     cda:	4a 1f       	adc	r20, r26
     cdc:	5b 1f       	adc	r21, r27
     cde:	2d 87       	std	Y+13, r18	; 0x0d
     ce0:	3e 87       	std	Y+14, r19	; 0x0e
     ce2:	4f 87       	std	Y+15, r20	; 0x0f
     ce4:	58 8b       	std	Y+16, r21	; 0x10
				gyro_bias[0]  += (int32_t) gyro_temp[0];
     ce6:	8f 81       	ldd	r24, Y+7	; 0x07
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	98 2f       	mov	r25, r24
     cec:	88 27       	eor	r24, r24
     cee:	28 85       	ldd	r18, Y+8	; 0x08
     cf0:	82 2b       	or	r24, r18
     cf2:	09 2e       	mov	r0, r25
     cf4:	00 0c       	add	r0, r0
     cf6:	aa 0b       	sbc	r26, r26
     cf8:	bb 0b       	sbc	r27, r27
     cfa:	49 8d       	ldd	r20, Y+25	; 0x19
     cfc:	5a 8d       	ldd	r21, Y+26	; 0x1a
     cfe:	6b 8d       	ldd	r22, Y+27	; 0x1b
     d00:	7c 8d       	ldd	r23, Y+28	; 0x1c
     d02:	48 0f       	add	r20, r24
     d04:	59 1f       	adc	r21, r25
     d06:	6a 1f       	adc	r22, r26
     d08:	7b 1f       	adc	r23, r27
     d0a:	49 8f       	std	Y+25, r20	; 0x19
     d0c:	5a 8f       	std	Y+26, r21	; 0x1a
     d0e:	6b 8f       	std	Y+27, r22	; 0x1b
     d10:	7c 8f       	std	Y+28, r23	; 0x1c
				gyro_bias[1]  += (int32_t) gyro_temp[1];
     d12:	89 85       	ldd	r24, Y+9	; 0x09
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	98 2f       	mov	r25, r24
     d18:	88 27       	eor	r24, r24
     d1a:	2a 85       	ldd	r18, Y+10	; 0x0a
     d1c:	82 2b       	or	r24, r18
     d1e:	09 2e       	mov	r0, r25
     d20:	00 0c       	add	r0, r0
     d22:	aa 0b       	sbc	r26, r26
     d24:	bb 0b       	sbc	r27, r27
     d26:	48 0e       	add	r4, r24
     d28:	59 1e       	adc	r5, r25
     d2a:	6a 1e       	adc	r6, r26
     d2c:	7b 1e       	adc	r7, r27
				gyro_bias[2]  += (int32_t) gyro_temp[2];
     d2e:	8b 85       	ldd	r24, Y+11	; 0x0b
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	98 2f       	mov	r25, r24
     d34:	88 27       	eor	r24, r24
     d36:	2c 85       	ldd	r18, Y+12	; 0x0c
     d38:	82 2b       	or	r24, r18
     d3a:	09 2e       	mov	r0, r25
     d3c:	00 0c       	add	r0, r0
     d3e:	aa 0b       	sbc	r26, r26
     d40:	bb 0b       	sbc	r27, r27
     d42:	88 0e       	add	r8, r24
     d44:	99 1e       	adc	r9, r25
     d46:	aa 1e       	adc	r10, r26
     d48:	bb 1e       	adc	r11, r27
		I2C_read_buf(MPU6050_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
		fifo_count = ((uint16_t)data[0] << 8) | data[1];

		packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging

		for (ii = 0; ii < packet_count; ii++) 
     d4a:	0f 5f       	subi	r16, 0xFF	; 255
     d4c:	1f 4f       	sbci	r17, 0xFF	; 255
     d4e:	e0 16       	cp	r14, r16
     d50:	f1 06       	cpc	r15, r17
     d52:	09 f0       	breq	.+2      	; 0xd56 <CalibrateMPU6050+0x2cc>
     d54:	76 cf       	rjmp	.-276    	; 0xc42 <CalibrateMPU6050+0x1b8>
	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 1024 bytes in MPU-6050)
	_delay_ms(5);

	for (jj = 0; jj < 20; jj++)	//read samples for 1 second
     d56:	5f ef       	ldi	r21, 0xFF	; 255
     d58:	25 1a       	sub	r2, r21
     d5a:	35 0a       	sbc	r3, r21
     d5c:	64 e1       	ldi	r22, 0x14	; 20
     d5e:	26 16       	cp	r2, r22
     d60:	31 04       	cpc	r3, r1
     d62:	09 f0       	breq	.+2      	; 0xd66 <CalibrateMPU6050+0x2dc>
     d64:	3d cf       	rjmp	.-390    	; 0xbe0 <CalibrateMPU6050+0x156>
				gyro_bias[2]  += (int32_t) gyro_temp[2];
			}
		}
	}

	accel_bias[0] /= (int32_t) packet_total; // Normalize sums to get average count biases
     d66:	c6 01       	movw	r24, r12
     d68:	a0 e0       	ldi	r26, 0x00	; 0
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	8d 8f       	std	Y+29, r24	; 0x1d
     d6e:	9e 8f       	std	Y+30, r25	; 0x1e
     d70:	af 8f       	std	Y+31, r26	; 0x1f
     d72:	b8 a3       	std	Y+32, r27	; 0x20
     d74:	6d 89       	ldd	r22, Y+21	; 0x15
     d76:	7e 89       	ldd	r23, Y+22	; 0x16
     d78:	8f 89       	ldd	r24, Y+23	; 0x17
     d7a:	98 8d       	ldd	r25, Y+24	; 0x18
     d7c:	2d 8d       	ldd	r18, Y+29	; 0x1d
     d7e:	3e 8d       	ldd	r19, Y+30	; 0x1e
     d80:	4f 8d       	ldd	r20, Y+31	; 0x1f
     d82:	58 a1       	ldd	r21, Y+32	; 0x20
     d84:	0e 94 86 10 	call	0x210c	; 0x210c <__divmodsi4>
     d88:	2d 8b       	std	Y+21, r18	; 0x15
     d8a:	3e 8b       	std	Y+22, r19	; 0x16
     d8c:	4f 8b       	std	Y+23, r20	; 0x17
     d8e:	58 8f       	std	Y+24, r21	; 0x18
	accel_bias[1] /= (int32_t) packet_total;
     d90:	69 89       	ldd	r22, Y+17	; 0x11
     d92:	7a 89       	ldd	r23, Y+18	; 0x12
     d94:	8b 89       	ldd	r24, Y+19	; 0x13
     d96:	9c 89       	ldd	r25, Y+20	; 0x14
     d98:	2d 8d       	ldd	r18, Y+29	; 0x1d
     d9a:	3e 8d       	ldd	r19, Y+30	; 0x1e
     d9c:	4f 8d       	ldd	r20, Y+31	; 0x1f
     d9e:	58 a1       	ldd	r21, Y+32	; 0x20
     da0:	0e 94 86 10 	call	0x210c	; 0x210c <__divmodsi4>
     da4:	29 8b       	std	Y+17, r18	; 0x11
     da6:	3a 8b       	std	Y+18, r19	; 0x12
     da8:	4b 8b       	std	Y+19, r20	; 0x13
     daa:	5c 8b       	std	Y+20, r21	; 0x14
	accel_bias[2] /= (int32_t) packet_total;
     dac:	6d 85       	ldd	r22, Y+13	; 0x0d
     dae:	7e 85       	ldd	r23, Y+14	; 0x0e
     db0:	8f 85       	ldd	r24, Y+15	; 0x0f
     db2:	98 89       	ldd	r25, Y+16	; 0x10
     db4:	2d 8d       	ldd	r18, Y+29	; 0x1d
     db6:	3e 8d       	ldd	r19, Y+30	; 0x1e
     db8:	4f 8d       	ldd	r20, Y+31	; 0x1f
     dba:	58 a1       	ldd	r21, Y+32	; 0x20
     dbc:	0e 94 86 10 	call	0x210c	; 0x210c <__divmodsi4>
     dc0:	69 01       	movw	r12, r18
     dc2:	7a 01       	movw	r14, r20
	gyro_bias[0]  /= (int32_t) packet_total;
     dc4:	69 8d       	ldd	r22, Y+25	; 0x19
     dc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dca:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dcc:	2d 8d       	ldd	r18, Y+29	; 0x1d
     dce:	3e 8d       	ldd	r19, Y+30	; 0x1e
     dd0:	4f 8d       	ldd	r20, Y+31	; 0x1f
     dd2:	58 a1       	ldd	r21, Y+32	; 0x20
     dd4:	0e 94 86 10 	call	0x210c	; 0x210c <__divmodsi4>
     dd8:	2d 87       	std	Y+13, r18	; 0x0d
     dda:	3e 87       	std	Y+14, r19	; 0x0e
     ddc:	4f 87       	std	Y+15, r20	; 0x0f
     dde:	58 8b       	std	Y+16, r21	; 0x10
	gyro_bias[1]  /= (int32_t) packet_total;
     de0:	c3 01       	movw	r24, r6
     de2:	b2 01       	movw	r22, r4
     de4:	2d 8d       	ldd	r18, Y+29	; 0x1d
     de6:	3e 8d       	ldd	r19, Y+30	; 0x1e
     de8:	4f 8d       	ldd	r20, Y+31	; 0x1f
     dea:	58 a1       	ldd	r21, Y+32	; 0x20
     dec:	0e 94 86 10 	call	0x210c	; 0x210c <__divmodsi4>
     df0:	29 01       	movw	r4, r18
     df2:	3a 01       	movw	r6, r20
	gyro_bias[2]  /= (int32_t) packet_total;
     df4:	c5 01       	movw	r24, r10
     df6:	b4 01       	movw	r22, r8
     df8:	2d 8d       	ldd	r18, Y+29	; 0x1d
     dfa:	3e 8d       	ldd	r19, Y+30	; 0x1e
     dfc:	4f 8d       	ldd	r20, Y+31	; 0x1f
     dfe:	58 a1       	ldd	r21, Y+32	; 0x20
     e00:	0e 94 86 10 	call	0x210c	; 0x210c <__divmodsi4>

	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
     e04:	1c 14       	cp	r1, r12
     e06:	1d 04       	cpc	r1, r13
     e08:	1e 04       	cpc	r1, r14
     e0a:	1f 04       	cpc	r1, r15
     e0c:	34 f4       	brge	.+12     	; 0xe1a <CalibrateMPU6050+0x390>
     e0e:	d7 01       	movw	r26, r14
     e10:	c6 01       	movw	r24, r12
     e12:	90 54       	subi	r25, 0x40	; 64
     e14:	a1 09       	sbc	r26, r1
     e16:	b1 09       	sbc	r27, r1
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <CalibrateMPU6050+0x39a>
	else {accel_bias[2] += (int32_t) accelsensitivity;}
     e1a:	d7 01       	movw	r26, r14
     e1c:	c6 01       	movw	r24, r12
     e1e:	90 5c       	subi	r25, 0xC0	; 192
     e20:	af 4f       	sbci	r26, 0xFF	; 255
     e22:	bf 4f       	sbci	r27, 0xFF	; 255
	
	gyro_offset[0] = (int16_t) gyro_bias[0];
     e24:	6d 85       	ldd	r22, Y+13	; 0x0d
     e26:	7e 85       	ldd	r23, Y+14	; 0x0e
     e28:	e9 a1       	ldd	r30, Y+33	; 0x21
     e2a:	fa a1       	ldd	r31, Y+34	; 0x22
     e2c:	71 83       	std	Z+1, r23	; 0x01
     e2e:	60 83       	st	Z, r22
	gyro_offset[1] = (int16_t) gyro_bias[1];
     e30:	53 82       	std	Z+3, r5	; 0x03
     e32:	42 82       	std	Z+2, r4	; 0x02
	gyro_offset[2] = (int16_t) gyro_bias[2];
     e34:	35 83       	std	Z+5, r19	; 0x05
     e36:	24 83       	std	Z+4, r18	; 0x04

	acc_offset[0]  = (int16_t) accel_bias[0];
     e38:	2d 89       	ldd	r18, Y+21	; 0x15
     e3a:	3e 89       	ldd	r19, Y+22	; 0x16
     e3c:	eb a1       	ldd	r30, Y+35	; 0x23
     e3e:	fc a1       	ldd	r31, Y+36	; 0x24
     e40:	31 83       	std	Z+1, r19	; 0x01
     e42:	20 83       	st	Z, r18
	acc_offset[1]  = (int16_t) accel_bias[1];
     e44:	49 89       	ldd	r20, Y+17	; 0x11
     e46:	5a 89       	ldd	r21, Y+18	; 0x12
     e48:	53 83       	std	Z+3, r21	; 0x03
     e4a:	42 83       	std	Z+2, r20	; 0x02
	acc_offset[2]  = (int16_t) accel_bias[2];
     e4c:	95 83       	std	Z+5, r25	; 0x05
     e4e:	84 83       	std	Z+4, r24	; 0x04
}
     e50:	a4 96       	adiw	r28, 0x24	; 36
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	ff 90       	pop	r15
     e66:	ef 90       	pop	r14
     e68:	df 90       	pop	r13
     e6a:	cf 90       	pop	r12
     e6c:	bf 90       	pop	r11
     e6e:	af 90       	pop	r10
     e70:	9f 90       	pop	r9
     e72:	8f 90       	pop	r8
     e74:	7f 90       	pop	r7
     e76:	6f 90       	pop	r6
     e78:	5f 90       	pop	r5
     e7a:	4f 90       	pop	r4
     e7c:	3f 90       	pop	r3
     e7e:	2f 90       	pop	r2
     e80:	08 95       	ret

00000e82 <InitMPU6050>:


void InitMPU6050(void)
{
	// reset device, reset all registers, clear gyro and accelerometer bias registers
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
     e82:	40 e8       	ldi	r20, 0x80	; 128
     e84:	6b e6       	ldi	r22, 0x6B	; 107
     e86:	88 e6       	ldi	r24, 0x68	; 104
     e88:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
     e8c:	2f ef       	ldi	r18, 0xFF	; 255
     e8e:	81 ee       	ldi	r24, 0xE1	; 225
     e90:	94 e0       	ldi	r25, 0x04	; 4
     e92:	21 50       	subi	r18, 0x01	; 1
     e94:	80 40       	sbci	r24, 0x00	; 0
     e96:	90 40       	sbci	r25, 0x00	; 0
     e98:	e1 f7       	brne	.-8      	; 0xe92 <InitMPU6050+0x10>
     e9a:	00 c0       	rjmp	.+0      	; 0xe9c <InitMPU6050+0x1a>
     e9c:	00 00       	nop
	_delay_ms(100);

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x01);
     e9e:	41 e0       	ldi	r20, 0x01	; 1
     ea0:	6b e6       	ldi	r22, 0x6B	; 107
     ea2:	88 e6       	ldi	r24, 0x68	; 104
     ea4:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_2, 0x00);
     ea8:	40 e0       	ldi	r20, 0x00	; 0
     eaa:	6c e6       	ldi	r22, 0x6C	; 108
     eac:	88 e6       	ldi	r24, 0x68	; 104
     eae:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
     eb2:	2f ef       	ldi	r18, 0xFF	; 255
     eb4:	83 ec       	ldi	r24, 0xC3	; 195
     eb6:	99 e0       	ldi	r25, 0x09	; 9
     eb8:	21 50       	subi	r18, 0x01	; 1
     eba:	80 40       	sbci	r24, 0x00	; 0
     ebc:	90 40       	sbci	r25, 0x00	; 0
     ebe:	e1 f7       	brne	.-8      	; 0xeb8 <InitMPU6050+0x36>
     ec0:	00 c0       	rjmp	.+0      	; 0xec2 <InitMPU6050+0x40>
     ec2:	00 00       	nop
	_delay_ms(200);

	// Configure device for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
     ec4:	40 e0       	ldi	r20, 0x00	; 0
     ec6:	68 e3       	ldi	r22, 0x38	; 56
     ec8:	88 e6       	ldi	r24, 0x68	; 104
     eca:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
     ece:	40 e0       	ldi	r20, 0x00	; 0
     ed0:	63 e2       	ldi	r22, 0x23	; 35
     ed2:	88 e6       	ldi	r24, 0x68	; 104
     ed4:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
     ed8:	40 e0       	ldi	r20, 0x00	; 0
     eda:	6b e6       	ldi	r22, 0x6B	; 107
     edc:	88 e6       	ldi	r24, 0x68	; 104
     ede:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
     ee2:	40 e0       	ldi	r20, 0x00	; 0
     ee4:	64 e2       	ldi	r22, 0x24	; 36
     ee6:	88 e6       	ldi	r24, 0x68	; 104
     ee8:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
     eec:	40 e0       	ldi	r20, 0x00	; 0
     eee:	6a e6       	ldi	r22, 0x6A	; 106
     ef0:	88 e6       	ldi	r24, 0x68	; 104
     ef2:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
     ef6:	4c e0       	ldi	r20, 0x0C	; 12
     ef8:	6a e6       	ldi	r22, 0x6A	; 106
     efa:	88 e6       	ldi	r24, 0x68	; 104
     efc:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
     f00:	8f e5       	ldi	r24, 0x5F	; 95
     f02:	9a ee       	ldi	r25, 0xEA	; 234
     f04:	01 97       	sbiw	r24, 0x01	; 1
     f06:	f1 f7       	brne	.-4      	; 0xf04 <InitMPU6050+0x82>
     f08:	00 c0       	rjmp	.+0      	; 0xf0a <InitMPU6050+0x88>
     f0a:	00 00       	nop
	_delay_ms(15);

	// Configure MPU6050 gyro and accelerometer for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, CONFIG, 0x03);      // Set low-pass filter to 44 Hz
     f0c:	43 e0       	ldi	r20, 0x03	; 3
     f0e:	6a e1       	ldi	r22, 0x1A	; 26
     f10:	88 e6       	ldi	r24, 0x68	; 104
     f12:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, SMPLRT_DIV, 4);  // Set sample rate to 1000 Hz
     f16:	44 e0       	ldi	r20, 0x04	; 4
     f18:	69 e1       	ldi	r22, 0x19	; 25
     f1a:	88 e6       	ldi	r24, 0x68	; 104
     f1c:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
     f20:	40 e0       	ldi	r20, 0x00	; 0
     f22:	6b e1       	ldi	r22, 0x1B	; 27
     f24:	88 e6       	ldi	r24, 0x68	; 104
     f26:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
     f2a:	40 e0       	ldi	r20, 0x00	; 0
     f2c:	6c e1       	ldi	r22, 0x1C	; 28
     f2e:	88 e6       	ldi	r24, 0x68	; 104
     f30:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>

	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
     f34:	40 e4       	ldi	r20, 0x40	; 64
     f36:	6a e6       	ldi	r22, 0x6A	; 106
     f38:	88 e6       	ldi	r24, 0x68	; 104
     f3a:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 1024 bytes in MPU-6050)
     f3e:	48 e7       	ldi	r20, 0x78	; 120
     f40:	63 e2       	ldi	r22, 0x23	; 35
     f42:	88 e6       	ldi	r24, 0x68	; 104
     f44:	0e 94 ad 04 	call	0x95a	; 0x95a <I2C_write_byte>
     f48:	08 95       	ret

00000f4a <ReadMPU6050>:
}

void ReadMPU6050(void)
{
     f4a:	8f 92       	push	r8
     f4c:	9f 92       	push	r9
     f4e:	af 92       	push	r10
     f50:	bf 92       	push	r11
     f52:	cf 92       	push	r12
     f54:	df 92       	push	r13
     f56:	ef 92       	push	r14
     f58:	ff 92       	push	r15
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	68 97       	sbiw	r28, 0x18	; 24
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	de bf       	out	0x3e, r29	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, fifo_count, packet_count;
	uint8_t data[12];
	int16_t gyro[3];
	int16_t acc[3];

	I2C_read_buf(MPU6050_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
     f72:	9e 01       	movw	r18, r28
     f74:	2f 5f       	subi	r18, 0xFF	; 255
     f76:	3f 4f       	sbci	r19, 0xFF	; 255
     f78:	42 e0       	ldi	r20, 0x02	; 2
     f7a:	62 e7       	ldi	r22, 0x72	; 114
     f7c:	88 e6       	ldi	r24, 0x68	; 104
     f7e:	0e 94 c5 04 	call	0x98a	; 0x98a <I2C_read_buf>
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	9b ea       	ldi	r25, 0xAB	; 171
     f86:	89 9f       	mul	r24, r25
     f88:	c1 2c       	mov	r12, r1
     f8a:	11 24       	eor	r1, r1
     f8c:	c6 94       	lsr	r12
     f8e:	c6 94       	lsr	r12
     f90:	c6 94       	lsr	r12

	for (i = 0; i < packet_count; i++)
     f92:	09 f4       	brne	.+2      	; 0xf96 <ReadMPU6050+0x4c>
     f94:	6b c0       	rjmp	.+214    	; 0x106c <ReadMPU6050+0x122>
     f96:	d1 2c       	mov	r13, r1
		acc[2] = (int16_t) (((int16_t)data[4] << 8)  | data[5] ) ;
		gyro[0]  = (int16_t) (((int16_t)data[6] << 8)  | data[7] ) ;
		gyro[1]  = (int16_t) (((int16_t)data[8] << 8)  | data[9] ) ;
		gyro[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
			
		acc[0] -= acc_offset[0];
     f98:	0f 2e       	mov	r0, r31
     f9a:	f8 e0       	ldi	r31, 0x08	; 8
     f9c:	ef 2e       	mov	r14, r31
     f9e:	f2 e0       	ldi	r31, 0x02	; 2
     fa0:	ff 2e       	mov	r15, r31
     fa2:	f0 2d       	mov	r31, r0
		acc[1] -= acc_offset[1];
		acc[2] -= acc_offset[2];
		gyro[0] -= gyro_offset[0];
     fa4:	0e e0       	ldi	r16, 0x0E	; 14
     fa6:	12 e0       	ldi	r17, 0x02	; 2
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging

	for (i = 0; i < packet_count; i++)
	{
		I2C_read_buf(MPU6050_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
     fa8:	9e 01       	movw	r18, r28
     faa:	2f 5f       	subi	r18, 0xFF	; 255
     fac:	3f 4f       	sbci	r19, 0xFF	; 255
     fae:	4c e0       	ldi	r20, 0x0C	; 12
     fb0:	64 e7       	ldi	r22, 0x74	; 116
     fb2:	88 e6       	ldi	r24, 0x68	; 104
     fb4:	0e 94 c5 04 	call	0x98a	; 0x98a <I2C_read_buf>
		acc[0] = (int16_t) (((int16_t)data[0] << 8)  | data[1] ) ;  // Form signed 16-bit integer for each sample in FIFO
		acc[1] = (int16_t) (((int16_t)data[2] << 8)  | data[3] ) ;
     fb8:	eb 81       	ldd	r30, Y+3	; 0x03
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	fe 2f       	mov	r31, r30
     fbe:	ee 27       	eor	r30, r30
     fc0:	8c 81       	ldd	r24, Y+4	; 0x04
     fc2:	4f 01       	movw	r8, r30
     fc4:	88 2a       	or	r8, r24
		acc[2] = (int16_t) (((int16_t)data[4] << 8)  | data[5] ) ;
     fc6:	6d 81       	ldd	r22, Y+5	; 0x05
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	76 2f       	mov	r23, r22
     fcc:	66 27       	eor	r22, r22
     fce:	8e 81       	ldd	r24, Y+6	; 0x06
     fd0:	68 2b       	or	r22, r24
		gyro[0]  = (int16_t) (((int16_t)data[6] << 8)  | data[7] ) ;
     fd2:	4f 81       	ldd	r20, Y+7	; 0x07
     fd4:	50 e0       	ldi	r21, 0x00	; 0
     fd6:	54 2f       	mov	r21, r20
     fd8:	44 27       	eor	r20, r20
     fda:	88 85       	ldd	r24, Y+8	; 0x08
     fdc:	48 2b       	or	r20, r24
		gyro[1]  = (int16_t) (((int16_t)data[8] << 8)  | data[9] ) ;
     fde:	29 85       	ldd	r18, Y+9	; 0x09
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	32 2f       	mov	r19, r18
     fe4:	22 27       	eor	r18, r18
     fe6:	8a 85       	ldd	r24, Y+10	; 0x0a
     fe8:	28 2b       	or	r18, r24
		gyro[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
     fea:	8b 85       	ldd	r24, Y+11	; 0x0b
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	98 2f       	mov	r25, r24
     ff0:	88 27       	eor	r24, r24
     ff2:	ac 85       	ldd	r26, Y+12	; 0x0c
     ff4:	8a 2b       	or	r24, r26
			
		acc[0] -= acc_offset[0];
     ff6:	a9 81       	ldd	r26, Y+1	; 0x01
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	ba 2f       	mov	r27, r26
     ffc:	aa 27       	eor	r26, r26
     ffe:	ba 80       	ldd	r11, Y+2	; 0x02
    1000:	ab 29       	or	r26, r11
    1002:	f7 01       	movw	r30, r14
    1004:	a0 80       	ld	r10, Z
    1006:	b1 80       	ldd	r11, Z+1	; 0x01
    1008:	aa 19       	sub	r26, r10
    100a:	bb 09       	sbc	r27, r11
    100c:	bc 8b       	std	Y+20, r27	; 0x14
    100e:	ab 8b       	std	Y+19, r26	; 0x13
		acc[1] -= acc_offset[1];
    1010:	a2 81       	ldd	r26, Z+2	; 0x02
    1012:	b3 81       	ldd	r27, Z+3	; 0x03
    1014:	f4 01       	movw	r30, r8
    1016:	ea 1b       	sub	r30, r26
    1018:	fb 0b       	sbc	r31, r27
    101a:	fe 8b       	std	Y+22, r31	; 0x16
    101c:	ed 8b       	std	Y+21, r30	; 0x15
		acc[2] -= acc_offset[2];
    101e:	d7 01       	movw	r26, r14
    1020:	14 96       	adiw	r26, 0x04	; 4
    1022:	ed 91       	ld	r30, X+
    1024:	fc 91       	ld	r31, X
    1026:	15 97       	sbiw	r26, 0x05	; 5
    1028:	6e 1b       	sub	r22, r30
    102a:	7f 0b       	sbc	r23, r31
    102c:	78 8f       	std	Y+24, r23	; 0x18
    102e:	6f 8b       	std	Y+23, r22	; 0x17
		gyro[0] -= gyro_offset[0];
    1030:	f8 01       	movw	r30, r16
    1032:	60 81       	ld	r22, Z
    1034:	71 81       	ldd	r23, Z+1	; 0x01
    1036:	46 1b       	sub	r20, r22
    1038:	57 0b       	sbc	r21, r23
    103a:	5e 87       	std	Y+14, r21	; 0x0e
    103c:	4d 87       	std	Y+13, r20	; 0x0d
		gyro[1] -= gyro_offset[1];
    103e:	42 81       	ldd	r20, Z+2	; 0x02
    1040:	53 81       	ldd	r21, Z+3	; 0x03
    1042:	24 1b       	sub	r18, r20
    1044:	35 0b       	sbc	r19, r21
    1046:	38 8b       	std	Y+16, r19	; 0x10
    1048:	2f 87       	std	Y+15, r18	; 0x0f
		gyro[2] -= gyro_offset[2];
    104a:	24 81       	ldd	r18, Z+4	; 0x04
    104c:	35 81       	ldd	r19, Z+5	; 0x05
    104e:	82 1b       	sub	r24, r18
    1050:	93 0b       	sbc	r25, r19
    1052:	9a 8b       	std	Y+18, r25	; 0x12
    1054:	89 8b       	std	Y+17, r24	; 0x11

		PlaceInGyroBuffor(gyro);
    1056:	ce 01       	movw	r24, r28
    1058:	0d 96       	adiw	r24, 0x0d	; 13
    105a:	0e 94 37 01 	call	0x26e	; 0x26e <PlaceInGyroBuffor>
		PlaceInAccBuffor(acc);
    105e:	ce 01       	movw	r24, r28
    1060:	43 96       	adiw	r24, 0x13	; 19
    1062:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <PlaceInAccBuffor>

	I2C_read_buf(MPU6050_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging

	for (i = 0; i < packet_count; i++)
    1066:	d3 94       	inc	r13
    1068:	cd 10       	cpse	r12, r13
    106a:	9e cf       	rjmp	.-196    	; 0xfa8 <ReadMPU6050+0x5e>
		gyro[2] -= gyro_offset[2];

		PlaceInGyroBuffor(gyro);
		PlaceInAccBuffor(acc);
	}
    106c:	68 96       	adiw	r28, 0x18	; 24
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	ff 90       	pop	r15
    1082:	ef 90       	pop	r14
    1084:	df 90       	pop	r13
    1086:	cf 90       	pop	r12
    1088:	bf 90       	pop	r11
    108a:	af 90       	pop	r10
    108c:	9f 90       	pop	r9
    108e:	8f 90       	pop	r8
    1090:	08 95       	ret

00001092 <er_service>:
		
}

int8_t er_service(char * params)
{
	SendLine("Uart is working");
    1092:	80 e1       	ldi	r24, 0x10	; 16
    1094:	91 e0       	ldi	r25, 0x01	; 1
    1096:	0e 94 90 0c 	call	0x1920	; 0x1920 <SendLine>
	return 0;
}
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	08 95       	ret

0000109e <er_read>:

int8_t er_read(char * params)
{
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	2c 97       	sbiw	r28, 0x0c	; 12
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
	int16_t gyro[3];
	int16_t acc[3];
	
	ReadGyroSample(gyro);
    10b2:	ce 01       	movw	r24, r28
    10b4:	01 96       	adiw	r24, 0x01	; 1
    10b6:	0e 94 9f 01 	call	0x33e	; 0x33e <ReadGyroSample>
	ReadAccSample(acc);
    10ba:	ce 01       	movw	r24, r28
    10bc:	07 96       	adiw	r24, 0x07	; 7
    10be:	0e 94 cd 01 	call	0x39a	; 0x39a <ReadAccSample>

	SendStringInt("G X ", gyro[0]);
    10c2:	49 81       	ldd	r20, Y+1	; 0x01
    10c4:	5a 81       	ldd	r21, Y+2	; 0x02
    10c6:	05 2e       	mov	r0, r21
    10c8:	00 0c       	add	r0, r0
    10ca:	66 0b       	sbc	r22, r22
    10cc:	77 0b       	sbc	r23, r23
    10ce:	80 e2       	ldi	r24, 0x20	; 32
    10d0:	91 e0       	ldi	r25, 0x01	; 1
    10d2:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <SendStringInt>
	SendStringInt("G Y ", gyro[1]);
    10d6:	4b 81       	ldd	r20, Y+3	; 0x03
    10d8:	5c 81       	ldd	r21, Y+4	; 0x04
    10da:	05 2e       	mov	r0, r21
    10dc:	00 0c       	add	r0, r0
    10de:	66 0b       	sbc	r22, r22
    10e0:	77 0b       	sbc	r23, r23
    10e2:	85 e2       	ldi	r24, 0x25	; 37
    10e4:	91 e0       	ldi	r25, 0x01	; 1
    10e6:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <SendStringInt>
	SendStringInt("G Z ", gyro[2]);
    10ea:	4d 81       	ldd	r20, Y+5	; 0x05
    10ec:	5e 81       	ldd	r21, Y+6	; 0x06
    10ee:	05 2e       	mov	r0, r21
    10f0:	00 0c       	add	r0, r0
    10f2:	66 0b       	sbc	r22, r22
    10f4:	77 0b       	sbc	r23, r23
    10f6:	8a e2       	ldi	r24, 0x2A	; 42
    10f8:	91 e0       	ldi	r25, 0x01	; 1
    10fa:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <SendStringInt>
	SendStringInt("A X ", acc[0]);
    10fe:	4f 81       	ldd	r20, Y+7	; 0x07
    1100:	58 85       	ldd	r21, Y+8	; 0x08
    1102:	05 2e       	mov	r0, r21
    1104:	00 0c       	add	r0, r0
    1106:	66 0b       	sbc	r22, r22
    1108:	77 0b       	sbc	r23, r23
    110a:	8f e2       	ldi	r24, 0x2F	; 47
    110c:	91 e0       	ldi	r25, 0x01	; 1
    110e:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <SendStringInt>
	SendStringInt("A Y ", acc[1]);
    1112:	49 85       	ldd	r20, Y+9	; 0x09
    1114:	5a 85       	ldd	r21, Y+10	; 0x0a
    1116:	05 2e       	mov	r0, r21
    1118:	00 0c       	add	r0, r0
    111a:	66 0b       	sbc	r22, r22
    111c:	77 0b       	sbc	r23, r23
    111e:	84 e3       	ldi	r24, 0x34	; 52
    1120:	91 e0       	ldi	r25, 0x01	; 1
    1122:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <SendStringInt>
	SendStringInt("A Z ", acc[2]);
    1126:	4b 85       	ldd	r20, Y+11	; 0x0b
    1128:	5c 85       	ldd	r21, Y+12	; 0x0c
    112a:	05 2e       	mov	r0, r21
    112c:	00 0c       	add	r0, r0
    112e:	66 0b       	sbc	r22, r22
    1130:	77 0b       	sbc	r23, r23
    1132:	89 e3       	ldi	r24, 0x39	; 57
    1134:	91 e0       	ldi	r25, 0x01	; 1
    1136:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <SendStringInt>

	return 0;
}
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	2c 96       	adiw	r28, 0x0c	; 12
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	08 95       	ret

0000114e <er_buf>:

int8_t er_buf(char * params)
{
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	00 d0       	rcall	.+0      	; 0x1154 <er_buf+0x6>
    1154:	00 d0       	rcall	.+0      	; 0x1156 <er_buf+0x8>
    1156:	00 d0       	rcall	.+0      	; 0x1158 <er_buf+0xa>
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
	int16_t data[3];

	if (SamplesGyroBuf())
    115c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <SamplesGyroBuf>
    1160:	88 23       	and	r24, r24
    1162:	c1 f0       	breq	.+48     	; 0x1194 <er_buf+0x46>
	{
		ReadGyroBufAveraged(data);
    1164:	ce 01       	movw	r24, r28
    1166:	01 96       	adiw	r24, 0x01	; 1
    1168:	0e 94 13 03 	call	0x626	; 0x626 <ReadGyroBufAveraged>

 	 	SendStringInt("G X ", data[0]);
    116c:	49 81       	ldd	r20, Y+1	; 0x01
    116e:	5a 81       	ldd	r21, Y+2	; 0x02
    1170:	05 2e       	mov	r0, r21
    1172:	00 0c       	add	r0, r0
    1174:	66 0b       	sbc	r22, r22
    1176:	77 0b       	sbc	r23, r23
    1178:	80 e2       	ldi	r24, 0x20	; 32
    117a:	91 e0       	ldi	r25, 0x01	; 1
    117c:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <SendStringInt>
 	 	SendStringInt("G Y ", data[1]);
    1180:	4b 81       	ldd	r20, Y+3	; 0x03
    1182:	5c 81       	ldd	r21, Y+4	; 0x04
    1184:	05 2e       	mov	r0, r21
    1186:	00 0c       	add	r0, r0
    1188:	66 0b       	sbc	r22, r22
    118a:	77 0b       	sbc	r23, r23
    118c:	85 e2       	ldi	r24, 0x25	; 37
    118e:	91 e0       	ldi	r25, 0x01	; 1
    1190:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <SendStringInt>
// 	 	SendStringInt("G Z ", data[2]);
	}

 	if (SamplesAccBuf())
    1194:	0e 94 04 02 	call	0x408	; 0x408 <SamplesAccBuf>
    1198:	88 23       	and	r24, r24
    119a:	11 f1       	breq	.+68     	; 0x11e0 <er_buf+0x92>
 	{
		ReadAccBufAveraged(data);
    119c:	ce 01       	movw	r24, r28
    119e:	01 96       	adiw	r24, 0x01	; 1
    11a0:	0e 94 0d 04 	call	0x81a	; 0x81a <ReadAccBufAveraged>

		SendStringInt("A X ", data[0]);
    11a4:	49 81       	ldd	r20, Y+1	; 0x01
    11a6:	5a 81       	ldd	r21, Y+2	; 0x02
    11a8:	05 2e       	mov	r0, r21
    11aa:	00 0c       	add	r0, r0
    11ac:	66 0b       	sbc	r22, r22
    11ae:	77 0b       	sbc	r23, r23
    11b0:	8f e2       	ldi	r24, 0x2F	; 47
    11b2:	91 e0       	ldi	r25, 0x01	; 1
    11b4:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <SendStringInt>
		SendStringInt("A Y ", data[1]);
    11b8:	4b 81       	ldd	r20, Y+3	; 0x03
    11ba:	5c 81       	ldd	r21, Y+4	; 0x04
    11bc:	05 2e       	mov	r0, r21
    11be:	00 0c       	add	r0, r0
    11c0:	66 0b       	sbc	r22, r22
    11c2:	77 0b       	sbc	r23, r23
    11c4:	84 e3       	ldi	r24, 0x34	; 52
    11c6:	91 e0       	ldi	r25, 0x01	; 1
    11c8:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <SendStringInt>
		SendStringInt("A Z ", data[2]);
    11cc:	4d 81       	ldd	r20, Y+5	; 0x05
    11ce:	5e 81       	ldd	r21, Y+6	; 0x06
    11d0:	05 2e       	mov	r0, r21
    11d2:	00 0c       	add	r0, r0
    11d4:	66 0b       	sbc	r22, r22
    11d6:	77 0b       	sbc	r23, r23
    11d8:	89 e3       	ldi	r24, 0x39	; 57
    11da:	91 e0       	ldi	r25, 0x01	; 1
    11dc:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <SendStringInt>
 	}

	SendStringInt("S ", SamplesAccBuf());
    11e0:	0e 94 04 02 	call	0x408	; 0x408 <SamplesAccBuf>
    11e4:	48 2f       	mov	r20, r24
    11e6:	50 e0       	ldi	r21, 0x00	; 0
    11e8:	60 e0       	ldi	r22, 0x00	; 0
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	8e e3       	ldi	r24, 0x3E	; 62
    11ee:	91 e0       	ldi	r25, 0x01	; 1
    11f0:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <SendStringInt>
	return 0;
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	26 96       	adiw	r28, 0x06	; 6
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	08 95       	ret

00001208 <ProcessString>:
	{"ER_BUF", er_buf},
};


void ProcessString(uint8_t start, uint8_t stop)
{
    1208:	4f 92       	push	r4
    120a:	5f 92       	push	r5
    120c:	6f 92       	push	r6
    120e:	8f 92       	push	r8
    1210:	9f 92       	push	r9
    1212:	af 92       	push	r10
    1214:	bf 92       	push	r11
    1216:	cf 92       	push	r12
    1218:	df 92       	push	r13
    121a:	ef 92       	push	r14
    121c:	ff 92       	push	r15
    121e:	0f 93       	push	r16
    1220:	1f 93       	push	r17
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	a2 97       	sbiw	r28, 0x22	; 34
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	f8 94       	cli
    1230:	de bf       	out	0x3e, r29	; 62
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	cd bf       	out	0x3d, r28	; 61
    1236:	fe 01       	movw	r30, r28
    1238:	31 96       	adiw	r30, 0x01	; 1
    123a:	9e 01       	movw	r18, r28
    123c:	2f 5d       	subi	r18, 0xDF	; 223
    123e:	3f 4f       	sbci	r19, 0xFF	; 255
	char string[RX_SIZE];
	uint8_t i;	//counter value

	for (i=0; i<RX_SIZE; i++)
	{
		string[i] = 0;
    1240:	11 92       	st	Z+, r1
	
	//	stop = (stop +1) & RX_SIZE_BIN;
	char string[RX_SIZE];
	uint8_t i;	//counter value

	for (i=0; i<RX_SIZE; i++)
    1242:	2e 17       	cp	r18, r30
    1244:	3f 07       	cpc	r19, r31
    1246:	e1 f7       	brne	.-8      	; 0x1240 <ProcessString+0x38>
	}

	i=0;

	// Assign rX string to command
	while (start!=stop)
    1248:	86 17       	cp	r24, r22
    124a:	99 f0       	breq	.+38     	; 0x1272 <ProcessString+0x6a>
    124c:	10 e0       	ldi	r17, 0x00	; 0
	{
		string[i] = RxBuffor[start];
    124e:	a1 e0       	ldi	r26, 0x01	; 1
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	ac 0f       	add	r26, r28
    1254:	bd 1f       	adc	r27, r29
    1256:	a1 0f       	add	r26, r17
    1258:	b1 1d       	adc	r27, r1
    125a:	e8 2f       	mov	r30, r24
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	ee 5e       	subi	r30, 0xEE	; 238
    1260:	fc 4f       	sbci	r31, 0xFC	; 252
    1262:	90 81       	ld	r25, Z
    1264:	9c 93       	st	X, r25
		start = (start + 1) & RX_SIZE_BIN;
    1266:	8f 5f       	subi	r24, 0xFF	; 255
    1268:	8f 71       	andi	r24, 0x1F	; 31
		i++;
    126a:	1f 5f       	subi	r17, 0xFF	; 255
	}

	i=0;

	// Assign rX string to command
	while (start!=stop)
    126c:	68 13       	cpse	r22, r24
    126e:	ef cf       	rjmp	.-34     	; 0x124e <ProcessString+0x46>
    1270:	01 c0       	rjmp	.+2      	; 0x1274 <ProcessString+0x6c>
    1272:	10 e0       	ldi	r17, 0x00	; 0
	}

	char * rest;
	char * begining;

	begining = strtok_r(string, " ", &rest);
    1274:	ae 01       	movw	r20, r28
    1276:	4f 5d       	subi	r20, 0xDF	; 223
    1278:	5f 4f       	sbci	r21, 0xFF	; 255
    127a:	6f e4       	ldi	r22, 0x4F	; 79
    127c:	71 e0       	ldi	r23, 0x01	; 1
    127e:	ce 01       	movw	r24, r28
    1280:	01 96       	adiw	r24, 0x01	; 1
    1282:	0e 94 30 11 	call	0x2260	; 0x2260 <strtok_r>
    1286:	5c 01       	movw	r10, r24

	uint8_t j;
	uint8_t command_length;
	uint8_t string_length = strlen(begining);
    1288:	fc 01       	movw	r30, r24
    128a:	01 90       	ld	r0, Z+
    128c:	00 20       	and	r0, r0
    128e:	e9 f7       	brne	.-6      	; 0x128a <ProcessString+0x82>
    1290:	31 97       	sbiw	r30, 0x01	; 1
    1292:	6e 2e       	mov	r6, r30
    1294:	68 1a       	sub	r6, r24
    1296:	0f 2e       	mov	r0, r31
    1298:	fe ee       	ldi	r31, 0xEE	; 238
    129a:	ef 2e       	mov	r14, r31
    129c:	f1 e0       	ldi	r31, 0x01	; 1
    129e:	ff 2e       	mov	r15, r31
    12a0:	f0 2d       	mov	r31, r0
    12a2:	c1 2c       	mov	r12, r1
    12a4:	d1 2c       	mov	r13, r1
	for (j=0; j < RX_COMMANDS; j++)
    12a6:	00 e0       	ldi	r16, 0x00	; 0
	{
		command_length = strlen_P(ER_commands[j].command);
		
		if (command_length == string_length)
		{
			if (0 == strncasecmp_P(begining, ER_commands[j].command, i))
    12a8:	81 2e       	mov	r8, r17
    12aa:	91 2c       	mov	r9, r1
#else
extern size_t __strlen_P(const char *) __ATTR_CONST__;  /* internal helper function */
__attribute__((__always_inline__)) static __inline__ size_t strlen_P(const char * s);
static __inline__ size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
    12ac:	c7 01       	movw	r24, r14
    12ae:	0e 94 0f 11 	call	0x221e	; 0x221e <__strlen_P>
	uint8_t string_length = strlen(begining);
	for (j=0; j < RX_COMMANDS; j++)
	{
		command_length = strlen_P(ER_commands[j].command);
		
		if (command_length == string_length)
    12b2:	68 12       	cpse	r6, r24
    12b4:	18 c0       	rjmp	.+48     	; 0x12e6 <ProcessString+0xde>
		{
			if (0 == strncasecmp_P(begining, ER_commands[j].command, i))
    12b6:	a4 01       	movw	r20, r8
    12b8:	b7 01       	movw	r22, r14
    12ba:	c5 01       	movw	r24, r10
    12bc:	0e 94 18 11 	call	0x2230	; 0x2230 <strncasecmp_P>
    12c0:	89 2b       	or	r24, r25
    12c2:	89 f4       	brne	.+34     	; 0x12e6 <ProcessString+0xde>
			{
				_er_srv = (void *)pgm_read_word(&ER_commands[j].ER_service);
    12c4:	86 e1       	ldi	r24, 0x16	; 22
    12c6:	8c 9d       	mul	r24, r12
    12c8:	f0 01       	movw	r30, r0
    12ca:	8d 9d       	mul	r24, r13
    12cc:	f0 0d       	add	r31, r0
    12ce:	11 24       	eor	r1, r1
    12d0:	ee 5f       	subi	r30, 0xFE	; 254
    12d2:	fd 4f       	sbci	r31, 0xFD	; 253
    12d4:	25 91       	lpm	r18, Z+
    12d6:	34 91       	lpm	r19, Z
				_er_srv(rest);
    12d8:	89 a1       	ldd	r24, Y+33	; 0x21
    12da:	9a a1       	ldd	r25, Y+34	; 0x22
    12dc:	f9 01       	movw	r30, r18
    12de:	09 95       	icall
				break;
			}
		}
	}
	if (j==RX_COMMANDS)
    12e0:	03 30       	cpi	r16, 0x03	; 3
    12e2:	a1 f4       	brne	.+40     	; 0x130c <ProcessString+0x104>
    12e4:	09 c0       	rjmp	.+18     	; 0x12f8 <ProcessString+0xf0>
	begining = strtok_r(string, " ", &rest);

	uint8_t j;
	uint8_t command_length;
	uint8_t string_length = strlen(begining);
	for (j=0; j < RX_COMMANDS; j++)
    12e6:	0f 5f       	subi	r16, 0xFF	; 255
    12e8:	ff ef       	ldi	r31, 0xFF	; 255
    12ea:	cf 1a       	sub	r12, r31
    12ec:	df 0a       	sbc	r13, r31
    12ee:	86 e1       	ldi	r24, 0x16	; 22
    12f0:	e8 0e       	add	r14, r24
    12f2:	f1 1c       	adc	r15, r1
    12f4:	03 30       	cpi	r16, 0x03	; 3
    12f6:	d1 f6       	brne	.-76     	; 0x12ac <ProcessString+0xa4>
			}
		}
	}
	if (j==RX_COMMANDS)
	{
		SendString("Wrong command: ");
    12f8:	81 e4       	ldi	r24, 0x41	; 65
    12fa:	91 e0       	ldi	r25, 0x01	; 1
    12fc:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <SendString>
		SendString(string);
    1300:	ce 01       	movw	r24, r28
    1302:	01 96       	adiw	r24, 0x01	; 1
    1304:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <SendString>
		SendEnter();
    1308:	0e 94 89 0c 	call	0x1912	; 0x1912 <SendEnter>
	}
		
}
    130c:	a2 96       	adiw	r28, 0x22	; 34
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	f8 94       	cli
    1312:	de bf       	out	0x3e, r29	; 62
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	cd bf       	out	0x3d, r28	; 61
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	1f 91       	pop	r17
    131e:	0f 91       	pop	r16
    1320:	ff 90       	pop	r15
    1322:	ef 90       	pop	r14
    1324:	df 90       	pop	r13
    1326:	cf 90       	pop	r12
    1328:	bf 90       	pop	r11
    132a:	af 90       	pop	r10
    132c:	9f 90       	pop	r9
    132e:	8f 90       	pop	r8
    1330:	6f 90       	pop	r6
    1332:	5f 90       	pop	r5
    1334:	4f 90       	pop	r4
    1336:	08 95       	ret

00001338 <test>:
		}
	}
}

void test(void)
{
    1338:	8f 92       	push	r8
    133a:	9f 92       	push	r9
    133c:	af 92       	push	r10
    133e:	bf 92       	push	r11
    1340:	cf 92       	push	r12
    1342:	df 92       	push	r13
    1344:	ef 92       	push	r14
    1346:	ff 92       	push	r15
    1348:	0f 93       	push	r16
    134a:	1f 93       	push	r17
    134c:	cf 93       	push	r28
    134e:	df 93       	push	r29
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	64 97       	sbiw	r28, 0x14	; 20
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	de bf       	out	0x3e, r29	; 62
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	cd bf       	out	0x3d, r28	; 61
	test_counter = 25;
    1360:	89 e1       	ldi	r24, 0x19	; 25
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <test_counter+0x1>
    1368:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <test_counter>
	int16_t gyro[3], acc[3];
	if (SamplesGyroBuf())
    136c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <SamplesGyroBuf>
    1370:	88 23       	and	r24, r24
    1372:	21 f0       	breq	.+8      	; 0x137c <test+0x44>
		ReadGyroBufAveraged(gyro);
    1374:	ce 01       	movw	r24, r28
    1376:	01 96       	adiw	r24, 0x01	; 1
    1378:	0e 94 13 03 	call	0x626	; 0x626 <ReadGyroBufAveraged>

	if (SamplesAccBuf())
    137c:	0e 94 04 02 	call	0x408	; 0x408 <SamplesAccBuf>
    1380:	88 23       	and	r24, r24
    1382:	21 f0       	breq	.+8      	; 0x138c <test+0x54>
		ReadAccBufAveraged(acc);
    1384:	ce 01       	movw	r24, r28
    1386:	07 96       	adiw	r24, 0x07	; 7
    1388:	0e 94 0d 04 	call	0x81a	; 0x81a <ReadAccBufAveraged>
	
	double x_pos_acc = ProcessAngle(acc[Y_AXIS], acc[Z_AXIS]);
    138c:	6b 85       	ldd	r22, Y+11	; 0x0b
    138e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1390:	89 85       	ldd	r24, Y+9	; 0x09
    1392:	9a 85       	ldd	r25, Y+10	; 0x0a
    1394:	0e 94 37 04 	call	0x86e	; 0x86e <ProcessAngle>
    1398:	4b 01       	movw	r8, r22
    139a:	5c 01       	movw	r10, r24
	double y_pos_acc = (ProcessAngle(acc[X_AXIS], acc[Z_AXIS]) * (-1));
    139c:	6b 85       	ldd	r22, Y+11	; 0x0b
    139e:	7c 85       	ldd	r23, Y+12	; 0x0c
    13a0:	8f 81       	ldd	r24, Y+7	; 0x07
    13a2:	98 85       	ldd	r25, Y+8	; 0x08
    13a4:	0e 94 37 04 	call	0x86e	; 0x86e <ProcessAngle>
    13a8:	6b 01       	movw	r12, r22
    13aa:	7c 01       	movw	r14, r24

	char text[8];

	dtostrf(x_pos_acc, 0, 3, text);
    13ac:	8e 01       	movw	r16, r28
    13ae:	03 5f       	subi	r16, 0xF3	; 243
    13b0:	1f 4f       	sbci	r17, 0xFF	; 255
    13b2:	23 e0       	ldi	r18, 0x03	; 3
    13b4:	40 e0       	ldi	r20, 0x00	; 0
    13b6:	c5 01       	movw	r24, r10
    13b8:	b4 01       	movw	r22, r8
    13ba:	0e 94 ef 10 	call	0x21de	; 0x21de <dtostrf>
	SendString("P ");
    13be:	81 e5       	ldi	r24, 0x51	; 81
    13c0:	91 e0       	ldi	r25, 0x01	; 1
    13c2:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <SendString>
	SendString(text);
    13c6:	c8 01       	movw	r24, r16
    13c8:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <SendString>
	
	dtostrf(y_pos_acc, 0, 3, text);
    13cc:	c7 01       	movw	r24, r14
    13ce:	b6 01       	movw	r22, r12
    13d0:	90 58       	subi	r25, 0x80	; 128
    13d2:	23 e0       	ldi	r18, 0x03	; 3
    13d4:	40 e0       	ldi	r20, 0x00	; 0
    13d6:	0e 94 ef 10 	call	0x21de	; 0x21de <dtostrf>
	SendString(" ");
    13da:	8f e4       	ldi	r24, 0x4F	; 79
    13dc:	91 e0       	ldi	r25, 0x01	; 1
    13de:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <SendString>
	SendLine(text);
    13e2:	c8 01       	movw	r24, r16
    13e4:	0e 94 90 0c 	call	0x1920	; 0x1920 <SendLine>
}
    13e8:	64 96       	adiw	r28, 0x14	; 20
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	ff 90       	pop	r15
    13fe:	ef 90       	pop	r14
    1400:	df 90       	pop	r13
    1402:	cf 90       	pop	r12
    1404:	bf 90       	pop	r11
    1406:	af 90       	pop	r10
    1408:	9f 90       	pop	r9
    140a:	8f 90       	pop	r8
    140c:	08 95       	ret

0000140e <InitCommonTimer>:
	{&test_counter, test},
};

void InitCommonTimer(void)
{
	TIMSK0 |= (1<<TOIE0);			//Overflow interupt enable
    140e:	ee e6       	ldi	r30, 0x6E	; 110
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	81 60       	ori	r24, 0x01	; 1
    1416:	80 83       	st	Z, r24
	TCCR0B |= (1<<CS01)| (1<<CS00);	//Prescaler 64
    1418:	85 b5       	in	r24, 0x25	; 37
    141a:	83 60       	ori	r24, 0x03	; 3
    141c:	85 bd       	out	0x25, r24	; 37
    141e:	08 95       	ret

00001420 <CheckCommonTimer>:
void CheckCommonTimer(void)
{
	uint8_t i;
	for (i=0; i<COMMON_TIMERS;i++)
	{
		if (*decrement_common[i].counter == 0)
    1420:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1424:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1428:	80 81       	ld	r24, Z
    142a:	91 81       	ldd	r25, Z+1	; 0x01
    142c:	89 2b       	or	r24, r25
    142e:	29 f4       	brne	.+10     	; 0x143a <CheckCommonTimer+0x1a>
		{
			decrement_common[i].timer_service();
    1430:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_start+0x2>
    1434:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_start+0x3>
    1438:	09 95       	icall
    143a:	08 95       	ret

0000143c <__vector_16>:
	SendString(" ");
	SendLine(text);
}

ISR (TIMER0_OVF_vect)	//each 1,024ms
{
    143c:	1f 92       	push	r1
    143e:	0f 92       	push	r0
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	0f 92       	push	r0
    1444:	11 24       	eor	r1, r1
    1446:	2f 93       	push	r18
    1448:	8f 93       	push	r24
    144a:	9f 93       	push	r25
    144c:	ef 93       	push	r30
    144e:	ff 93       	push	r31
	uint8_t i;
	for (i=0; i<COMMON_TIMERS;i++)
	{
		if (*decrement_common[i].counter != 0 && *decrement_common[i].counter != 0xFFFF)
    1450:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1454:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1458:	80 81       	ld	r24, Z
    145a:	91 81       	ldd	r25, Z+1	; 0x01
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	8e 3f       	cpi	r24, 0xFE	; 254
    1460:	2f ef       	ldi	r18, 0xFF	; 255
    1462:	92 07       	cpc	r25, r18
    1464:	10 f4       	brcc	.+4      	; 0x146a <__vector_16+0x2e>
		{
			*decrement_common[i].counter = *decrement_common[i].counter - 1;
    1466:	91 83       	std	Z+1, r25	; 0x01
    1468:	80 83       	st	Z, r24
		}
	}
    146a:	ff 91       	pop	r31
    146c:	ef 91       	pop	r30
    146e:	9f 91       	pop	r25
    1470:	8f 91       	pop	r24
    1472:	2f 91       	pop	r18
    1474:	0f 90       	pop	r0
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	0f 90       	pop	r0
    147a:	1f 90       	pop	r1
    147c:	18 95       	reti

0000147e <__vector_24>:
void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
}

ISR (TWI0_vect)	//TWI finished vector
{	//TWI interrupt
    147e:	1f 92       	push	r1
    1480:	0f 92       	push	r0
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	0f 92       	push	r0
    1486:	11 24       	eor	r1, r1
    1488:	2f 93       	push	r18
    148a:	3f 93       	push	r19
    148c:	4f 93       	push	r20
    148e:	5f 93       	push	r21
    1490:	8f 93       	push	r24
    1492:	9f 93       	push	r25
    1494:	af 93       	push	r26
    1496:	bf 93       	push	r27
    1498:	ef 93       	push	r30
    149a:	ff 93       	push	r31

	uint8_t SLA = ((uint8_t)twi_bufor[twi_buf_pos.tail].sla << 1);
    149c:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <twi_buf_pos>
    14a0:	e6 95       	lsr	r30
    14a2:	e6 95       	lsr	r30
    14a4:	e6 95       	lsr	r30
    14a6:	e7 70       	andi	r30, 0x07	; 7
    14a8:	4e 2f       	mov	r20, r30
    14aa:	50 e0       	ldi	r21, 0x00	; 0
    14ac:	84 e1       	ldi	r24, 0x14	; 20
    14ae:	e8 9f       	mul	r30, r24
    14b0:	f0 01       	movw	r30, r0
    14b2:	11 24       	eor	r1, r1
    14b4:	ee 58       	subi	r30, 0x8E	; 142
    14b6:	fd 4f       	sbci	r31, 0xFD	; 253
    14b8:	80 81       	ld	r24, Z
    14ba:	28 2f       	mov	r18, r24
    14bc:	2e 7f       	andi	r18, 0xFE	; 254
	uint8_t REG = twi_bufor[twi_buf_pos.tail].reg;
	
	switch (twi_bufor[twi_buf_pos.tail].status){
    14be:	e3 89       	ldd	r30, Z+19	; 0x13
    14c0:	8e 2f       	mov	r24, r30
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	fc 01       	movw	r30, r24
    14c6:	34 97       	sbiw	r30, 0x04	; 4
    14c8:	e9 30       	cpi	r30, 0x09	; 9
    14ca:	f1 05       	cpc	r31, r1
    14cc:	08 f0       	brcs	.+2      	; 0x14d0 <__vector_24+0x52>
    14ce:	e4 c1       	rjmp	.+968    	; 0x1898 <__vector_24+0x41a>
    14d0:	e6 5a       	subi	r30, 0xA6	; 166
    14d2:	ff 4f       	sbci	r31, 0xFF	; 255
    14d4:	0c 94 a5 10 	jmp	0x214a	; 0x214a <__tablejump2__>
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    14d8:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    14dc:	85 e8       	ldi	r24, 0x85	; 133
    14de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	uint8_t REG = twi_bufor[twi_buf_pos.tail].reg;
	
	switch (twi_bufor[twi_buf_pos.tail].status){
		case start:
			TWI_write(SLA);
			twi_bufor[twi_buf_pos.tail].status = write_adress;
    14e2:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <twi_buf_pos>
    14e6:	e6 95       	lsr	r30
    14e8:	e6 95       	lsr	r30
    14ea:	e6 95       	lsr	r30
    14ec:	e7 70       	andi	r30, 0x07	; 7
    14ee:	84 e1       	ldi	r24, 0x14	; 20
    14f0:	e8 9f       	mul	r30, r24
    14f2:	f0 01       	movw	r30, r0
    14f4:	11 24       	eor	r1, r1
    14f6:	ee 58       	subi	r30, 0x8E	; 142
    14f8:	fd 4f       	sbci	r31, 0xFD	; 253
    14fa:	85 e0       	ldi	r24, 0x05	; 5
    14fc:	83 8b       	std	Z+19, r24	; 0x13
			break;
    14fe:	cc c1       	rjmp	.+920    	; 0x1898 <__vector_24+0x41a>

ISR (TWI0_vect)	//TWI finished vector
{	//TWI interrupt

	uint8_t SLA = ((uint8_t)twi_bufor[twi_buf_pos.tail].sla << 1);
	uint8_t REG = twi_bufor[twi_buf_pos.tail].reg;
    1500:	84 e1       	ldi	r24, 0x14	; 20
    1502:	84 9f       	mul	r24, r20
    1504:	f0 01       	movw	r30, r0
    1506:	85 9f       	mul	r24, r21
    1508:	f0 0d       	add	r31, r0
    150a:	11 24       	eor	r1, r1
    150c:	ee 58       	subi	r30, 0x8E	; 142
    150e:	fd 4f       	sbci	r31, 0xFD	; 253
    1510:	91 81       	ldd	r25, Z+1	; 0x01
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    1512:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    1516:	95 e8       	ldi	r25, 0x85	; 133
    1518:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			twi_bufor[twi_buf_pos.tail].status = write_adress;
			break;

		case write_adress:
			TWI_write(REG);
			twi_bufor[twi_buf_pos.tail].status = write_register;
    151c:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <twi_buf_pos>
    1520:	e6 95       	lsr	r30
    1522:	e6 95       	lsr	r30
    1524:	e6 95       	lsr	r30
    1526:	e7 70       	andi	r30, 0x07	; 7
    1528:	8e 9f       	mul	r24, r30
    152a:	f0 01       	movw	r30, r0
    152c:	11 24       	eor	r1, r1
    152e:	ee 58       	subi	r30, 0x8E	; 142
    1530:	fd 4f       	sbci	r31, 0xFD	; 253
    1532:	86 e0       	ldi	r24, 0x06	; 6
    1534:	83 8b       	std	Z+19, r24	; 0x13
			break;
    1536:	b0 c1       	rjmp	.+864    	; 0x1898 <__vector_24+0x41a>

		case write_register:
			if (twi_bufor[twi_buf_pos.tail].read)	//check if reading is required
    1538:	84 e1       	ldi	r24, 0x14	; 20
    153a:	84 9f       	mul	r24, r20
    153c:	f0 01       	movw	r30, r0
    153e:	85 9f       	mul	r24, r21
    1540:	f0 0d       	add	r31, r0
    1542:	11 24       	eor	r1, r1
    1544:	ee 58       	subi	r30, 0x8E	; 142
    1546:	fd 4f       	sbci	r31, 0xFD	; 253
    1548:	80 81       	ld	r24, Z
    154a:	80 ff       	sbrs	r24, 0
    154c:	12 c0       	rjmp	.+36     	; 0x1572 <__vector_24+0xf4>
}

//low level functions

void TWI_start(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA)|(1<<TWIE);
    154e:	85 ea       	ldi	r24, 0xA5	; 165
    1550:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

		case write_register:
			if (twi_bufor[twi_buf_pos.tail].read)	//check if reading is required
			{
				TWI_start();
				twi_bufor[twi_buf_pos.tail].status = restart;
    1554:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <twi_buf_pos>
    1558:	e6 95       	lsr	r30
    155a:	e6 95       	lsr	r30
    155c:	e6 95       	lsr	r30
    155e:	e7 70       	andi	r30, 0x07	; 7
    1560:	84 e1       	ldi	r24, 0x14	; 20
    1562:	e8 9f       	mul	r30, r24
    1564:	f0 01       	movw	r30, r0
    1566:	11 24       	eor	r1, r1
    1568:	ee 58       	subi	r30, 0x8E	; 142
    156a:	fd 4f       	sbci	r31, 0xFD	; 253
    156c:	87 e0       	ldi	r24, 0x07	; 7
    156e:	83 8b       	std	Z+19, r24	; 0x13
    1570:	93 c1       	rjmp	.+806    	; 0x1898 <__vector_24+0x41a>
			}
			else	//process writing
			{
				if (twi_bufor[twi_buf_pos.tail].lenght > 1){	//if more than 1 char to write
    1572:	84 e1       	ldi	r24, 0x14	; 20
    1574:	84 9f       	mul	r24, r20
    1576:	f0 01       	movw	r30, r0
    1578:	85 9f       	mul	r24, r21
    157a:	f0 0d       	add	r31, r0
    157c:	11 24       	eor	r1, r1
    157e:	ee 58       	subi	r30, 0x8E	; 142
    1580:	fd 4f       	sbci	r31, 0xFD	; 253
    1582:	87 85       	ldd	r24, Z+15	; 0x0f
    1584:	82 30       	cpi	r24, 0x02	; 2
    1586:	e8 f0       	brcs	.+58     	; 0x15c2 <__vector_24+0x144>
					TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
    1588:	84 e1       	ldi	r24, 0x14	; 20
    158a:	84 9f       	mul	r24, r20
    158c:	f0 01       	movw	r30, r0
    158e:	85 9f       	mul	r24, r21
    1590:	f0 0d       	add	r31, r0
    1592:	11 24       	eor	r1, r1
    1594:	ee 58       	subi	r30, 0x8E	; 142
    1596:	fd 4f       	sbci	r31, 0xFD	; 253
    1598:	92 81       	ldd	r25, Z+2	; 0x02
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    159a:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    159e:	95 e8       	ldi	r25, 0x85	; 133
    15a0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			}
			else	//process writing
			{
				if (twi_bufor[twi_buf_pos.tail].lenght > 1){	//if more than 1 char to write
					TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
					twi_bufor[twi_buf_pos.tail].status = write;
    15a4:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <twi_buf_pos>
    15a8:	e6 95       	lsr	r30
    15aa:	e6 95       	lsr	r30
    15ac:	e6 95       	lsr	r30
    15ae:	e7 70       	andi	r30, 0x07	; 7
    15b0:	8e 9f       	mul	r24, r30
    15b2:	f0 01       	movw	r30, r0
    15b4:	11 24       	eor	r1, r1
    15b6:	ee 58       	subi	r30, 0x8E	; 142
    15b8:	fd 4f       	sbci	r31, 0xFD	; 253
    15ba:	8b e0       	ldi	r24, 0x0B	; 11
    15bc:	83 8b       	std	Z+19, r24	; 0x13
					twi_bufor[twi_buf_pos.tail].buf_pos = 0;
    15be:	14 86       	std	Z+12, r1	; 0x0c
    15c0:	1b c0       	rjmp	.+54     	; 0x15f8 <__vector_24+0x17a>
				}

				else {	//only 1 byte to send
					TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
    15c2:	84 e1       	ldi	r24, 0x14	; 20
    15c4:	84 9f       	mul	r24, r20
    15c6:	f0 01       	movw	r30, r0
    15c8:	85 9f       	mul	r24, r21
    15ca:	f0 0d       	add	r31, r0
    15cc:	11 24       	eor	r1, r1
    15ce:	ee 58       	subi	r30, 0x8E	; 142
    15d0:	fd 4f       	sbci	r31, 0xFD	; 253
    15d2:	92 81       	ldd	r25, Z+2	; 0x02
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    15d4:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    15d8:	95 e8       	ldi	r25, 0x85	; 133
    15da:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
					twi_bufor[twi_buf_pos.tail].buf_pos = 0;
				}

				else {	//only 1 byte to send
					TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
					twi_bufor[twi_buf_pos.tail].status = last_byte_write;
    15de:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <twi_buf_pos>
    15e2:	e6 95       	lsr	r30
    15e4:	e6 95       	lsr	r30
    15e6:	e6 95       	lsr	r30
    15e8:	e7 70       	andi	r30, 0x07	; 7
    15ea:	8e 9f       	mul	r24, r30
    15ec:	f0 01       	movw	r30, r0
    15ee:	11 24       	eor	r1, r1
    15f0:	ee 58       	subi	r30, 0x8E	; 142
    15f2:	fd 4f       	sbci	r31, 0xFD	; 253
    15f4:	8c e0       	ldi	r24, 0x0C	; 12
    15f6:	83 8b       	std	Z+19, r24	; 0x13
				}
				twi_bufor[twi_buf_pos.tail].lenght --;
    15f8:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <twi_buf_pos>
    15fc:	e6 95       	lsr	r30
    15fe:	e6 95       	lsr	r30
    1600:	e6 95       	lsr	r30
    1602:	e7 70       	andi	r30, 0x07	; 7
    1604:	84 e1       	ldi	r24, 0x14	; 20
    1606:	e8 9f       	mul	r30, r24
    1608:	f0 01       	movw	r30, r0
    160a:	11 24       	eor	r1, r1
    160c:	ee 58       	subi	r30, 0x8E	; 142
    160e:	fd 4f       	sbci	r31, 0xFD	; 253
    1610:	87 85       	ldd	r24, Z+15	; 0x0f
    1612:	81 50       	subi	r24, 0x01	; 1
    1614:	87 87       	std	Z+15, r24	; 0x0f
    1616:	40 c1       	rjmp	.+640    	; 0x1898 <__vector_24+0x41a>
			}
			break;

		case restart:
			SLA++;
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	82 0f       	add	r24, r18
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    161c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    1620:	85 e8       	ldi	r24, 0x85	; 133
    1622:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;

		case restart:
			SLA++;
			TWI_write(SLA);
			twi_bufor[twi_buf_pos.tail].status = set_to_read;
    1626:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <twi_buf_pos>
    162a:	e6 95       	lsr	r30
    162c:	e6 95       	lsr	r30
    162e:	e6 95       	lsr	r30
    1630:	e7 70       	andi	r30, 0x07	; 7
    1632:	84 e1       	ldi	r24, 0x14	; 20
    1634:	e8 9f       	mul	r30, r24
    1636:	f0 01       	movw	r30, r0
    1638:	11 24       	eor	r1, r1
    163a:	ee 58       	subi	r30, 0x8E	; 142
    163c:	fd 4f       	sbci	r31, 0xFD	; 253
    163e:	88 e0       	ldi	r24, 0x08	; 8
    1640:	83 8b       	std	Z+19, r24	; 0x13
			break;
    1642:	2a c1       	rjmp	.+596    	; 0x1898 <__vector_24+0x41a>

		case set_to_read:
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){
    1644:	84 e1       	ldi	r24, 0x14	; 20
    1646:	84 9f       	mul	r24, r20
    1648:	f0 01       	movw	r30, r0
    164a:	85 9f       	mul	r24, r21
    164c:	f0 0d       	add	r31, r0
    164e:	11 24       	eor	r1, r1
    1650:	ee 58       	subi	r30, 0x8E	; 142
    1652:	fd 4f       	sbci	r31, 0xFD	; 253
    1654:	87 85       	ldd	r24, Z+15	; 0x0f
    1656:	82 30       	cpi	r24, 0x02	; 2
    1658:	90 f0       	brcs	.+36     	; 0x167e <__vector_24+0x200>
	TWDR0 = bajt;
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
}

void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
    165a:	85 ec       	ldi	r24, 0xC5	; 197
    165c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;

		case set_to_read:
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){
				TWI_read(ACK);
				twi_bufor[twi_buf_pos.tail].status = read;
    1660:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <twi_buf_pos>
    1664:	e6 95       	lsr	r30
    1666:	e6 95       	lsr	r30
    1668:	e6 95       	lsr	r30
    166a:	e7 70       	andi	r30, 0x07	; 7
    166c:	84 e1       	ldi	r24, 0x14	; 20
    166e:	e8 9f       	mul	r30, r24
    1670:	f0 01       	movw	r30, r0
    1672:	11 24       	eor	r1, r1
    1674:	ee 58       	subi	r30, 0x8E	; 142
    1676:	fd 4f       	sbci	r31, 0xFD	; 253
    1678:	89 e0       	ldi	r24, 0x09	; 9
    167a:	83 8b       	std	Z+19, r24	; 0x13
    167c:	11 c0       	rjmp	.+34     	; 0x16a0 <__vector_24+0x222>
	TWDR0 = bajt;
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
}

void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
    167e:	85 e8       	ldi	r24, 0x85	; 133
    1680:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

			}
			
			else{
				TWI_read(NACK);
				twi_bufor[twi_buf_pos.tail].status = stop_reading;
    1684:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <twi_buf_pos>
    1688:	e6 95       	lsr	r30
    168a:	e6 95       	lsr	r30
    168c:	e6 95       	lsr	r30
    168e:	e7 70       	andi	r30, 0x07	; 7
    1690:	84 e1       	ldi	r24, 0x14	; 20
    1692:	e8 9f       	mul	r30, r24
    1694:	f0 01       	movw	r30, r0
    1696:	11 24       	eor	r1, r1
    1698:	ee 58       	subi	r30, 0x8E	; 142
    169a:	fd 4f       	sbci	r31, 0xFD	; 253
    169c:	8a e0       	ldi	r24, 0x0A	; 10
    169e:	83 8b       	std	Z+19, r24	; 0x13
			}

			twi_bufor[twi_buf_pos.tail].lenght --;
    16a0:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <twi_buf_pos>
    16a4:	e6 95       	lsr	r30
    16a6:	e6 95       	lsr	r30
    16a8:	e6 95       	lsr	r30
    16aa:	e7 70       	andi	r30, 0x07	; 7
    16ac:	84 e1       	ldi	r24, 0x14	; 20
    16ae:	e8 9f       	mul	r30, r24
    16b0:	f0 01       	movw	r30, r0
    16b2:	11 24       	eor	r1, r1
    16b4:	ee 58       	subi	r30, 0x8E	; 142
    16b6:	fd 4f       	sbci	r31, 0xFD	; 253
    16b8:	87 85       	ldd	r24, Z+15	; 0x0f
    16ba:	81 50       	subi	r24, 0x01	; 1
    16bc:	87 87       	std	Z+15, r24	; 0x0f
			break;
    16be:	ec c0       	rjmp	.+472    	; 0x1898 <__vector_24+0x41a>

		case read:
			*twi_bufor[twi_buf_pos.tail].bufor_ref++ = TWDR0;	//read received byte
    16c0:	84 e1       	ldi	r24, 0x14	; 20
    16c2:	84 9f       	mul	r24, r20
    16c4:	f0 01       	movw	r30, r0
    16c6:	85 9f       	mul	r24, r21
    16c8:	f0 0d       	add	r31, r0
    16ca:	11 24       	eor	r1, r1
    16cc:	ee 58       	subi	r30, 0x8E	; 142
    16ce:	fd 4f       	sbci	r31, 0xFD	; 253
    16d0:	a5 85       	ldd	r26, Z+13	; 0x0d
    16d2:	b6 85       	ldd	r27, Z+14	; 0x0e
    16d4:	9d 01       	movw	r18, r26
    16d6:	2f 5f       	subi	r18, 0xFF	; 255
    16d8:	3f 4f       	sbci	r19, 0xFF	; 255
    16da:	36 87       	std	Z+14, r19	; 0x0e
    16dc:	25 87       	std	Z+13, r18	; 0x0d
    16de:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    16e2:	9c 93       	st	X, r25
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){
    16e4:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <twi_buf_pos>
    16e8:	e6 95       	lsr	r30
    16ea:	e6 95       	lsr	r30
    16ec:	e6 95       	lsr	r30
    16ee:	e7 70       	andi	r30, 0x07	; 7
    16f0:	8e 9f       	mul	r24, r30
    16f2:	f0 01       	movw	r30, r0
    16f4:	11 24       	eor	r1, r1
    16f6:	ee 58       	subi	r30, 0x8E	; 142
    16f8:	fd 4f       	sbci	r31, 0xFD	; 253
    16fa:	87 85       	ldd	r24, Z+15	; 0x0f
    16fc:	82 30       	cpi	r24, 0x02	; 2
    16fe:	90 f0       	brcs	.+36     	; 0x1724 <__vector_24+0x2a6>
	TWDR0 = bajt;
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
}

void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
    1700:	85 ec       	ldi	r24, 0xC5	; 197
    1702:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

		case read:
			*twi_bufor[twi_buf_pos.tail].bufor_ref++ = TWDR0;	//read received byte
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){
				TWI_read(ACK);	//going to read more
				twi_bufor[twi_buf_pos.tail].status = read;
    1706:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <twi_buf_pos>
    170a:	e6 95       	lsr	r30
    170c:	e6 95       	lsr	r30
    170e:	e6 95       	lsr	r30
    1710:	e7 70       	andi	r30, 0x07	; 7
    1712:	84 e1       	ldi	r24, 0x14	; 20
    1714:	e8 9f       	mul	r30, r24
    1716:	f0 01       	movw	r30, r0
    1718:	11 24       	eor	r1, r1
    171a:	ee 58       	subi	r30, 0x8E	; 142
    171c:	fd 4f       	sbci	r31, 0xFD	; 253
    171e:	89 e0       	ldi	r24, 0x09	; 9
    1720:	83 8b       	std	Z+19, r24	; 0x13
    1722:	11 c0       	rjmp	.+34     	; 0x1746 <__vector_24+0x2c8>
	TWDR0 = bajt;
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
}

void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
    1724:	85 e8       	ldi	r24, 0x85	; 133
    1726:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				TWI_read(ACK);	//going to read more
				twi_bufor[twi_buf_pos.tail].status = read;
			}
			else{
				TWI_read(NACK);	//finishing reading
				twi_bufor[twi_buf_pos.tail].status = stop_reading;
    172a:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <twi_buf_pos>
    172e:	e6 95       	lsr	r30
    1730:	e6 95       	lsr	r30
    1732:	e6 95       	lsr	r30
    1734:	e7 70       	andi	r30, 0x07	; 7
    1736:	84 e1       	ldi	r24, 0x14	; 20
    1738:	e8 9f       	mul	r30, r24
    173a:	f0 01       	movw	r30, r0
    173c:	11 24       	eor	r1, r1
    173e:	ee 58       	subi	r30, 0x8E	; 142
    1740:	fd 4f       	sbci	r31, 0xFD	; 253
    1742:	8a e0       	ldi	r24, 0x0A	; 10
    1744:	83 8b       	std	Z+19, r24	; 0x13
			}
			twi_bufor[twi_buf_pos.tail].lenght --;
    1746:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <twi_buf_pos>
    174a:	e6 95       	lsr	r30
    174c:	e6 95       	lsr	r30
    174e:	e6 95       	lsr	r30
    1750:	e7 70       	andi	r30, 0x07	; 7
    1752:	84 e1       	ldi	r24, 0x14	; 20
    1754:	e8 9f       	mul	r30, r24
    1756:	f0 01       	movw	r30, r0
    1758:	11 24       	eor	r1, r1
    175a:	ee 58       	subi	r30, 0x8E	; 142
    175c:	fd 4f       	sbci	r31, 0xFD	; 253
    175e:	87 85       	ldd	r24, Z+15	; 0x0f
    1760:	81 50       	subi	r24, 0x01	; 1
    1762:	87 87       	std	Z+15, r24	; 0x0f
			break;
    1764:	99 c0       	rjmp	.+306    	; 0x1898 <__vector_24+0x41a>

		case stop_reading:
			*twi_bufor[twi_buf_pos.tail].bufor_ref++ = TWDR0;	//read last received byte
    1766:	84 e1       	ldi	r24, 0x14	; 20
    1768:	84 9f       	mul	r24, r20
    176a:	f0 01       	movw	r30, r0
    176c:	85 9f       	mul	r24, r21
    176e:	f0 0d       	add	r31, r0
    1770:	11 24       	eor	r1, r1
    1772:	ee 58       	subi	r30, 0x8E	; 142
    1774:	fd 4f       	sbci	r31, 0xFD	; 253
    1776:	a5 85       	ldd	r26, Z+13	; 0x0d
    1778:	b6 85       	ldd	r27, Z+14	; 0x0e
    177a:	9d 01       	movw	r18, r26
    177c:	2f 5f       	subi	r18, 0xFF	; 255
    177e:	3f 4f       	sbci	r19, 0xFF	; 255
    1780:	36 87       	std	Z+14, r19	; 0x0e
    1782:	25 87       	std	Z+13, r18	; 0x0d
    1784:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1788:	9c 93       	st	X, r25
			*twi_bufor[twi_buf_pos.tail].flag_register = twi_bufor[twi_buf_pos.tail].flag_mask;	//set read done flag
    178a:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <twi_buf_pos>
    178e:	e6 95       	lsr	r30
    1790:	e6 95       	lsr	r30
    1792:	e6 95       	lsr	r30
    1794:	e7 70       	andi	r30, 0x07	; 7
    1796:	8e 9f       	mul	r24, r30
    1798:	f0 01       	movw	r30, r0
    179a:	11 24       	eor	r1, r1
    179c:	ee 58       	subi	r30, 0x8E	; 142
    179e:	fd 4f       	sbci	r31, 0xFD	; 253
    17a0:	a0 89       	ldd	r26, Z+16	; 0x10
    17a2:	b1 89       	ldd	r27, Z+17	; 0x11
    17a4:	92 89       	ldd	r25, Z+18	; 0x12
    17a6:	9c 93       	st	X, r25
void TWI_start(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA)|(1<<TWIE);
}

void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
    17a8:	95 e9       	ldi	r25, 0x95	; 149
    17aa:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

		case stop_reading:
			*twi_bufor[twi_buf_pos.tail].bufor_ref++ = TWDR0;	//read last received byte
			*twi_bufor[twi_buf_pos.tail].flag_register = twi_bufor[twi_buf_pos.tail].flag_mask;	//set read done flag
			TWI_stop();
			twi_bufor[twi_buf_pos.tail].status = done;
    17ae:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <twi_buf_pos>
    17b2:	e6 95       	lsr	r30
    17b4:	e6 95       	lsr	r30
    17b6:	e6 95       	lsr	r30
    17b8:	e7 70       	andi	r30, 0x07	; 7
    17ba:	8e 9f       	mul	r24, r30
    17bc:	f0 01       	movw	r30, r0
    17be:	11 24       	eor	r1, r1
    17c0:	ee 58       	subi	r30, 0x8E	; 142
    17c2:	fd 4f       	sbci	r31, 0xFD	; 253
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	83 8b       	std	Z+19, r24	; 0x13
			break;
    17c8:	67 c0       	rjmp	.+206    	; 0x1898 <__vector_24+0x41a>

		case write:
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){	//if more than 1 char to write
    17ca:	84 e1       	ldi	r24, 0x14	; 20
    17cc:	84 9f       	mul	r24, r20
    17ce:	f0 01       	movw	r30, r0
    17d0:	85 9f       	mul	r24, r21
    17d2:	f0 0d       	add	r31, r0
    17d4:	11 24       	eor	r1, r1
    17d6:	ee 58       	subi	r30, 0x8E	; 142
    17d8:	fd 4f       	sbci	r31, 0xFD	; 253
    17da:	87 85       	ldd	r24, Z+15	; 0x0f
    17dc:	82 30       	cpi	r24, 0x02	; 2
    17de:	e8 f0       	brcs	.+58     	; 0x181a <__vector_24+0x39c>
				TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
    17e0:	84 e1       	ldi	r24, 0x14	; 20
    17e2:	84 9f       	mul	r24, r20
    17e4:	f0 01       	movw	r30, r0
    17e6:	85 9f       	mul	r24, r21
    17e8:	f0 0d       	add	r31, r0
    17ea:	11 24       	eor	r1, r1
    17ec:	ee 58       	subi	r30, 0x8E	; 142
    17ee:	fd 4f       	sbci	r31, 0xFD	; 253
    17f0:	92 81       	ldd	r25, Z+2	; 0x02
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    17f2:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    17f6:	95 e8       	ldi	r25, 0x85	; 133
    17f8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;

		case write:
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){	//if more than 1 char to write
				TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
				twi_bufor[twi_buf_pos.tail].status = write;
    17fc:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <twi_buf_pos>
    1800:	e6 95       	lsr	r30
    1802:	e6 95       	lsr	r30
    1804:	e6 95       	lsr	r30
    1806:	e7 70       	andi	r30, 0x07	; 7
    1808:	8e 9f       	mul	r24, r30
    180a:	f0 01       	movw	r30, r0
    180c:	11 24       	eor	r1, r1
    180e:	ee 58       	subi	r30, 0x8E	; 142
    1810:	fd 4f       	sbci	r31, 0xFD	; 253
    1812:	8b e0       	ldi	r24, 0x0B	; 11
    1814:	83 8b       	std	Z+19, r24	; 0x13
				twi_bufor[twi_buf_pos.tail].buf_pos = 0;
    1816:	14 86       	std	Z+12, r1	; 0x0c
    1818:	1b c0       	rjmp	.+54     	; 0x1850 <__vector_24+0x3d2>
			}

			else {	//only 1 byte to send
				TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
    181a:	84 e1       	ldi	r24, 0x14	; 20
    181c:	84 9f       	mul	r24, r20
    181e:	f0 01       	movw	r30, r0
    1820:	85 9f       	mul	r24, r21
    1822:	f0 0d       	add	r31, r0
    1824:	11 24       	eor	r1, r1
    1826:	ee 58       	subi	r30, 0x8E	; 142
    1828:	fd 4f       	sbci	r31, 0xFD	; 253
    182a:	92 81       	ldd	r25, Z+2	; 0x02
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    182c:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    1830:	95 e8       	ldi	r25, 0x85	; 133
    1832:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				twi_bufor[twi_buf_pos.tail].buf_pos = 0;
			}

			else {	//only 1 byte to send
				TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
				twi_bufor[twi_buf_pos.tail].status = last_byte_write;
    1836:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <twi_buf_pos>
    183a:	e6 95       	lsr	r30
    183c:	e6 95       	lsr	r30
    183e:	e6 95       	lsr	r30
    1840:	e7 70       	andi	r30, 0x07	; 7
    1842:	8e 9f       	mul	r24, r30
    1844:	f0 01       	movw	r30, r0
    1846:	11 24       	eor	r1, r1
    1848:	ee 58       	subi	r30, 0x8E	; 142
    184a:	fd 4f       	sbci	r31, 0xFD	; 253
    184c:	8c e0       	ldi	r24, 0x0C	; 12
    184e:	83 8b       	std	Z+19, r24	; 0x13
			}
			twi_bufor[twi_buf_pos.tail].lenght --;
    1850:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <twi_buf_pos>
    1854:	e6 95       	lsr	r30
    1856:	e6 95       	lsr	r30
    1858:	e6 95       	lsr	r30
    185a:	e7 70       	andi	r30, 0x07	; 7
    185c:	84 e1       	ldi	r24, 0x14	; 20
    185e:	e8 9f       	mul	r30, r24
    1860:	f0 01       	movw	r30, r0
    1862:	11 24       	eor	r1, r1
    1864:	ee 58       	subi	r30, 0x8E	; 142
    1866:	fd 4f       	sbci	r31, 0xFD	; 253
    1868:	87 85       	ldd	r24, Z+15	; 0x0f
    186a:	81 50       	subi	r24, 0x01	; 1
    186c:	87 87       	std	Z+15, r24	; 0x0f
			break;
    186e:	14 c0       	rjmp	.+40     	; 0x1898 <__vector_24+0x41a>
void TWI_start(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA)|(1<<TWIE);
}

void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
    1870:	85 e9       	ldi	r24, 0x95	; 149
    1872:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			twi_bufor[twi_buf_pos.tail].lenght --;
			break;

		case last_byte_write:
			TWI_stop();
			twi_bufor[twi_buf_pos.tail].status = done;
    1876:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <twi_buf_pos>
    187a:	e6 95       	lsr	r30
    187c:	e6 95       	lsr	r30
    187e:	e6 95       	lsr	r30
    1880:	e7 70       	andi	r30, 0x07	; 7
    1882:	84 e1       	ldi	r24, 0x14	; 20
    1884:	e8 9f       	mul	r30, r24
    1886:	f0 01       	movw	r30, r0
    1888:	11 24       	eor	r1, r1
    188a:	ee 58       	subi	r30, 0x8E	; 142
    188c:	fd 4f       	sbci	r31, 0xFD	; 253
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	83 8b       	std	Z+19, r24	; 0x13
			twi_reset_counter = 0xFF;	//turn of timer, sending procedure finished correctly
    1892:	8f ef       	ldi	r24, 0xFF	; 255
    1894:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <twi_reset_counter>

		default:

			break;
	}
    1898:	ff 91       	pop	r31
    189a:	ef 91       	pop	r30
    189c:	bf 91       	pop	r27
    189e:	af 91       	pop	r26
    18a0:	9f 91       	pop	r25
    18a2:	8f 91       	pop	r24
    18a4:	5f 91       	pop	r21
    18a6:	4f 91       	pop	r20
    18a8:	3f 91       	pop	r19
    18aa:	2f 91       	pop	r18
    18ac:	0f 90       	pop	r0
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	0f 90       	pop	r0
    18b2:	1f 90       	pop	r1
    18b4:	18 95       	reti

000018b6 <InitUartCOM>:
void SendStringUint(char string[], uint16_t number)
{
	SendString(string);
	SendUint(number);
	SendEnter();
}
    18b6:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <InitUartCOM_HW>
    18ba:	08 95       	ret

000018bc <ReceiveChar>:
    18bc:	88 23       	and	r24, r24
    18be:	91 f0       	breq	.+36     	; 0x18e4 <ReceiveChar+0x28>
    18c0:	8a 30       	cpi	r24, 0x0A	; 10
    18c2:	81 f0       	breq	.+32     	; 0x18e4 <ReceiveChar+0x28>
    18c4:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <RxHead>
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	ee 5e       	subi	r30, 0xEE	; 238
    18cc:	fc 4f       	sbci	r31, 0xFC	; 252
    18ce:	80 83       	st	Z, r24
    18d0:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <RxHead>
    18d4:	8f 5f       	subi	r24, 0xFF	; 255
    18d6:	8f 71       	andi	r24, 0x1F	; 31
    18d8:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <RxHead>
    18dc:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <RxHead>
    18e0:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <RxTail>
    18e4:	08 95       	ret

000018e6 <SendString>:
    18e6:	0f 93       	push	r16
    18e8:	1f 93       	push	r17
    18ea:	cf 93       	push	r28
    18ec:	fc 01       	movw	r30, r24
    18ee:	80 81       	ld	r24, Z
    18f0:	88 23       	and	r24, r24
    18f2:	59 f0       	breq	.+22     	; 0x190a <SendString+0x24>
    18f4:	8f 01       	movw	r16, r30
    18f6:	c0 e0       	ldi	r28, 0x00	; 0
    18f8:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <PutCharToBuffor>
    18fc:	cf 5f       	subi	r28, 0xFF	; 255
    18fe:	f8 01       	movw	r30, r16
    1900:	ec 0f       	add	r30, r28
    1902:	f1 1d       	adc	r31, r1
    1904:	80 81       	ld	r24, Z
    1906:	81 11       	cpse	r24, r1
    1908:	f7 cf       	rjmp	.-18     	; 0x18f8 <SendString+0x12>
    190a:	cf 91       	pop	r28
    190c:	1f 91       	pop	r17
    190e:	0f 91       	pop	r16
    1910:	08 95       	ret

00001912 <SendEnter>:
    1912:	8d e0       	ldi	r24, 0x0D	; 13
    1914:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <PutCharToBuffor>
    1918:	8a e0       	ldi	r24, 0x0A	; 10
    191a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <PutCharToBuffor>
    191e:	08 95       	ret

00001920 <SendLine>:
    1920:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <SendString>
    1924:	0e 94 89 0c 	call	0x1912	; 0x1912 <SendEnter>
    1928:	08 95       	ret

0000192a <SendInt>:
    192a:	4f 92       	push	r4
    192c:	5f 92       	push	r5
    192e:	6f 92       	push	r6
    1930:	7f 92       	push	r7
    1932:	8f 92       	push	r8
    1934:	9f 92       	push	r9
    1936:	af 92       	push	r10
    1938:	bf 92       	push	r11
    193a:	cf 92       	push	r12
    193c:	df 92       	push	r13
    193e:	ef 92       	push	r14
    1940:	ff 92       	push	r15
    1942:	0f 93       	push	r16
    1944:	1f 93       	push	r17
    1946:	cf 93       	push	r28
    1948:	df 93       	push	r29
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	a8 97       	sbiw	r28, 0x28	; 40
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
    195a:	6b 01       	movw	r12, r22
    195c:	7c 01       	movw	r14, r24
    195e:	fe 01       	movw	r30, r28
    1960:	75 96       	adiw	r30, 0x15	; 21
    1962:	8e 01       	movw	r16, r28
    1964:	0f 5f       	subi	r16, 0xFF	; 255
    1966:	1f 4f       	sbci	r17, 0xFF	; 255
    1968:	ce 01       	movw	r24, r28
    196a:	4d 96       	adiw	r24, 0x1d	; 29
    196c:	d8 01       	movw	r26, r16
    196e:	11 92       	st	Z+, r1
    1970:	1d 92       	st	X+, r1
    1972:	e8 17       	cp	r30, r24
    1974:	f9 07       	cpc	r31, r25
    1976:	d9 f7       	brne	.-10     	; 0x196e <SendInt+0x44>
    1978:	ff 20       	and	r15, r15
    197a:	0c f0       	brlt	.+2      	; 0x197e <SendInt+0x54>
    197c:	5d c0       	rjmp	.+186    	; 0x1a38 <SendInt+0x10e>
    197e:	81 c0       	rjmp	.+258    	; 0x1a82 <SendInt+0x158>
    1980:	5e 01       	movw	r10, r28
    1982:	26 e1       	ldi	r18, 0x16	; 22
    1984:	a2 0e       	add	r10, r18
    1986:	b1 1c       	adc	r11, r1
    1988:	99 24       	eor	r9, r9
    198a:	93 94       	inc	r9
    198c:	0f 2e       	mov	r0, r31
    198e:	fa e0       	ldi	r31, 0x0A	; 10
    1990:	4f 2e       	mov	r4, r31
    1992:	51 2c       	mov	r5, r1
    1994:	61 2c       	mov	r6, r1
    1996:	71 2c       	mov	r7, r1
    1998:	f0 2d       	mov	r31, r0
    199a:	01 c0       	rjmp	.+2      	; 0x199e <SendInt+0x74>
    199c:	98 2e       	mov	r9, r24
    199e:	c7 01       	movw	r24, r14
    19a0:	b6 01       	movw	r22, r12
    19a2:	a3 01       	movw	r20, r6
    19a4:	92 01       	movw	r18, r4
    19a6:	0e 94 86 10 	call	0x210c	; 0x210c <__divmodsi4>
    19aa:	20 e3       	ldi	r18, 0x30	; 48
    19ac:	26 0f       	add	r18, r22
    19ae:	d5 01       	movw	r26, r10
    19b0:	2d 93       	st	X+, r18
    19b2:	5d 01       	movw	r10, r26
    19b4:	a7 01       	movw	r20, r14
    19b6:	96 01       	movw	r18, r12
    19b8:	26 1b       	sub	r18, r22
    19ba:	37 0b       	sbc	r19, r23
    19bc:	48 0b       	sbc	r20, r24
    19be:	59 0b       	sbc	r21, r25
    19c0:	ca 01       	movw	r24, r20
    19c2:	b9 01       	movw	r22, r18
    19c4:	a3 01       	movw	r20, r6
    19c6:	92 01       	movw	r18, r4
    19c8:	0e 94 86 10 	call	0x210c	; 0x210c <__divmodsi4>
    19cc:	69 01       	movw	r12, r18
    19ce:	7a 01       	movw	r14, r20
    19d0:	23 2b       	or	r18, r19
    19d2:	24 2b       	or	r18, r20
    19d4:	25 2b       	or	r18, r21
    19d6:	21 f0       	breq	.+8      	; 0x19e0 <SendInt+0xb6>
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	89 0d       	add	r24, r9
    19dc:	84 31       	cpi	r24, 0x14	; 20
    19de:	f1 f6       	brne	.-68     	; 0x199c <SendInt+0x72>
    19e0:	21 e0       	ldi	r18, 0x01	; 1
    19e2:	29 0d       	add	r18, r9
    19e4:	88 20       	and	r8, r8
    19e6:	54 f4       	brge	.+20     	; 0x19fc <SendInt+0xd2>
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <SendInt+0xc4>
    19ea:	21 e0       	ldi	r18, 0x01	; 1
    19ec:	91 2c       	mov	r9, r1
    19ee:	fe 01       	movw	r30, r28
    19f0:	e2 0f       	add	r30, r18
    19f2:	f1 1d       	adc	r31, r1
    19f4:	8d e2       	ldi	r24, 0x2D	; 45
    19f6:	85 8b       	std	Z+21, r24	; 0x15
    19f8:	22 e0       	ldi	r18, 0x02	; 2
    19fa:	29 0d       	add	r18, r9
    19fc:	21 11       	cpse	r18, r1
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <SendInt+0xda>
    1a00:	0f c0       	rjmp	.+30     	; 0x1a20 <SendInt+0xf6>
    1a02:	21 e0       	ldi	r18, 0x01	; 1
    1a04:	e5 e1       	ldi	r30, 0x15	; 21
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	ec 0f       	add	r30, r28
    1a0a:	fd 1f       	adc	r31, r29
    1a0c:	e2 0f       	add	r30, r18
    1a0e:	f1 1d       	adc	r31, r1
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	92 91       	ld	r25, -Z
    1a14:	d8 01       	movw	r26, r16
    1a16:	9d 93       	st	X+, r25
    1a18:	8d 01       	movw	r16, r26
    1a1a:	8f 5f       	subi	r24, 0xFF	; 255
    1a1c:	82 17       	cp	r24, r18
    1a1e:	c8 f3       	brcs	.-14     	; 0x1a12 <SendInt+0xe8>
    1a20:	e1 e0       	ldi	r30, 0x01	; 1
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	ec 0f       	add	r30, r28
    1a26:	fd 1f       	adc	r31, r29
    1a28:	e2 0f       	add	r30, r18
    1a2a:	f1 1d       	adc	r31, r1
    1a2c:	10 82       	st	Z, r1
    1a2e:	ce 01       	movw	r24, r28
    1a30:	01 96       	adiw	r24, 0x01	; 1
    1a32:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <SendString>
    1a36:	53 c0       	rjmp	.+166    	; 0x1ade <SendInt+0x1b4>
    1a38:	0f 2e       	mov	r0, r31
    1a3a:	fa e0       	ldi	r31, 0x0A	; 10
    1a3c:	8f 2e       	mov	r8, r31
    1a3e:	91 2c       	mov	r9, r1
    1a40:	a1 2c       	mov	r10, r1
    1a42:	b1 2c       	mov	r11, r1
    1a44:	f0 2d       	mov	r31, r0
    1a46:	c7 01       	movw	r24, r14
    1a48:	b6 01       	movw	r22, r12
    1a4a:	a5 01       	movw	r20, r10
    1a4c:	94 01       	movw	r18, r8
    1a4e:	0e 94 86 10 	call	0x210c	; 0x210c <__divmodsi4>
    1a52:	20 e3       	ldi	r18, 0x30	; 48
    1a54:	26 0f       	add	r18, r22
    1a56:	2d 8b       	std	Y+21, r18	; 0x15
    1a58:	a7 01       	movw	r20, r14
    1a5a:	96 01       	movw	r18, r12
    1a5c:	26 1b       	sub	r18, r22
    1a5e:	37 0b       	sbc	r19, r23
    1a60:	48 0b       	sbc	r20, r24
    1a62:	59 0b       	sbc	r21, r25
    1a64:	ca 01       	movw	r24, r20
    1a66:	b9 01       	movw	r22, r18
    1a68:	a5 01       	movw	r20, r10
    1a6a:	94 01       	movw	r18, r8
    1a6c:	0e 94 86 10 	call	0x210c	; 0x210c <__divmodsi4>
    1a70:	69 01       	movw	r12, r18
    1a72:	7a 01       	movw	r14, r20
    1a74:	23 2b       	or	r18, r19
    1a76:	24 2b       	or	r18, r20
    1a78:	25 2b       	or	r18, r21
    1a7a:	19 f2       	breq	.-122    	; 0x1a02 <SendInt+0xd8>
    1a7c:	88 24       	eor	r8, r8
    1a7e:	83 94       	inc	r8
    1a80:	7f cf       	rjmp	.-258    	; 0x1980 <SendInt+0x56>
    1a82:	f0 94       	com	r15
    1a84:	e0 94       	com	r14
    1a86:	d0 94       	com	r13
    1a88:	c0 94       	com	r12
    1a8a:	c1 1c       	adc	r12, r1
    1a8c:	d1 1c       	adc	r13, r1
    1a8e:	e1 1c       	adc	r14, r1
    1a90:	f1 1c       	adc	r15, r1
    1a92:	0f 2e       	mov	r0, r31
    1a94:	fa e0       	ldi	r31, 0x0A	; 10
    1a96:	8f 2e       	mov	r8, r31
    1a98:	91 2c       	mov	r9, r1
    1a9a:	a1 2c       	mov	r10, r1
    1a9c:	b1 2c       	mov	r11, r1
    1a9e:	f0 2d       	mov	r31, r0
    1aa0:	c7 01       	movw	r24, r14
    1aa2:	b6 01       	movw	r22, r12
    1aa4:	a5 01       	movw	r20, r10
    1aa6:	94 01       	movw	r18, r8
    1aa8:	0e 94 86 10 	call	0x210c	; 0x210c <__divmodsi4>
    1aac:	20 e3       	ldi	r18, 0x30	; 48
    1aae:	26 0f       	add	r18, r22
    1ab0:	2d 8b       	std	Y+21, r18	; 0x15
    1ab2:	a7 01       	movw	r20, r14
    1ab4:	96 01       	movw	r18, r12
    1ab6:	26 1b       	sub	r18, r22
    1ab8:	37 0b       	sbc	r19, r23
    1aba:	48 0b       	sbc	r20, r24
    1abc:	59 0b       	sbc	r21, r25
    1abe:	ca 01       	movw	r24, r20
    1ac0:	b9 01       	movw	r22, r18
    1ac2:	a5 01       	movw	r20, r10
    1ac4:	94 01       	movw	r18, r8
    1ac6:	0e 94 86 10 	call	0x210c	; 0x210c <__divmodsi4>
    1aca:	69 01       	movw	r12, r18
    1acc:	7a 01       	movw	r14, r20
    1ace:	23 2b       	or	r18, r19
    1ad0:	24 2b       	or	r18, r20
    1ad2:	25 2b       	or	r18, r21
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <SendInt+0x1ae>
    1ad6:	89 cf       	rjmp	.-238    	; 0x19ea <SendInt+0xc0>
    1ad8:	88 24       	eor	r8, r8
    1ada:	8a 94       	dec	r8
    1adc:	51 cf       	rjmp	.-350    	; 0x1980 <SendInt+0x56>
    1ade:	a8 96       	adiw	r28, 0x28	; 40
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	df 91       	pop	r29
    1aec:	cf 91       	pop	r28
    1aee:	1f 91       	pop	r17
    1af0:	0f 91       	pop	r16
    1af2:	ff 90       	pop	r15
    1af4:	ef 90       	pop	r14
    1af6:	df 90       	pop	r13
    1af8:	cf 90       	pop	r12
    1afa:	bf 90       	pop	r11
    1afc:	af 90       	pop	r10
    1afe:	9f 90       	pop	r9
    1b00:	8f 90       	pop	r8
    1b02:	7f 90       	pop	r7
    1b04:	6f 90       	pop	r6
    1b06:	5f 90       	pop	r5
    1b08:	4f 90       	pop	r4
    1b0a:	08 95       	ret

00001b0c <SendStringInt>:
    1b0c:	cf 92       	push	r12
    1b0e:	df 92       	push	r13
    1b10:	ef 92       	push	r14
    1b12:	ff 92       	push	r15
    1b14:	6a 01       	movw	r12, r20
    1b16:	7b 01       	movw	r14, r22
    1b18:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <SendString>
    1b1c:	c7 01       	movw	r24, r14
    1b1e:	b6 01       	movw	r22, r12
    1b20:	0e 94 95 0c 	call	0x192a	; 0x192a <SendInt>
    1b24:	0e 94 89 0c 	call	0x1912	; 0x1912 <SendEnter>
    1b28:	ff 90       	pop	r15
    1b2a:	ef 90       	pop	r14
    1b2c:	df 90       	pop	r13
    1b2e:	cf 90       	pop	r12
    1b30:	08 95       	ret

00001b32 <CheckRxBuffor>:
		string[pozycja] = 0;
		SendString(string);
}

void CheckRxBuffor(void)
{
    1b32:	cf 93       	push	r28
	if (RxHead != RxTail)	//Check if buffer is not empty
    1b34:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <RxHead>
    1b38:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <RxTail>
    1b3c:	98 17       	cp	r25, r24
    1b3e:	29 f1       	breq	.+74     	; 0x1b8a <CheckRxBuffor+0x58>
	{
		uint8_t i = RxTail;
    1b40:	c0 91 5b 01 	lds	r28, 0x015B	; 0x80015b <RxTail>

		while(i != RxHead)	//search for end of line
    1b44:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <RxHead>
    1b48:	c8 17       	cp	r28, r24
    1b4a:	f9 f0       	breq	.+62     	; 0x1b8a <CheckRxBuffor+0x58>
		{
			//If end of line process Command
			
			if (RxBuffor[i] == 13)
    1b4c:	ec 2f       	mov	r30, r28
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	ee 5e       	subi	r30, 0xEE	; 238
    1b52:	fc 4f       	sbci	r31, 0xFC	; 252
    1b54:	80 81       	ld	r24, Z
    1b56:	8d 30       	cpi	r24, 0x0D	; 13
    1b58:	91 f4       	brne	.+36     	; 0x1b7e <CheckRxBuffor+0x4c>
    1b5a:	07 c0       	rjmp	.+14     	; 0x1b6a <CheckRxBuffor+0x38>
    1b5c:	ec 2f       	mov	r30, r28
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	ee 5e       	subi	r30, 0xEE	; 238
    1b62:	fc 4f       	sbci	r31, 0xFC	; 252
    1b64:	80 81       	ld	r24, Z
    1b66:	8d 30       	cpi	r24, 0x0D	; 13
    1b68:	51 f4       	brne	.+20     	; 0x1b7e <CheckRxBuffor+0x4c>
			{
				ProcessString(RxTail, i);
    1b6a:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <RxTail>
    1b6e:	6c 2f       	mov	r22, r28
    1b70:	0e 94 04 09 	call	0x1208	; 0x1208 <ProcessString>
				i = (i+1) & RX_SIZE_BIN;
    1b74:	cf 5f       	subi	r28, 0xFF	; 255
    1b76:	cf 71       	andi	r28, 0x1F	; 31
				RxTail = i;
    1b78:	c0 93 5b 01 	sts	0x015B, r28	; 0x80015b <RxTail>
				break;
    1b7c:	06 c0       	rjmp	.+12     	; 0x1b8a <CheckRxBuffor+0x58>
			}

			i = (i+1) & RX_SIZE_BIN;
    1b7e:	cf 5f       	subi	r28, 0xFF	; 255
    1b80:	cf 71       	andi	r28, 0x1F	; 31
{
	if (RxHead != RxTail)	//Check if buffer is not empty
	{
		uint8_t i = RxTail;

		while(i != RxHead)	//search for end of line
    1b82:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <RxHead>
    1b86:	8c 13       	cpse	r24, r28
    1b88:	e9 cf       	rjmp	.-46     	; 0x1b5c <CheckRxBuffor+0x2a>
			}

			i = (i+1) & RX_SIZE_BIN;
		}
	}
    1b8a:	cf 91       	pop	r28
    1b8c:	08 95       	ret

00001b8e <InitUartCOM_HW>:


	UBRR0 = 9;	//100k at 16MHz clock

	//Init COM Uart
	UCSR0B = (1<<RXEN0) | (1<<RXCIE0) |
    1b8e:	83 e0       	ldi	r24, 0x03	; 3
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1b96:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1b9a:	88 ed       	ldi	r24, 0xD8	; 216
    1b9c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1ba0:	08 95       	ret

00001ba2 <PutCharToBuffor>:
}


void PutCharToBuffor(uint8_t x)
{
	if ((UCSR0A & (1<<UDRE0)) && (TxHead == TxTail))	//check if can put next char
    1ba2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1ba6:	95 ff       	sbrs	r25, 5
    1ba8:	09 c0       	rjmp	.+18     	; 0x1bbc <PutCharToBuffor+0x1a>
    1baa:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <TxHead>
    1bae:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <TxTail>
    1bb2:	29 13       	cpse	r18, r25
    1bb4:	03 c0       	rjmp	.+6      	; 0x1bbc <PutCharToBuffor+0x1a>
	{
		UDR0 = x;		
    1bb6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1bba:	08 95       	ret
	}
	else	//if not ready put char to sending queue
	{
		TxBuffor[TxHead] = x;
    1bbc:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <TxHead>
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	ee 5c       	subi	r30, 0xCE	; 206
    1bc4:	fc 4f       	sbci	r31, 0xFC	; 252
    1bc6:	80 83       	st	Z, r24
		TxHead = (TxHead+1) & TX_SIZE_BIN;
    1bc8:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <TxHead>
    1bcc:	8f 5f       	subi	r24, 0xFF	; 255
    1bce:	8f 77       	andi	r24, 0x7F	; 127
    1bd0:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <TxHead>
    1bd4:	08 95       	ret

00001bd6 <__vector_20>:
	}
}


ISR (USART0_TX_vect)
{
    1bd6:	1f 92       	push	r1
    1bd8:	0f 92       	push	r0
    1bda:	0f b6       	in	r0, 0x3f	; 63
    1bdc:	0f 92       	push	r0
    1bde:	11 24       	eor	r1, r1
    1be0:	8f 93       	push	r24
    1be2:	9f 93       	push	r25
    1be4:	ef 93       	push	r30
    1be6:	ff 93       	push	r31
	if (TxTail == TxHead)
    1be8:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <TxTail>
    1bec:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <TxHead>
    1bf0:	98 13       	cpse	r25, r24
    1bf2:	03 c0       	rjmp	.+6      	; 0x1bfa <__vector_20+0x24>
	{
		uint8_t x = UDR0;
    1bf4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1bf8:	0e c0       	rjmp	.+28     	; 0x1c16 <__vector_20+0x40>
	}

	else
	{
		UDR0 = TxBuffor[TxTail];
    1bfa:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <TxTail>
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	ee 5c       	subi	r30, 0xCE	; 206
    1c02:	fc 4f       	sbci	r31, 0xFC	; 252
    1c04:	80 81       	ld	r24, Z
    1c06:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		TxTail = (TxTail+1) & TX_SIZE_BIN;
    1c0a:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <TxTail>
    1c0e:	8f 5f       	subi	r24, 0xFF	; 255
    1c10:	8f 77       	andi	r24, 0x7F	; 127
    1c12:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <TxTail>
	}
}
    1c16:	ff 91       	pop	r31
    1c18:	ef 91       	pop	r30
    1c1a:	9f 91       	pop	r25
    1c1c:	8f 91       	pop	r24
    1c1e:	0f 90       	pop	r0
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	0f 90       	pop	r0
    1c24:	1f 90       	pop	r1
    1c26:	18 95       	reti

00001c28 <__vector_18>:

ISR (USART0_RX_vect)	//COM Rx
{
    1c28:	1f 92       	push	r1
    1c2a:	0f 92       	push	r0
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	0f 92       	push	r0
    1c30:	11 24       	eor	r1, r1
    1c32:	2f 93       	push	r18
    1c34:	3f 93       	push	r19
    1c36:	4f 93       	push	r20
    1c38:	5f 93       	push	r21
    1c3a:	6f 93       	push	r22
    1c3c:	7f 93       	push	r23
    1c3e:	8f 93       	push	r24
    1c40:	9f 93       	push	r25
    1c42:	af 93       	push	r26
    1c44:	bf 93       	push	r27
    1c46:	ef 93       	push	r30
    1c48:	ff 93       	push	r31
// 	uint8_t x = UDR0;
// 	ReceiveChar(x);
// 	PutCharToBuffor(x);
	ReceiveChar(UDR0);
    1c4a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1c4e:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <ReceiveChar>
    1c52:	ff 91       	pop	r31
    1c54:	ef 91       	pop	r30
    1c56:	bf 91       	pop	r27
    1c58:	af 91       	pop	r26
    1c5a:	9f 91       	pop	r25
    1c5c:	8f 91       	pop	r24
    1c5e:	7f 91       	pop	r23
    1c60:	6f 91       	pop	r22
    1c62:	5f 91       	pop	r21
    1c64:	4f 91       	pop	r20
    1c66:	3f 91       	pop	r19
    1c68:	2f 91       	pop	r18
    1c6a:	0f 90       	pop	r0
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	0f 90       	pop	r0
    1c70:	1f 90       	pop	r1
    1c72:	18 95       	reti

00001c74 <__subsf3>:
    1c74:	50 58       	subi	r21, 0x80	; 128

00001c76 <__addsf3>:
    1c76:	bb 27       	eor	r27, r27
    1c78:	aa 27       	eor	r26, r26
    1c7a:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__addsf3x>
    1c7e:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__fp_round>
    1c82:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__fp_pscA>
    1c86:	38 f0       	brcs	.+14     	; 0x1c96 <__addsf3+0x20>
    1c88:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <__fp_pscB>
    1c8c:	20 f0       	brcs	.+8      	; 0x1c96 <__addsf3+0x20>
    1c8e:	39 f4       	brne	.+14     	; 0x1c9e <__addsf3+0x28>
    1c90:	9f 3f       	cpi	r25, 0xFF	; 255
    1c92:	19 f4       	brne	.+6      	; 0x1c9a <__addsf3+0x24>
    1c94:	26 f4       	brtc	.+8      	; 0x1c9e <__addsf3+0x28>
    1c96:	0c 94 8b 0f 	jmp	0x1f16	; 0x1f16 <__fp_nan>
    1c9a:	0e f4       	brtc	.+2      	; 0x1c9e <__addsf3+0x28>
    1c9c:	e0 95       	com	r30
    1c9e:	e7 fb       	bst	r30, 7
    1ca0:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <__fp_inf>

00001ca4 <__addsf3x>:
    1ca4:	e9 2f       	mov	r30, r25
    1ca6:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <__fp_split3>
    1caa:	58 f3       	brcs	.-42     	; 0x1c82 <__addsf3+0xc>
    1cac:	ba 17       	cp	r27, r26
    1cae:	62 07       	cpc	r22, r18
    1cb0:	73 07       	cpc	r23, r19
    1cb2:	84 07       	cpc	r24, r20
    1cb4:	95 07       	cpc	r25, r21
    1cb6:	20 f0       	brcs	.+8      	; 0x1cc0 <__addsf3x+0x1c>
    1cb8:	79 f4       	brne	.+30     	; 0x1cd8 <__addsf3x+0x34>
    1cba:	a6 f5       	brtc	.+104    	; 0x1d24 <__addsf3x+0x80>
    1cbc:	0c 94 f6 0f 	jmp	0x1fec	; 0x1fec <__fp_zero>
    1cc0:	0e f4       	brtc	.+2      	; 0x1cc4 <__addsf3x+0x20>
    1cc2:	e0 95       	com	r30
    1cc4:	0b 2e       	mov	r0, r27
    1cc6:	ba 2f       	mov	r27, r26
    1cc8:	a0 2d       	mov	r26, r0
    1cca:	0b 01       	movw	r0, r22
    1ccc:	b9 01       	movw	r22, r18
    1cce:	90 01       	movw	r18, r0
    1cd0:	0c 01       	movw	r0, r24
    1cd2:	ca 01       	movw	r24, r20
    1cd4:	a0 01       	movw	r20, r0
    1cd6:	11 24       	eor	r1, r1
    1cd8:	ff 27       	eor	r31, r31
    1cda:	59 1b       	sub	r21, r25
    1cdc:	99 f0       	breq	.+38     	; 0x1d04 <__addsf3x+0x60>
    1cde:	59 3f       	cpi	r21, 0xF9	; 249
    1ce0:	50 f4       	brcc	.+20     	; 0x1cf6 <__addsf3x+0x52>
    1ce2:	50 3e       	cpi	r21, 0xE0	; 224
    1ce4:	68 f1       	brcs	.+90     	; 0x1d40 <__addsf3x+0x9c>
    1ce6:	1a 16       	cp	r1, r26
    1ce8:	f0 40       	sbci	r31, 0x00	; 0
    1cea:	a2 2f       	mov	r26, r18
    1cec:	23 2f       	mov	r18, r19
    1cee:	34 2f       	mov	r19, r20
    1cf0:	44 27       	eor	r20, r20
    1cf2:	58 5f       	subi	r21, 0xF8	; 248
    1cf4:	f3 cf       	rjmp	.-26     	; 0x1cdc <__addsf3x+0x38>
    1cf6:	46 95       	lsr	r20
    1cf8:	37 95       	ror	r19
    1cfa:	27 95       	ror	r18
    1cfc:	a7 95       	ror	r26
    1cfe:	f0 40       	sbci	r31, 0x00	; 0
    1d00:	53 95       	inc	r21
    1d02:	c9 f7       	brne	.-14     	; 0x1cf6 <__addsf3x+0x52>
    1d04:	7e f4       	brtc	.+30     	; 0x1d24 <__addsf3x+0x80>
    1d06:	1f 16       	cp	r1, r31
    1d08:	ba 0b       	sbc	r27, r26
    1d0a:	62 0b       	sbc	r22, r18
    1d0c:	73 0b       	sbc	r23, r19
    1d0e:	84 0b       	sbc	r24, r20
    1d10:	ba f0       	brmi	.+46     	; 0x1d40 <__addsf3x+0x9c>
    1d12:	91 50       	subi	r25, 0x01	; 1
    1d14:	a1 f0       	breq	.+40     	; 0x1d3e <__addsf3x+0x9a>
    1d16:	ff 0f       	add	r31, r31
    1d18:	bb 1f       	adc	r27, r27
    1d1a:	66 1f       	adc	r22, r22
    1d1c:	77 1f       	adc	r23, r23
    1d1e:	88 1f       	adc	r24, r24
    1d20:	c2 f7       	brpl	.-16     	; 0x1d12 <__addsf3x+0x6e>
    1d22:	0e c0       	rjmp	.+28     	; 0x1d40 <__addsf3x+0x9c>
    1d24:	ba 0f       	add	r27, r26
    1d26:	62 1f       	adc	r22, r18
    1d28:	73 1f       	adc	r23, r19
    1d2a:	84 1f       	adc	r24, r20
    1d2c:	48 f4       	brcc	.+18     	; 0x1d40 <__addsf3x+0x9c>
    1d2e:	87 95       	ror	r24
    1d30:	77 95       	ror	r23
    1d32:	67 95       	ror	r22
    1d34:	b7 95       	ror	r27
    1d36:	f7 95       	ror	r31
    1d38:	9e 3f       	cpi	r25, 0xFE	; 254
    1d3a:	08 f0       	brcs	.+2      	; 0x1d3e <__addsf3x+0x9a>
    1d3c:	b0 cf       	rjmp	.-160    	; 0x1c9e <__addsf3+0x28>
    1d3e:	93 95       	inc	r25
    1d40:	88 0f       	add	r24, r24
    1d42:	08 f0       	brcs	.+2      	; 0x1d46 <__addsf3x+0xa2>
    1d44:	99 27       	eor	r25, r25
    1d46:	ee 0f       	add	r30, r30
    1d48:	97 95       	ror	r25
    1d4a:	87 95       	ror	r24
    1d4c:	08 95       	ret

00001d4e <atan>:
    1d4e:	df 93       	push	r29
    1d50:	dd 27       	eor	r29, r29
    1d52:	b9 2f       	mov	r27, r25
    1d54:	bf 77       	andi	r27, 0x7F	; 127
    1d56:	40 e8       	ldi	r20, 0x80	; 128
    1d58:	5f e3       	ldi	r21, 0x3F	; 63
    1d5a:	16 16       	cp	r1, r22
    1d5c:	17 06       	cpc	r1, r23
    1d5e:	48 07       	cpc	r20, r24
    1d60:	5b 07       	cpc	r21, r27
    1d62:	18 f4       	brcc	.+6      	; 0x1d6a <atan+0x1c>
    1d64:	d9 2f       	mov	r29, r25
    1d66:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <inverse>
    1d6a:	9f 93       	push	r25
    1d6c:	8f 93       	push	r24
    1d6e:	7f 93       	push	r23
    1d70:	6f 93       	push	r22
    1d72:	0e 94 72 10 	call	0x20e4	; 0x20e4 <square>
    1d76:	e6 ec       	ldi	r30, 0xC6	; 198
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__fp_powser>
    1d7e:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__fp_round>
    1d82:	2f 91       	pop	r18
    1d84:	3f 91       	pop	r19
    1d86:	4f 91       	pop	r20
    1d88:	5f 91       	pop	r21
    1d8a:	0e 94 18 10 	call	0x2030	; 0x2030 <__mulsf3x>
    1d8e:	dd 23       	and	r29, r29
    1d90:	51 f0       	breq	.+20     	; 0x1da6 <atan+0x58>
    1d92:	90 58       	subi	r25, 0x80	; 128
    1d94:	a2 ea       	ldi	r26, 0xA2	; 162
    1d96:	2a ed       	ldi	r18, 0xDA	; 218
    1d98:	3f e0       	ldi	r19, 0x0F	; 15
    1d9a:	49 ec       	ldi	r20, 0xC9	; 201
    1d9c:	5f e3       	ldi	r21, 0x3F	; 63
    1d9e:	d0 78       	andi	r29, 0x80	; 128
    1da0:	5d 27       	eor	r21, r29
    1da2:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__addsf3x>
    1da6:	df 91       	pop	r29
    1da8:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__fp_round>

00001dac <__divsf3>:
    1dac:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <__divsf3x>
    1db0:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__fp_round>
    1db4:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <__fp_pscB>
    1db8:	58 f0       	brcs	.+22     	; 0x1dd0 <__divsf3+0x24>
    1dba:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__fp_pscA>
    1dbe:	40 f0       	brcs	.+16     	; 0x1dd0 <__divsf3+0x24>
    1dc0:	29 f4       	brne	.+10     	; 0x1dcc <__divsf3+0x20>
    1dc2:	5f 3f       	cpi	r21, 0xFF	; 255
    1dc4:	29 f0       	breq	.+10     	; 0x1dd0 <__divsf3+0x24>
    1dc6:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <__fp_inf>
    1dca:	51 11       	cpse	r21, r1
    1dcc:	0c 94 f7 0f 	jmp	0x1fee	; 0x1fee <__fp_szero>
    1dd0:	0c 94 8b 0f 	jmp	0x1f16	; 0x1f16 <__fp_nan>

00001dd4 <__divsf3x>:
    1dd4:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <__fp_split3>
    1dd8:	68 f3       	brcs	.-38     	; 0x1db4 <__divsf3+0x8>

00001dda <__divsf3_pse>:
    1dda:	99 23       	and	r25, r25
    1ddc:	b1 f3       	breq	.-20     	; 0x1dca <__divsf3+0x1e>
    1dde:	55 23       	and	r21, r21
    1de0:	91 f3       	breq	.-28     	; 0x1dc6 <__divsf3+0x1a>
    1de2:	95 1b       	sub	r25, r21
    1de4:	55 0b       	sbc	r21, r21
    1de6:	bb 27       	eor	r27, r27
    1de8:	aa 27       	eor	r26, r26
    1dea:	62 17       	cp	r22, r18
    1dec:	73 07       	cpc	r23, r19
    1dee:	84 07       	cpc	r24, r20
    1df0:	38 f0       	brcs	.+14     	; 0x1e00 <__divsf3_pse+0x26>
    1df2:	9f 5f       	subi	r25, 0xFF	; 255
    1df4:	5f 4f       	sbci	r21, 0xFF	; 255
    1df6:	22 0f       	add	r18, r18
    1df8:	33 1f       	adc	r19, r19
    1dfa:	44 1f       	adc	r20, r20
    1dfc:	aa 1f       	adc	r26, r26
    1dfe:	a9 f3       	breq	.-22     	; 0x1dea <__divsf3_pse+0x10>
    1e00:	35 d0       	rcall	.+106    	; 0x1e6c <__divsf3_pse+0x92>
    1e02:	0e 2e       	mov	r0, r30
    1e04:	3a f0       	brmi	.+14     	; 0x1e14 <__divsf3_pse+0x3a>
    1e06:	e0 e8       	ldi	r30, 0x80	; 128
    1e08:	32 d0       	rcall	.+100    	; 0x1e6e <__divsf3_pse+0x94>
    1e0a:	91 50       	subi	r25, 0x01	; 1
    1e0c:	50 40       	sbci	r21, 0x00	; 0
    1e0e:	e6 95       	lsr	r30
    1e10:	00 1c       	adc	r0, r0
    1e12:	ca f7       	brpl	.-14     	; 0x1e06 <__divsf3_pse+0x2c>
    1e14:	2b d0       	rcall	.+86     	; 0x1e6c <__divsf3_pse+0x92>
    1e16:	fe 2f       	mov	r31, r30
    1e18:	29 d0       	rcall	.+82     	; 0x1e6c <__divsf3_pse+0x92>
    1e1a:	66 0f       	add	r22, r22
    1e1c:	77 1f       	adc	r23, r23
    1e1e:	88 1f       	adc	r24, r24
    1e20:	bb 1f       	adc	r27, r27
    1e22:	26 17       	cp	r18, r22
    1e24:	37 07       	cpc	r19, r23
    1e26:	48 07       	cpc	r20, r24
    1e28:	ab 07       	cpc	r26, r27
    1e2a:	b0 e8       	ldi	r27, 0x80	; 128
    1e2c:	09 f0       	breq	.+2      	; 0x1e30 <__divsf3_pse+0x56>
    1e2e:	bb 0b       	sbc	r27, r27
    1e30:	80 2d       	mov	r24, r0
    1e32:	bf 01       	movw	r22, r30
    1e34:	ff 27       	eor	r31, r31
    1e36:	93 58       	subi	r25, 0x83	; 131
    1e38:	5f 4f       	sbci	r21, 0xFF	; 255
    1e3a:	3a f0       	brmi	.+14     	; 0x1e4a <__divsf3_pse+0x70>
    1e3c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e3e:	51 05       	cpc	r21, r1
    1e40:	78 f0       	brcs	.+30     	; 0x1e60 <__divsf3_pse+0x86>
    1e42:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <__fp_inf>
    1e46:	0c 94 f7 0f 	jmp	0x1fee	; 0x1fee <__fp_szero>
    1e4a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e4c:	e4 f3       	brlt	.-8      	; 0x1e46 <__divsf3_pse+0x6c>
    1e4e:	98 3e       	cpi	r25, 0xE8	; 232
    1e50:	d4 f3       	brlt	.-12     	; 0x1e46 <__divsf3_pse+0x6c>
    1e52:	86 95       	lsr	r24
    1e54:	77 95       	ror	r23
    1e56:	67 95       	ror	r22
    1e58:	b7 95       	ror	r27
    1e5a:	f7 95       	ror	r31
    1e5c:	9f 5f       	subi	r25, 0xFF	; 255
    1e5e:	c9 f7       	brne	.-14     	; 0x1e52 <__divsf3_pse+0x78>
    1e60:	88 0f       	add	r24, r24
    1e62:	91 1d       	adc	r25, r1
    1e64:	96 95       	lsr	r25
    1e66:	87 95       	ror	r24
    1e68:	97 f9       	bld	r25, 7
    1e6a:	08 95       	ret
    1e6c:	e1 e0       	ldi	r30, 0x01	; 1
    1e6e:	66 0f       	add	r22, r22
    1e70:	77 1f       	adc	r23, r23
    1e72:	88 1f       	adc	r24, r24
    1e74:	bb 1f       	adc	r27, r27
    1e76:	62 17       	cp	r22, r18
    1e78:	73 07       	cpc	r23, r19
    1e7a:	84 07       	cpc	r24, r20
    1e7c:	ba 07       	cpc	r27, r26
    1e7e:	20 f0       	brcs	.+8      	; 0x1e88 <__divsf3_pse+0xae>
    1e80:	62 1b       	sub	r22, r18
    1e82:	73 0b       	sbc	r23, r19
    1e84:	84 0b       	sbc	r24, r20
    1e86:	ba 0b       	sbc	r27, r26
    1e88:	ee 1f       	adc	r30, r30
    1e8a:	88 f7       	brcc	.-30     	; 0x1e6e <__divsf3_pse+0x94>
    1e8c:	e0 95       	com	r30
    1e8e:	08 95       	ret

00001e90 <__floatunsisf>:
    1e90:	e8 94       	clt
    1e92:	09 c0       	rjmp	.+18     	; 0x1ea6 <__floatsisf+0x12>

00001e94 <__floatsisf>:
    1e94:	97 fb       	bst	r25, 7
    1e96:	3e f4       	brtc	.+14     	; 0x1ea6 <__floatsisf+0x12>
    1e98:	90 95       	com	r25
    1e9a:	80 95       	com	r24
    1e9c:	70 95       	com	r23
    1e9e:	61 95       	neg	r22
    1ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ea4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea6:	99 23       	and	r25, r25
    1ea8:	a9 f0       	breq	.+42     	; 0x1ed4 <__floatsisf+0x40>
    1eaa:	f9 2f       	mov	r31, r25
    1eac:	96 e9       	ldi	r25, 0x96	; 150
    1eae:	bb 27       	eor	r27, r27
    1eb0:	93 95       	inc	r25
    1eb2:	f6 95       	lsr	r31
    1eb4:	87 95       	ror	r24
    1eb6:	77 95       	ror	r23
    1eb8:	67 95       	ror	r22
    1eba:	b7 95       	ror	r27
    1ebc:	f1 11       	cpse	r31, r1
    1ebe:	f8 cf       	rjmp	.-16     	; 0x1eb0 <__floatsisf+0x1c>
    1ec0:	fa f4       	brpl	.+62     	; 0x1f00 <__floatsisf+0x6c>
    1ec2:	bb 0f       	add	r27, r27
    1ec4:	11 f4       	brne	.+4      	; 0x1eca <__floatsisf+0x36>
    1ec6:	60 ff       	sbrs	r22, 0
    1ec8:	1b c0       	rjmp	.+54     	; 0x1f00 <__floatsisf+0x6c>
    1eca:	6f 5f       	subi	r22, 0xFF	; 255
    1ecc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ece:	8f 4f       	sbci	r24, 0xFF	; 255
    1ed0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed2:	16 c0       	rjmp	.+44     	; 0x1f00 <__floatsisf+0x6c>
    1ed4:	88 23       	and	r24, r24
    1ed6:	11 f0       	breq	.+4      	; 0x1edc <__floatsisf+0x48>
    1ed8:	96 e9       	ldi	r25, 0x96	; 150
    1eda:	11 c0       	rjmp	.+34     	; 0x1efe <__floatsisf+0x6a>
    1edc:	77 23       	and	r23, r23
    1ede:	21 f0       	breq	.+8      	; 0x1ee8 <__floatsisf+0x54>
    1ee0:	9e e8       	ldi	r25, 0x8E	; 142
    1ee2:	87 2f       	mov	r24, r23
    1ee4:	76 2f       	mov	r23, r22
    1ee6:	05 c0       	rjmp	.+10     	; 0x1ef2 <__floatsisf+0x5e>
    1ee8:	66 23       	and	r22, r22
    1eea:	71 f0       	breq	.+28     	; 0x1f08 <__floatsisf+0x74>
    1eec:	96 e8       	ldi	r25, 0x86	; 134
    1eee:	86 2f       	mov	r24, r22
    1ef0:	70 e0       	ldi	r23, 0x00	; 0
    1ef2:	60 e0       	ldi	r22, 0x00	; 0
    1ef4:	2a f0       	brmi	.+10     	; 0x1f00 <__floatsisf+0x6c>
    1ef6:	9a 95       	dec	r25
    1ef8:	66 0f       	add	r22, r22
    1efa:	77 1f       	adc	r23, r23
    1efc:	88 1f       	adc	r24, r24
    1efe:	da f7       	brpl	.-10     	; 0x1ef6 <__floatsisf+0x62>
    1f00:	88 0f       	add	r24, r24
    1f02:	96 95       	lsr	r25
    1f04:	87 95       	ror	r24
    1f06:	97 f9       	bld	r25, 7
    1f08:	08 95       	ret

00001f0a <__fp_inf>:
    1f0a:	97 f9       	bld	r25, 7
    1f0c:	9f 67       	ori	r25, 0x7F	; 127
    1f0e:	80 e8       	ldi	r24, 0x80	; 128
    1f10:	70 e0       	ldi	r23, 0x00	; 0
    1f12:	60 e0       	ldi	r22, 0x00	; 0
    1f14:	08 95       	ret

00001f16 <__fp_nan>:
    1f16:	9f ef       	ldi	r25, 0xFF	; 255
    1f18:	80 ec       	ldi	r24, 0xC0	; 192
    1f1a:	08 95       	ret

00001f1c <__fp_powser>:
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	1f 93       	push	r17
    1f22:	0f 93       	push	r16
    1f24:	ff 92       	push	r15
    1f26:	ef 92       	push	r14
    1f28:	df 92       	push	r13
    1f2a:	7b 01       	movw	r14, r22
    1f2c:	8c 01       	movw	r16, r24
    1f2e:	68 94       	set
    1f30:	06 c0       	rjmp	.+12     	; 0x1f3e <__fp_powser+0x22>
    1f32:	da 2e       	mov	r13, r26
    1f34:	ef 01       	movw	r28, r30
    1f36:	0e 94 18 10 	call	0x2030	; 0x2030 <__mulsf3x>
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	e8 94       	clt
    1f3e:	a5 91       	lpm	r26, Z+
    1f40:	25 91       	lpm	r18, Z+
    1f42:	35 91       	lpm	r19, Z+
    1f44:	45 91       	lpm	r20, Z+
    1f46:	55 91       	lpm	r21, Z+
    1f48:	a6 f3       	brts	.-24     	; 0x1f32 <__fp_powser+0x16>
    1f4a:	ef 01       	movw	r28, r30
    1f4c:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__addsf3x>
    1f50:	fe 01       	movw	r30, r28
    1f52:	97 01       	movw	r18, r14
    1f54:	a8 01       	movw	r20, r16
    1f56:	da 94       	dec	r13
    1f58:	69 f7       	brne	.-38     	; 0x1f34 <__fp_powser+0x18>
    1f5a:	df 90       	pop	r13
    1f5c:	ef 90       	pop	r14
    1f5e:	ff 90       	pop	r15
    1f60:	0f 91       	pop	r16
    1f62:	1f 91       	pop	r17
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	08 95       	ret

00001f6a <__fp_pscA>:
    1f6a:	00 24       	eor	r0, r0
    1f6c:	0a 94       	dec	r0
    1f6e:	16 16       	cp	r1, r22
    1f70:	17 06       	cpc	r1, r23
    1f72:	18 06       	cpc	r1, r24
    1f74:	09 06       	cpc	r0, r25
    1f76:	08 95       	ret

00001f78 <__fp_pscB>:
    1f78:	00 24       	eor	r0, r0
    1f7a:	0a 94       	dec	r0
    1f7c:	12 16       	cp	r1, r18
    1f7e:	13 06       	cpc	r1, r19
    1f80:	14 06       	cpc	r1, r20
    1f82:	05 06       	cpc	r0, r21
    1f84:	08 95       	ret

00001f86 <__fp_round>:
    1f86:	09 2e       	mov	r0, r25
    1f88:	03 94       	inc	r0
    1f8a:	00 0c       	add	r0, r0
    1f8c:	11 f4       	brne	.+4      	; 0x1f92 <__fp_round+0xc>
    1f8e:	88 23       	and	r24, r24
    1f90:	52 f0       	brmi	.+20     	; 0x1fa6 <__fp_round+0x20>
    1f92:	bb 0f       	add	r27, r27
    1f94:	40 f4       	brcc	.+16     	; 0x1fa6 <__fp_round+0x20>
    1f96:	bf 2b       	or	r27, r31
    1f98:	11 f4       	brne	.+4      	; 0x1f9e <__fp_round+0x18>
    1f9a:	60 ff       	sbrs	r22, 0
    1f9c:	04 c0       	rjmp	.+8      	; 0x1fa6 <__fp_round+0x20>
    1f9e:	6f 5f       	subi	r22, 0xFF	; 255
    1fa0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa2:	8f 4f       	sbci	r24, 0xFF	; 255
    1fa4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa6:	08 95       	ret

00001fa8 <__fp_split3>:
    1fa8:	57 fd       	sbrc	r21, 7
    1faa:	90 58       	subi	r25, 0x80	; 128
    1fac:	44 0f       	add	r20, r20
    1fae:	55 1f       	adc	r21, r21
    1fb0:	59 f0       	breq	.+22     	; 0x1fc8 <__fp_splitA+0x10>
    1fb2:	5f 3f       	cpi	r21, 0xFF	; 255
    1fb4:	71 f0       	breq	.+28     	; 0x1fd2 <__fp_splitA+0x1a>
    1fb6:	47 95       	ror	r20

00001fb8 <__fp_splitA>:
    1fb8:	88 0f       	add	r24, r24
    1fba:	97 fb       	bst	r25, 7
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	61 f0       	breq	.+24     	; 0x1fd8 <__fp_splitA+0x20>
    1fc0:	9f 3f       	cpi	r25, 0xFF	; 255
    1fc2:	79 f0       	breq	.+30     	; 0x1fe2 <__fp_splitA+0x2a>
    1fc4:	87 95       	ror	r24
    1fc6:	08 95       	ret
    1fc8:	12 16       	cp	r1, r18
    1fca:	13 06       	cpc	r1, r19
    1fcc:	14 06       	cpc	r1, r20
    1fce:	55 1f       	adc	r21, r21
    1fd0:	f2 cf       	rjmp	.-28     	; 0x1fb6 <__fp_split3+0xe>
    1fd2:	46 95       	lsr	r20
    1fd4:	f1 df       	rcall	.-30     	; 0x1fb8 <__fp_splitA>
    1fd6:	08 c0       	rjmp	.+16     	; 0x1fe8 <__fp_splitA+0x30>
    1fd8:	16 16       	cp	r1, r22
    1fda:	17 06       	cpc	r1, r23
    1fdc:	18 06       	cpc	r1, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	f1 cf       	rjmp	.-30     	; 0x1fc4 <__fp_splitA+0xc>
    1fe2:	86 95       	lsr	r24
    1fe4:	71 05       	cpc	r23, r1
    1fe6:	61 05       	cpc	r22, r1
    1fe8:	08 94       	sec
    1fea:	08 95       	ret

00001fec <__fp_zero>:
    1fec:	e8 94       	clt

00001fee <__fp_szero>:
    1fee:	bb 27       	eor	r27, r27
    1ff0:	66 27       	eor	r22, r22
    1ff2:	77 27       	eor	r23, r23
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	97 f9       	bld	r25, 7
    1ff8:	08 95       	ret

00001ffa <inverse>:
    1ffa:	9b 01       	movw	r18, r22
    1ffc:	ac 01       	movw	r20, r24
    1ffe:	60 e0       	ldi	r22, 0x00	; 0
    2000:	70 e0       	ldi	r23, 0x00	; 0
    2002:	80 e8       	ldi	r24, 0x80	; 128
    2004:	9f e3       	ldi	r25, 0x3F	; 63
    2006:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <__divsf3>

0000200a <__mulsf3>:
    200a:	0e 94 18 10 	call	0x2030	; 0x2030 <__mulsf3x>
    200e:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__fp_round>
    2012:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__fp_pscA>
    2016:	38 f0       	brcs	.+14     	; 0x2026 <__mulsf3+0x1c>
    2018:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <__fp_pscB>
    201c:	20 f0       	brcs	.+8      	; 0x2026 <__mulsf3+0x1c>
    201e:	95 23       	and	r25, r21
    2020:	11 f0       	breq	.+4      	; 0x2026 <__mulsf3+0x1c>
    2022:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <__fp_inf>
    2026:	0c 94 8b 0f 	jmp	0x1f16	; 0x1f16 <__fp_nan>
    202a:	11 24       	eor	r1, r1
    202c:	0c 94 f7 0f 	jmp	0x1fee	; 0x1fee <__fp_szero>

00002030 <__mulsf3x>:
    2030:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <__fp_split3>
    2034:	70 f3       	brcs	.-36     	; 0x2012 <__mulsf3+0x8>

00002036 <__mulsf3_pse>:
    2036:	95 9f       	mul	r25, r21
    2038:	c1 f3       	breq	.-16     	; 0x202a <__mulsf3+0x20>
    203a:	95 0f       	add	r25, r21
    203c:	50 e0       	ldi	r21, 0x00	; 0
    203e:	55 1f       	adc	r21, r21
    2040:	62 9f       	mul	r22, r18
    2042:	f0 01       	movw	r30, r0
    2044:	72 9f       	mul	r23, r18
    2046:	bb 27       	eor	r27, r27
    2048:	f0 0d       	add	r31, r0
    204a:	b1 1d       	adc	r27, r1
    204c:	63 9f       	mul	r22, r19
    204e:	aa 27       	eor	r26, r26
    2050:	f0 0d       	add	r31, r0
    2052:	b1 1d       	adc	r27, r1
    2054:	aa 1f       	adc	r26, r26
    2056:	64 9f       	mul	r22, r20
    2058:	66 27       	eor	r22, r22
    205a:	b0 0d       	add	r27, r0
    205c:	a1 1d       	adc	r26, r1
    205e:	66 1f       	adc	r22, r22
    2060:	82 9f       	mul	r24, r18
    2062:	22 27       	eor	r18, r18
    2064:	b0 0d       	add	r27, r0
    2066:	a1 1d       	adc	r26, r1
    2068:	62 1f       	adc	r22, r18
    206a:	73 9f       	mul	r23, r19
    206c:	b0 0d       	add	r27, r0
    206e:	a1 1d       	adc	r26, r1
    2070:	62 1f       	adc	r22, r18
    2072:	83 9f       	mul	r24, r19
    2074:	a0 0d       	add	r26, r0
    2076:	61 1d       	adc	r22, r1
    2078:	22 1f       	adc	r18, r18
    207a:	74 9f       	mul	r23, r20
    207c:	33 27       	eor	r19, r19
    207e:	a0 0d       	add	r26, r0
    2080:	61 1d       	adc	r22, r1
    2082:	23 1f       	adc	r18, r19
    2084:	84 9f       	mul	r24, r20
    2086:	60 0d       	add	r22, r0
    2088:	21 1d       	adc	r18, r1
    208a:	82 2f       	mov	r24, r18
    208c:	76 2f       	mov	r23, r22
    208e:	6a 2f       	mov	r22, r26
    2090:	11 24       	eor	r1, r1
    2092:	9f 57       	subi	r25, 0x7F	; 127
    2094:	50 40       	sbci	r21, 0x00	; 0
    2096:	9a f0       	brmi	.+38     	; 0x20be <__mulsf3_pse+0x88>
    2098:	f1 f0       	breq	.+60     	; 0x20d6 <__mulsf3_pse+0xa0>
    209a:	88 23       	and	r24, r24
    209c:	4a f0       	brmi	.+18     	; 0x20b0 <__mulsf3_pse+0x7a>
    209e:	ee 0f       	add	r30, r30
    20a0:	ff 1f       	adc	r31, r31
    20a2:	bb 1f       	adc	r27, r27
    20a4:	66 1f       	adc	r22, r22
    20a6:	77 1f       	adc	r23, r23
    20a8:	88 1f       	adc	r24, r24
    20aa:	91 50       	subi	r25, 0x01	; 1
    20ac:	50 40       	sbci	r21, 0x00	; 0
    20ae:	a9 f7       	brne	.-22     	; 0x209a <__mulsf3_pse+0x64>
    20b0:	9e 3f       	cpi	r25, 0xFE	; 254
    20b2:	51 05       	cpc	r21, r1
    20b4:	80 f0       	brcs	.+32     	; 0x20d6 <__mulsf3_pse+0xa0>
    20b6:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <__fp_inf>
    20ba:	0c 94 f7 0f 	jmp	0x1fee	; 0x1fee <__fp_szero>
    20be:	5f 3f       	cpi	r21, 0xFF	; 255
    20c0:	e4 f3       	brlt	.-8      	; 0x20ba <__mulsf3_pse+0x84>
    20c2:	98 3e       	cpi	r25, 0xE8	; 232
    20c4:	d4 f3       	brlt	.-12     	; 0x20ba <__mulsf3_pse+0x84>
    20c6:	86 95       	lsr	r24
    20c8:	77 95       	ror	r23
    20ca:	67 95       	ror	r22
    20cc:	b7 95       	ror	r27
    20ce:	f7 95       	ror	r31
    20d0:	e7 95       	ror	r30
    20d2:	9f 5f       	subi	r25, 0xFF	; 255
    20d4:	c1 f7       	brne	.-16     	; 0x20c6 <__mulsf3_pse+0x90>
    20d6:	fe 2b       	or	r31, r30
    20d8:	88 0f       	add	r24, r24
    20da:	91 1d       	adc	r25, r1
    20dc:	96 95       	lsr	r25
    20de:	87 95       	ror	r24
    20e0:	97 f9       	bld	r25, 7
    20e2:	08 95       	ret

000020e4 <square>:
    20e4:	9b 01       	movw	r18, r22
    20e6:	ac 01       	movw	r20, r24
    20e8:	0c 94 05 10 	jmp	0x200a	; 0x200a <__mulsf3>

000020ec <__mulsi3>:
    20ec:	db 01       	movw	r26, r22
    20ee:	8f 93       	push	r24
    20f0:	9f 93       	push	r25
    20f2:	0e 94 ba 10 	call	0x2174	; 0x2174 <__muluhisi3>
    20f6:	bf 91       	pop	r27
    20f8:	af 91       	pop	r26
    20fa:	a2 9f       	mul	r26, r18
    20fc:	80 0d       	add	r24, r0
    20fe:	91 1d       	adc	r25, r1
    2100:	a3 9f       	mul	r26, r19
    2102:	90 0d       	add	r25, r0
    2104:	b2 9f       	mul	r27, r18
    2106:	90 0d       	add	r25, r0
    2108:	11 24       	eor	r1, r1
    210a:	08 95       	ret

0000210c <__divmodsi4>:
    210c:	05 2e       	mov	r0, r21
    210e:	97 fb       	bst	r25, 7
    2110:	1e f4       	brtc	.+6      	; 0x2118 <__divmodsi4+0xc>
    2112:	00 94       	com	r0
    2114:	0e 94 9d 10 	call	0x213a	; 0x213a <__negsi2>
    2118:	57 fd       	sbrc	r21, 7
    211a:	07 d0       	rcall	.+14     	; 0x212a <__divmodsi4_neg2>
    211c:	0e 94 cd 10 	call	0x219a	; 0x219a <__udivmodsi4>
    2120:	07 fc       	sbrc	r0, 7
    2122:	03 d0       	rcall	.+6      	; 0x212a <__divmodsi4_neg2>
    2124:	4e f4       	brtc	.+18     	; 0x2138 <__divmodsi4_exit>
    2126:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__negsi2>

0000212a <__divmodsi4_neg2>:
    212a:	50 95       	com	r21
    212c:	40 95       	com	r20
    212e:	30 95       	com	r19
    2130:	21 95       	neg	r18
    2132:	3f 4f       	sbci	r19, 0xFF	; 255
    2134:	4f 4f       	sbci	r20, 0xFF	; 255
    2136:	5f 4f       	sbci	r21, 0xFF	; 255

00002138 <__divmodsi4_exit>:
    2138:	08 95       	ret

0000213a <__negsi2>:
    213a:	90 95       	com	r25
    213c:	80 95       	com	r24
    213e:	70 95       	com	r23
    2140:	61 95       	neg	r22
    2142:	7f 4f       	sbci	r23, 0xFF	; 255
    2144:	8f 4f       	sbci	r24, 0xFF	; 255
    2146:	9f 4f       	sbci	r25, 0xFF	; 255
    2148:	08 95       	ret

0000214a <__tablejump2__>:
    214a:	ee 0f       	add	r30, r30
    214c:	ff 1f       	adc	r31, r31
    214e:	05 90       	lpm	r0, Z+
    2150:	f4 91       	lpm	r31, Z
    2152:	e0 2d       	mov	r30, r0
    2154:	09 94       	ijmp

00002156 <__umulhisi3>:
    2156:	a2 9f       	mul	r26, r18
    2158:	b0 01       	movw	r22, r0
    215a:	b3 9f       	mul	r27, r19
    215c:	c0 01       	movw	r24, r0
    215e:	a3 9f       	mul	r26, r19
    2160:	70 0d       	add	r23, r0
    2162:	81 1d       	adc	r24, r1
    2164:	11 24       	eor	r1, r1
    2166:	91 1d       	adc	r25, r1
    2168:	b2 9f       	mul	r27, r18
    216a:	70 0d       	add	r23, r0
    216c:	81 1d       	adc	r24, r1
    216e:	11 24       	eor	r1, r1
    2170:	91 1d       	adc	r25, r1
    2172:	08 95       	ret

00002174 <__muluhisi3>:
    2174:	0e 94 ab 10 	call	0x2156	; 0x2156 <__umulhisi3>
    2178:	a5 9f       	mul	r26, r21
    217a:	90 0d       	add	r25, r0
    217c:	b4 9f       	mul	r27, r20
    217e:	90 0d       	add	r25, r0
    2180:	a4 9f       	mul	r26, r20
    2182:	80 0d       	add	r24, r0
    2184:	91 1d       	adc	r25, r1
    2186:	11 24       	eor	r1, r1
    2188:	08 95       	ret

0000218a <__mulshisi3>:
    218a:	b7 ff       	sbrs	r27, 7
    218c:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <__muluhisi3>

00002190 <__mulohisi3>:
    2190:	0e 94 ba 10 	call	0x2174	; 0x2174 <__muluhisi3>
    2194:	82 1b       	sub	r24, r18
    2196:	93 0b       	sbc	r25, r19
    2198:	08 95       	ret

0000219a <__udivmodsi4>:
    219a:	a1 e2       	ldi	r26, 0x21	; 33
    219c:	1a 2e       	mov	r1, r26
    219e:	aa 1b       	sub	r26, r26
    21a0:	bb 1b       	sub	r27, r27
    21a2:	fd 01       	movw	r30, r26
    21a4:	0d c0       	rjmp	.+26     	; 0x21c0 <__udivmodsi4_ep>

000021a6 <__udivmodsi4_loop>:
    21a6:	aa 1f       	adc	r26, r26
    21a8:	bb 1f       	adc	r27, r27
    21aa:	ee 1f       	adc	r30, r30
    21ac:	ff 1f       	adc	r31, r31
    21ae:	a2 17       	cp	r26, r18
    21b0:	b3 07       	cpc	r27, r19
    21b2:	e4 07       	cpc	r30, r20
    21b4:	f5 07       	cpc	r31, r21
    21b6:	20 f0       	brcs	.+8      	; 0x21c0 <__udivmodsi4_ep>
    21b8:	a2 1b       	sub	r26, r18
    21ba:	b3 0b       	sbc	r27, r19
    21bc:	e4 0b       	sbc	r30, r20
    21be:	f5 0b       	sbc	r31, r21

000021c0 <__udivmodsi4_ep>:
    21c0:	66 1f       	adc	r22, r22
    21c2:	77 1f       	adc	r23, r23
    21c4:	88 1f       	adc	r24, r24
    21c6:	99 1f       	adc	r25, r25
    21c8:	1a 94       	dec	r1
    21ca:	69 f7       	brne	.-38     	; 0x21a6 <__udivmodsi4_loop>
    21cc:	60 95       	com	r22
    21ce:	70 95       	com	r23
    21d0:	80 95       	com	r24
    21d2:	90 95       	com	r25
    21d4:	9b 01       	movw	r18, r22
    21d6:	ac 01       	movw	r20, r24
    21d8:	bd 01       	movw	r22, r26
    21da:	cf 01       	movw	r24, r30
    21dc:	08 95       	ret

000021de <dtostrf>:
    21de:	ef 92       	push	r14
    21e0:	0f 93       	push	r16
    21e2:	1f 93       	push	r17
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	e8 01       	movw	r28, r16
    21ea:	47 fd       	sbrc	r20, 7
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <dtostrf+0x14>
    21ee:	34 e0       	ldi	r19, 0x04	; 4
    21f0:	01 c0       	rjmp	.+2      	; 0x21f4 <dtostrf+0x16>
    21f2:	34 e1       	ldi	r19, 0x14	; 20
    21f4:	04 2e       	mov	r0, r20
    21f6:	00 0c       	add	r0, r0
    21f8:	55 0b       	sbc	r21, r21
    21fa:	57 ff       	sbrs	r21, 7
    21fc:	03 c0       	rjmp	.+6      	; 0x2204 <dtostrf+0x26>
    21fe:	51 95       	neg	r21
    2200:	41 95       	neg	r20
    2202:	51 09       	sbc	r21, r1
    2204:	e3 2e       	mov	r14, r19
    2206:	02 2f       	mov	r16, r18
    2208:	24 2f       	mov	r18, r20
    220a:	ae 01       	movw	r20, r28
    220c:	0e 94 38 13 	call	0x2670	; 0x2670 <dtoa_prf>
    2210:	ce 01       	movw	r24, r28
    2212:	df 91       	pop	r29
    2214:	cf 91       	pop	r28
    2216:	1f 91       	pop	r17
    2218:	0f 91       	pop	r16
    221a:	ef 90       	pop	r14
    221c:	08 95       	ret

0000221e <__strlen_P>:
    221e:	fc 01       	movw	r30, r24
    2220:	05 90       	lpm	r0, Z+
    2222:	00 20       	and	r0, r0
    2224:	e9 f7       	brne	.-6      	; 0x2220 <__strlen_P+0x2>
    2226:	80 95       	com	r24
    2228:	90 95       	com	r25
    222a:	8e 0f       	add	r24, r30
    222c:	9f 1f       	adc	r25, r31
    222e:	08 95       	ret

00002230 <strncasecmp_P>:
    2230:	fb 01       	movw	r30, r22
    2232:	dc 01       	movw	r26, r24
    2234:	41 50       	subi	r20, 0x01	; 1
    2236:	50 40       	sbci	r21, 0x00	; 0
    2238:	88 f0       	brcs	.+34     	; 0x225c <strncasecmp_P+0x2c>
    223a:	8d 91       	ld	r24, X+
    223c:	81 34       	cpi	r24, 0x41	; 65
    223e:	1c f0       	brlt	.+6      	; 0x2246 <strncasecmp_P+0x16>
    2240:	8b 35       	cpi	r24, 0x5B	; 91
    2242:	0c f4       	brge	.+2      	; 0x2246 <strncasecmp_P+0x16>
    2244:	80 5e       	subi	r24, 0xE0	; 224
    2246:	65 91       	lpm	r22, Z+
    2248:	61 34       	cpi	r22, 0x41	; 65
    224a:	1c f0       	brlt	.+6      	; 0x2252 <strncasecmp_P+0x22>
    224c:	6b 35       	cpi	r22, 0x5B	; 91
    224e:	0c f4       	brge	.+2      	; 0x2252 <strncasecmp_P+0x22>
    2250:	60 5e       	subi	r22, 0xE0	; 224
    2252:	86 1b       	sub	r24, r22
    2254:	61 11       	cpse	r22, r1
    2256:	71 f3       	breq	.-36     	; 0x2234 <strncasecmp_P+0x4>
    2258:	99 0b       	sbc	r25, r25
    225a:	08 95       	ret
    225c:	88 1b       	sub	r24, r24
    225e:	fc cf       	rjmp	.-8      	; 0x2258 <strncasecmp_P+0x28>

00002260 <strtok_r>:
    2260:	fa 01       	movw	r30, r20
    2262:	a1 91       	ld	r26, Z+
    2264:	b0 81       	ld	r27, Z
    2266:	00 97       	sbiw	r24, 0x00	; 0
    2268:	19 f4       	brne	.+6      	; 0x2270 <strtok_r+0x10>
    226a:	10 97       	sbiw	r26, 0x00	; 0
    226c:	e1 f0       	breq	.+56     	; 0x22a6 <strtok_r+0x46>
    226e:	cd 01       	movw	r24, r26
    2270:	dc 01       	movw	r26, r24
    2272:	cd 01       	movw	r24, r26
    2274:	0d 90       	ld	r0, X+
    2276:	00 20       	and	r0, r0
    2278:	11 f4       	brne	.+4      	; 0x227e <strtok_r+0x1e>
    227a:	c0 01       	movw	r24, r0
    227c:	13 c0       	rjmp	.+38     	; 0x22a4 <strtok_r+0x44>
    227e:	fb 01       	movw	r30, r22
    2280:	21 91       	ld	r18, Z+
    2282:	22 23       	and	r18, r18
    2284:	19 f0       	breq	.+6      	; 0x228c <strtok_r+0x2c>
    2286:	20 15       	cp	r18, r0
    2288:	d9 f7       	brne	.-10     	; 0x2280 <strtok_r+0x20>
    228a:	f3 cf       	rjmp	.-26     	; 0x2272 <strtok_r+0x12>
    228c:	fb 01       	movw	r30, r22
    228e:	21 91       	ld	r18, Z+
    2290:	20 15       	cp	r18, r0
    2292:	19 f4       	brne	.+6      	; 0x229a <strtok_r+0x3a>
    2294:	1e 92       	st	-X, r1
    2296:	11 96       	adiw	r26, 0x01	; 1
    2298:	06 c0       	rjmp	.+12     	; 0x22a6 <strtok_r+0x46>
    229a:	22 23       	and	r18, r18
    229c:	c1 f7       	brne	.-16     	; 0x228e <strtok_r+0x2e>
    229e:	0d 90       	ld	r0, X+
    22a0:	00 20       	and	r0, r0
    22a2:	a1 f7       	brne	.-24     	; 0x228c <strtok_r+0x2c>
    22a4:	d0 01       	movw	r26, r0
    22a6:	fa 01       	movw	r30, r20
    22a8:	a1 93       	st	Z+, r26
    22aa:	b0 83       	st	Z, r27
    22ac:	08 95       	ret

000022ae <vfprintf>:
    22ae:	ab e0       	ldi	r26, 0x0B	; 11
    22b0:	b0 e0       	ldi	r27, 0x00	; 0
    22b2:	ed e5       	ldi	r30, 0x5D	; 93
    22b4:	f1 e1       	ldi	r31, 0x11	; 17
    22b6:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <__prologue_saves__>
    22ba:	6c 01       	movw	r12, r24
    22bc:	7b 01       	movw	r14, r22
    22be:	8a 01       	movw	r16, r20
    22c0:	fc 01       	movw	r30, r24
    22c2:	17 82       	std	Z+7, r1	; 0x07
    22c4:	16 82       	std	Z+6, r1	; 0x06
    22c6:	83 81       	ldd	r24, Z+3	; 0x03
    22c8:	81 ff       	sbrs	r24, 1
    22ca:	cc c1       	rjmp	.+920    	; 0x2664 <vfprintf+0x3b6>
    22cc:	ce 01       	movw	r24, r28
    22ce:	01 96       	adiw	r24, 0x01	; 1
    22d0:	3c 01       	movw	r6, r24
    22d2:	f6 01       	movw	r30, r12
    22d4:	93 81       	ldd	r25, Z+3	; 0x03
    22d6:	f7 01       	movw	r30, r14
    22d8:	93 fd       	sbrc	r25, 3
    22da:	85 91       	lpm	r24, Z+
    22dc:	93 ff       	sbrs	r25, 3
    22de:	81 91       	ld	r24, Z+
    22e0:	7f 01       	movw	r14, r30
    22e2:	88 23       	and	r24, r24
    22e4:	09 f4       	brne	.+2      	; 0x22e8 <vfprintf+0x3a>
    22e6:	ba c1       	rjmp	.+884    	; 0x265c <vfprintf+0x3ae>
    22e8:	85 32       	cpi	r24, 0x25	; 37
    22ea:	39 f4       	brne	.+14     	; 0x22fa <vfprintf+0x4c>
    22ec:	93 fd       	sbrc	r25, 3
    22ee:	85 91       	lpm	r24, Z+
    22f0:	93 ff       	sbrs	r25, 3
    22f2:	81 91       	ld	r24, Z+
    22f4:	7f 01       	movw	r14, r30
    22f6:	85 32       	cpi	r24, 0x25	; 37
    22f8:	29 f4       	brne	.+10     	; 0x2304 <vfprintf+0x56>
    22fa:	b6 01       	movw	r22, r12
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	0e 94 80 15 	call	0x2b00	; 0x2b00 <fputc>
    2302:	e7 cf       	rjmp	.-50     	; 0x22d2 <vfprintf+0x24>
    2304:	91 2c       	mov	r9, r1
    2306:	21 2c       	mov	r2, r1
    2308:	31 2c       	mov	r3, r1
    230a:	ff e1       	ldi	r31, 0x1F	; 31
    230c:	f3 15       	cp	r31, r3
    230e:	d8 f0       	brcs	.+54     	; 0x2346 <vfprintf+0x98>
    2310:	8b 32       	cpi	r24, 0x2B	; 43
    2312:	79 f0       	breq	.+30     	; 0x2332 <vfprintf+0x84>
    2314:	38 f4       	brcc	.+14     	; 0x2324 <vfprintf+0x76>
    2316:	80 32       	cpi	r24, 0x20	; 32
    2318:	79 f0       	breq	.+30     	; 0x2338 <vfprintf+0x8a>
    231a:	83 32       	cpi	r24, 0x23	; 35
    231c:	a1 f4       	brne	.+40     	; 0x2346 <vfprintf+0x98>
    231e:	23 2d       	mov	r18, r3
    2320:	20 61       	ori	r18, 0x10	; 16
    2322:	1d c0       	rjmp	.+58     	; 0x235e <vfprintf+0xb0>
    2324:	8d 32       	cpi	r24, 0x2D	; 45
    2326:	61 f0       	breq	.+24     	; 0x2340 <vfprintf+0x92>
    2328:	80 33       	cpi	r24, 0x30	; 48
    232a:	69 f4       	brne	.+26     	; 0x2346 <vfprintf+0x98>
    232c:	23 2d       	mov	r18, r3
    232e:	21 60       	ori	r18, 0x01	; 1
    2330:	16 c0       	rjmp	.+44     	; 0x235e <vfprintf+0xb0>
    2332:	83 2d       	mov	r24, r3
    2334:	82 60       	ori	r24, 0x02	; 2
    2336:	38 2e       	mov	r3, r24
    2338:	e3 2d       	mov	r30, r3
    233a:	e4 60       	ori	r30, 0x04	; 4
    233c:	3e 2e       	mov	r3, r30
    233e:	2a c0       	rjmp	.+84     	; 0x2394 <vfprintf+0xe6>
    2340:	f3 2d       	mov	r31, r3
    2342:	f8 60       	ori	r31, 0x08	; 8
    2344:	1d c0       	rjmp	.+58     	; 0x2380 <vfprintf+0xd2>
    2346:	37 fc       	sbrc	r3, 7
    2348:	2d c0       	rjmp	.+90     	; 0x23a4 <vfprintf+0xf6>
    234a:	20 ed       	ldi	r18, 0xD0	; 208
    234c:	28 0f       	add	r18, r24
    234e:	2a 30       	cpi	r18, 0x0A	; 10
    2350:	40 f0       	brcs	.+16     	; 0x2362 <vfprintf+0xb4>
    2352:	8e 32       	cpi	r24, 0x2E	; 46
    2354:	b9 f4       	brne	.+46     	; 0x2384 <vfprintf+0xd6>
    2356:	36 fc       	sbrc	r3, 6
    2358:	81 c1       	rjmp	.+770    	; 0x265c <vfprintf+0x3ae>
    235a:	23 2d       	mov	r18, r3
    235c:	20 64       	ori	r18, 0x40	; 64
    235e:	32 2e       	mov	r3, r18
    2360:	19 c0       	rjmp	.+50     	; 0x2394 <vfprintf+0xe6>
    2362:	36 fe       	sbrs	r3, 6
    2364:	06 c0       	rjmp	.+12     	; 0x2372 <vfprintf+0xc4>
    2366:	8a e0       	ldi	r24, 0x0A	; 10
    2368:	98 9e       	mul	r9, r24
    236a:	20 0d       	add	r18, r0
    236c:	11 24       	eor	r1, r1
    236e:	92 2e       	mov	r9, r18
    2370:	11 c0       	rjmp	.+34     	; 0x2394 <vfprintf+0xe6>
    2372:	ea e0       	ldi	r30, 0x0A	; 10
    2374:	2e 9e       	mul	r2, r30
    2376:	20 0d       	add	r18, r0
    2378:	11 24       	eor	r1, r1
    237a:	22 2e       	mov	r2, r18
    237c:	f3 2d       	mov	r31, r3
    237e:	f0 62       	ori	r31, 0x20	; 32
    2380:	3f 2e       	mov	r3, r31
    2382:	08 c0       	rjmp	.+16     	; 0x2394 <vfprintf+0xe6>
    2384:	8c 36       	cpi	r24, 0x6C	; 108
    2386:	21 f4       	brne	.+8      	; 0x2390 <vfprintf+0xe2>
    2388:	83 2d       	mov	r24, r3
    238a:	80 68       	ori	r24, 0x80	; 128
    238c:	38 2e       	mov	r3, r24
    238e:	02 c0       	rjmp	.+4      	; 0x2394 <vfprintf+0xe6>
    2390:	88 36       	cpi	r24, 0x68	; 104
    2392:	41 f4       	brne	.+16     	; 0x23a4 <vfprintf+0xf6>
    2394:	f7 01       	movw	r30, r14
    2396:	93 fd       	sbrc	r25, 3
    2398:	85 91       	lpm	r24, Z+
    239a:	93 ff       	sbrs	r25, 3
    239c:	81 91       	ld	r24, Z+
    239e:	7f 01       	movw	r14, r30
    23a0:	81 11       	cpse	r24, r1
    23a2:	b3 cf       	rjmp	.-154    	; 0x230a <vfprintf+0x5c>
    23a4:	98 2f       	mov	r25, r24
    23a6:	9f 7d       	andi	r25, 0xDF	; 223
    23a8:	95 54       	subi	r25, 0x45	; 69
    23aa:	93 30       	cpi	r25, 0x03	; 3
    23ac:	28 f4       	brcc	.+10     	; 0x23b8 <vfprintf+0x10a>
    23ae:	0c 5f       	subi	r16, 0xFC	; 252
    23b0:	1f 4f       	sbci	r17, 0xFF	; 255
    23b2:	9f e3       	ldi	r25, 0x3F	; 63
    23b4:	99 83       	std	Y+1, r25	; 0x01
    23b6:	0d c0       	rjmp	.+26     	; 0x23d2 <vfprintf+0x124>
    23b8:	83 36       	cpi	r24, 0x63	; 99
    23ba:	31 f0       	breq	.+12     	; 0x23c8 <vfprintf+0x11a>
    23bc:	83 37       	cpi	r24, 0x73	; 115
    23be:	71 f0       	breq	.+28     	; 0x23dc <vfprintf+0x12e>
    23c0:	83 35       	cpi	r24, 0x53	; 83
    23c2:	09 f0       	breq	.+2      	; 0x23c6 <vfprintf+0x118>
    23c4:	59 c0       	rjmp	.+178    	; 0x2478 <vfprintf+0x1ca>
    23c6:	21 c0       	rjmp	.+66     	; 0x240a <vfprintf+0x15c>
    23c8:	f8 01       	movw	r30, r16
    23ca:	80 81       	ld	r24, Z
    23cc:	89 83       	std	Y+1, r24	; 0x01
    23ce:	0e 5f       	subi	r16, 0xFE	; 254
    23d0:	1f 4f       	sbci	r17, 0xFF	; 255
    23d2:	88 24       	eor	r8, r8
    23d4:	83 94       	inc	r8
    23d6:	91 2c       	mov	r9, r1
    23d8:	53 01       	movw	r10, r6
    23da:	13 c0       	rjmp	.+38     	; 0x2402 <vfprintf+0x154>
    23dc:	28 01       	movw	r4, r16
    23de:	f2 e0       	ldi	r31, 0x02	; 2
    23e0:	4f 0e       	add	r4, r31
    23e2:	51 1c       	adc	r5, r1
    23e4:	f8 01       	movw	r30, r16
    23e6:	a0 80       	ld	r10, Z
    23e8:	b1 80       	ldd	r11, Z+1	; 0x01
    23ea:	36 fe       	sbrs	r3, 6
    23ec:	03 c0       	rjmp	.+6      	; 0x23f4 <vfprintf+0x146>
    23ee:	69 2d       	mov	r22, r9
    23f0:	70 e0       	ldi	r23, 0x00	; 0
    23f2:	02 c0       	rjmp	.+4      	; 0x23f8 <vfprintf+0x14a>
    23f4:	6f ef       	ldi	r22, 0xFF	; 255
    23f6:	7f ef       	ldi	r23, 0xFF	; 255
    23f8:	c5 01       	movw	r24, r10
    23fa:	0e 94 75 15 	call	0x2aea	; 0x2aea <strnlen>
    23fe:	4c 01       	movw	r8, r24
    2400:	82 01       	movw	r16, r4
    2402:	f3 2d       	mov	r31, r3
    2404:	ff 77       	andi	r31, 0x7F	; 127
    2406:	3f 2e       	mov	r3, r31
    2408:	16 c0       	rjmp	.+44     	; 0x2436 <vfprintf+0x188>
    240a:	28 01       	movw	r4, r16
    240c:	22 e0       	ldi	r18, 0x02	; 2
    240e:	42 0e       	add	r4, r18
    2410:	51 1c       	adc	r5, r1
    2412:	f8 01       	movw	r30, r16
    2414:	a0 80       	ld	r10, Z
    2416:	b1 80       	ldd	r11, Z+1	; 0x01
    2418:	36 fe       	sbrs	r3, 6
    241a:	03 c0       	rjmp	.+6      	; 0x2422 <vfprintf+0x174>
    241c:	69 2d       	mov	r22, r9
    241e:	70 e0       	ldi	r23, 0x00	; 0
    2420:	02 c0       	rjmp	.+4      	; 0x2426 <vfprintf+0x178>
    2422:	6f ef       	ldi	r22, 0xFF	; 255
    2424:	7f ef       	ldi	r23, 0xFF	; 255
    2426:	c5 01       	movw	r24, r10
    2428:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <strnlen_P>
    242c:	4c 01       	movw	r8, r24
    242e:	f3 2d       	mov	r31, r3
    2430:	f0 68       	ori	r31, 0x80	; 128
    2432:	3f 2e       	mov	r3, r31
    2434:	82 01       	movw	r16, r4
    2436:	33 fc       	sbrc	r3, 3
    2438:	1b c0       	rjmp	.+54     	; 0x2470 <vfprintf+0x1c2>
    243a:	82 2d       	mov	r24, r2
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	88 16       	cp	r8, r24
    2440:	99 06       	cpc	r9, r25
    2442:	b0 f4       	brcc	.+44     	; 0x2470 <vfprintf+0x1c2>
    2444:	b6 01       	movw	r22, r12
    2446:	80 e2       	ldi	r24, 0x20	; 32
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	0e 94 80 15 	call	0x2b00	; 0x2b00 <fputc>
    244e:	2a 94       	dec	r2
    2450:	f4 cf       	rjmp	.-24     	; 0x243a <vfprintf+0x18c>
    2452:	f5 01       	movw	r30, r10
    2454:	37 fc       	sbrc	r3, 7
    2456:	85 91       	lpm	r24, Z+
    2458:	37 fe       	sbrs	r3, 7
    245a:	81 91       	ld	r24, Z+
    245c:	5f 01       	movw	r10, r30
    245e:	b6 01       	movw	r22, r12
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	0e 94 80 15 	call	0x2b00	; 0x2b00 <fputc>
    2466:	21 10       	cpse	r2, r1
    2468:	2a 94       	dec	r2
    246a:	21 e0       	ldi	r18, 0x01	; 1
    246c:	82 1a       	sub	r8, r18
    246e:	91 08       	sbc	r9, r1
    2470:	81 14       	cp	r8, r1
    2472:	91 04       	cpc	r9, r1
    2474:	71 f7       	brne	.-36     	; 0x2452 <vfprintf+0x1a4>
    2476:	e8 c0       	rjmp	.+464    	; 0x2648 <vfprintf+0x39a>
    2478:	84 36       	cpi	r24, 0x64	; 100
    247a:	11 f0       	breq	.+4      	; 0x2480 <vfprintf+0x1d2>
    247c:	89 36       	cpi	r24, 0x69	; 105
    247e:	41 f5       	brne	.+80     	; 0x24d0 <vfprintf+0x222>
    2480:	f8 01       	movw	r30, r16
    2482:	37 fe       	sbrs	r3, 7
    2484:	07 c0       	rjmp	.+14     	; 0x2494 <vfprintf+0x1e6>
    2486:	60 81       	ld	r22, Z
    2488:	71 81       	ldd	r23, Z+1	; 0x01
    248a:	82 81       	ldd	r24, Z+2	; 0x02
    248c:	93 81       	ldd	r25, Z+3	; 0x03
    248e:	0c 5f       	subi	r16, 0xFC	; 252
    2490:	1f 4f       	sbci	r17, 0xFF	; 255
    2492:	08 c0       	rjmp	.+16     	; 0x24a4 <vfprintf+0x1f6>
    2494:	60 81       	ld	r22, Z
    2496:	71 81       	ldd	r23, Z+1	; 0x01
    2498:	07 2e       	mov	r0, r23
    249a:	00 0c       	add	r0, r0
    249c:	88 0b       	sbc	r24, r24
    249e:	99 0b       	sbc	r25, r25
    24a0:	0e 5f       	subi	r16, 0xFE	; 254
    24a2:	1f 4f       	sbci	r17, 0xFF	; 255
    24a4:	f3 2d       	mov	r31, r3
    24a6:	ff 76       	andi	r31, 0x6F	; 111
    24a8:	3f 2e       	mov	r3, r31
    24aa:	97 ff       	sbrs	r25, 7
    24ac:	09 c0       	rjmp	.+18     	; 0x24c0 <vfprintf+0x212>
    24ae:	90 95       	com	r25
    24b0:	80 95       	com	r24
    24b2:	70 95       	com	r23
    24b4:	61 95       	neg	r22
    24b6:	7f 4f       	sbci	r23, 0xFF	; 255
    24b8:	8f 4f       	sbci	r24, 0xFF	; 255
    24ba:	9f 4f       	sbci	r25, 0xFF	; 255
    24bc:	f0 68       	ori	r31, 0x80	; 128
    24be:	3f 2e       	mov	r3, r31
    24c0:	2a e0       	ldi	r18, 0x0A	; 10
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	a3 01       	movw	r20, r6
    24c6:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__ultoa_invert>
    24ca:	88 2e       	mov	r8, r24
    24cc:	86 18       	sub	r8, r6
    24ce:	45 c0       	rjmp	.+138    	; 0x255a <vfprintf+0x2ac>
    24d0:	85 37       	cpi	r24, 0x75	; 117
    24d2:	31 f4       	brne	.+12     	; 0x24e0 <vfprintf+0x232>
    24d4:	23 2d       	mov	r18, r3
    24d6:	2f 7e       	andi	r18, 0xEF	; 239
    24d8:	b2 2e       	mov	r11, r18
    24da:	2a e0       	ldi	r18, 0x0A	; 10
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	25 c0       	rjmp	.+74     	; 0x252a <vfprintf+0x27c>
    24e0:	93 2d       	mov	r25, r3
    24e2:	99 7f       	andi	r25, 0xF9	; 249
    24e4:	b9 2e       	mov	r11, r25
    24e6:	8f 36       	cpi	r24, 0x6F	; 111
    24e8:	c1 f0       	breq	.+48     	; 0x251a <vfprintf+0x26c>
    24ea:	18 f4       	brcc	.+6      	; 0x24f2 <vfprintf+0x244>
    24ec:	88 35       	cpi	r24, 0x58	; 88
    24ee:	79 f0       	breq	.+30     	; 0x250e <vfprintf+0x260>
    24f0:	b5 c0       	rjmp	.+362    	; 0x265c <vfprintf+0x3ae>
    24f2:	80 37       	cpi	r24, 0x70	; 112
    24f4:	19 f0       	breq	.+6      	; 0x24fc <vfprintf+0x24e>
    24f6:	88 37       	cpi	r24, 0x78	; 120
    24f8:	21 f0       	breq	.+8      	; 0x2502 <vfprintf+0x254>
    24fa:	b0 c0       	rjmp	.+352    	; 0x265c <vfprintf+0x3ae>
    24fc:	e9 2f       	mov	r30, r25
    24fe:	e0 61       	ori	r30, 0x10	; 16
    2500:	be 2e       	mov	r11, r30
    2502:	b4 fe       	sbrs	r11, 4
    2504:	0d c0       	rjmp	.+26     	; 0x2520 <vfprintf+0x272>
    2506:	fb 2d       	mov	r31, r11
    2508:	f4 60       	ori	r31, 0x04	; 4
    250a:	bf 2e       	mov	r11, r31
    250c:	09 c0       	rjmp	.+18     	; 0x2520 <vfprintf+0x272>
    250e:	34 fe       	sbrs	r3, 4
    2510:	0a c0       	rjmp	.+20     	; 0x2526 <vfprintf+0x278>
    2512:	29 2f       	mov	r18, r25
    2514:	26 60       	ori	r18, 0x06	; 6
    2516:	b2 2e       	mov	r11, r18
    2518:	06 c0       	rjmp	.+12     	; 0x2526 <vfprintf+0x278>
    251a:	28 e0       	ldi	r18, 0x08	; 8
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	05 c0       	rjmp	.+10     	; 0x252a <vfprintf+0x27c>
    2520:	20 e1       	ldi	r18, 0x10	; 16
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	02 c0       	rjmp	.+4      	; 0x252a <vfprintf+0x27c>
    2526:	20 e1       	ldi	r18, 0x10	; 16
    2528:	32 e0       	ldi	r19, 0x02	; 2
    252a:	f8 01       	movw	r30, r16
    252c:	b7 fe       	sbrs	r11, 7
    252e:	07 c0       	rjmp	.+14     	; 0x253e <vfprintf+0x290>
    2530:	60 81       	ld	r22, Z
    2532:	71 81       	ldd	r23, Z+1	; 0x01
    2534:	82 81       	ldd	r24, Z+2	; 0x02
    2536:	93 81       	ldd	r25, Z+3	; 0x03
    2538:	0c 5f       	subi	r16, 0xFC	; 252
    253a:	1f 4f       	sbci	r17, 0xFF	; 255
    253c:	06 c0       	rjmp	.+12     	; 0x254a <vfprintf+0x29c>
    253e:	60 81       	ld	r22, Z
    2540:	71 81       	ldd	r23, Z+1	; 0x01
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	0e 5f       	subi	r16, 0xFE	; 254
    2548:	1f 4f       	sbci	r17, 0xFF	; 255
    254a:	a3 01       	movw	r20, r6
    254c:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__ultoa_invert>
    2550:	88 2e       	mov	r8, r24
    2552:	86 18       	sub	r8, r6
    2554:	fb 2d       	mov	r31, r11
    2556:	ff 77       	andi	r31, 0x7F	; 127
    2558:	3f 2e       	mov	r3, r31
    255a:	36 fe       	sbrs	r3, 6
    255c:	0d c0       	rjmp	.+26     	; 0x2578 <vfprintf+0x2ca>
    255e:	23 2d       	mov	r18, r3
    2560:	2e 7f       	andi	r18, 0xFE	; 254
    2562:	a2 2e       	mov	r10, r18
    2564:	89 14       	cp	r8, r9
    2566:	58 f4       	brcc	.+22     	; 0x257e <vfprintf+0x2d0>
    2568:	34 fe       	sbrs	r3, 4
    256a:	0b c0       	rjmp	.+22     	; 0x2582 <vfprintf+0x2d4>
    256c:	32 fc       	sbrc	r3, 2
    256e:	09 c0       	rjmp	.+18     	; 0x2582 <vfprintf+0x2d4>
    2570:	83 2d       	mov	r24, r3
    2572:	8e 7e       	andi	r24, 0xEE	; 238
    2574:	a8 2e       	mov	r10, r24
    2576:	05 c0       	rjmp	.+10     	; 0x2582 <vfprintf+0x2d4>
    2578:	b8 2c       	mov	r11, r8
    257a:	a3 2c       	mov	r10, r3
    257c:	03 c0       	rjmp	.+6      	; 0x2584 <vfprintf+0x2d6>
    257e:	b8 2c       	mov	r11, r8
    2580:	01 c0       	rjmp	.+2      	; 0x2584 <vfprintf+0x2d6>
    2582:	b9 2c       	mov	r11, r9
    2584:	a4 fe       	sbrs	r10, 4
    2586:	0f c0       	rjmp	.+30     	; 0x25a6 <vfprintf+0x2f8>
    2588:	fe 01       	movw	r30, r28
    258a:	e8 0d       	add	r30, r8
    258c:	f1 1d       	adc	r31, r1
    258e:	80 81       	ld	r24, Z
    2590:	80 33       	cpi	r24, 0x30	; 48
    2592:	21 f4       	brne	.+8      	; 0x259c <vfprintf+0x2ee>
    2594:	9a 2d       	mov	r25, r10
    2596:	99 7e       	andi	r25, 0xE9	; 233
    2598:	a9 2e       	mov	r10, r25
    259a:	09 c0       	rjmp	.+18     	; 0x25ae <vfprintf+0x300>
    259c:	a2 fe       	sbrs	r10, 2
    259e:	06 c0       	rjmp	.+12     	; 0x25ac <vfprintf+0x2fe>
    25a0:	b3 94       	inc	r11
    25a2:	b3 94       	inc	r11
    25a4:	04 c0       	rjmp	.+8      	; 0x25ae <vfprintf+0x300>
    25a6:	8a 2d       	mov	r24, r10
    25a8:	86 78       	andi	r24, 0x86	; 134
    25aa:	09 f0       	breq	.+2      	; 0x25ae <vfprintf+0x300>
    25ac:	b3 94       	inc	r11
    25ae:	a3 fc       	sbrc	r10, 3
    25b0:	11 c0       	rjmp	.+34     	; 0x25d4 <vfprintf+0x326>
    25b2:	a0 fe       	sbrs	r10, 0
    25b4:	06 c0       	rjmp	.+12     	; 0x25c2 <vfprintf+0x314>
    25b6:	b2 14       	cp	r11, r2
    25b8:	88 f4       	brcc	.+34     	; 0x25dc <vfprintf+0x32e>
    25ba:	28 0c       	add	r2, r8
    25bc:	92 2c       	mov	r9, r2
    25be:	9b 18       	sub	r9, r11
    25c0:	0e c0       	rjmp	.+28     	; 0x25de <vfprintf+0x330>
    25c2:	b2 14       	cp	r11, r2
    25c4:	60 f4       	brcc	.+24     	; 0x25de <vfprintf+0x330>
    25c6:	b6 01       	movw	r22, r12
    25c8:	80 e2       	ldi	r24, 0x20	; 32
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	0e 94 80 15 	call	0x2b00	; 0x2b00 <fputc>
    25d0:	b3 94       	inc	r11
    25d2:	f7 cf       	rjmp	.-18     	; 0x25c2 <vfprintf+0x314>
    25d4:	b2 14       	cp	r11, r2
    25d6:	18 f4       	brcc	.+6      	; 0x25de <vfprintf+0x330>
    25d8:	2b 18       	sub	r2, r11
    25da:	02 c0       	rjmp	.+4      	; 0x25e0 <vfprintf+0x332>
    25dc:	98 2c       	mov	r9, r8
    25de:	21 2c       	mov	r2, r1
    25e0:	a4 fe       	sbrs	r10, 4
    25e2:	10 c0       	rjmp	.+32     	; 0x2604 <vfprintf+0x356>
    25e4:	b6 01       	movw	r22, r12
    25e6:	80 e3       	ldi	r24, 0x30	; 48
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	0e 94 80 15 	call	0x2b00	; 0x2b00 <fputc>
    25ee:	a2 fe       	sbrs	r10, 2
    25f0:	17 c0       	rjmp	.+46     	; 0x2620 <vfprintf+0x372>
    25f2:	a1 fc       	sbrc	r10, 1
    25f4:	03 c0       	rjmp	.+6      	; 0x25fc <vfprintf+0x34e>
    25f6:	88 e7       	ldi	r24, 0x78	; 120
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	02 c0       	rjmp	.+4      	; 0x2600 <vfprintf+0x352>
    25fc:	88 e5       	ldi	r24, 0x58	; 88
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	b6 01       	movw	r22, r12
    2602:	0c c0       	rjmp	.+24     	; 0x261c <vfprintf+0x36e>
    2604:	8a 2d       	mov	r24, r10
    2606:	86 78       	andi	r24, 0x86	; 134
    2608:	59 f0       	breq	.+22     	; 0x2620 <vfprintf+0x372>
    260a:	a1 fe       	sbrs	r10, 1
    260c:	02 c0       	rjmp	.+4      	; 0x2612 <vfprintf+0x364>
    260e:	8b e2       	ldi	r24, 0x2B	; 43
    2610:	01 c0       	rjmp	.+2      	; 0x2614 <vfprintf+0x366>
    2612:	80 e2       	ldi	r24, 0x20	; 32
    2614:	a7 fc       	sbrc	r10, 7
    2616:	8d e2       	ldi	r24, 0x2D	; 45
    2618:	b6 01       	movw	r22, r12
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	0e 94 80 15 	call	0x2b00	; 0x2b00 <fputc>
    2620:	89 14       	cp	r8, r9
    2622:	38 f4       	brcc	.+14     	; 0x2632 <vfprintf+0x384>
    2624:	b6 01       	movw	r22, r12
    2626:	80 e3       	ldi	r24, 0x30	; 48
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	0e 94 80 15 	call	0x2b00	; 0x2b00 <fputc>
    262e:	9a 94       	dec	r9
    2630:	f7 cf       	rjmp	.-18     	; 0x2620 <vfprintf+0x372>
    2632:	8a 94       	dec	r8
    2634:	f3 01       	movw	r30, r6
    2636:	e8 0d       	add	r30, r8
    2638:	f1 1d       	adc	r31, r1
    263a:	80 81       	ld	r24, Z
    263c:	b6 01       	movw	r22, r12
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	0e 94 80 15 	call	0x2b00	; 0x2b00 <fputc>
    2644:	81 10       	cpse	r8, r1
    2646:	f5 cf       	rjmp	.-22     	; 0x2632 <vfprintf+0x384>
    2648:	22 20       	and	r2, r2
    264a:	09 f4       	brne	.+2      	; 0x264e <vfprintf+0x3a0>
    264c:	42 ce       	rjmp	.-892    	; 0x22d2 <vfprintf+0x24>
    264e:	b6 01       	movw	r22, r12
    2650:	80 e2       	ldi	r24, 0x20	; 32
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	0e 94 80 15 	call	0x2b00	; 0x2b00 <fputc>
    2658:	2a 94       	dec	r2
    265a:	f6 cf       	rjmp	.-20     	; 0x2648 <vfprintf+0x39a>
    265c:	f6 01       	movw	r30, r12
    265e:	86 81       	ldd	r24, Z+6	; 0x06
    2660:	97 81       	ldd	r25, Z+7	; 0x07
    2662:	02 c0       	rjmp	.+4      	; 0x2668 <vfprintf+0x3ba>
    2664:	8f ef       	ldi	r24, 0xFF	; 255
    2666:	9f ef       	ldi	r25, 0xFF	; 255
    2668:	2b 96       	adiw	r28, 0x0b	; 11
    266a:	e2 e1       	ldi	r30, 0x12	; 18
    266c:	0c 94 36 16 	jmp	0x2c6c	; 0x2c6c <__epilogue_restores__>

00002670 <dtoa_prf>:
    2670:	a9 e0       	ldi	r26, 0x09	; 9
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	ee e3       	ldi	r30, 0x3E	; 62
    2676:	f3 e1       	ldi	r31, 0x13	; 19
    2678:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__prologue_saves__+0xc>
    267c:	6a 01       	movw	r12, r20
    267e:	12 2f       	mov	r17, r18
    2680:	b0 2e       	mov	r11, r16
    2682:	2b e3       	ldi	r18, 0x3B	; 59
    2684:	20 17       	cp	r18, r16
    2686:	20 f0       	brcs	.+8      	; 0x2690 <dtoa_prf+0x20>
    2688:	ff 24       	eor	r15, r15
    268a:	f3 94       	inc	r15
    268c:	f0 0e       	add	r15, r16
    268e:	02 c0       	rjmp	.+4      	; 0x2694 <dtoa_prf+0x24>
    2690:	2c e3       	ldi	r18, 0x3C	; 60
    2692:	f2 2e       	mov	r15, r18
    2694:	0f 2d       	mov	r16, r15
    2696:	27 e0       	ldi	r18, 0x07	; 7
    2698:	ae 01       	movw	r20, r28
    269a:	4f 5f       	subi	r20, 0xFF	; 255
    269c:	5f 4f       	sbci	r21, 0xFF	; 255
    269e:	0e 94 92 14 	call	0x2924	; 0x2924 <__ftoa_engine>
    26a2:	bc 01       	movw	r22, r24
    26a4:	49 81       	ldd	r20, Y+1	; 0x01
    26a6:	84 2f       	mov	r24, r20
    26a8:	89 70       	andi	r24, 0x09	; 9
    26aa:	81 30       	cpi	r24, 0x01	; 1
    26ac:	31 f0       	breq	.+12     	; 0x26ba <dtoa_prf+0x4a>
    26ae:	e1 fc       	sbrc	r14, 1
    26b0:	06 c0       	rjmp	.+12     	; 0x26be <dtoa_prf+0x4e>
    26b2:	e0 fe       	sbrs	r14, 0
    26b4:	06 c0       	rjmp	.+12     	; 0x26c2 <dtoa_prf+0x52>
    26b6:	90 e2       	ldi	r25, 0x20	; 32
    26b8:	05 c0       	rjmp	.+10     	; 0x26c4 <dtoa_prf+0x54>
    26ba:	9d e2       	ldi	r25, 0x2D	; 45
    26bc:	03 c0       	rjmp	.+6      	; 0x26c4 <dtoa_prf+0x54>
    26be:	9b e2       	ldi	r25, 0x2B	; 43
    26c0:	01 c0       	rjmp	.+2      	; 0x26c4 <dtoa_prf+0x54>
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	5e 2d       	mov	r21, r14
    26c6:	50 71       	andi	r21, 0x10	; 16
    26c8:	43 ff       	sbrs	r20, 3
    26ca:	3c c0       	rjmp	.+120    	; 0x2744 <dtoa_prf+0xd4>
    26cc:	91 11       	cpse	r25, r1
    26ce:	02 c0       	rjmp	.+4      	; 0x26d4 <dtoa_prf+0x64>
    26d0:	83 e0       	ldi	r24, 0x03	; 3
    26d2:	01 c0       	rjmp	.+2      	; 0x26d6 <dtoa_prf+0x66>
    26d4:	84 e0       	ldi	r24, 0x04	; 4
    26d6:	81 17       	cp	r24, r17
    26d8:	18 f4       	brcc	.+6      	; 0x26e0 <dtoa_prf+0x70>
    26da:	21 2f       	mov	r18, r17
    26dc:	28 1b       	sub	r18, r24
    26de:	01 c0       	rjmp	.+2      	; 0x26e2 <dtoa_prf+0x72>
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	51 11       	cpse	r21, r1
    26e4:	0b c0       	rjmp	.+22     	; 0x26fc <dtoa_prf+0x8c>
    26e6:	f6 01       	movw	r30, r12
    26e8:	82 2f       	mov	r24, r18
    26ea:	30 e2       	ldi	r19, 0x20	; 32
    26ec:	88 23       	and	r24, r24
    26ee:	19 f0       	breq	.+6      	; 0x26f6 <dtoa_prf+0x86>
    26f0:	31 93       	st	Z+, r19
    26f2:	81 50       	subi	r24, 0x01	; 1
    26f4:	fb cf       	rjmp	.-10     	; 0x26ec <dtoa_prf+0x7c>
    26f6:	c2 0e       	add	r12, r18
    26f8:	d1 1c       	adc	r13, r1
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	99 23       	and	r25, r25
    26fe:	29 f0       	breq	.+10     	; 0x270a <dtoa_prf+0x9a>
    2700:	d6 01       	movw	r26, r12
    2702:	9c 93       	st	X, r25
    2704:	f6 01       	movw	r30, r12
    2706:	31 96       	adiw	r30, 0x01	; 1
    2708:	6f 01       	movw	r12, r30
    270a:	c6 01       	movw	r24, r12
    270c:	03 96       	adiw	r24, 0x03	; 3
    270e:	e2 fe       	sbrs	r14, 2
    2710:	0a c0       	rjmp	.+20     	; 0x2726 <dtoa_prf+0xb6>
    2712:	3e e4       	ldi	r19, 0x4E	; 78
    2714:	d6 01       	movw	r26, r12
    2716:	3c 93       	st	X, r19
    2718:	41 e4       	ldi	r20, 0x41	; 65
    271a:	11 96       	adiw	r26, 0x01	; 1
    271c:	4c 93       	st	X, r20
    271e:	11 97       	sbiw	r26, 0x01	; 1
    2720:	12 96       	adiw	r26, 0x02	; 2
    2722:	3c 93       	st	X, r19
    2724:	06 c0       	rjmp	.+12     	; 0x2732 <dtoa_prf+0xc2>
    2726:	3e e6       	ldi	r19, 0x6E	; 110
    2728:	f6 01       	movw	r30, r12
    272a:	30 83       	st	Z, r19
    272c:	41 e6       	ldi	r20, 0x61	; 97
    272e:	41 83       	std	Z+1, r20	; 0x01
    2730:	32 83       	std	Z+2, r19	; 0x02
    2732:	fc 01       	movw	r30, r24
    2734:	32 2f       	mov	r19, r18
    2736:	40 e2       	ldi	r20, 0x20	; 32
    2738:	33 23       	and	r19, r19
    273a:	09 f4       	brne	.+2      	; 0x273e <dtoa_prf+0xce>
    273c:	42 c0       	rjmp	.+132    	; 0x27c2 <dtoa_prf+0x152>
    273e:	41 93       	st	Z+, r20
    2740:	31 50       	subi	r19, 0x01	; 1
    2742:	fa cf       	rjmp	.-12     	; 0x2738 <dtoa_prf+0xc8>
    2744:	42 ff       	sbrs	r20, 2
    2746:	44 c0       	rjmp	.+136    	; 0x27d0 <dtoa_prf+0x160>
    2748:	91 11       	cpse	r25, r1
    274a:	02 c0       	rjmp	.+4      	; 0x2750 <dtoa_prf+0xe0>
    274c:	83 e0       	ldi	r24, 0x03	; 3
    274e:	01 c0       	rjmp	.+2      	; 0x2752 <dtoa_prf+0xe2>
    2750:	84 e0       	ldi	r24, 0x04	; 4
    2752:	81 17       	cp	r24, r17
    2754:	18 f4       	brcc	.+6      	; 0x275c <dtoa_prf+0xec>
    2756:	21 2f       	mov	r18, r17
    2758:	28 1b       	sub	r18, r24
    275a:	01 c0       	rjmp	.+2      	; 0x275e <dtoa_prf+0xee>
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	51 11       	cpse	r21, r1
    2760:	0b c0       	rjmp	.+22     	; 0x2778 <dtoa_prf+0x108>
    2762:	f6 01       	movw	r30, r12
    2764:	82 2f       	mov	r24, r18
    2766:	30 e2       	ldi	r19, 0x20	; 32
    2768:	88 23       	and	r24, r24
    276a:	19 f0       	breq	.+6      	; 0x2772 <dtoa_prf+0x102>
    276c:	31 93       	st	Z+, r19
    276e:	81 50       	subi	r24, 0x01	; 1
    2770:	fb cf       	rjmp	.-10     	; 0x2768 <dtoa_prf+0xf8>
    2772:	c2 0e       	add	r12, r18
    2774:	d1 1c       	adc	r13, r1
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	99 23       	and	r25, r25
    277a:	29 f0       	breq	.+10     	; 0x2786 <dtoa_prf+0x116>
    277c:	d6 01       	movw	r26, r12
    277e:	9c 93       	st	X, r25
    2780:	f6 01       	movw	r30, r12
    2782:	31 96       	adiw	r30, 0x01	; 1
    2784:	6f 01       	movw	r12, r30
    2786:	c6 01       	movw	r24, r12
    2788:	03 96       	adiw	r24, 0x03	; 3
    278a:	e2 fe       	sbrs	r14, 2
    278c:	0b c0       	rjmp	.+22     	; 0x27a4 <dtoa_prf+0x134>
    278e:	39 e4       	ldi	r19, 0x49	; 73
    2790:	d6 01       	movw	r26, r12
    2792:	3c 93       	st	X, r19
    2794:	3e e4       	ldi	r19, 0x4E	; 78
    2796:	11 96       	adiw	r26, 0x01	; 1
    2798:	3c 93       	st	X, r19
    279a:	11 97       	sbiw	r26, 0x01	; 1
    279c:	36 e4       	ldi	r19, 0x46	; 70
    279e:	12 96       	adiw	r26, 0x02	; 2
    27a0:	3c 93       	st	X, r19
    27a2:	07 c0       	rjmp	.+14     	; 0x27b2 <dtoa_prf+0x142>
    27a4:	39 e6       	ldi	r19, 0x69	; 105
    27a6:	f6 01       	movw	r30, r12
    27a8:	30 83       	st	Z, r19
    27aa:	3e e6       	ldi	r19, 0x6E	; 110
    27ac:	31 83       	std	Z+1, r19	; 0x01
    27ae:	36 e6       	ldi	r19, 0x66	; 102
    27b0:	32 83       	std	Z+2, r19	; 0x02
    27b2:	fc 01       	movw	r30, r24
    27b4:	32 2f       	mov	r19, r18
    27b6:	40 e2       	ldi	r20, 0x20	; 32
    27b8:	33 23       	and	r19, r19
    27ba:	19 f0       	breq	.+6      	; 0x27c2 <dtoa_prf+0x152>
    27bc:	41 93       	st	Z+, r20
    27be:	31 50       	subi	r19, 0x01	; 1
    27c0:	fb cf       	rjmp	.-10     	; 0x27b8 <dtoa_prf+0x148>
    27c2:	fc 01       	movw	r30, r24
    27c4:	e2 0f       	add	r30, r18
    27c6:	f1 1d       	adc	r31, r1
    27c8:	10 82       	st	Z, r1
    27ca:	8e ef       	ldi	r24, 0xFE	; 254
    27cc:	9f ef       	ldi	r25, 0xFF	; 255
    27ce:	a6 c0       	rjmp	.+332    	; 0x291c <dtoa_prf+0x2ac>
    27d0:	21 e0       	ldi	r18, 0x01	; 1
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	91 11       	cpse	r25, r1
    27d6:	02 c0       	rjmp	.+4      	; 0x27dc <dtoa_prf+0x16c>
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	16 16       	cp	r1, r22
    27de:	17 06       	cpc	r1, r23
    27e0:	1c f4       	brge	.+6      	; 0x27e8 <dtoa_prf+0x178>
    27e2:	fb 01       	movw	r30, r22
    27e4:	31 96       	adiw	r30, 0x01	; 1
    27e6:	02 c0       	rjmp	.+4      	; 0x27ec <dtoa_prf+0x17c>
    27e8:	e1 e0       	ldi	r30, 0x01	; 1
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	2e 0f       	add	r18, r30
    27ee:	3f 1f       	adc	r19, r31
    27f0:	bb 20       	and	r11, r11
    27f2:	21 f0       	breq	.+8      	; 0x27fc <dtoa_prf+0x18c>
    27f4:	eb 2d       	mov	r30, r11
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	31 96       	adiw	r30, 0x01	; 1
    27fa:	02 c0       	rjmp	.+4      	; 0x2800 <dtoa_prf+0x190>
    27fc:	e0 e0       	ldi	r30, 0x00	; 0
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	2e 0f       	add	r18, r30
    2802:	3f 1f       	adc	r19, r31
    2804:	e1 2f       	mov	r30, r17
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	2e 17       	cp	r18, r30
    280a:	3f 07       	cpc	r19, r31
    280c:	1c f4       	brge	.+6      	; 0x2814 <dtoa_prf+0x1a4>
    280e:	12 1b       	sub	r17, r18
    2810:	21 2f       	mov	r18, r17
    2812:	01 c0       	rjmp	.+2      	; 0x2816 <dtoa_prf+0x1a6>
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	8e 2d       	mov	r24, r14
    2818:	88 71       	andi	r24, 0x18	; 24
    281a:	59 f4       	brne	.+22     	; 0x2832 <dtoa_prf+0x1c2>
    281c:	f6 01       	movw	r30, r12
    281e:	82 2f       	mov	r24, r18
    2820:	30 e2       	ldi	r19, 0x20	; 32
    2822:	88 23       	and	r24, r24
    2824:	19 f0       	breq	.+6      	; 0x282c <dtoa_prf+0x1bc>
    2826:	31 93       	st	Z+, r19
    2828:	81 50       	subi	r24, 0x01	; 1
    282a:	fb cf       	rjmp	.-10     	; 0x2822 <dtoa_prf+0x1b2>
    282c:	c2 0e       	add	r12, r18
    282e:	d1 1c       	adc	r13, r1
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	99 23       	and	r25, r25
    2834:	29 f0       	breq	.+10     	; 0x2840 <dtoa_prf+0x1d0>
    2836:	d6 01       	movw	r26, r12
    2838:	9c 93       	st	X, r25
    283a:	f6 01       	movw	r30, r12
    283c:	31 96       	adiw	r30, 0x01	; 1
    283e:	6f 01       	movw	r12, r30
    2840:	51 11       	cpse	r21, r1
    2842:	0b c0       	rjmp	.+22     	; 0x285a <dtoa_prf+0x1ea>
    2844:	f6 01       	movw	r30, r12
    2846:	82 2f       	mov	r24, r18
    2848:	90 e3       	ldi	r25, 0x30	; 48
    284a:	88 23       	and	r24, r24
    284c:	19 f0       	breq	.+6      	; 0x2854 <dtoa_prf+0x1e4>
    284e:	91 93       	st	Z+, r25
    2850:	81 50       	subi	r24, 0x01	; 1
    2852:	fb cf       	rjmp	.-10     	; 0x284a <dtoa_prf+0x1da>
    2854:	c2 0e       	add	r12, r18
    2856:	d1 1c       	adc	r13, r1
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	0f 2d       	mov	r16, r15
    285c:	06 0f       	add	r16, r22
    285e:	9a 81       	ldd	r25, Y+2	; 0x02
    2860:	34 2f       	mov	r19, r20
    2862:	30 71       	andi	r19, 0x10	; 16
    2864:	44 ff       	sbrs	r20, 4
    2866:	03 c0       	rjmp	.+6      	; 0x286e <dtoa_prf+0x1fe>
    2868:	91 33       	cpi	r25, 0x31	; 49
    286a:	09 f4       	brne	.+2      	; 0x286e <dtoa_prf+0x1fe>
    286c:	01 50       	subi	r16, 0x01	; 1
    286e:	10 16       	cp	r1, r16
    2870:	24 f4       	brge	.+8      	; 0x287a <dtoa_prf+0x20a>
    2872:	09 30       	cpi	r16, 0x09	; 9
    2874:	18 f0       	brcs	.+6      	; 0x287c <dtoa_prf+0x20c>
    2876:	08 e0       	ldi	r16, 0x08	; 8
    2878:	01 c0       	rjmp	.+2      	; 0x287c <dtoa_prf+0x20c>
    287a:	01 e0       	ldi	r16, 0x01	; 1
    287c:	ab 01       	movw	r20, r22
    287e:	77 ff       	sbrs	r23, 7
    2880:	02 c0       	rjmp	.+4      	; 0x2886 <dtoa_prf+0x216>
    2882:	40 e0       	ldi	r20, 0x00	; 0
    2884:	50 e0       	ldi	r21, 0x00	; 0
    2886:	fb 01       	movw	r30, r22
    2888:	e4 1b       	sub	r30, r20
    288a:	f5 0b       	sbc	r31, r21
    288c:	a1 e0       	ldi	r26, 0x01	; 1
    288e:	b0 e0       	ldi	r27, 0x00	; 0
    2890:	ac 0f       	add	r26, r28
    2892:	bd 1f       	adc	r27, r29
    2894:	ea 0f       	add	r30, r26
    2896:	fb 1f       	adc	r31, r27
    2898:	8e e2       	ldi	r24, 0x2E	; 46
    289a:	a8 2e       	mov	r10, r24
    289c:	4b 01       	movw	r8, r22
    289e:	80 1a       	sub	r8, r16
    28a0:	91 08       	sbc	r9, r1
    28a2:	0b 2d       	mov	r16, r11
    28a4:	10 e0       	ldi	r17, 0x00	; 0
    28a6:	11 95       	neg	r17
    28a8:	01 95       	neg	r16
    28aa:	11 09       	sbc	r17, r1
    28ac:	4f 3f       	cpi	r20, 0xFF	; 255
    28ae:	bf ef       	ldi	r27, 0xFF	; 255
    28b0:	5b 07       	cpc	r21, r27
    28b2:	21 f4       	brne	.+8      	; 0x28bc <dtoa_prf+0x24c>
    28b4:	d6 01       	movw	r26, r12
    28b6:	ac 92       	st	X, r10
    28b8:	11 96       	adiw	r26, 0x01	; 1
    28ba:	6d 01       	movw	r12, r26
    28bc:	64 17       	cp	r22, r20
    28be:	75 07       	cpc	r23, r21
    28c0:	2c f0       	brlt	.+10     	; 0x28cc <dtoa_prf+0x25c>
    28c2:	84 16       	cp	r8, r20
    28c4:	95 06       	cpc	r9, r21
    28c6:	14 f4       	brge	.+4      	; 0x28cc <dtoa_prf+0x25c>
    28c8:	81 81       	ldd	r24, Z+1	; 0x01
    28ca:	01 c0       	rjmp	.+2      	; 0x28ce <dtoa_prf+0x25e>
    28cc:	80 e3       	ldi	r24, 0x30	; 48
    28ce:	41 50       	subi	r20, 0x01	; 1
    28d0:	51 09       	sbc	r21, r1
    28d2:	31 96       	adiw	r30, 0x01	; 1
    28d4:	d6 01       	movw	r26, r12
    28d6:	11 96       	adiw	r26, 0x01	; 1
    28d8:	7d 01       	movw	r14, r26
    28da:	40 17       	cp	r20, r16
    28dc:	51 07       	cpc	r21, r17
    28de:	24 f0       	brlt	.+8      	; 0x28e8 <dtoa_prf+0x278>
    28e0:	d6 01       	movw	r26, r12
    28e2:	8c 93       	st	X, r24
    28e4:	67 01       	movw	r12, r14
    28e6:	e2 cf       	rjmp	.-60     	; 0x28ac <dtoa_prf+0x23c>
    28e8:	64 17       	cp	r22, r20
    28ea:	75 07       	cpc	r23, r21
    28ec:	39 f4       	brne	.+14     	; 0x28fc <dtoa_prf+0x28c>
    28ee:	96 33       	cpi	r25, 0x36	; 54
    28f0:	20 f4       	brcc	.+8      	; 0x28fa <dtoa_prf+0x28a>
    28f2:	95 33       	cpi	r25, 0x35	; 53
    28f4:	19 f4       	brne	.+6      	; 0x28fc <dtoa_prf+0x28c>
    28f6:	31 11       	cpse	r19, r1
    28f8:	01 c0       	rjmp	.+2      	; 0x28fc <dtoa_prf+0x28c>
    28fa:	81 e3       	ldi	r24, 0x31	; 49
    28fc:	f6 01       	movw	r30, r12
    28fe:	80 83       	st	Z, r24
    2900:	f7 01       	movw	r30, r14
    2902:	82 2f       	mov	r24, r18
    2904:	90 e2       	ldi	r25, 0x20	; 32
    2906:	88 23       	and	r24, r24
    2908:	19 f0       	breq	.+6      	; 0x2910 <dtoa_prf+0x2a0>
    290a:	91 93       	st	Z+, r25
    290c:	81 50       	subi	r24, 0x01	; 1
    290e:	fb cf       	rjmp	.-10     	; 0x2906 <dtoa_prf+0x296>
    2910:	f7 01       	movw	r30, r14
    2912:	e2 0f       	add	r30, r18
    2914:	f1 1d       	adc	r31, r1
    2916:	10 82       	st	Z, r1
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	29 96       	adiw	r28, 0x09	; 9
    291e:	ec e0       	ldi	r30, 0x0C	; 12
    2920:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <__epilogue_restores__+0xc>

00002924 <__ftoa_engine>:
    2924:	28 30       	cpi	r18, 0x08	; 8
    2926:	08 f0       	brcs	.+2      	; 0x292a <__ftoa_engine+0x6>
    2928:	27 e0       	ldi	r18, 0x07	; 7
    292a:	33 27       	eor	r19, r19
    292c:	da 01       	movw	r26, r20
    292e:	99 0f       	add	r25, r25
    2930:	31 1d       	adc	r19, r1
    2932:	87 fd       	sbrc	r24, 7
    2934:	91 60       	ori	r25, 0x01	; 1
    2936:	00 96       	adiw	r24, 0x00	; 0
    2938:	61 05       	cpc	r22, r1
    293a:	71 05       	cpc	r23, r1
    293c:	39 f4       	brne	.+14     	; 0x294c <__ftoa_engine+0x28>
    293e:	32 60       	ori	r19, 0x02	; 2
    2940:	2e 5f       	subi	r18, 0xFE	; 254
    2942:	3d 93       	st	X+, r19
    2944:	30 e3       	ldi	r19, 0x30	; 48
    2946:	2a 95       	dec	r18
    2948:	e1 f7       	brne	.-8      	; 0x2942 <__ftoa_engine+0x1e>
    294a:	08 95       	ret
    294c:	9f 3f       	cpi	r25, 0xFF	; 255
    294e:	30 f0       	brcs	.+12     	; 0x295c <__ftoa_engine+0x38>
    2950:	80 38       	cpi	r24, 0x80	; 128
    2952:	71 05       	cpc	r23, r1
    2954:	61 05       	cpc	r22, r1
    2956:	09 f0       	breq	.+2      	; 0x295a <__ftoa_engine+0x36>
    2958:	3c 5f       	subi	r19, 0xFC	; 252
    295a:	3c 5f       	subi	r19, 0xFC	; 252
    295c:	3d 93       	st	X+, r19
    295e:	91 30       	cpi	r25, 0x01	; 1
    2960:	08 f0       	brcs	.+2      	; 0x2964 <__ftoa_engine+0x40>
    2962:	80 68       	ori	r24, 0x80	; 128
    2964:	91 1d       	adc	r25, r1
    2966:	df 93       	push	r29
    2968:	cf 93       	push	r28
    296a:	1f 93       	push	r17
    296c:	0f 93       	push	r16
    296e:	ff 92       	push	r15
    2970:	ef 92       	push	r14
    2972:	19 2f       	mov	r17, r25
    2974:	98 7f       	andi	r25, 0xF8	; 248
    2976:	96 95       	lsr	r25
    2978:	e9 2f       	mov	r30, r25
    297a:	96 95       	lsr	r25
    297c:	96 95       	lsr	r25
    297e:	e9 0f       	add	r30, r25
    2980:	ff 27       	eor	r31, r31
    2982:	e2 5b       	subi	r30, 0xB2	; 178
    2984:	fe 4f       	sbci	r31, 0xFE	; 254
    2986:	99 27       	eor	r25, r25
    2988:	33 27       	eor	r19, r19
    298a:	ee 24       	eor	r14, r14
    298c:	ff 24       	eor	r15, r15
    298e:	a7 01       	movw	r20, r14
    2990:	e7 01       	movw	r28, r14
    2992:	05 90       	lpm	r0, Z+
    2994:	08 94       	sec
    2996:	07 94       	ror	r0
    2998:	28 f4       	brcc	.+10     	; 0x29a4 <__ftoa_engine+0x80>
    299a:	36 0f       	add	r19, r22
    299c:	e7 1e       	adc	r14, r23
    299e:	f8 1e       	adc	r15, r24
    29a0:	49 1f       	adc	r20, r25
    29a2:	51 1d       	adc	r21, r1
    29a4:	66 0f       	add	r22, r22
    29a6:	77 1f       	adc	r23, r23
    29a8:	88 1f       	adc	r24, r24
    29aa:	99 1f       	adc	r25, r25
    29ac:	06 94       	lsr	r0
    29ae:	a1 f7       	brne	.-24     	; 0x2998 <__ftoa_engine+0x74>
    29b0:	05 90       	lpm	r0, Z+
    29b2:	07 94       	ror	r0
    29b4:	28 f4       	brcc	.+10     	; 0x29c0 <__ftoa_engine+0x9c>
    29b6:	e7 0e       	add	r14, r23
    29b8:	f8 1e       	adc	r15, r24
    29ba:	49 1f       	adc	r20, r25
    29bc:	56 1f       	adc	r21, r22
    29be:	c1 1d       	adc	r28, r1
    29c0:	77 0f       	add	r23, r23
    29c2:	88 1f       	adc	r24, r24
    29c4:	99 1f       	adc	r25, r25
    29c6:	66 1f       	adc	r22, r22
    29c8:	06 94       	lsr	r0
    29ca:	a1 f7       	brne	.-24     	; 0x29b4 <__ftoa_engine+0x90>
    29cc:	05 90       	lpm	r0, Z+
    29ce:	07 94       	ror	r0
    29d0:	28 f4       	brcc	.+10     	; 0x29dc <__ftoa_engine+0xb8>
    29d2:	f8 0e       	add	r15, r24
    29d4:	49 1f       	adc	r20, r25
    29d6:	56 1f       	adc	r21, r22
    29d8:	c7 1f       	adc	r28, r23
    29da:	d1 1d       	adc	r29, r1
    29dc:	88 0f       	add	r24, r24
    29de:	99 1f       	adc	r25, r25
    29e0:	66 1f       	adc	r22, r22
    29e2:	77 1f       	adc	r23, r23
    29e4:	06 94       	lsr	r0
    29e6:	a1 f7       	brne	.-24     	; 0x29d0 <__ftoa_engine+0xac>
    29e8:	05 90       	lpm	r0, Z+
    29ea:	07 94       	ror	r0
    29ec:	20 f4       	brcc	.+8      	; 0x29f6 <__ftoa_engine+0xd2>
    29ee:	49 0f       	add	r20, r25
    29f0:	56 1f       	adc	r21, r22
    29f2:	c7 1f       	adc	r28, r23
    29f4:	d8 1f       	adc	r29, r24
    29f6:	99 0f       	add	r25, r25
    29f8:	66 1f       	adc	r22, r22
    29fa:	77 1f       	adc	r23, r23
    29fc:	88 1f       	adc	r24, r24
    29fe:	06 94       	lsr	r0
    2a00:	a9 f7       	brne	.-22     	; 0x29ec <__ftoa_engine+0xc8>
    2a02:	84 91       	lpm	r24, Z
    2a04:	10 95       	com	r17
    2a06:	17 70       	andi	r17, 0x07	; 7
    2a08:	41 f0       	breq	.+16     	; 0x2a1a <__ftoa_engine+0xf6>
    2a0a:	d6 95       	lsr	r29
    2a0c:	c7 95       	ror	r28
    2a0e:	57 95       	ror	r21
    2a10:	47 95       	ror	r20
    2a12:	f7 94       	ror	r15
    2a14:	e7 94       	ror	r14
    2a16:	1a 95       	dec	r17
    2a18:	c1 f7       	brne	.-16     	; 0x2a0a <__ftoa_engine+0xe6>
    2a1a:	e4 ef       	ldi	r30, 0xF4	; 244
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	68 94       	set
    2a20:	15 90       	lpm	r1, Z+
    2a22:	15 91       	lpm	r17, Z+
    2a24:	35 91       	lpm	r19, Z+
    2a26:	65 91       	lpm	r22, Z+
    2a28:	95 91       	lpm	r25, Z+
    2a2a:	05 90       	lpm	r0, Z+
    2a2c:	7f e2       	ldi	r23, 0x2F	; 47
    2a2e:	73 95       	inc	r23
    2a30:	e1 18       	sub	r14, r1
    2a32:	f1 0a       	sbc	r15, r17
    2a34:	43 0b       	sbc	r20, r19
    2a36:	56 0b       	sbc	r21, r22
    2a38:	c9 0b       	sbc	r28, r25
    2a3a:	d0 09       	sbc	r29, r0
    2a3c:	c0 f7       	brcc	.-16     	; 0x2a2e <__ftoa_engine+0x10a>
    2a3e:	e1 0c       	add	r14, r1
    2a40:	f1 1e       	adc	r15, r17
    2a42:	43 1f       	adc	r20, r19
    2a44:	56 1f       	adc	r21, r22
    2a46:	c9 1f       	adc	r28, r25
    2a48:	d0 1d       	adc	r29, r0
    2a4a:	7e f4       	brtc	.+30     	; 0x2a6a <__ftoa_engine+0x146>
    2a4c:	70 33       	cpi	r23, 0x30	; 48
    2a4e:	11 f4       	brne	.+4      	; 0x2a54 <__ftoa_engine+0x130>
    2a50:	8a 95       	dec	r24
    2a52:	e6 cf       	rjmp	.-52     	; 0x2a20 <__ftoa_engine+0xfc>
    2a54:	e8 94       	clt
    2a56:	01 50       	subi	r16, 0x01	; 1
    2a58:	30 f0       	brcs	.+12     	; 0x2a66 <__ftoa_engine+0x142>
    2a5a:	08 0f       	add	r16, r24
    2a5c:	0a f4       	brpl	.+2      	; 0x2a60 <__ftoa_engine+0x13c>
    2a5e:	00 27       	eor	r16, r16
    2a60:	02 17       	cp	r16, r18
    2a62:	08 f4       	brcc	.+2      	; 0x2a66 <__ftoa_engine+0x142>
    2a64:	20 2f       	mov	r18, r16
    2a66:	23 95       	inc	r18
    2a68:	02 2f       	mov	r16, r18
    2a6a:	7a 33       	cpi	r23, 0x3A	; 58
    2a6c:	28 f0       	brcs	.+10     	; 0x2a78 <__ftoa_engine+0x154>
    2a6e:	79 e3       	ldi	r23, 0x39	; 57
    2a70:	7d 93       	st	X+, r23
    2a72:	2a 95       	dec	r18
    2a74:	e9 f7       	brne	.-6      	; 0x2a70 <__ftoa_engine+0x14c>
    2a76:	10 c0       	rjmp	.+32     	; 0x2a98 <__ftoa_engine+0x174>
    2a78:	7d 93       	st	X+, r23
    2a7a:	2a 95       	dec	r18
    2a7c:	89 f6       	brne	.-94     	; 0x2a20 <__ftoa_engine+0xfc>
    2a7e:	06 94       	lsr	r0
    2a80:	97 95       	ror	r25
    2a82:	67 95       	ror	r22
    2a84:	37 95       	ror	r19
    2a86:	17 95       	ror	r17
    2a88:	17 94       	ror	r1
    2a8a:	e1 18       	sub	r14, r1
    2a8c:	f1 0a       	sbc	r15, r17
    2a8e:	43 0b       	sbc	r20, r19
    2a90:	56 0b       	sbc	r21, r22
    2a92:	c9 0b       	sbc	r28, r25
    2a94:	d0 09       	sbc	r29, r0
    2a96:	98 f0       	brcs	.+38     	; 0x2abe <__ftoa_engine+0x19a>
    2a98:	23 95       	inc	r18
    2a9a:	7e 91       	ld	r23, -X
    2a9c:	73 95       	inc	r23
    2a9e:	7a 33       	cpi	r23, 0x3A	; 58
    2aa0:	08 f0       	brcs	.+2      	; 0x2aa4 <__ftoa_engine+0x180>
    2aa2:	70 e3       	ldi	r23, 0x30	; 48
    2aa4:	7c 93       	st	X, r23
    2aa6:	20 13       	cpse	r18, r16
    2aa8:	b8 f7       	brcc	.-18     	; 0x2a98 <__ftoa_engine+0x174>
    2aaa:	7e 91       	ld	r23, -X
    2aac:	70 61       	ori	r23, 0x10	; 16
    2aae:	7d 93       	st	X+, r23
    2ab0:	30 f0       	brcs	.+12     	; 0x2abe <__ftoa_engine+0x19a>
    2ab2:	83 95       	inc	r24
    2ab4:	71 e3       	ldi	r23, 0x31	; 49
    2ab6:	7d 93       	st	X+, r23
    2ab8:	70 e3       	ldi	r23, 0x30	; 48
    2aba:	2a 95       	dec	r18
    2abc:	e1 f7       	brne	.-8      	; 0x2ab6 <__ftoa_engine+0x192>
    2abe:	11 24       	eor	r1, r1
    2ac0:	ef 90       	pop	r14
    2ac2:	ff 90       	pop	r15
    2ac4:	0f 91       	pop	r16
    2ac6:	1f 91       	pop	r17
    2ac8:	cf 91       	pop	r28
    2aca:	df 91       	pop	r29
    2acc:	99 27       	eor	r25, r25
    2ace:	87 fd       	sbrc	r24, 7
    2ad0:	90 95       	com	r25
    2ad2:	08 95       	ret

00002ad4 <strnlen_P>:
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	05 90       	lpm	r0, Z+
    2ad8:	61 50       	subi	r22, 0x01	; 1
    2ada:	70 40       	sbci	r23, 0x00	; 0
    2adc:	01 10       	cpse	r0, r1
    2ade:	d8 f7       	brcc	.-10     	; 0x2ad6 <strnlen_P+0x2>
    2ae0:	80 95       	com	r24
    2ae2:	90 95       	com	r25
    2ae4:	8e 0f       	add	r24, r30
    2ae6:	9f 1f       	adc	r25, r31
    2ae8:	08 95       	ret

00002aea <strnlen>:
    2aea:	fc 01       	movw	r30, r24
    2aec:	61 50       	subi	r22, 0x01	; 1
    2aee:	70 40       	sbci	r23, 0x00	; 0
    2af0:	01 90       	ld	r0, Z+
    2af2:	01 10       	cpse	r0, r1
    2af4:	d8 f7       	brcc	.-10     	; 0x2aec <strnlen+0x2>
    2af6:	80 95       	com	r24
    2af8:	90 95       	com	r25
    2afa:	8e 0f       	add	r24, r30
    2afc:	9f 1f       	adc	r25, r31
    2afe:	08 95       	ret

00002b00 <fputc>:
    2b00:	0f 93       	push	r16
    2b02:	1f 93       	push	r17
    2b04:	cf 93       	push	r28
    2b06:	df 93       	push	r29
    2b08:	fb 01       	movw	r30, r22
    2b0a:	23 81       	ldd	r18, Z+3	; 0x03
    2b0c:	21 fd       	sbrc	r18, 1
    2b0e:	03 c0       	rjmp	.+6      	; 0x2b16 <fputc+0x16>
    2b10:	8f ef       	ldi	r24, 0xFF	; 255
    2b12:	9f ef       	ldi	r25, 0xFF	; 255
    2b14:	2c c0       	rjmp	.+88     	; 0x2b6e <fputc+0x6e>
    2b16:	22 ff       	sbrs	r18, 2
    2b18:	16 c0       	rjmp	.+44     	; 0x2b46 <fputc+0x46>
    2b1a:	46 81       	ldd	r20, Z+6	; 0x06
    2b1c:	57 81       	ldd	r21, Z+7	; 0x07
    2b1e:	24 81       	ldd	r18, Z+4	; 0x04
    2b20:	35 81       	ldd	r19, Z+5	; 0x05
    2b22:	42 17       	cp	r20, r18
    2b24:	53 07       	cpc	r21, r19
    2b26:	44 f4       	brge	.+16     	; 0x2b38 <fputc+0x38>
    2b28:	a0 81       	ld	r26, Z
    2b2a:	b1 81       	ldd	r27, Z+1	; 0x01
    2b2c:	9d 01       	movw	r18, r26
    2b2e:	2f 5f       	subi	r18, 0xFF	; 255
    2b30:	3f 4f       	sbci	r19, 0xFF	; 255
    2b32:	31 83       	std	Z+1, r19	; 0x01
    2b34:	20 83       	st	Z, r18
    2b36:	8c 93       	st	X, r24
    2b38:	26 81       	ldd	r18, Z+6	; 0x06
    2b3a:	37 81       	ldd	r19, Z+7	; 0x07
    2b3c:	2f 5f       	subi	r18, 0xFF	; 255
    2b3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b40:	37 83       	std	Z+7, r19	; 0x07
    2b42:	26 83       	std	Z+6, r18	; 0x06
    2b44:	14 c0       	rjmp	.+40     	; 0x2b6e <fputc+0x6e>
    2b46:	8b 01       	movw	r16, r22
    2b48:	ec 01       	movw	r28, r24
    2b4a:	fb 01       	movw	r30, r22
    2b4c:	00 84       	ldd	r0, Z+8	; 0x08
    2b4e:	f1 85       	ldd	r31, Z+9	; 0x09
    2b50:	e0 2d       	mov	r30, r0
    2b52:	09 95       	icall
    2b54:	89 2b       	or	r24, r25
    2b56:	e1 f6       	brne	.-72     	; 0x2b10 <fputc+0x10>
    2b58:	d8 01       	movw	r26, r16
    2b5a:	16 96       	adiw	r26, 0x06	; 6
    2b5c:	8d 91       	ld	r24, X+
    2b5e:	9c 91       	ld	r25, X
    2b60:	17 97       	sbiw	r26, 0x07	; 7
    2b62:	01 96       	adiw	r24, 0x01	; 1
    2b64:	17 96       	adiw	r26, 0x07	; 7
    2b66:	9c 93       	st	X, r25
    2b68:	8e 93       	st	-X, r24
    2b6a:	16 97       	sbiw	r26, 0x06	; 6
    2b6c:	ce 01       	movw	r24, r28
    2b6e:	df 91       	pop	r29
    2b70:	cf 91       	pop	r28
    2b72:	1f 91       	pop	r17
    2b74:	0f 91       	pop	r16
    2b76:	08 95       	ret

00002b78 <__ultoa_invert>:
    2b78:	fa 01       	movw	r30, r20
    2b7a:	aa 27       	eor	r26, r26
    2b7c:	28 30       	cpi	r18, 0x08	; 8
    2b7e:	51 f1       	breq	.+84     	; 0x2bd4 <__ultoa_invert+0x5c>
    2b80:	20 31       	cpi	r18, 0x10	; 16
    2b82:	81 f1       	breq	.+96     	; 0x2be4 <__ultoa_invert+0x6c>
    2b84:	e8 94       	clt
    2b86:	6f 93       	push	r22
    2b88:	6e 7f       	andi	r22, 0xFE	; 254
    2b8a:	6e 5f       	subi	r22, 0xFE	; 254
    2b8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b8e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b90:	9f 4f       	sbci	r25, 0xFF	; 255
    2b92:	af 4f       	sbci	r26, 0xFF	; 255
    2b94:	b1 e0       	ldi	r27, 0x01	; 1
    2b96:	3e d0       	rcall	.+124    	; 0x2c14 <__ultoa_invert+0x9c>
    2b98:	b4 e0       	ldi	r27, 0x04	; 4
    2b9a:	3c d0       	rcall	.+120    	; 0x2c14 <__ultoa_invert+0x9c>
    2b9c:	67 0f       	add	r22, r23
    2b9e:	78 1f       	adc	r23, r24
    2ba0:	89 1f       	adc	r24, r25
    2ba2:	9a 1f       	adc	r25, r26
    2ba4:	a1 1d       	adc	r26, r1
    2ba6:	68 0f       	add	r22, r24
    2ba8:	79 1f       	adc	r23, r25
    2baa:	8a 1f       	adc	r24, r26
    2bac:	91 1d       	adc	r25, r1
    2bae:	a1 1d       	adc	r26, r1
    2bb0:	6a 0f       	add	r22, r26
    2bb2:	71 1d       	adc	r23, r1
    2bb4:	81 1d       	adc	r24, r1
    2bb6:	91 1d       	adc	r25, r1
    2bb8:	a1 1d       	adc	r26, r1
    2bba:	20 d0       	rcall	.+64     	; 0x2bfc <__ultoa_invert+0x84>
    2bbc:	09 f4       	brne	.+2      	; 0x2bc0 <__ultoa_invert+0x48>
    2bbe:	68 94       	set
    2bc0:	3f 91       	pop	r19
    2bc2:	2a e0       	ldi	r18, 0x0A	; 10
    2bc4:	26 9f       	mul	r18, r22
    2bc6:	11 24       	eor	r1, r1
    2bc8:	30 19       	sub	r19, r0
    2bca:	30 5d       	subi	r19, 0xD0	; 208
    2bcc:	31 93       	st	Z+, r19
    2bce:	de f6       	brtc	.-74     	; 0x2b86 <__ultoa_invert+0xe>
    2bd0:	cf 01       	movw	r24, r30
    2bd2:	08 95       	ret
    2bd4:	46 2f       	mov	r20, r22
    2bd6:	47 70       	andi	r20, 0x07	; 7
    2bd8:	40 5d       	subi	r20, 0xD0	; 208
    2bda:	41 93       	st	Z+, r20
    2bdc:	b3 e0       	ldi	r27, 0x03	; 3
    2bde:	0f d0       	rcall	.+30     	; 0x2bfe <__ultoa_invert+0x86>
    2be0:	c9 f7       	brne	.-14     	; 0x2bd4 <__ultoa_invert+0x5c>
    2be2:	f6 cf       	rjmp	.-20     	; 0x2bd0 <__ultoa_invert+0x58>
    2be4:	46 2f       	mov	r20, r22
    2be6:	4f 70       	andi	r20, 0x0F	; 15
    2be8:	40 5d       	subi	r20, 0xD0	; 208
    2bea:	4a 33       	cpi	r20, 0x3A	; 58
    2bec:	18 f0       	brcs	.+6      	; 0x2bf4 <__ultoa_invert+0x7c>
    2bee:	49 5d       	subi	r20, 0xD9	; 217
    2bf0:	31 fd       	sbrc	r19, 1
    2bf2:	40 52       	subi	r20, 0x20	; 32
    2bf4:	41 93       	st	Z+, r20
    2bf6:	02 d0       	rcall	.+4      	; 0x2bfc <__ultoa_invert+0x84>
    2bf8:	a9 f7       	brne	.-22     	; 0x2be4 <__ultoa_invert+0x6c>
    2bfa:	ea cf       	rjmp	.-44     	; 0x2bd0 <__ultoa_invert+0x58>
    2bfc:	b4 e0       	ldi	r27, 0x04	; 4
    2bfe:	a6 95       	lsr	r26
    2c00:	97 95       	ror	r25
    2c02:	87 95       	ror	r24
    2c04:	77 95       	ror	r23
    2c06:	67 95       	ror	r22
    2c08:	ba 95       	dec	r27
    2c0a:	c9 f7       	brne	.-14     	; 0x2bfe <__ultoa_invert+0x86>
    2c0c:	00 97       	sbiw	r24, 0x00	; 0
    2c0e:	61 05       	cpc	r22, r1
    2c10:	71 05       	cpc	r23, r1
    2c12:	08 95       	ret
    2c14:	9b 01       	movw	r18, r22
    2c16:	ac 01       	movw	r20, r24
    2c18:	0a 2e       	mov	r0, r26
    2c1a:	06 94       	lsr	r0
    2c1c:	57 95       	ror	r21
    2c1e:	47 95       	ror	r20
    2c20:	37 95       	ror	r19
    2c22:	27 95       	ror	r18
    2c24:	ba 95       	dec	r27
    2c26:	c9 f7       	brne	.-14     	; 0x2c1a <__ultoa_invert+0xa2>
    2c28:	62 0f       	add	r22, r18
    2c2a:	73 1f       	adc	r23, r19
    2c2c:	84 1f       	adc	r24, r20
    2c2e:	95 1f       	adc	r25, r21
    2c30:	a0 1d       	adc	r26, r0
    2c32:	08 95       	ret

00002c34 <__prologue_saves__>:
    2c34:	2f 92       	push	r2
    2c36:	3f 92       	push	r3
    2c38:	4f 92       	push	r4
    2c3a:	5f 92       	push	r5
    2c3c:	6f 92       	push	r6
    2c3e:	7f 92       	push	r7
    2c40:	8f 92       	push	r8
    2c42:	9f 92       	push	r9
    2c44:	af 92       	push	r10
    2c46:	bf 92       	push	r11
    2c48:	cf 92       	push	r12
    2c4a:	df 92       	push	r13
    2c4c:	ef 92       	push	r14
    2c4e:	ff 92       	push	r15
    2c50:	0f 93       	push	r16
    2c52:	1f 93       	push	r17
    2c54:	cf 93       	push	r28
    2c56:	df 93       	push	r29
    2c58:	cd b7       	in	r28, 0x3d	; 61
    2c5a:	de b7       	in	r29, 0x3e	; 62
    2c5c:	ca 1b       	sub	r28, r26
    2c5e:	db 0b       	sbc	r29, r27
    2c60:	0f b6       	in	r0, 0x3f	; 63
    2c62:	f8 94       	cli
    2c64:	de bf       	out	0x3e, r29	; 62
    2c66:	0f be       	out	0x3f, r0	; 63
    2c68:	cd bf       	out	0x3d, r28	; 61
    2c6a:	09 94       	ijmp

00002c6c <__epilogue_restores__>:
    2c6c:	2a 88       	ldd	r2, Y+18	; 0x12
    2c6e:	39 88       	ldd	r3, Y+17	; 0x11
    2c70:	48 88       	ldd	r4, Y+16	; 0x10
    2c72:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c74:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c76:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c78:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c7a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c7c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c7e:	b9 84       	ldd	r11, Y+9	; 0x09
    2c80:	c8 84       	ldd	r12, Y+8	; 0x08
    2c82:	df 80       	ldd	r13, Y+7	; 0x07
    2c84:	ee 80       	ldd	r14, Y+6	; 0x06
    2c86:	fd 80       	ldd	r15, Y+5	; 0x05
    2c88:	0c 81       	ldd	r16, Y+4	; 0x04
    2c8a:	1b 81       	ldd	r17, Y+3	; 0x03
    2c8c:	aa 81       	ldd	r26, Y+2	; 0x02
    2c8e:	b9 81       	ldd	r27, Y+1	; 0x01
    2c90:	ce 0f       	add	r28, r30
    2c92:	d1 1d       	adc	r29, r1
    2c94:	0f b6       	in	r0, 0x3f	; 63
    2c96:	f8 94       	cli
    2c98:	de bf       	out	0x3e, r29	; 62
    2c9a:	0f be       	out	0x3f, r0	; 63
    2c9c:	cd bf       	out	0x3d, r28	; 61
    2c9e:	ed 01       	movw	r28, r26
    2ca0:	08 95       	ret

00002ca2 <_exit>:
    2ca2:	f8 94       	cli

00002ca4 <__stop_program>:
    2ca4:	ff cf       	rjmp	.-2      	; 0x2ca4 <__stop_program>
