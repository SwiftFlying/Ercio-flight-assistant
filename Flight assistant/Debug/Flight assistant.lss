
Flight assistant.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00002a7a  00002b0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025e  0080015c  0080015c  00002b6a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002b6a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002bc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  00002c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b28  00000000  00000000  00002f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017a9  00000000  00000000  00006a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d30  00000000  00000000  000081e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a54  00000000  00000000  00009f14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c9a  00000000  00000000  0000a968  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000379f  00000000  00000000  0000b602  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  0000eda1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9b 00 	jmp	0x136	; 0x136 <__ctors_end>
       4:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
       8:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
       c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      10:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      14:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      18:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      1c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      20:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      24:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      28:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      2c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      30:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      34:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      38:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      3c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      40:	0c 94 15 0b 	jmp	0x162a	; 0x162a <__vector_16>
      44:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      48:	0c 94 0b 0f 	jmp	0x1e16	; 0x1e16 <__vector_18>
      4c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      50:	0c 94 e2 0e 	jmp	0x1dc4	; 0x1dc4 <__vector_20>
      54:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      58:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      5c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      60:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__vector_24>
      64:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      68:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      6c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      70:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      74:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      78:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      7c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      80:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      84:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      88:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      8c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      90:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      94:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      98:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      9c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      a0:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      a4:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      a8:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      ac:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      b0:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      b4:	63 0b       	sbc	r22, r19
      b6:	77 0b       	sbc	r23, r23
      b8:	93 0b       	sbc	r25, r19
      ba:	03 0c       	add	r0, r3
      bc:	19 0c       	add	r1, r9
      be:	57 0c       	add	r5, r7
      c0:	aa 0c       	add	r10, r10
      c2:	dc 0c       	add	r13, r12
      c4:	2f 0d       	add	r18, r15
      c6:	08 4a       	sbci	r16, 0xA8	; 168
      c8:	d7 3b       	cpi	r29, 0xB7	; 183
      ca:	3b ce       	rjmp	.-906    	; 0xfffffd42 <__eeprom_end+0xff7efd42>
      cc:	01 6e       	ori	r16, 0xE1	; 225
      ce:	84 bc       	out	0x24, r8	; 36
      d0:	bf fd       	.word	0xfdbf	; ????
      d2:	c1 2f       	mov	r28, r17
      d4:	3d 6c       	ori	r19, 0xCD	; 205
      d6:	74 31       	cpi	r23, 0x14	; 20
      d8:	9a bd       	out	0x2a, r25	; 42
      da:	56 83       	std	Z+6, r21	; 0x06
      dc:	3d da       	rcall	.-2950   	; 0xfffff558 <__eeprom_end+0xff7ef558>
      de:	3d 00       	.word	0x003d	; ????
      e0:	c7 7f       	andi	r28, 0xF7	; 247
      e2:	11 be       	out	0x31, r1	; 49
      e4:	d9 e4       	ldi	r29, 0x49	; 73
      e6:	bb 4c       	sbci	r27, 0xCB	; 203
      e8:	3e 91       	ld	r19, -X
      ea:	6b aa       	std	Y+51, r6	; 0x33
      ec:	aa be       	out	0x3a, r10	; 58
      ee:	00 00       	nop
      f0:	00 80       	ld	r0, Z
      f2:	3f 00       	.word	0x003f	; ????

000000f4 <ER_commands>:
      f4:	45 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ER..............
     104:	00 00 00 00 63 09 45 52 5f 52 45 41 44 00 00 00     ....c.ER_READ...
	...
     11c:	00 00 69 09 45 52 5f 42 55 46 00 00 00 00 00 00     ..i.ER_BUF......
	...
     134:	c1 09                                               ..

00000136 <__ctors_end>:
     136:	11 24       	eor	r1, r1
     138:	1f be       	out	0x3f, r1	; 63
     13a:	cf ef       	ldi	r28, 0xFF	; 255
     13c:	d8 e0       	ldi	r29, 0x08	; 8
     13e:	de bf       	out	0x3e, r29	; 62
     140:	cd bf       	out	0x3d, r28	; 61

00000142 <__do_copy_data>:
     142:	11 e0       	ldi	r17, 0x01	; 1
     144:	a0 e0       	ldi	r26, 0x00	; 0
     146:	b1 e0       	ldi	r27, 0x01	; 1
     148:	ea e7       	ldi	r30, 0x7A	; 122
     14a:	fa e2       	ldi	r31, 0x2A	; 42
     14c:	02 c0       	rjmp	.+4      	; 0x152 <__do_copy_data+0x10>
     14e:	05 90       	lpm	r0, Z+
     150:	0d 92       	st	X+, r0
     152:	ac 35       	cpi	r26, 0x5C	; 92
     154:	b1 07       	cpc	r27, r17
     156:	d9 f7       	brne	.-10     	; 0x14e <__do_copy_data+0xc>

00000158 <__do_clear_bss>:
     158:	23 e0       	ldi	r18, 0x03	; 3
     15a:	ac e5       	ldi	r26, 0x5C	; 92
     15c:	b1 e0       	ldi	r27, 0x01	; 1
     15e:	01 c0       	rjmp	.+2      	; 0x162 <.do_clear_bss_start>

00000160 <.do_clear_bss_loop>:
     160:	1d 92       	st	X+, r1

00000162 <.do_clear_bss_start>:
     162:	aa 3b       	cpi	r26, 0xBA	; 186
     164:	b2 07       	cpc	r27, r18
     166:	e1 f7       	brne	.-8      	; 0x160 <.do_clear_bss_loop>
     168:	0e 94 17 06 	call	0xc2e	; 0xc2e <main>
     16c:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <_exit>

00000170 <__bad_interrupt>:
     170:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000174 <PlaceInGyroBuffor>:

uint8_t counter_testing = 0;


void PlaceInGyroBuffor(int16_t gyro_samples[])
{
     174:	fc 01       	movw	r30, r24
	X_gyro_buff[gyro_head] = gyro_samples[0];
     176:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <gyro_head>
     17a:	29 2f       	mov	r18, r25
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	40 81       	ld	r20, Z
     180:	51 81       	ldd	r21, Z+1	; 0x01
     182:	22 0f       	add	r18, r18
     184:	33 1f       	adc	r19, r19
     186:	d9 01       	movw	r26, r18
     188:	ac 59       	subi	r26, 0x9C	; 156
     18a:	be 4f       	sbci	r27, 0xFE	; 254
     18c:	4d 93       	st	X+, r20
     18e:	5c 93       	st	X, r21
	Y_gyro_buff[gyro_head] = gyro_samples[1];
     190:	42 81       	ldd	r20, Z+2	; 0x02
     192:	53 81       	ldd	r21, Z+3	; 0x03
     194:	d9 01       	movw	r26, r18
     196:	a2 57       	subi	r26, 0x72	; 114
     198:	be 4f       	sbci	r27, 0xFE	; 254
     19a:	4d 93       	st	X+, r20
     19c:	5c 93       	st	X, r21
	Z_gyro_buff[gyro_head] = gyro_samples[2];
     19e:	44 81       	ldd	r20, Z+4	; 0x04
     1a0:	55 81       	ldd	r21, Z+5	; 0x05
     1a2:	f9 01       	movw	r30, r18
     1a4:	e4 5b       	subi	r30, 0xB4	; 180
     1a6:	fd 4f       	sbci	r31, 0xFD	; 253
     1a8:	51 83       	std	Z+1, r21	; 0x01
     1aa:	40 83       	st	Z, r20

	gyro_head++;
     1ac:	9f 5f       	subi	r25, 0xFF	; 255
	if (gyro_head == SAMPLES)
     1ae:	95 31       	cpi	r25, 0x15	; 21
     1b0:	19 f0       	breq	.+6      	; 0x1b8 <PlaceInGyroBuffor+0x44>
{
	X_gyro_buff[gyro_head] = gyro_samples[0];
	Y_gyro_buff[gyro_head] = gyro_samples[1];
	Z_gyro_buff[gyro_head] = gyro_samples[2];

	gyro_head++;
     1b2:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <gyro_head>
     1b6:	02 c0       	rjmp	.+4      	; 0x1bc <PlaceInGyroBuffor+0x48>
	if (gyro_head == SAMPLES)
	gyro_head = 0;
     1b8:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <gyro_head>

	if (gyro_head == gyro_tail)
     1bc:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <gyro_head>
     1c0:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <gyro_tail>
     1c4:	89 13       	cpse	r24, r25
     1c6:	03 c0       	rjmp	.+6      	; 0x1ce <PlaceInGyroBuffor+0x5a>
		gyro_tail++;
     1c8:	8f 5f       	subi	r24, 0xFF	; 255
     1ca:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <gyro_tail>

	if (gyro_tail == SAMPLES)
     1ce:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <gyro_tail>
     1d2:	85 31       	cpi	r24, 0x15	; 21
     1d4:	11 f4       	brne	.+4      	; 0x1da <PlaceInGyroBuffor+0x66>
		gyro_tail = 0;
     1d6:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <gyro_tail>
     1da:	08 95       	ret

000001dc <PlaceInAccBuffor>:
}

void PlaceInAccBuffor(int16_t acc_samples[])
{
     1dc:	fc 01       	movw	r30, r24
	X_acc_buff[acc_head] = acc_samples[0];
     1de:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <acc_head>
     1e2:	29 2f       	mov	r18, r25
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	40 81       	ld	r20, Z
     1e8:	51 81       	ldd	r21, Z+1	; 0x01
     1ea:	22 0f       	add	r18, r18
     1ec:	33 1f       	adc	r19, r19
     1ee:	d9 01       	movw	r26, r18
     1f0:	ae 51       	subi	r26, 0x1E	; 30
     1f2:	be 4f       	sbci	r27, 0xFE	; 254
     1f4:	4d 93       	st	X+, r20
     1f6:	5c 93       	st	X, r21
	Y_acc_buff[acc_head] = acc_samples[1];
     1f8:	42 81       	ldd	r20, Z+2	; 0x02
     1fa:	53 81       	ldd	r21, Z+3	; 0x03
     1fc:	d9 01       	movw	r26, r18
     1fe:	ae 5d       	subi	r26, 0xDE	; 222
     200:	bd 4f       	sbci	r27, 0xFD	; 253
     202:	4d 93       	st	X+, r20
     204:	5c 93       	st	X, r21
	Z_acc_buff[acc_head] = acc_samples[2];
     206:	44 81       	ldd	r20, Z+4	; 0x04
     208:	55 81       	ldd	r21, Z+5	; 0x05
     20a:	f9 01       	movw	r30, r18
     20c:	e8 54       	subi	r30, 0x48	; 72
     20e:	fe 4f       	sbci	r31, 0xFE	; 254
     210:	51 83       	std	Z+1, r21	; 0x01
     212:	40 83       	st	Z, r20

	acc_head++;
     214:	9f 5f       	subi	r25, 0xFF	; 255
	if (acc_head == SAMPLES)
     216:	95 31       	cpi	r25, 0x15	; 21
     218:	19 f0       	breq	.+6      	; 0x220 <PlaceInAccBuffor+0x44>
{
	X_acc_buff[acc_head] = acc_samples[0];
	Y_acc_buff[acc_head] = acc_samples[1];
	Z_acc_buff[acc_head] = acc_samples[2];

	acc_head++;
     21a:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <acc_head>
     21e:	02 c0       	rjmp	.+4      	; 0x224 <PlaceInAccBuffor+0x48>
	if (acc_head == SAMPLES)
		acc_head = 0;
     220:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <acc_head>

	if (acc_head == acc_tail)
     224:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <acc_head>
     228:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <__data_end>
     22c:	89 13       	cpse	r24, r25
     22e:	03 c0       	rjmp	.+6      	; 0x236 <PlaceInAccBuffor+0x5a>
		acc_tail++;
     230:	8f 5f       	subi	r24, 0xFF	; 255
     232:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>

	if (acc_tail == SAMPLES)
     236:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
     23a:	85 31       	cpi	r24, 0x15	; 21
     23c:	11 f4       	brne	.+4      	; 0x242 <PlaceInAccBuffor+0x66>
		acc_tail = 0;
     23e:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <__data_end>
     242:	08 95       	ret

00000244 <ReadGyroSample>:
}

void ReadGyroSample(int16_t reading_buf[])
{
     244:	dc 01       	movw	r26, r24
	reading_buf[0] = X_gyro_buff[gyro_tail];
     246:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <gyro_tail>
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	ee 0f       	add	r30, r30
     24e:	ff 1f       	adc	r31, r31
     250:	ec 59       	subi	r30, 0x9C	; 156
     252:	fe 4f       	sbci	r31, 0xFE	; 254
     254:	80 81       	ld	r24, Z
     256:	91 81       	ldd	r25, Z+1	; 0x01
     258:	11 96       	adiw	r26, 0x01	; 1
     25a:	9c 93       	st	X, r25
     25c:	8e 93       	st	-X, r24
	reading_buf[1] = Y_gyro_buff[gyro_tail];
     25e:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <gyro_tail>
     262:	29 2f       	mov	r18, r25
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	22 0f       	add	r18, r18
     268:	33 1f       	adc	r19, r19
     26a:	f9 01       	movw	r30, r18
     26c:	e2 57       	subi	r30, 0x72	; 114
     26e:	fe 4f       	sbci	r31, 0xFE	; 254
     270:	40 81       	ld	r20, Z
     272:	51 81       	ldd	r21, Z+1	; 0x01
     274:	13 96       	adiw	r26, 0x03	; 3
     276:	5c 93       	st	X, r21
     278:	4e 93       	st	-X, r20
     27a:	12 97       	sbiw	r26, 0x02	; 2
	reading_buf[2] = Z_gyro_buff[gyro_tail];
     27c:	f9 01       	movw	r30, r18
     27e:	e4 5b       	subi	r30, 0xB4	; 180
     280:	fd 4f       	sbci	r31, 0xFD	; 253
     282:	20 81       	ld	r18, Z
     284:	31 81       	ldd	r19, Z+1	; 0x01
     286:	15 96       	adiw	r26, 0x05	; 5
     288:	3c 93       	st	X, r19
     28a:	2e 93       	st	-X, r18
     28c:	14 97       	sbiw	r26, 0x04	; 4

	gyro_tail++;
     28e:	9f 5f       	subi	r25, 0xFF	; 255

	if (gyro_tail == SAMPLES)
     290:	95 31       	cpi	r25, 0x15	; 21
     292:	19 f0       	breq	.+6      	; 0x29a <ReadGyroSample+0x56>
{
	reading_buf[0] = X_gyro_buff[gyro_tail];
	reading_buf[1] = Y_gyro_buff[gyro_tail];
	reading_buf[2] = Z_gyro_buff[gyro_tail];

	gyro_tail++;
     294:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <gyro_tail>
     298:	08 95       	ret

	if (gyro_tail == SAMPLES)
		gyro_tail = 0;
     29a:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <gyro_tail>
     29e:	08 95       	ret

000002a0 <ReadAccSample>:
}

void ReadAccSample(int16_t reading_buf[])
{
     2a0:	dc 01       	movw	r26, r24
	reading_buf[0] = X_acc_buff[acc_tail];
     2a2:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <__data_end>
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	ee 0f       	add	r30, r30
     2aa:	ff 1f       	adc	r31, r31
     2ac:	ee 51       	subi	r30, 0x1E	; 30
     2ae:	fe 4f       	sbci	r31, 0xFE	; 254
     2b0:	80 81       	ld	r24, Z
     2b2:	91 81       	ldd	r25, Z+1	; 0x01
     2b4:	11 96       	adiw	r26, 0x01	; 1
     2b6:	9c 93       	st	X, r25
     2b8:	8e 93       	st	-X, r24
	reading_buf[1] = Y_acc_buff[acc_tail];
     2ba:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <__data_end>
     2be:	29 2f       	mov	r18, r25
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	f9 01       	movw	r30, r18
     2c8:	ee 5d       	subi	r30, 0xDE	; 222
     2ca:	fd 4f       	sbci	r31, 0xFD	; 253
     2cc:	40 81       	ld	r20, Z
     2ce:	51 81       	ldd	r21, Z+1	; 0x01
     2d0:	13 96       	adiw	r26, 0x03	; 3
     2d2:	5c 93       	st	X, r21
     2d4:	4e 93       	st	-X, r20
     2d6:	12 97       	sbiw	r26, 0x02	; 2
	reading_buf[2] = Z_acc_buff[acc_tail];
     2d8:	f9 01       	movw	r30, r18
     2da:	e8 54       	subi	r30, 0x48	; 72
     2dc:	fe 4f       	sbci	r31, 0xFE	; 254
     2de:	20 81       	ld	r18, Z
     2e0:	31 81       	ldd	r19, Z+1	; 0x01
     2e2:	15 96       	adiw	r26, 0x05	; 5
     2e4:	3c 93       	st	X, r19
     2e6:	2e 93       	st	-X, r18
     2e8:	14 97       	sbiw	r26, 0x04	; 4

	acc_tail++;
     2ea:	9f 5f       	subi	r25, 0xFF	; 255

	if (acc_tail == SAMPLES)
     2ec:	95 31       	cpi	r25, 0x15	; 21
     2ee:	19 f0       	breq	.+6      	; 0x2f6 <ReadAccSample+0x56>
{
	reading_buf[0] = X_acc_buff[acc_tail];
	reading_buf[1] = Y_acc_buff[acc_tail];
	reading_buf[2] = Z_acc_buff[acc_tail];

	acc_tail++;
     2f0:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <__data_end>
     2f4:	08 95       	ret

	if (acc_tail == SAMPLES)
		acc_tail = 0;
     2f6:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <__data_end>
     2fa:	08 95       	ret

000002fc <ReadGyroSample_ViewOnly>:
}

void ReadGyroSample_ViewOnly(int16_t reading_buf[])
{
     2fc:	dc 01       	movw	r26, r24
	reading_buf[0] = X_gyro_buff[(gyro_head - 1)];
     2fe:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <gyro_head>
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	ee 0f       	add	r30, r30
     306:	ff 1f       	adc	r31, r31
     308:	ee 59       	subi	r30, 0x9E	; 158
     30a:	fe 4f       	sbci	r31, 0xFE	; 254
     30c:	80 81       	ld	r24, Z
     30e:	91 81       	ldd	r25, Z+1	; 0x01
     310:	11 96       	adiw	r26, 0x01	; 1
     312:	9c 93       	st	X, r25
     314:	8e 93       	st	-X, r24
	reading_buf[1] = Y_gyro_buff[(gyro_head - 1)];
     316:	20 91 5f 01 	lds	r18, 0x015F	; 0x80015f <gyro_head>
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	21 50       	subi	r18, 0x01	; 1
     31e:	31 09       	sbc	r19, r1
     320:	22 0f       	add	r18, r18
     322:	33 1f       	adc	r19, r19
     324:	f9 01       	movw	r30, r18
     326:	e2 57       	subi	r30, 0x72	; 114
     328:	fe 4f       	sbci	r31, 0xFE	; 254
     32a:	80 81       	ld	r24, Z
     32c:	91 81       	ldd	r25, Z+1	; 0x01
     32e:	13 96       	adiw	r26, 0x03	; 3
     330:	9c 93       	st	X, r25
     332:	8e 93       	st	-X, r24
     334:	12 97       	sbiw	r26, 0x02	; 2
	reading_buf[2] = Z_gyro_buff[(gyro_head - 1)];
     336:	f9 01       	movw	r30, r18
     338:	e4 5b       	subi	r30, 0xB4	; 180
     33a:	fd 4f       	sbci	r31, 0xFD	; 253
     33c:	80 81       	ld	r24, Z
     33e:	91 81       	ldd	r25, Z+1	; 0x01
     340:	15 96       	adiw	r26, 0x05	; 5
     342:	9c 93       	st	X, r25
     344:	8e 93       	st	-X, r24
     346:	14 97       	sbiw	r26, 0x04	; 4
     348:	08 95       	ret

0000034a <ReadAccSample_ViewOnly>:
}

void ReadAccSample_ViewOnly(int16_t reading_buf[])
{
     34a:	dc 01       	movw	r26, r24
	reading_buf[0] = X_acc_buff[(acc_head - 1)];
     34c:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <acc_head>
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	ee 0f       	add	r30, r30
     354:	ff 1f       	adc	r31, r31
     356:	e0 52       	subi	r30, 0x20	; 32
     358:	fe 4f       	sbci	r31, 0xFE	; 254
     35a:	80 81       	ld	r24, Z
     35c:	91 81       	ldd	r25, Z+1	; 0x01
     35e:	11 96       	adiw	r26, 0x01	; 1
     360:	9c 93       	st	X, r25
     362:	8e 93       	st	-X, r24
	reading_buf[1] = Y_acc_buff[(acc_head - 1)];
     364:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <acc_head>
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	21 50       	subi	r18, 0x01	; 1
     36c:	31 09       	sbc	r19, r1
     36e:	22 0f       	add	r18, r18
     370:	33 1f       	adc	r19, r19
     372:	f9 01       	movw	r30, r18
     374:	ee 5d       	subi	r30, 0xDE	; 222
     376:	fd 4f       	sbci	r31, 0xFD	; 253
     378:	80 81       	ld	r24, Z
     37a:	91 81       	ldd	r25, Z+1	; 0x01
     37c:	13 96       	adiw	r26, 0x03	; 3
     37e:	9c 93       	st	X, r25
     380:	8e 93       	st	-X, r24
     382:	12 97       	sbiw	r26, 0x02	; 2
	reading_buf[2] = Z_acc_buff[(acc_head - 1)];
     384:	f9 01       	movw	r30, r18
     386:	e8 54       	subi	r30, 0x48	; 72
     388:	fe 4f       	sbci	r31, 0xFE	; 254
     38a:	80 81       	ld	r24, Z
     38c:	91 81       	ldd	r25, Z+1	; 0x01
     38e:	15 96       	adiw	r26, 0x05	; 5
     390:	9c 93       	st	X, r25
     392:	8e 93       	st	-X, r24
     394:	14 97       	sbiw	r26, 0x04	; 4
     396:	08 95       	ret

00000398 <SamplesGyroBuf>:
}

uint8_t SamplesGyroBuf()
{
	uint8_t gyro_samples;
	gyro_samples = gyro_head - gyro_tail;
     398:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <gyro_head>
     39c:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <gyro_tail>
     3a0:	89 1b       	sub	r24, r25
	if (gyro_samples > SAMPLES_BUFF_SIZE)
     3a2:	85 31       	cpi	r24, 0x15	; 21
     3a4:	08 f0       	brcs	.+2      	; 0x3a8 <SamplesGyroBuf+0x10>
	{
		gyro_samples -= (255 - SAMPLES_BUFF_SIZE);
     3a6:	8b 5e       	subi	r24, 0xEB	; 235
	}
	return gyro_samples;
}
     3a8:	08 95       	ret

000003aa <SamplesAccBuf>:

uint8_t SamplesAccBuf()
{
	uint8_t acc_samples;
	acc_samples = acc_head - acc_tail;
     3aa:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <acc_head>
     3ae:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <__data_end>
     3b2:	89 1b       	sub	r24, r25
	if (acc_samples > SAMPLES_BUFF_SIZE)
     3b4:	85 31       	cpi	r24, 0x15	; 21
     3b6:	08 f0       	brcs	.+2      	; 0x3ba <SamplesAccBuf+0x10>
	{
		acc_samples -= (255 - SAMPLES_BUFF_SIZE);
     3b8:	8b 5e       	subi	r24, 0xEB	; 235
	}
	return acc_samples;
}
     3ba:	08 95       	ret

000003bc <ReadGyroBuf>:

void ReadGyroBuf(int16_t  reading_buf[3][SAMPLES_BUFF_SIZE], uint8_t sam_nr)
{
     3bc:	cf 92       	push	r12
     3be:	df 92       	push	r13
     3c0:	ef 92       	push	r14
     3c2:	ff 92       	push	r15
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	00 d0       	rcall	.+0      	; 0x3ce <ReadGyroBuf+0x12>
     3ce:	00 d0       	rcall	.+0      	; 0x3d0 <ReadGyroBuf+0x14>
     3d0:	00 d0       	rcall	.+0      	; 0x3d2 <ReadGyroBuf+0x16>
     3d2:	cd b7       	in	r28, 0x3d	; 61
     3d4:	de b7       	in	r29, 0x3e	; 62
	int16_t bufor[3];
	uint8_t i;
	for(i = 0; i < sam_nr; i++)	//read all new samples from buffor
     3d6:	66 23       	and	r22, r22
     3d8:	29 f1       	breq	.+74     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     3da:	6c 01       	movw	r12, r24
     3dc:	7c 01       	movw	r14, r24
     3de:	8c 01       	movw	r16, r24
     3e0:	08 5d       	subi	r16, 0xD8	; 216
     3e2:	1f 4f       	sbci	r17, 0xFF	; 255
     3e4:	61 50       	subi	r22, 0x01	; 1
     3e6:	26 2f       	mov	r18, r22
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	2f 5f       	subi	r18, 0xFF	; 255
     3ec:	3f 4f       	sbci	r19, 0xFF	; 255
     3ee:	22 0f       	add	r18, r18
     3f0:	33 1f       	adc	r19, r19
     3f2:	c2 0e       	add	r12, r18
     3f4:	d3 1e       	adc	r13, r19
	{
 		ReadGyroSample(bufor);
     3f6:	ce 01       	movw	r24, r28
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	0e 94 22 01 	call	0x244	; 0x244 <ReadGyroSample>
 		reading_buf[X_AXIS][i] = bufor[X_AXIS];
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	9a 81       	ldd	r25, Y+2	; 0x02
     402:	f7 01       	movw	r30, r14
     404:	81 93       	st	Z+, r24
     406:	91 93       	st	Z+, r25
     408:	7f 01       	movw	r14, r30
 		reading_buf[Y_AXIS][i] = bufor[Y_AXIS];
     40a:	2b 81       	ldd	r18, Y+3	; 0x03
     40c:	3c 81       	ldd	r19, Y+4	; 0x04
     40e:	f8 01       	movw	r30, r16
     410:	21 93       	st	Z+, r18
     412:	31 93       	st	Z+, r19
     414:	8f 01       	movw	r16, r30
 		reading_buf[Z_AXIS][i] = bufor[Z_AXIS];
     416:	2d 81       	ldd	r18, Y+5	; 0x05
     418:	3e 81       	ldd	r19, Y+6	; 0x06
     41a:	37 a3       	std	Z+39, r19	; 0x27
     41c:	26 a3       	std	Z+38, r18	; 0x26

void ReadGyroBuf(int16_t  reading_buf[3][SAMPLES_BUFF_SIZE], uint8_t sam_nr)
{
	int16_t bufor[3];
	uint8_t i;
	for(i = 0; i < sam_nr; i++)	//read all new samples from buffor
     41e:	ec 14       	cp	r14, r12
     420:	fd 04       	cpc	r15, r13
     422:	49 f7       	brne	.-46     	; 0x3f6 <ReadGyroBuf+0x3a>
 		ReadGyroSample(bufor);
 		reading_buf[X_AXIS][i] = bufor[X_AXIS];
 		reading_buf[Y_AXIS][i] = bufor[Y_AXIS];
 		reading_buf[Z_AXIS][i] = bufor[Z_AXIS];
	}
}
     424:	26 96       	adiw	r28, 0x06	; 6
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	cd bf       	out	0x3d, r28	; 61
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	ff 90       	pop	r15
     43a:	ef 90       	pop	r14
     43c:	df 90       	pop	r13
     43e:	cf 90       	pop	r12
     440:	08 95       	ret

00000442 <ReadAccBuf>:

void ReadAccBuf(int16_t  reading_buf[3][SAMPLES_BUFF_SIZE], uint8_t sam_nr)
{
     442:	cf 92       	push	r12
     444:	df 92       	push	r13
     446:	ef 92       	push	r14
     448:	ff 92       	push	r15
     44a:	0f 93       	push	r16
     44c:	1f 93       	push	r17
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	00 d0       	rcall	.+0      	; 0x454 <ReadAccBuf+0x12>
     454:	00 d0       	rcall	.+0      	; 0x456 <ReadAccBuf+0x14>
     456:	00 d0       	rcall	.+0      	; 0x458 <ReadAccBuf+0x16>
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
	int16_t bufor[3];
	uint8_t i;
	for(i = 0; i < sam_nr; i++)	//read all new samples from buffor
     45c:	66 23       	and	r22, r22
     45e:	29 f1       	breq	.+74     	; 0x4aa <ReadAccBuf+0x68>
     460:	6c 01       	movw	r12, r24
     462:	7c 01       	movw	r14, r24
     464:	8c 01       	movw	r16, r24
     466:	08 5d       	subi	r16, 0xD8	; 216
     468:	1f 4f       	sbci	r17, 0xFF	; 255
     46a:	61 50       	subi	r22, 0x01	; 1
     46c:	26 2f       	mov	r18, r22
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	2f 5f       	subi	r18, 0xFF	; 255
     472:	3f 4f       	sbci	r19, 0xFF	; 255
     474:	22 0f       	add	r18, r18
     476:	33 1f       	adc	r19, r19
     478:	c2 0e       	add	r12, r18
     47a:	d3 1e       	adc	r13, r19
	{
		ReadAccSample(bufor);
     47c:	ce 01       	movw	r24, r28
     47e:	01 96       	adiw	r24, 0x01	; 1
     480:	0e 94 50 01 	call	0x2a0	; 0x2a0 <ReadAccSample>
 		reading_buf[X_AXIS][i] = bufor[X_AXIS];
     484:	89 81       	ldd	r24, Y+1	; 0x01
     486:	9a 81       	ldd	r25, Y+2	; 0x02
     488:	f7 01       	movw	r30, r14
     48a:	81 93       	st	Z+, r24
     48c:	91 93       	st	Z+, r25
     48e:	7f 01       	movw	r14, r30
 		reading_buf[Y_AXIS][i] = bufor[Y_AXIS];
     490:	2b 81       	ldd	r18, Y+3	; 0x03
     492:	3c 81       	ldd	r19, Y+4	; 0x04
     494:	f8 01       	movw	r30, r16
     496:	21 93       	st	Z+, r18
     498:	31 93       	st	Z+, r19
     49a:	8f 01       	movw	r16, r30
 		reading_buf[Z_AXIS][i] = bufor[Z_AXIS];
     49c:	2d 81       	ldd	r18, Y+5	; 0x05
     49e:	3e 81       	ldd	r19, Y+6	; 0x06
     4a0:	37 a3       	std	Z+39, r19	; 0x27
     4a2:	26 a3       	std	Z+38, r18	; 0x26

void ReadAccBuf(int16_t  reading_buf[3][SAMPLES_BUFF_SIZE], uint8_t sam_nr)
{
	int16_t bufor[3];
	uint8_t i;
	for(i = 0; i < sam_nr; i++)	//read all new samples from buffor
     4a4:	ec 14       	cp	r14, r12
     4a6:	fd 04       	cpc	r15, r13
     4a8:	49 f7       	brne	.-46     	; 0x47c <ReadAccBuf+0x3a>
		ReadAccSample(bufor);
 		reading_buf[X_AXIS][i] = bufor[X_AXIS];
 		reading_buf[Y_AXIS][i] = bufor[Y_AXIS];
 		reading_buf[Z_AXIS][i] = bufor[Z_AXIS];
	}
}
     4aa:	26 96       	adiw	r28, 0x06	; 6
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	f8 94       	cli
     4b0:	de bf       	out	0x3e, r29	; 62
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	cd bf       	out	0x3d, r28	; 61
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	ff 90       	pop	r15
     4c0:	ef 90       	pop	r14
     4c2:	df 90       	pop	r13
     4c4:	cf 90       	pop	r12
     4c6:	08 95       	ret

000004c8 <AveragingLinearMPU6050>:
	ReadAccBuf(temp_buf, samples);
	AveragingWeightingMPU6050(temp_buf, samples, acc);
}

void AveragingLinearMPU6050(int16_t data[3][SAMPLES_BUFF_SIZE], uint8_t samples, int16_t results[3])
{
     4c8:	4f 92       	push	r4
     4ca:	5f 92       	push	r5
     4cc:	6f 92       	push	r6
     4ce:	7f 92       	push	r7
     4d0:	8f 92       	push	r8
     4d2:	9f 92       	push	r9
     4d4:	af 92       	push	r10
     4d6:	bf 92       	push	r11
     4d8:	cf 92       	push	r12
     4da:	df 92       	push	r13
     4dc:	ef 92       	push	r14
     4de:	ff 92       	push	r15
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	ea 01       	movw	r28, r20
	int32_t sum[3];
	sum[0] = 0;
	sum[1] = 0;
	sum[2] = 0;

	for(uint8_t i = 0; i < samples; i++)
     4ea:	66 23       	and	r22, r22
     4ec:	b9 f1       	breq	.+110    	; 0x55c <AveragingLinearMPU6050+0x94>
     4ee:	dc 01       	movw	r26, r24
     4f0:	fc 01       	movw	r30, r24
     4f2:	b8 96       	adiw	r30, 0x28	; 40
     4f4:	2f ef       	ldi	r18, 0xFF	; 255
     4f6:	26 0f       	add	r18, r22
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	2f 5f       	subi	r18, 0xFF	; 255
     4fc:	3f 4f       	sbci	r19, 0xFF	; 255
     4fe:	22 0f       	add	r18, r18
     500:	33 1f       	adc	r19, r19
     502:	82 0f       	add	r24, r18
     504:	93 1f       	adc	r25, r19
     506:	00 e0       	ldi	r16, 0x00	; 0
     508:	10 e0       	ldi	r17, 0x00	; 0
     50a:	98 01       	movw	r18, r16
     50c:	81 2c       	mov	r8, r1
     50e:	91 2c       	mov	r9, r1
     510:	54 01       	movw	r10, r8
     512:	c1 2c       	mov	r12, r1
     514:	d1 2c       	mov	r13, r1
     516:	76 01       	movw	r14, r12
	{
		sum[X_AXIS] += data[X_AXIS][i];
     518:	4d 91       	ld	r20, X+
     51a:	5d 91       	ld	r21, X+
     51c:	2a 01       	movw	r4, r20
     51e:	55 0f       	add	r21, r21
     520:	66 08       	sbc	r6, r6
     522:	77 08       	sbc	r7, r7
     524:	04 0d       	add	r16, r4
     526:	15 1d       	adc	r17, r5
     528:	26 1d       	adc	r18, r6
     52a:	37 1d       	adc	r19, r7
		sum[Y_AXIS] += data[Y_AXIS][i];
     52c:	41 91       	ld	r20, Z+
     52e:	51 91       	ld	r21, Z+
     530:	2a 01       	movw	r4, r20
     532:	55 0f       	add	r21, r21
     534:	66 08       	sbc	r6, r6
     536:	77 08       	sbc	r7, r7
     538:	84 0c       	add	r8, r4
     53a:	95 1c       	adc	r9, r5
     53c:	a6 1c       	adc	r10, r6
     53e:	b7 1c       	adc	r11, r7
		sum[Z_AXIS] += data[Z_AXIS][i];
     540:	46 a1       	ldd	r20, Z+38	; 0x26
     542:	57 a1       	ldd	r21, Z+39	; 0x27
     544:	2a 01       	movw	r4, r20
     546:	55 0f       	add	r21, r21
     548:	66 08       	sbc	r6, r6
     54a:	77 08       	sbc	r7, r7
     54c:	c4 0c       	add	r12, r4
     54e:	d5 1c       	adc	r13, r5
     550:	e6 1c       	adc	r14, r6
     552:	f7 1c       	adc	r15, r7
	int32_t sum[3];
	sum[0] = 0;
	sum[1] = 0;
	sum[2] = 0;

	for(uint8_t i = 0; i < samples; i++)
     554:	a8 17       	cp	r26, r24
     556:	b9 07       	cpc	r27, r25
     558:	f9 f6       	brne	.-66     	; 0x518 <AveragingLinearMPU6050+0x50>
     55a:	09 c0       	rjmp	.+18     	; 0x56e <AveragingLinearMPU6050+0xa6>
}

void AveragingLinearMPU6050(int16_t data[3][SAMPLES_BUFF_SIZE], uint8_t samples, int16_t results[3])
{
	int32_t sum[3];
	sum[0] = 0;
     55c:	00 e0       	ldi	r16, 0x00	; 0
     55e:	10 e0       	ldi	r17, 0x00	; 0
     560:	98 01       	movw	r18, r16
	sum[1] = 0;
     562:	81 2c       	mov	r8, r1
     564:	91 2c       	mov	r9, r1
     566:	54 01       	movw	r10, r8
	sum[2] = 0;
     568:	c1 2c       	mov	r12, r1
     56a:	d1 2c       	mov	r13, r1
     56c:	76 01       	movw	r14, r12
		sum[X_AXIS] += data[X_AXIS][i];
		sum[Y_AXIS] += data[Y_AXIS][i];
		sum[Z_AXIS] += data[Z_AXIS][i];
	}

	sum[X_AXIS] /= (int32_t) samples;
     56e:	46 2e       	mov	r4, r22
     570:	51 2c       	mov	r5, r1
     572:	61 2c       	mov	r6, r1
     574:	71 2c       	mov	r7, r1
	sum[Y_AXIS] /= (int32_t) samples;
	sum[Z_AXIS] /= (int32_t) samples;

	results[X_AXIS] = (int16_t) sum[X_AXIS];
     576:	c9 01       	movw	r24, r18
     578:	b8 01       	movw	r22, r16
     57a:	a3 01       	movw	r20, r6
     57c:	92 01       	movw	r18, r4
     57e:	0e 94 b3 11 	call	0x2366	; 0x2366 <__divmodsi4>
     582:	39 83       	std	Y+1, r19	; 0x01
     584:	28 83       	st	Y, r18
	results[Y_AXIS] = (int16_t) sum[Y_AXIS];
     586:	c5 01       	movw	r24, r10
     588:	b4 01       	movw	r22, r8
     58a:	a3 01       	movw	r20, r6
     58c:	92 01       	movw	r18, r4
     58e:	0e 94 b3 11 	call	0x2366	; 0x2366 <__divmodsi4>
     592:	3b 83       	std	Y+3, r19	; 0x03
     594:	2a 83       	std	Y+2, r18	; 0x02
	results[Z_AXIS] = (int16_t) sum[Z_AXIS];
     596:	c7 01       	movw	r24, r14
     598:	b6 01       	movw	r22, r12
     59a:	a3 01       	movw	r20, r6
     59c:	92 01       	movw	r18, r4
     59e:	0e 94 b3 11 	call	0x2366	; 0x2366 <__divmodsi4>
     5a2:	3d 83       	std	Y+5, r19	; 0x05
     5a4:	2c 83       	std	Y+4, r18	; 0x04
}
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	1f 91       	pop	r17
     5ac:	0f 91       	pop	r16
     5ae:	ff 90       	pop	r15
     5b0:	ef 90       	pop	r14
     5b2:	df 90       	pop	r13
     5b4:	cf 90       	pop	r12
     5b6:	bf 90       	pop	r11
     5b8:	af 90       	pop	r10
     5ba:	9f 90       	pop	r9
     5bc:	8f 90       	pop	r8
     5be:	7f 90       	pop	r7
     5c0:	6f 90       	pop	r6
     5c2:	5f 90       	pop	r5
     5c4:	4f 90       	pop	r4
     5c6:	08 95       	ret

000005c8 <ReadGyroBufAveraged>:
	}
}

/*** Before calling this function, make sure there are samples in bufor ***/
void ReadGyroBufAveraged(int16_t gyro[3])
{
     5c8:	ef 92       	push	r14
     5ca:	ff 92       	push	r15
     5cc:	1f 93       	push	r17
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	cd b7       	in	r28, 0x3d	; 61
     5d4:	de b7       	in	r29, 0x3e	; 62
     5d6:	c8 57       	subi	r28, 0x78	; 120
     5d8:	d1 09       	sbc	r29, r1
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	de bf       	out	0x3e, r29	; 62
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	cd bf       	out	0x3d, r28	; 61
     5e4:	7c 01       	movw	r14, r24
	int16_t temp_buf[3][SAMPLES_BUFF_SIZE];	//bufor to store samples
	uint8_t samples;		//number of samples in bufor

	samples = SamplesGyroBuf();
     5e6:	0e 94 cc 01 	call	0x398	; 0x398 <SamplesGyroBuf>
     5ea:	18 2f       	mov	r17, r24

	ReadGyroBuf(temp_buf, samples);
     5ec:	68 2f       	mov	r22, r24
     5ee:	ce 01       	movw	r24, r28
     5f0:	01 96       	adiw	r24, 0x01	; 1
     5f2:	0e 94 de 01 	call	0x3bc	; 0x3bc <ReadGyroBuf>
	AveragingLinearMPU6050(temp_buf, samples, gyro);
     5f6:	a7 01       	movw	r20, r14
     5f8:	61 2f       	mov	r22, r17
     5fa:	ce 01       	movw	r24, r28
     5fc:	01 96       	adiw	r24, 0x01	; 1
     5fe:	0e 94 64 02 	call	0x4c8	; 0x4c8 <AveragingLinearMPU6050>
}
     602:	c8 58       	subi	r28, 0x88	; 136
     604:	df 4f       	sbci	r29, 0xFF	; 255
     606:	0f b6       	in	r0, 0x3f	; 63
     608:	f8 94       	cli
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	cd bf       	out	0x3d, r28	; 61
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	ff 90       	pop	r15
     618:	ef 90       	pop	r14
     61a:	08 95       	ret

0000061c <AveragingWeightingMPU6050>:
	results[Y_AXIS] = (int16_t) sum[Y_AXIS];
	results[Z_AXIS] = (int16_t) sum[Z_AXIS];
}

void AveragingWeightingMPU6050(int16_t data[3][SAMPLES_BUFF_SIZE], uint8_t samples, int16_t results[3])
{
     61c:	2f 92       	push	r2
     61e:	3f 92       	push	r3
     620:	4f 92       	push	r4
     622:	5f 92       	push	r5
     624:	6f 92       	push	r6
     626:	7f 92       	push	r7
     628:	8f 92       	push	r8
     62a:	9f 92       	push	r9
     62c:	af 92       	push	r10
     62e:	bf 92       	push	r11
     630:	cf 92       	push	r12
     632:	df 92       	push	r13
     634:	ef 92       	push	r14
     636:	ff 92       	push	r15
     638:	0f 93       	push	r16
     63a:	1f 93       	push	r17
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	cd b7       	in	r28, 0x3d	; 61
     642:	de b7       	in	r29, 0x3e	; 62
     644:	27 97       	sbiw	r28, 0x07	; 7
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	f8 94       	cli
     64a:	de bf       	out	0x3e, r29	; 62
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	cd bf       	out	0x3d, r28	; 61
     650:	5e 83       	std	Y+6, r21	; 0x06
     652:	4d 83       	std	Y+5, r20	; 0x05
	sum[0] = 0;
	sum[1] = 0;
	sum[2] = 0;
	uint8_t average = 0;

	for(uint8_t i = 0; i < samples; i++)
     654:	66 23       	and	r22, r22
     656:	09 f4       	brne	.+2      	; 0x65a <AveragingWeightingMPU6050+0x3e>
     658:	66 c0       	rjmp	.+204    	; 0x726 <AveragingWeightingMPU6050+0x10a>
     65a:	8c 01       	movw	r16, r24
     65c:	fc 01       	movw	r30, r24
     65e:	b8 96       	adiw	r30, 0x28	; 40
     660:	61 50       	subi	r22, 0x01	; 1
     662:	26 2e       	mov	r2, r22
     664:	31 2c       	mov	r3, r1
     666:	25 e1       	ldi	r18, 0x15	; 21
     668:	22 0e       	add	r2, r18
     66a:	31 1c       	adc	r3, r1
     66c:	22 0c       	add	r2, r2
     66e:	33 1c       	adc	r3, r3
     670:	28 0e       	add	r2, r24
     672:	39 1e       	adc	r3, r25
     674:	c1 2c       	mov	r12, r1
     676:	d1 2c       	mov	r13, r1
     678:	76 01       	movw	r14, r12
     67a:	c3 94       	inc	r12
     67c:	19 82       	std	Y+1, r1	; 0x01
     67e:	1a 82       	std	Y+2, r1	; 0x02
     680:	1b 82       	std	Y+3, r1	; 0x03
     682:	1c 82       	std	Y+4, r1	; 0x04
     684:	41 2c       	mov	r4, r1
     686:	51 2c       	mov	r5, r1
     688:	32 01       	movw	r6, r4
     68a:	81 2c       	mov	r8, r1
     68c:	91 2c       	mov	r9, r1
     68e:	54 01       	movw	r10, r8
     690:	1f 82       	std	Y+7, r1	; 0x07
	{
		average += (i+1)*(i+1);
     692:	4f 81       	ldd	r20, Y+7	; 0x07
     694:	cc 9c       	mul	r12, r12
     696:	40 0d       	add	r20, r0
     698:	11 24       	eor	r1, r1
     69a:	4f 83       	std	Y+7, r20	; 0x07
		sum[X_AXIS] += ((int32_t)data[X_AXIS][i] * (i+1)*(i+1));
     69c:	d8 01       	movw	r26, r16
     69e:	8d 91       	ld	r24, X+
     6a0:	9d 91       	ld	r25, X+
     6a2:	8d 01       	movw	r16, r26
     6a4:	dc 01       	movw	r26, r24
     6a6:	a7 01       	movw	r20, r14
     6a8:	96 01       	movw	r18, r12
     6aa:	0e 94 01 12 	call	0x2402	; 0x2402 <__mulshisi3>
     6ae:	9b 01       	movw	r18, r22
     6b0:	ac 01       	movw	r20, r24
     6b2:	c7 01       	movw	r24, r14
     6b4:	b6 01       	movw	r22, r12
     6b6:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsi3>
     6ba:	29 81       	ldd	r18, Y+1	; 0x01
     6bc:	3a 81       	ldd	r19, Y+2	; 0x02
     6be:	4b 81       	ldd	r20, Y+3	; 0x03
     6c0:	5c 81       	ldd	r21, Y+4	; 0x04
     6c2:	26 0f       	add	r18, r22
     6c4:	37 1f       	adc	r19, r23
     6c6:	48 1f       	adc	r20, r24
     6c8:	59 1f       	adc	r21, r25
     6ca:	29 83       	std	Y+1, r18	; 0x01
     6cc:	3a 83       	std	Y+2, r19	; 0x02
     6ce:	4b 83       	std	Y+3, r20	; 0x03
     6d0:	5c 83       	std	Y+4, r21	; 0x04
		sum[Y_AXIS] += ((int32_t)data[Y_AXIS][i] * (i+1)*(i+1));
     6d2:	a1 91       	ld	r26, Z+
     6d4:	b1 91       	ld	r27, Z+
     6d6:	a7 01       	movw	r20, r14
     6d8:	96 01       	movw	r18, r12
     6da:	0e 94 01 12 	call	0x2402	; 0x2402 <__mulshisi3>
     6de:	9b 01       	movw	r18, r22
     6e0:	ac 01       	movw	r20, r24
     6e2:	c7 01       	movw	r24, r14
     6e4:	b6 01       	movw	r22, r12
     6e6:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsi3>
     6ea:	46 0e       	add	r4, r22
     6ec:	57 1e       	adc	r5, r23
     6ee:	68 1e       	adc	r6, r24
     6f0:	79 1e       	adc	r7, r25
		sum[Z_AXIS] += ((int32_t)data[Z_AXIS][i] * (i+1)*(i+1));
     6f2:	a6 a1       	ldd	r26, Z+38	; 0x26
     6f4:	b7 a1       	ldd	r27, Z+39	; 0x27
     6f6:	a7 01       	movw	r20, r14
     6f8:	96 01       	movw	r18, r12
     6fa:	0e 94 01 12 	call	0x2402	; 0x2402 <__mulshisi3>
     6fe:	9b 01       	movw	r18, r22
     700:	ac 01       	movw	r20, r24
     702:	c7 01       	movw	r24, r14
     704:	b6 01       	movw	r22, r12
     706:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsi3>
     70a:	86 0e       	add	r8, r22
     70c:	97 1e       	adc	r9, r23
     70e:	a8 1e       	adc	r10, r24
     710:	b9 1e       	adc	r11, r25
     712:	3f ef       	ldi	r19, 0xFF	; 255
     714:	c3 1a       	sub	r12, r19
     716:	d3 0a       	sbc	r13, r19
     718:	e3 0a       	sbc	r14, r19
     71a:	f3 0a       	sbc	r15, r19
	sum[0] = 0;
	sum[1] = 0;
	sum[2] = 0;
	uint8_t average = 0;

	for(uint8_t i = 0; i < samples; i++)
     71c:	e2 15       	cp	r30, r2
     71e:	f3 05       	cpc	r31, r3
     720:	09 f0       	breq	.+2      	; 0x724 <AveragingWeightingMPU6050+0x108>
     722:	b7 cf       	rjmp	.-146    	; 0x692 <AveragingWeightingMPU6050+0x76>
     724:	0b c0       	rjmp	.+22     	; 0x73c <AveragingWeightingMPU6050+0x120>
}

void AveragingWeightingMPU6050(int16_t data[3][SAMPLES_BUFF_SIZE], uint8_t samples, int16_t results[3])
{
	int32_t sum[3];
	sum[0] = 0;
     726:	19 82       	std	Y+1, r1	; 0x01
     728:	1a 82       	std	Y+2, r1	; 0x02
     72a:	1b 82       	std	Y+3, r1	; 0x03
     72c:	1c 82       	std	Y+4, r1	; 0x04
	sum[1] = 0;
     72e:	41 2c       	mov	r4, r1
     730:	51 2c       	mov	r5, r1
     732:	32 01       	movw	r6, r4
	sum[2] = 0;
     734:	81 2c       	mov	r8, r1
     736:	91 2c       	mov	r9, r1
     738:	54 01       	movw	r10, r8
	uint8_t average = 0;
     73a:	1f 82       	std	Y+7, r1	; 0x07
		sum[X_AXIS] += ((int32_t)data[X_AXIS][i] * (i+1)*(i+1));
		sum[Y_AXIS] += ((int32_t)data[Y_AXIS][i] * (i+1)*(i+1));
		sum[Z_AXIS] += ((int32_t)data[Z_AXIS][i] * (i+1)*(i+1));
	}

	sum[X_AXIS] /= (int32_t) average;
     73c:	ff 81       	ldd	r31, Y+7	; 0x07
     73e:	cf 2e       	mov	r12, r31
     740:	d1 2c       	mov	r13, r1
     742:	e1 2c       	mov	r14, r1
     744:	f1 2c       	mov	r15, r1
	sum[Y_AXIS] /= (int32_t) average;
	sum[Z_AXIS] /= (int32_t) average;

	results[X_AXIS] = (int16_t) sum[X_AXIS];
     746:	69 81       	ldd	r22, Y+1	; 0x01
     748:	7a 81       	ldd	r23, Y+2	; 0x02
     74a:	8b 81       	ldd	r24, Y+3	; 0x03
     74c:	9c 81       	ldd	r25, Y+4	; 0x04
     74e:	a7 01       	movw	r20, r14
     750:	96 01       	movw	r18, r12
     752:	0e 94 b3 11 	call	0x2366	; 0x2366 <__divmodsi4>
     756:	ad 81       	ldd	r26, Y+5	; 0x05
     758:	be 81       	ldd	r27, Y+6	; 0x06
     75a:	2d 93       	st	X+, r18
     75c:	3c 93       	st	X, r19
	results[Y_AXIS] = (int16_t) sum[Y_AXIS];
     75e:	c3 01       	movw	r24, r6
     760:	b2 01       	movw	r22, r4
     762:	a7 01       	movw	r20, r14
     764:	96 01       	movw	r18, r12
     766:	0e 94 b3 11 	call	0x2366	; 0x2366 <__divmodsi4>
     76a:	ed 81       	ldd	r30, Y+5	; 0x05
     76c:	fe 81       	ldd	r31, Y+6	; 0x06
     76e:	33 83       	std	Z+3, r19	; 0x03
     770:	22 83       	std	Z+2, r18	; 0x02
	results[Z_AXIS] = (int16_t) sum[Z_AXIS];
     772:	c5 01       	movw	r24, r10
     774:	b4 01       	movw	r22, r8
     776:	a7 01       	movw	r20, r14
     778:	96 01       	movw	r18, r12
     77a:	0e 94 b3 11 	call	0x2366	; 0x2366 <__divmodsi4>
     77e:	ad 81       	ldd	r26, Y+5	; 0x05
     780:	be 81       	ldd	r27, Y+6	; 0x06
     782:	15 96       	adiw	r26, 0x05	; 5
     784:	3c 93       	st	X, r19
     786:	2e 93       	st	-X, r18
     788:	14 97       	sbiw	r26, 0x04	; 4
     78a:	27 96       	adiw	r28, 0x07	; 7
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	f8 94       	cli
     790:	de bf       	out	0x3e, r29	; 62
     792:	0f be       	out	0x3f, r0	; 63
     794:	cd bf       	out	0x3d, r28	; 61
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	1f 91       	pop	r17
     79c:	0f 91       	pop	r16
     79e:	ff 90       	pop	r15
     7a0:	ef 90       	pop	r14
     7a2:	df 90       	pop	r13
     7a4:	cf 90       	pop	r12
     7a6:	bf 90       	pop	r11
     7a8:	af 90       	pop	r10
     7aa:	9f 90       	pop	r9
     7ac:	8f 90       	pop	r8
     7ae:	7f 90       	pop	r7
     7b0:	6f 90       	pop	r6
     7b2:	5f 90       	pop	r5
     7b4:	4f 90       	pop	r4
     7b6:	3f 90       	pop	r3
     7b8:	2f 90       	pop	r2
     7ba:	08 95       	ret

000007bc <ReadAccBufAveraged>:
	AveragingLinearMPU6050(temp_buf, samples, gyro);
}

/*** Before calling this function, make sure there are samples in bufor ***/
void ReadAccBufAveraged(int16_t acc[3])
{
     7bc:	ef 92       	push	r14
     7be:	ff 92       	push	r15
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
     7ca:	c8 57       	subi	r28, 0x78	; 120
     7cc:	d1 09       	sbc	r29, r1
     7ce:	0f b6       	in	r0, 0x3f	; 63
     7d0:	f8 94       	cli
     7d2:	de bf       	out	0x3e, r29	; 62
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	cd bf       	out	0x3d, r28	; 61
     7d8:	7c 01       	movw	r14, r24
	int16_t temp_buf[3][SAMPLES_BUFF_SIZE];	//bufor to store samples
	uint8_t samples;	//number of samples in bufor

	samples = SamplesAccBuf();
     7da:	0e 94 d5 01 	call	0x3aa	; 0x3aa <SamplesAccBuf>
     7de:	18 2f       	mov	r17, r24

	ReadAccBuf(temp_buf, samples);
     7e0:	68 2f       	mov	r22, r24
     7e2:	ce 01       	movw	r24, r28
     7e4:	01 96       	adiw	r24, 0x01	; 1
     7e6:	0e 94 21 02 	call	0x442	; 0x442 <ReadAccBuf>
	AveragingWeightingMPU6050(temp_buf, samples, acc);
     7ea:	a7 01       	movw	r20, r14
     7ec:	61 2f       	mov	r22, r17
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 0e 03 	call	0x61c	; 0x61c <AveragingWeightingMPU6050>
}
     7f6:	c8 58       	subi	r28, 0x88	; 136
     7f8:	df 4f       	sbci	r29, 0xFF	; 255
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	f8 94       	cli
     7fe:	de bf       	out	0x3e, r29	; 62
     800:	0f be       	out	0x3f, r0	; 63
     802:	cd bf       	out	0x3d, r28	; 61
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	1f 91       	pop	r17
     80a:	ff 90       	pop	r15
     80c:	ef 90       	pop	r14
     80e:	08 95       	ret

00000810 <ProcessAngle>:

int32_t CalculateNewPos(double pos_acc, int32_t pos_gyro, int32_t pos_total, uint32_t total_g);


double ProcessAngle(int16_t width, int16_t high)
{
     810:	cf 92       	push	r12
     812:	df 92       	push	r13
     814:	ef 92       	push	r14
     816:	ff 92       	push	r15
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
	double angle = 0;
	if (width != 0)	//for 0 width atan can be 0 or 180, but should be 0
     81c:	00 97       	sbiw	r24, 0x00	; 0
     81e:	c1 f1       	breq	.+112    	; 0x890 <ProcessAngle+0x80>
     820:	ec 01       	movw	r28, r24
	{
		angle = atan((double)high / (double)width);
     822:	07 2e       	mov	r0, r23
     824:	00 0c       	add	r0, r0
     826:	88 0b       	sbc	r24, r24
     828:	99 0b       	sbc	r25, r25
     82a:	0e 94 77 10 	call	0x20ee	; 0x20ee <__floatsisf>
     82e:	6b 01       	movw	r12, r22
     830:	7c 01       	movw	r14, r24
     832:	be 01       	movw	r22, r28
     834:	0d 2e       	mov	r0, r29
     836:	00 0c       	add	r0, r0
     838:	88 0b       	sbc	r24, r24
     83a:	99 0b       	sbc	r25, r25
     83c:	0e 94 77 10 	call	0x20ee	; 0x20ee <__floatsisf>
     840:	9b 01       	movw	r18, r22
     842:	ac 01       	movw	r20, r24
     844:	c7 01       	movw	r24, r14
     846:	b6 01       	movw	r22, r12
     848:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__divsf3>
     84c:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <atan>
		/* Process to correct angles */
		if (width > 0)
     850:	1c 16       	cp	r1, r28
     852:	1d 06       	cpc	r1, r29
     854:	4c f4       	brge	.+18     	; 0x868 <ProcessAngle+0x58>
			angle = M_PI_2 - angle;
     856:	9b 01       	movw	r18, r22
     858:	ac 01       	movw	r20, r24
     85a:	6b ed       	ldi	r22, 0xDB	; 219
     85c:	7f e0       	ldi	r23, 0x0F	; 15
     85e:	89 ec       	ldi	r24, 0xC9	; 201
     860:	9f e3       	ldi	r25, 0x3F	; 63
     862:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__subsf3>
     866:	07 c0       	rjmp	.+14     	; 0x876 <ProcessAngle+0x66>
		else
			angle = (M_PI_2 + angle) * (-1);
     868:	2b ed       	ldi	r18, 0xDB	; 219
     86a:	3f e0       	ldi	r19, 0x0F	; 15
     86c:	49 ec       	ldi	r20, 0xC9	; 201
     86e:	5f e3       	ldi	r21, 0x3F	; 63
     870:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <__addsf3>
     874:	90 58       	subi	r25, 0x80	; 128

		angle = (angle * 180) / M_PI;
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	44 e3       	ldi	r20, 0x34	; 52
     87c:	53 e4       	ldi	r21, 0x43	; 67
     87e:	0e 94 32 11 	call	0x2264	; 0x2264 <__mulsf3>
     882:	2b ed       	ldi	r18, 0xDB	; 219
     884:	3f e0       	ldi	r19, 0x0F	; 15
     886:	49 e4       	ldi	r20, 0x49	; 73
     888:	50 e4       	ldi	r21, 0x40	; 64
     88a:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__divsf3>
     88e:	03 c0       	rjmp	.+6      	; 0x896 <ProcessAngle+0x86>
int32_t CalculateNewPos(double pos_acc, int32_t pos_gyro, int32_t pos_total, uint32_t total_g);


double ProcessAngle(int16_t width, int16_t high)
{
	double angle = 0;
     890:	60 e0       	ldi	r22, 0x00	; 0
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	cb 01       	movw	r24, r22
			angle = (M_PI_2 + angle) * (-1);

		angle = (angle * 180) / M_PI;
	}
	return angle;
}
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	ff 90       	pop	r15
     89c:	ef 90       	pop	r14
     89e:	df 90       	pop	r13
     8a0:	cf 90       	pop	r12
     8a2:	08 95       	ret

000008a4 <CheckTotalG>:
// 		pos_y = pos_acc + pomocnicza;
// 	}
}

uint32_t CheckTotalG(int16_t acc_vector[3])
{
     8a4:	8f 92       	push	r8
     8a6:	9f 92       	push	r9
     8a8:	af 92       	push	r10
     8aa:	bf 92       	push	r11
     8ac:	cf 92       	push	r12
     8ae:	df 92       	push	r13
     8b0:	ef 92       	push	r14
     8b2:	ff 92       	push	r15
     8b4:	fc 01       	movw	r30, r24
	uint32_t value;
	value =	(uint32_t)acc_vector[X_AXIS] * (uint32_t)acc_vector[X_AXIS] +
     8b6:	a0 81       	ld	r26, Z
     8b8:	b1 81       	ldd	r27, Z+1	; 0x01
			(uint32_t)acc_vector[Y_AXIS] * (uint32_t)acc_vector[Y_AXIS] +
     8ba:	e2 80       	ldd	r14, Z+2	; 0x02
     8bc:	f3 80       	ldd	r15, Z+3	; 0x03
			(uint32_t)acc_vector[Z_AXIS] * (uint32_t)acc_vector[Z_AXIS];
     8be:	44 81       	ldd	r20, Z+4	; 0x04
     8c0:	55 81       	ldd	r21, Z+5	; 0x05

	return value;
     8c2:	9d 01       	movw	r18, r26
     8c4:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <__mulhisi3>
     8c8:	4b 01       	movw	r8, r22
     8ca:	5c 01       	movw	r10, r24
     8cc:	97 01       	movw	r18, r14
     8ce:	d7 01       	movw	r26, r14
     8d0:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <__mulhisi3>
     8d4:	75 01       	movw	r14, r10
     8d6:	64 01       	movw	r12, r8
     8d8:	c6 0e       	add	r12, r22
     8da:	d7 1e       	adc	r13, r23
     8dc:	e8 1e       	adc	r14, r24
     8de:	f9 1e       	adc	r15, r25
     8e0:	9a 01       	movw	r18, r20
     8e2:	da 01       	movw	r26, r20
     8e4:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <__mulhisi3>
     8e8:	6c 0d       	add	r22, r12
     8ea:	7d 1d       	adc	r23, r13
     8ec:	8e 1d       	adc	r24, r14
     8ee:	9f 1d       	adc	r25, r15
}
     8f0:	ff 90       	pop	r15
     8f2:	ef 90       	pop	r14
     8f4:	df 90       	pop	r13
     8f6:	cf 90       	pop	r12
     8f8:	bf 90       	pop	r11
     8fa:	af 90       	pop	r10
     8fc:	9f 90       	pop	r9
     8fe:	8f 90       	pop	r8
     900:	08 95       	ret

00000902 <CalculateNewPos>:

int32_t CalculateNewPos(double pos_acc, int32_t pos_gyro, int32_t pos_total, uint32_t total_g)
{
     902:	4f 92       	push	r4
     904:	5f 92       	push	r5
     906:	6f 92       	push	r6
     908:	7f 92       	push	r7
     90a:	8f 92       	push	r8
     90c:	9f 92       	push	r9
     90e:	af 92       	push	r10
     910:	bf 92       	push	r11
     912:	cf 92       	push	r12
     914:	df 92       	push	r13
     916:	ef 92       	push	r14
     918:	ff 92       	push	r15
     91a:	0f 93       	push	r16
     91c:	1f 93       	push	r17
     91e:	2b 01       	movw	r4, r22
     920:	3c 01       	movw	r6, r24
	int32_t pos_acc_calc, temporary;

	if (total_g > G_SPECIAL_MAX || total_g < G_SPECIAL_MIN)
     922:	d6 01       	movw	r26, r12
     924:	c5 01       	movw	r24, r10
     926:	8c 5c       	subi	r24, 0xCC	; 204
     928:	9c 4c       	sbci	r25, 0xCC	; 204
     92a:	ac 4c       	sbci	r26, 0xCC	; 204
     92c:	bc 40       	sbci	r27, 0x0C	; 12
     92e:	88 36       	cpi	r24, 0x68	; 104
     930:	96 46       	sbci	r25, 0x66	; 102
     932:	a6 46       	sbci	r26, 0x66	; 102
     934:	b6 40       	sbci	r27, 0x06	; 6
     936:	f8 f0       	brcs	.+62     	; 0x976 <CalculateNewPos+0x74>
	{
		pos_acc *= ACC_SPECIAL;
		pos_acc_calc = (int32_t)pos_acc;
		temporary = pos_total + pos_gyro;
     938:	2e 0d       	add	r18, r14
     93a:	3f 1d       	adc	r19, r15
     93c:	40 1f       	adc	r20, r16
     93e:	51 1f       	adc	r21, r17
		temporary *= GYRO_SPECIAL;
     940:	a3 e6       	ldi	r26, 0x63	; 99
     942:	b0 e0       	ldi	r27, 0x00	; 0
     944:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__muluhisi3>
     948:	4b 01       	movw	r8, r22
     94a:	5c 01       	movw	r10, r24
		temporary /= 100;
		return pos_acc_calc + temporary;
     94c:	c3 01       	movw	r24, r6
     94e:	b2 01       	movw	r22, r4
     950:	0e 94 3f 10 	call	0x207e	; 0x207e <__fixsfsi>
     954:	6b 01       	movw	r12, r22
     956:	7c 01       	movw	r14, r24
     958:	c5 01       	movw	r24, r10
     95a:	b4 01       	movw	r22, r8
     95c:	24 e6       	ldi	r18, 0x64	; 100
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	40 e0       	ldi	r20, 0x00	; 0
     962:	50 e0       	ldi	r21, 0x00	; 0
     964:	0e 94 b3 11 	call	0x2366	; 0x2366 <__divmodsi4>
     968:	c7 01       	movw	r24, r14
     96a:	b6 01       	movw	r22, r12
     96c:	62 0f       	add	r22, r18
     96e:	73 1f       	adc	r23, r19
     970:	84 1f       	adc	r24, r20
     972:	95 1f       	adc	r25, r21
     974:	24 c0       	rjmp	.+72     	; 0x9be <CalculateNewPos+0xbc>
	}
	else
	{
		pos_acc *= ACC_NORMAL;
		pos_acc_calc = (int32_t)pos_acc;
		temporary = pos_total + pos_gyro;
     976:	2e 0d       	add	r18, r14
     978:	3f 1d       	adc	r19, r15
     97a:	40 1f       	adc	r20, r16
     97c:	51 1f       	adc	r21, r17
		temporary *= GYRO_NORMAL;
     97e:	af e5       	ldi	r26, 0x5F	; 95
     980:	b0 e0       	ldi	r27, 0x00	; 0
     982:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__muluhisi3>
     986:	4b 01       	movw	r8, r22
     988:	5c 01       	movw	r10, r24
		temporary /= 100;
		return pos_acc_calc + temporary;
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 ea       	ldi	r20, 0xA0	; 160
     990:	50 e4       	ldi	r21, 0x40	; 64
     992:	c3 01       	movw	r24, r6
     994:	b2 01       	movw	r22, r4
     996:	0e 94 32 11 	call	0x2264	; 0x2264 <__mulsf3>
     99a:	0e 94 3f 10 	call	0x207e	; 0x207e <__fixsfsi>
     99e:	6b 01       	movw	r12, r22
     9a0:	7c 01       	movw	r14, r24
     9a2:	c5 01       	movw	r24, r10
     9a4:	b4 01       	movw	r22, r8
     9a6:	24 e6       	ldi	r18, 0x64	; 100
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	40 e0       	ldi	r20, 0x00	; 0
     9ac:	50 e0       	ldi	r21, 0x00	; 0
     9ae:	0e 94 b3 11 	call	0x2366	; 0x2366 <__divmodsi4>
     9b2:	c7 01       	movw	r24, r14
     9b4:	b6 01       	movw	r22, r12
     9b6:	62 0f       	add	r22, r18
     9b8:	73 1f       	adc	r23, r19
     9ba:	84 1f       	adc	r24, r20
     9bc:	95 1f       	adc	r25, r21
	}
     9be:	1f 91       	pop	r17
     9c0:	0f 91       	pop	r16
     9c2:	ff 90       	pop	r15
     9c4:	ef 90       	pop	r14
     9c6:	df 90       	pop	r13
     9c8:	cf 90       	pop	r12
     9ca:	bf 90       	pop	r11
     9cc:	af 90       	pop	r10
     9ce:	9f 90       	pop	r9
     9d0:	8f 90       	pop	r8
     9d2:	7f 90       	pop	r7
     9d4:	6f 90       	pop	r6
     9d6:	5f 90       	pop	r5
     9d8:	4f 90       	pop	r4
     9da:	08 95       	ret

000009dc <ProcessPosition>:
	}
	return angle;
}

void ProcessPosition(int16_t gyro[3], int16_t acc[3])
{
     9dc:	2f 92       	push	r2
     9de:	3f 92       	push	r3
     9e0:	4f 92       	push	r4
     9e2:	5f 92       	push	r5
     9e4:	6f 92       	push	r6
     9e6:	7f 92       	push	r7
     9e8:	8f 92       	push	r8
     9ea:	9f 92       	push	r9
     9ec:	af 92       	push	r10
     9ee:	bf 92       	push	r11
     9f0:	cf 92       	push	r12
     9f2:	df 92       	push	r13
     9f4:	ef 92       	push	r14
     9f6:	ff 92       	push	r15
     9f8:	0f 93       	push	r16
     9fa:	1f 93       	push	r17
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	cd b7       	in	r28, 0x3d	; 61
     a02:	de b7       	in	r29, 0x3e	; 62
     a04:	60 97       	sbiw	r28, 0x10	; 16
     a06:	0f b6       	in	r0, 0x3f	; 63
     a08:	f8 94       	cli
     a0a:	de bf       	out	0x3e, r29	; 62
     a0c:	0f be       	out	0x3f, r0	; 63
     a0e:	cd bf       	out	0x3d, r28	; 61
     a10:	3c 01       	movw	r6, r24
     a12:	7a 83       	std	Y+2, r23	; 0x02
     a14:	69 83       	std	Y+1, r22	; 0x01
	int32_t pomocnicza, pos_acc;
	double x_pos_acc = ProcessAngle(acc[Y_AXIS], acc[Z_AXIS]);
     a16:	fb 01       	movw	r30, r22
     a18:	44 80       	ldd	r4, Z+4	; 0x04
     a1a:	55 80       	ldd	r5, Z+5	; 0x05
     a1c:	b2 01       	movw	r22, r4
     a1e:	82 81       	ldd	r24, Z+2	; 0x02
     a20:	93 81       	ldd	r25, Z+3	; 0x03
     a22:	0e 94 08 04 	call	0x810	; 0x810 <ProcessAngle>
     a26:	6d 83       	std	Y+5, r22	; 0x05
     a28:	7e 83       	std	Y+6, r23	; 0x06
     a2a:	8f 83       	std	Y+7, r24	; 0x07
     a2c:	98 87       	std	Y+8, r25	; 0x08
	double y_pos_acc = (ProcessAngle(acc[X_AXIS], acc[Z_AXIS]) * (-1));	
     a2e:	b2 01       	movw	r22, r4
     a30:	e9 81       	ldd	r30, Y+1	; 0x01
     a32:	fa 81       	ldd	r31, Y+2	; 0x02
     a34:	80 81       	ld	r24, Z
     a36:	91 81       	ldd	r25, Z+1	; 0x01
     a38:	0e 94 08 04 	call	0x810	; 0x810 <ProcessAngle>
     a3c:	1b 01       	movw	r2, r22
     a3e:	2c 01       	movw	r4, r24

	uint32_t total_g = CheckTotalG(acc);
     a40:	89 81       	ldd	r24, Y+1	; 0x01
     a42:	9a 81       	ldd	r25, Y+2	; 0x02
     a44:	0e 94 52 04 	call	0x8a4	; 0x8a4 <CheckTotalG>
     a48:	69 83       	std	Y+1, r22	; 0x01
     a4a:	7a 83       	std	Y+2, r23	; 0x02
     a4c:	8b 83       	std	Y+3, r24	; 0x03
     a4e:	9c 83       	std	Y+4, r25	; 0x04

	/* by default all values stored in _pos are in degrees*100*/
	int32_t x_pos_gyro = (int32_t)gyro[X_AXIS] * 100;
     a50:	f3 01       	movw	r30, r6
     a52:	a0 81       	ld	r26, Z
     a54:	b1 81       	ldd	r27, Z+1	; 0x01
     a56:	24 e6       	ldi	r18, 0x64	; 100
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	0e 94 ef 11 	call	0x23de	; 0x23de <__usmulhisi3>
     a5e:	69 87       	std	Y+9, r22	; 0x09
     a60:	7a 87       	std	Y+10, r23	; 0x0a
     a62:	8b 87       	std	Y+11, r24	; 0x0b
     a64:	9c 87       	std	Y+12, r25	; 0x0c
	int32_t y_pos_gyro = (int32_t)gyro[Y_AXIS] * 100;
     a66:	a2 81       	ldd	r26, Z+2	; 0x02
     a68:	b3 81       	ldd	r27, Z+3	; 0x03
     a6a:	0e 94 ef 11 	call	0x23de	; 0x23de <__usmulhisi3>
     a6e:	6d 87       	std	Y+13, r22	; 0x0d
     a70:	7e 87       	std	Y+14, r23	; 0x0e
     a72:	8f 87       	std	Y+15, r24	; 0x0f
     a74:	98 8b       	std	Y+16, r25	; 0x10

	x_pos_gyro = x_pos_gyro / (POS_FS * MPU6050_LSB);
	y_pos_gyro = y_pos_gyro / (POS_FS * MPU6050_LSB);

/* Select mixing value based on total measured acceleration*/
	pos_x = CalculateNewPos(x_pos_acc, x_pos_gyro, pos_x, total_g);
     a76:	e0 90 1e 02 	lds	r14, 0x021E	; 0x80021e <pos_x>
     a7a:	f0 90 1f 02 	lds	r15, 0x021F	; 0x80021f <pos_x+0x1>
     a7e:	00 91 20 02 	lds	r16, 0x0220	; 0x800220 <pos_x+0x2>
     a82:	10 91 21 02 	lds	r17, 0x0221	; 0x800221 <pos_x+0x3>
     a86:	0f 2e       	mov	r0, r31
     a88:	f2 eb       	ldi	r31, 0xB2	; 178
     a8a:	6f 2e       	mov	r6, r31
     a8c:	fc e0       	ldi	r31, 0x0C	; 12
     a8e:	7f 2e       	mov	r7, r31
     a90:	81 2c       	mov	r8, r1
     a92:	91 2c       	mov	r9, r1
     a94:	f0 2d       	mov	r31, r0
     a96:	69 85       	ldd	r22, Y+9	; 0x09
     a98:	7a 85       	ldd	r23, Y+10	; 0x0a
     a9a:	8b 85       	ldd	r24, Y+11	; 0x0b
     a9c:	9c 85       	ldd	r25, Y+12	; 0x0c
     a9e:	a4 01       	movw	r20, r8
     aa0:	93 01       	movw	r18, r6
     aa2:	0e 94 b3 11 	call	0x2366	; 0x2366 <__divmodsi4>
     aa6:	a9 80       	ldd	r10, Y+1	; 0x01
     aa8:	ba 80       	ldd	r11, Y+2	; 0x02
     aaa:	cb 80       	ldd	r12, Y+3	; 0x03
     aac:	dc 80       	ldd	r13, Y+4	; 0x04
     aae:	6d 81       	ldd	r22, Y+5	; 0x05
     ab0:	7e 81       	ldd	r23, Y+6	; 0x06
     ab2:	8f 81       	ldd	r24, Y+7	; 0x07
     ab4:	98 85       	ldd	r25, Y+8	; 0x08
     ab6:	0e 94 81 04 	call	0x902	; 0x902 <CalculateNewPos>
     aba:	60 93 1e 02 	sts	0x021E, r22	; 0x80021e <pos_x>
     abe:	70 93 1f 02 	sts	0x021F, r23	; 0x80021f <pos_x+0x1>
     ac2:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <pos_x+0x2>
     ac6:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <pos_x+0x3>
	pos_y = CalculateNewPos(y_pos_acc, y_pos_gyro, pos_y, total_g);
     aca:	e0 90 12 02 	lds	r14, 0x0212	; 0x800212 <pos_y>
     ace:	f0 90 13 02 	lds	r15, 0x0213	; 0x800213 <pos_y+0x1>
     ad2:	00 91 14 02 	lds	r16, 0x0214	; 0x800214 <pos_y+0x2>
     ad6:	10 91 15 02 	lds	r17, 0x0215	; 0x800215 <pos_y+0x3>
     ada:	6d 85       	ldd	r22, Y+13	; 0x0d
     adc:	7e 85       	ldd	r23, Y+14	; 0x0e
     ade:	8f 85       	ldd	r24, Y+15	; 0x0f
     ae0:	98 89       	ldd	r25, Y+16	; 0x10
     ae2:	a4 01       	movw	r20, r8
     ae4:	93 01       	movw	r18, r6
     ae6:	0e 94 b3 11 	call	0x2366	; 0x2366 <__divmodsi4>
     aea:	c2 01       	movw	r24, r4
     aec:	b1 01       	movw	r22, r2
     aee:	90 58       	subi	r25, 0x80	; 128
     af0:	0e 94 81 04 	call	0x902	; 0x902 <CalculateNewPos>
     af4:	60 93 12 02 	sts	0x0212, r22	; 0x800212 <pos_y>
     af8:	70 93 13 02 	sts	0x0213, r23	; 0x800213 <pos_y+0x1>
     afc:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <pos_y+0x2>
     b00:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <pos_y+0x3>
// 		pomocnicza = pos_y + y_pos_gyro;
// 		pomocnicza *= GYRO_NORMAL;
// 		pomocnicza /= 100;
// 		pos_y = pos_acc + pomocnicza;
// 	}
}
     b04:	60 96       	adiw	r28, 0x10	; 16
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	f8 94       	cli
     b0a:	de bf       	out	0x3e, r29	; 62
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	cd bf       	out	0x3d, r28	; 61
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	ff 90       	pop	r15
     b1a:	ef 90       	pop	r14
     b1c:	df 90       	pop	r13
     b1e:	cf 90       	pop	r12
     b20:	bf 90       	pop	r11
     b22:	af 90       	pop	r10
     b24:	9f 90       	pop	r9
     b26:	8f 90       	pop	r8
     b28:	7f 90       	pop	r7
     b2a:	6f 90       	pop	r6
     b2c:	5f 90       	pop	r5
     b2e:	4f 90       	pop	r4
     b30:	3f 90       	pop	r3
     b32:	2f 90       	pop	r2
     b34:	08 95       	ret

00000b36 <I2C_start>:
	I2C_start();
	I2C_write(SLA + 1);
	byte = I2C_read(NACK);
	I2C_stop();
	return byte;
}
     b36:	84 ea       	ldi	r24, 0xA4	; 164
     b38:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     b3c:	ec eb       	ldi	r30, 0xBC	; 188
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	88 23       	and	r24, r24
     b44:	ec f7       	brge	.-6      	; 0xb40 <I2C_start+0xa>
     b46:	08 95       	ret

00000b48 <I2C_stop>:
     b48:	84 e9       	ldi	r24, 0x94	; 148
     b4a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     b4e:	ec eb       	ldi	r30, 0xBC	; 188
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	80 81       	ld	r24, Z
     b54:	84 fd       	sbrc	r24, 4
     b56:	fd cf       	rjmp	.-6      	; 0xb52 <I2C_stop+0xa>
     b58:	08 95       	ret

00000b5a <I2C_write>:
     b5a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     b5e:	84 e8       	ldi	r24, 0x84	; 132
     b60:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     b64:	ec eb       	ldi	r30, 0xBC	; 188
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	88 23       	and	r24, r24
     b6c:	ec f7       	brge	.-6      	; 0xb68 <I2C_write+0xe>
     b6e:	08 95       	ret

00000b70 <I2C_read>:
     b70:	20 e4       	ldi	r18, 0x40	; 64
     b72:	82 9f       	mul	r24, r18
     b74:	c0 01       	movw	r24, r0
     b76:	11 24       	eor	r1, r1
     b78:	84 68       	ori	r24, 0x84	; 132
     b7a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     b7e:	ec eb       	ldi	r30, 0xBC	; 188
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	88 23       	and	r24, r24
     b86:	ec f7       	brge	.-6      	; 0xb82 <I2C_read+0x12>
     b88:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     b8c:	08 95       	ret

00000b8e <I2C_write_byte>:
     b8e:	1f 93       	push	r17
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	18 2f       	mov	r17, r24
     b96:	d6 2f       	mov	r29, r22
     b98:	c4 2f       	mov	r28, r20
     b9a:	0e 94 9b 05 	call	0xb36	; 0xb36 <I2C_start>
     b9e:	81 2f       	mov	r24, r17
     ba0:	88 0f       	add	r24, r24
     ba2:	0e 94 ad 05 	call	0xb5a	; 0xb5a <I2C_write>
     ba6:	8d 2f       	mov	r24, r29
     ba8:	0e 94 ad 05 	call	0xb5a	; 0xb5a <I2C_write>
     bac:	8c 2f       	mov	r24, r28
     bae:	0e 94 ad 05 	call	0xb5a	; 0xb5a <I2C_write>
     bb2:	0e 94 a4 05 	call	0xb48	; 0xb48 <I2C_stop>
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	1f 91       	pop	r17
     bbc:	08 95       	ret

00000bbe <I2C_read_buf>:


void I2C_read_buf(uint8_t SLA, uint8_t adr, uint8_t len, uint8_t *buf) {
     bbe:	ef 92       	push	r14
     bc0:	ff 92       	push	r15
     bc2:	0f 93       	push	r16
     bc4:	1f 93       	push	r17
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	16 2f       	mov	r17, r22
     bcc:	d4 2f       	mov	r29, r20
     bce:	e2 2e       	mov	r14, r18
     bd0:	f3 2e       	mov	r15, r19
	SLA = (SLA<<1);
     bd2:	c8 2f       	mov	r28, r24
     bd4:	cc 0f       	add	r28, r28
	I2C_start();
     bd6:	0e 94 9b 05 	call	0xb36	; 0xb36 <I2C_start>
	I2C_write(SLA);
     bda:	8c 2f       	mov	r24, r28
     bdc:	0e 94 ad 05 	call	0xb5a	; 0xb5a <I2C_write>
	I2C_write(adr);
     be0:	81 2f       	mov	r24, r17
     be2:	0e 94 ad 05 	call	0xb5a	; 0xb5a <I2C_write>
	I2C_start();
     be6:	0e 94 9b 05 	call	0xb36	; 0xb36 <I2C_start>
	I2C_write(SLA + 1);
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	8c 0f       	add	r24, r28
     bee:	0e 94 ad 05 	call	0xb5a	; 0xb5a <I2C_write>
	while (len--) *buf++ = I2C_read( len ? ACK : NACK );
     bf2:	cf ef       	ldi	r28, 0xFF	; 255
     bf4:	cd 0f       	add	r28, r29
     bf6:	dd 23       	and	r29, r29
     bf8:	89 f0       	breq	.+34     	; 0xc1c <I2C_read_buf+0x5e>
     bfa:	0e 2d       	mov	r16, r14
     bfc:	1f 2d       	mov	r17, r15
     bfe:	d1 e0       	ldi	r29, 0x01	; 1
     c00:	f1 2c       	mov	r15, r1
     c02:	8d 2f       	mov	r24, r29
     c04:	c1 11       	cpse	r28, r1
     c06:	01 c0       	rjmp	.+2      	; 0xc0a <I2C_read_buf+0x4c>
     c08:	8f 2d       	mov	r24, r15
     c0a:	0e 94 b8 05 	call	0xb70	; 0xb70 <I2C_read>
     c0e:	f8 01       	movw	r30, r16
     c10:	81 93       	st	Z+, r24
     c12:	8f 01       	movw	r16, r30
     c14:	8c 2f       	mov	r24, r28
     c16:	c1 50       	subi	r28, 0x01	; 1
     c18:	81 11       	cpse	r24, r1
     c1a:	f3 cf       	rjmp	.-26     	; 0xc02 <I2C_read_buf+0x44>
	I2C_stop();
     c1c:	0e 94 a4 05 	call	0xb48	; 0xb48 <I2C_stop>
}
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	ff 90       	pop	r15
     c2a:	ef 90       	pop	r14
     c2c:	08 95       	ret

00000c2e <main>:
#define LED_OFF PORTB &= ~(1<<PB5)
#define LED_TGL PORTB ^=  (1<<PB5)

int main(void)
{
	pos_x = 0;
     c2e:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <pos_x>
     c32:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <pos_x+0x1>
     c36:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <pos_x+0x2>
     c3a:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <pos_x+0x3>
	pos_y = 0;
     c3e:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <pos_y>
     c42:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <pos_y+0x1>
     c46:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <pos_y+0x2>
     c4a:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <pos_y+0x3>
//	InitTWI();
	DDRB = (1<<PB5);
     c4e:	80 e2       	ldi	r24, 0x20	; 32
     c50:	84 b9       	out	0x04, r24	; 4
	TWSR0 = 0x00;
     c52:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR0 = 0x0C;
     c56:	8c e0       	ldi	r24, 0x0C	; 12
     c58:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWCR0 = (1<<TWEN);	//enable TWI
     c5c:	84 e0       	ldi	r24, 0x04	; 4
     c5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

// 	test = I2C_read_byte(0x68, 0x75);
// 	test = test & 0b01111110;

	InitUartCOM();
     c62:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <InitUartCOM>
	sei();
     c66:	78 94       	sei
	SendLine("Uart dziala");
     c68:	84 e0       	ldi	r24, 0x04	; 4
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <SendLine>

	test_counter = 200;
     c70:	88 ec       	ldi	r24, 0xC8	; 200
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <test_counter+0x1>
     c78:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <test_counter>

	CalibrateMPU6050(gyro_offset, acc_offset);
     c7c:	6c e0       	ldi	r22, 0x0C	; 12
     c7e:	72 e0       	ldi	r23, 0x02	; 2
     c80:	86 e1       	ldi	r24, 0x16	; 22
     c82:	92 e0       	ldi	r25, 0x02	; 2
     c84:	0e 94 5f 06 	call	0xcbe	; 0xcbe <CalibrateMPU6050>
     c88:	8a e0       	ldi	r24, 0x0A	; 10

	for (uint8_t i=0; i<10; i++){
		LED_TGL;
     c8a:	20 e2       	ldi	r18, 0x20	; 32
     c8c:	95 b1       	in	r25, 0x05	; 5
     c8e:	92 27       	eor	r25, r18
     c90:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c92:	3f ef       	ldi	r19, 0xFF	; 255
     c94:	41 ee       	ldi	r20, 0xE1	; 225
     c96:	94 e0       	ldi	r25, 0x04	; 4
     c98:	31 50       	subi	r19, 0x01	; 1
     c9a:	40 40       	sbci	r20, 0x00	; 0
     c9c:	90 40       	sbci	r25, 0x00	; 0
     c9e:	e1 f7       	brne	.-8      	; 0xc98 <main+0x6a>
     ca0:	00 c0       	rjmp	.+0      	; 0xca2 <main+0x74>
     ca2:	00 00       	nop
     ca4:	81 50       	subi	r24, 0x01	; 1

	test_counter = 200;

	CalibrateMPU6050(gyro_offset, acc_offset);

	for (uint8_t i=0; i<10; i++){
     ca6:	91 f7       	brne	.-28     	; 0xc8c <main+0x5e>
		LED_TGL;
		_delay_ms(100);
	}

	InitMPU6050();
     ca8:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <InitMPU6050>
	InitCommonTimer();
     cac:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <InitCommonTimer>

    while (1) 
    {
		CheckRxBuffor();
     cb0:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <CheckRxBuffor>
		ReadMPU6050();
     cb4:	0e 94 bf 08 	call	0x117e	; 0x117e <ReadMPU6050>
		CheckCommonTimer();
     cb8:	0e 94 07 0b 	call	0x160e	; 0x160e <CheckCommonTimer>
     cbc:	f9 cf       	rjmp	.-14     	; 0xcb0 <main+0x82>

00000cbe <CalibrateMPU6050>:
#include "Uart.h"
#include "Common.h"
#include "i2c_twi.h"

void CalibrateMPU6050(int16_t gyro_offset[], int16_t acc_offset[])
{
     cbe:	2f 92       	push	r2
     cc0:	3f 92       	push	r3
     cc2:	4f 92       	push	r4
     cc4:	5f 92       	push	r5
     cc6:	6f 92       	push	r6
     cc8:	7f 92       	push	r7
     cca:	8f 92       	push	r8
     ccc:	9f 92       	push	r9
     cce:	af 92       	push	r10
     cd0:	bf 92       	push	r11
     cd2:	cf 92       	push	r12
     cd4:	df 92       	push	r13
     cd6:	ef 92       	push	r14
     cd8:	ff 92       	push	r15
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	a4 97       	sbiw	r28, 0x24	; 36
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	f8 94       	cli
     cec:	de bf       	out	0x3e, r29	; 62
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	cd bf       	out	0x3d, r28	; 61
     cf2:	9a a3       	std	Y+34, r25	; 0x22
     cf4:	89 a3       	std	Y+33, r24	; 0x21
     cf6:	7c a3       	std	Y+36, r23	; 0x24
     cf8:	6b a3       	std	Y+35, r22	; 0x23
	int32_t gyro_bias[3] = {0, 0, 0};
	int32_t accel_bias[3] = {0, 0, 0};
	packet_total = 0;

	// reset device, reset all registers, clear gyro and accelerometer bias registers
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	6b e6       	ldi	r22, 0x6B	; 107
     cfe:	88 e6       	ldi	r24, 0x68	; 104
     d00:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
     d04:	2f ef       	ldi	r18, 0xFF	; 255
     d06:	31 ee       	ldi	r19, 0xE1	; 225
     d08:	44 e0       	ldi	r20, 0x04	; 4
     d0a:	21 50       	subi	r18, 0x01	; 1
     d0c:	30 40       	sbci	r19, 0x00	; 0
     d0e:	40 40       	sbci	r20, 0x00	; 0
     d10:	e1 f7       	brne	.-8      	; 0xd0a <CalibrateMPU6050+0x4c>
     d12:	00 c0       	rjmp	.+0      	; 0xd14 <CalibrateMPU6050+0x56>
     d14:	00 00       	nop
	_delay_ms(100);

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x01);
     d16:	41 e0       	ldi	r20, 0x01	; 1
     d18:	6b e6       	ldi	r22, 0x6B	; 107
     d1a:	88 e6       	ldi	r24, 0x68	; 104
     d1c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_2, 0x00);
     d20:	40 e0       	ldi	r20, 0x00	; 0
     d22:	6c e6       	ldi	r22, 0x6C	; 108
     d24:	88 e6       	ldi	r24, 0x68	; 104
     d26:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
     d2a:	5f ef       	ldi	r21, 0xFF	; 255
     d2c:	63 ec       	ldi	r22, 0xC3	; 195
     d2e:	79 e0       	ldi	r23, 0x09	; 9
     d30:	51 50       	subi	r21, 0x01	; 1
     d32:	60 40       	sbci	r22, 0x00	; 0
     d34:	70 40       	sbci	r23, 0x00	; 0
     d36:	e1 f7       	brne	.-8      	; 0xd30 <CalibrateMPU6050+0x72>
     d38:	00 c0       	rjmp	.+0      	; 0xd3a <CalibrateMPU6050+0x7c>
     d3a:	00 00       	nop
	_delay_ms(200);

	// Configure device for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
     d3c:	40 e0       	ldi	r20, 0x00	; 0
     d3e:	68 e3       	ldi	r22, 0x38	; 56
     d40:	88 e6       	ldi	r24, 0x68	; 104
     d42:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
     d46:	40 e0       	ldi	r20, 0x00	; 0
     d48:	63 e2       	ldi	r22, 0x23	; 35
     d4a:	88 e6       	ldi	r24, 0x68	; 104
     d4c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
     d50:	40 e0       	ldi	r20, 0x00	; 0
     d52:	6b e6       	ldi	r22, 0x6B	; 107
     d54:	88 e6       	ldi	r24, 0x68	; 104
     d56:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
     d5a:	40 e0       	ldi	r20, 0x00	; 0
     d5c:	64 e2       	ldi	r22, 0x24	; 36
     d5e:	88 e6       	ldi	r24, 0x68	; 104
     d60:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
     d64:	40 e0       	ldi	r20, 0x00	; 0
     d66:	6a e6       	ldi	r22, 0x6A	; 106
     d68:	88 e6       	ldi	r24, 0x68	; 104
     d6a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
     d6e:	4c e0       	ldi	r20, 0x0C	; 12
     d70:	6a e6       	ldi	r22, 0x6A	; 106
     d72:	88 e6       	ldi	r24, 0x68	; 104
     d74:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
     d78:	8f e5       	ldi	r24, 0x5F	; 95
     d7a:	9a ee       	ldi	r25, 0xEA	; 234
     d7c:	01 97       	sbiw	r24, 0x01	; 1
     d7e:	f1 f7       	brne	.-4      	; 0xd7c <CalibrateMPU6050+0xbe>
     d80:	00 c0       	rjmp	.+0      	; 0xd82 <CalibrateMPU6050+0xc4>
     d82:	00 00       	nop
	_delay_ms(15);

	// Configure MPU6050 gyro and accelerometer for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
     d84:	41 e0       	ldi	r20, 0x01	; 1
     d86:	6a e1       	ldi	r22, 0x1A	; 26
     d88:	88 e6       	ldi	r24, 0x68	; 104
     d8a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
     d8e:	40 e0       	ldi	r20, 0x00	; 0
     d90:	69 e1       	ldi	r22, 0x19	; 25
     d92:	88 e6       	ldi	r24, 0x68	; 104
     d94:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
     d98:	40 e0       	ldi	r20, 0x00	; 0
     d9a:	6b e1       	ldi	r22, 0x1B	; 27
     d9c:	88 e6       	ldi	r24, 0x68	; 104
     d9e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
     da2:	40 e0       	ldi	r20, 0x00	; 0
     da4:	6c e1       	ldi	r22, 0x1C	; 28
     da6:	88 e6       	ldi	r24, 0x68	; 104
     da8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
     dac:	40 e4       	ldi	r20, 0x40	; 64
     dae:	6a e6       	ldi	r22, 0x6A	; 106
     db0:	88 e6       	ldi	r24, 0x68	; 104
     db2:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 1024 bytes in MPU-6050)
     db6:	48 e7       	ldi	r20, 0x78	; 120
     db8:	63 e2       	ldi	r22, 0x23	; 35
     dba:	88 e6       	ldi	r24, 0x68	; 104
     dbc:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
     dc0:	af e1       	ldi	r26, 0x1F	; 31
     dc2:	be e4       	ldi	r27, 0x4E	; 78
     dc4:	11 97       	sbiw	r26, 0x01	; 1
     dc6:	f1 f7       	brne	.-4      	; 0xdc4 <CalibrateMPU6050+0x106>
     dc8:	00 c0       	rjmp	.+0      	; 0xdca <CalibrateMPU6050+0x10c>
     dca:	00 00       	nop
     dcc:	bf ef       	ldi	r27, 0xFF	; 255
     dce:	ef e8       	ldi	r30, 0x8F	; 143
     dd0:	f1 e0       	ldi	r31, 0x01	; 1
     dd2:	b1 50       	subi	r27, 0x01	; 1
     dd4:	e0 40       	sbci	r30, 0x00	; 0
     dd6:	f0 40       	sbci	r31, 0x00	; 0
     dd8:	e1 f7       	brne	.-8      	; 0xdd2 <CalibrateMPU6050+0x114>
     dda:	00 c0       	rjmp	.+0      	; 0xddc <CalibrateMPU6050+0x11e>
     ddc:	00 00       	nop

void CalibrateMPU6050(int16_t gyro_offset[], int16_t acc_offset[])
{
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, jj, packet_count, packet_total, fifo_count;
	int32_t gyro_bias[3] = {0, 0, 0};
     dde:	19 8e       	std	Y+25, r1	; 0x19
     de0:	1a 8e       	std	Y+26, r1	; 0x1a
     de2:	1b 8e       	std	Y+27, r1	; 0x1b
     de4:	1c 8e       	std	Y+28, r1	; 0x1c
     de6:	41 2c       	mov	r4, r1
     de8:	51 2c       	mov	r5, r1
     dea:	32 01       	movw	r6, r4
     dec:	81 2c       	mov	r8, r1
     dee:	91 2c       	mov	r9, r1
     df0:	54 01       	movw	r10, r8
	int32_t accel_bias[3] = {0, 0, 0};
     df2:	1d 8a       	std	Y+21, r1	; 0x15
     df4:	1e 8a       	std	Y+22, r1	; 0x16
     df6:	1f 8a       	std	Y+23, r1	; 0x17
     df8:	18 8e       	std	Y+24, r1	; 0x18
     dfa:	19 8a       	std	Y+17, r1	; 0x11
     dfc:	1a 8a       	std	Y+18, r1	; 0x12
     dfe:	1b 8a       	std	Y+19, r1	; 0x13
     e00:	1c 8a       	std	Y+20, r1	; 0x14
     e02:	1d 86       	std	Y+13, r1	; 0x0d
     e04:	1e 86       	std	Y+14, r1	; 0x0e
     e06:	1f 86       	std	Y+15, r1	; 0x0f
     e08:	18 8a       	std	Y+16, r1	; 0x10
	packet_total = 0;
     e0a:	c1 2c       	mov	r12, r1
     e0c:	d1 2c       	mov	r13, r1
	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 1024 bytes in MPU-6050)
	_delay_ms(5);

	for (jj = 0; jj < 20; jj++)	//read samples for 1 second
     e0e:	21 2c       	mov	r2, r1
     e10:	31 2c       	mov	r3, r1
     e12:	12 c0       	rjmp	.+36     	; 0xe38 <CalibrateMPU6050+0x17a>
     e14:	2f ef       	ldi	r18, 0xFF	; 255
     e16:	3f e8       	ldi	r19, 0x8F	; 143
     e18:	41 e0       	ldi	r20, 0x01	; 1
     e1a:	21 50       	subi	r18, 0x01	; 1
     e1c:	30 40       	sbci	r19, 0x00	; 0
     e1e:	40 40       	sbci	r20, 0x00	; 0
     e20:	e1 f7       	brne	.-8      	; 0xe1a <CalibrateMPU6050+0x15c>
     e22:	00 c0       	rjmp	.+0      	; 0xe24 <CalibrateMPU6050+0x166>
     e24:	00 00       	nop
	{
		_delay_ms(32); // accumulate 50 samples in 50 milliseconds = 600 bytes
		// At end of sample accumulation, turn off FIFO sensor read
		if (jj == 19)	// Disable gyro and accelerometer sensors for FIFO
     e26:	53 e1       	ldi	r21, 0x13	; 19
     e28:	25 16       	cp	r2, r21
     e2a:	31 04       	cpc	r3, r1
     e2c:	29 f4       	brne	.+10     	; 0xe38 <CalibrateMPU6050+0x17a>
			I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x00);
     e2e:	40 e0       	ldi	r20, 0x00	; 0
     e30:	63 e2       	ldi	r22, 0x23	; 35
     e32:	88 e6       	ldi	r24, 0x68	; 104
     e34:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
		I2C_read_buf(MPU6050_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
     e38:	9e 01       	movw	r18, r28
     e3a:	2f 5f       	subi	r18, 0xFF	; 255
     e3c:	3f 4f       	sbci	r19, 0xFF	; 255
     e3e:	42 e0       	ldi	r20, 0x02	; 2
     e40:	62 e7       	ldi	r22, 0x72	; 114
     e42:	88 e6       	ldi	r24, 0x68	; 104
     e44:	0e 94 df 05 	call	0xbbe	; 0xbbe <I2C_read_buf>
		fifo_count = ((uint16_t)data[0] << 8) | data[1];

		packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
     e48:	29 81       	ldd	r18, Y+1	; 0x01
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	32 2f       	mov	r19, r18
     e4e:	22 27       	eor	r18, r18
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	28 2b       	or	r18, r24
     e54:	ab ea       	ldi	r26, 0xAB	; 171
     e56:	ba ea       	ldi	r27, 0xAA	; 170
     e58:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__umulhisi3>
     e5c:	7c 01       	movw	r14, r24
     e5e:	f6 94       	lsr	r15
     e60:	e7 94       	ror	r14
     e62:	f6 94       	lsr	r15
     e64:	e7 94       	ror	r14
     e66:	f6 94       	lsr	r15
     e68:	e7 94       	ror	r14

		for (ii = 0; ii < packet_count; ii++) 
     e6a:	e1 14       	cp	r14, r1
     e6c:	f1 04       	cpc	r15, r1
     e6e:	09 f4       	brne	.+2      	; 0xe72 <CalibrateMPU6050+0x1b4>
     e70:	8c c0       	rjmp	.+280    	; 0xf8a <CalibrateMPU6050+0x2cc>
     e72:	00 e0       	ldi	r16, 0x00	; 0
     e74:	10 e0       	ldi	r17, 0x00	; 0
		{
			int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
			I2C_read_buf(MPU6050_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
     e76:	9e 01       	movw	r18, r28
     e78:	2f 5f       	subi	r18, 0xFF	; 255
     e7a:	3f 4f       	sbci	r19, 0xFF	; 255
     e7c:	4c e0       	ldi	r20, 0x0C	; 12
     e7e:	64 e7       	ldi	r22, 0x74	; 116
     e80:	88 e6       	ldi	r24, 0x68	; 104
     e82:	0e 94 df 05 	call	0xbbe	; 0xbbe <I2C_read_buf>
			if (packet_total < 1024)
     e86:	c1 14       	cp	r12, r1
     e88:	64 e0       	ldi	r22, 0x04	; 4
     e8a:	d6 06       	cpc	r13, r22
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <CalibrateMPU6050+0x1d2>
     e8e:	77 c0       	rjmp	.+238    	; 0xf7e <CalibrateMPU6050+0x2c0>
			{
				packet_total++;
     e90:	7f ef       	ldi	r23, 0xFF	; 255
     e92:	c7 1a       	sub	r12, r23
     e94:	d7 0a       	sbc	r13, r23
				accel_temp[2] = (int16_t) (((int16_t)data[4] << 8)  | data[5] ) ;
				gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8)  | data[7] ) ;
				gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8)  | data[9] ) ;
				gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
		
				accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	98 2f       	mov	r25, r24
     e9c:	88 27       	eor	r24, r24
     e9e:	2a 81       	ldd	r18, Y+2	; 0x02
     ea0:	82 2b       	or	r24, r18
     ea2:	09 2e       	mov	r0, r25
     ea4:	00 0c       	add	r0, r0
     ea6:	aa 0b       	sbc	r26, r26
     ea8:	bb 0b       	sbc	r27, r27
     eaa:	2d 89       	ldd	r18, Y+21	; 0x15
     eac:	3e 89       	ldd	r19, Y+22	; 0x16
     eae:	4f 89       	ldd	r20, Y+23	; 0x17
     eb0:	58 8d       	ldd	r21, Y+24	; 0x18
     eb2:	28 0f       	add	r18, r24
     eb4:	39 1f       	adc	r19, r25
     eb6:	4a 1f       	adc	r20, r26
     eb8:	5b 1f       	adc	r21, r27
     eba:	2d 8b       	std	Y+21, r18	; 0x15
     ebc:	3e 8b       	std	Y+22, r19	; 0x16
     ebe:	4f 8b       	std	Y+23, r20	; 0x17
     ec0:	58 8f       	std	Y+24, r21	; 0x18
				accel_bias[1] += (int32_t) accel_temp[1];
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	98 2f       	mov	r25, r24
     ec8:	88 27       	eor	r24, r24
     eca:	2c 81       	ldd	r18, Y+4	; 0x04
     ecc:	82 2b       	or	r24, r18
     ece:	09 2e       	mov	r0, r25
     ed0:	00 0c       	add	r0, r0
     ed2:	aa 0b       	sbc	r26, r26
     ed4:	bb 0b       	sbc	r27, r27
     ed6:	49 89       	ldd	r20, Y+17	; 0x11
     ed8:	5a 89       	ldd	r21, Y+18	; 0x12
     eda:	6b 89       	ldd	r22, Y+19	; 0x13
     edc:	7c 89       	ldd	r23, Y+20	; 0x14
     ede:	48 0f       	add	r20, r24
     ee0:	59 1f       	adc	r21, r25
     ee2:	6a 1f       	adc	r22, r26
     ee4:	7b 1f       	adc	r23, r27
     ee6:	49 8b       	std	Y+17, r20	; 0x11
     ee8:	5a 8b       	std	Y+18, r21	; 0x12
     eea:	6b 8b       	std	Y+19, r22	; 0x13
     eec:	7c 8b       	std	Y+20, r23	; 0x14
				accel_bias[2] += (int32_t) accel_temp[2];
     eee:	8d 81       	ldd	r24, Y+5	; 0x05
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	98 2f       	mov	r25, r24
     ef4:	88 27       	eor	r24, r24
     ef6:	2e 81       	ldd	r18, Y+6	; 0x06
     ef8:	82 2b       	or	r24, r18
     efa:	09 2e       	mov	r0, r25
     efc:	00 0c       	add	r0, r0
     efe:	aa 0b       	sbc	r26, r26
     f00:	bb 0b       	sbc	r27, r27
     f02:	2d 85       	ldd	r18, Y+13	; 0x0d
     f04:	3e 85       	ldd	r19, Y+14	; 0x0e
     f06:	4f 85       	ldd	r20, Y+15	; 0x0f
     f08:	58 89       	ldd	r21, Y+16	; 0x10
     f0a:	28 0f       	add	r18, r24
     f0c:	39 1f       	adc	r19, r25
     f0e:	4a 1f       	adc	r20, r26
     f10:	5b 1f       	adc	r21, r27
     f12:	2d 87       	std	Y+13, r18	; 0x0d
     f14:	3e 87       	std	Y+14, r19	; 0x0e
     f16:	4f 87       	std	Y+15, r20	; 0x0f
     f18:	58 8b       	std	Y+16, r21	; 0x10
				gyro_bias[0]  += (int32_t) gyro_temp[0];
     f1a:	8f 81       	ldd	r24, Y+7	; 0x07
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	98 2f       	mov	r25, r24
     f20:	88 27       	eor	r24, r24
     f22:	28 85       	ldd	r18, Y+8	; 0x08
     f24:	82 2b       	or	r24, r18
     f26:	09 2e       	mov	r0, r25
     f28:	00 0c       	add	r0, r0
     f2a:	aa 0b       	sbc	r26, r26
     f2c:	bb 0b       	sbc	r27, r27
     f2e:	49 8d       	ldd	r20, Y+25	; 0x19
     f30:	5a 8d       	ldd	r21, Y+26	; 0x1a
     f32:	6b 8d       	ldd	r22, Y+27	; 0x1b
     f34:	7c 8d       	ldd	r23, Y+28	; 0x1c
     f36:	48 0f       	add	r20, r24
     f38:	59 1f       	adc	r21, r25
     f3a:	6a 1f       	adc	r22, r26
     f3c:	7b 1f       	adc	r23, r27
     f3e:	49 8f       	std	Y+25, r20	; 0x19
     f40:	5a 8f       	std	Y+26, r21	; 0x1a
     f42:	6b 8f       	std	Y+27, r22	; 0x1b
     f44:	7c 8f       	std	Y+28, r23	; 0x1c
				gyro_bias[1]  += (int32_t) gyro_temp[1];
     f46:	89 85       	ldd	r24, Y+9	; 0x09
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	98 2f       	mov	r25, r24
     f4c:	88 27       	eor	r24, r24
     f4e:	2a 85       	ldd	r18, Y+10	; 0x0a
     f50:	82 2b       	or	r24, r18
     f52:	09 2e       	mov	r0, r25
     f54:	00 0c       	add	r0, r0
     f56:	aa 0b       	sbc	r26, r26
     f58:	bb 0b       	sbc	r27, r27
     f5a:	48 0e       	add	r4, r24
     f5c:	59 1e       	adc	r5, r25
     f5e:	6a 1e       	adc	r6, r26
     f60:	7b 1e       	adc	r7, r27
				gyro_bias[2]  += (int32_t) gyro_temp[2];
     f62:	8b 85       	ldd	r24, Y+11	; 0x0b
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	98 2f       	mov	r25, r24
     f68:	88 27       	eor	r24, r24
     f6a:	2c 85       	ldd	r18, Y+12	; 0x0c
     f6c:	82 2b       	or	r24, r18
     f6e:	09 2e       	mov	r0, r25
     f70:	00 0c       	add	r0, r0
     f72:	aa 0b       	sbc	r26, r26
     f74:	bb 0b       	sbc	r27, r27
     f76:	88 0e       	add	r8, r24
     f78:	99 1e       	adc	r9, r25
     f7a:	aa 1e       	adc	r10, r26
     f7c:	bb 1e       	adc	r11, r27
		I2C_read_buf(MPU6050_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
		fifo_count = ((uint16_t)data[0] << 8) | data[1];

		packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging

		for (ii = 0; ii < packet_count; ii++) 
     f7e:	0f 5f       	subi	r16, 0xFF	; 255
     f80:	1f 4f       	sbci	r17, 0xFF	; 255
     f82:	e0 16       	cp	r14, r16
     f84:	f1 06       	cpc	r15, r17
     f86:	09 f0       	breq	.+2      	; 0xf8a <CalibrateMPU6050+0x2cc>
     f88:	76 cf       	rjmp	.-276    	; 0xe76 <CalibrateMPU6050+0x1b8>
	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 1024 bytes in MPU-6050)
	_delay_ms(5);

	for (jj = 0; jj < 20; jj++)	//read samples for 1 second
     f8a:	5f ef       	ldi	r21, 0xFF	; 255
     f8c:	25 1a       	sub	r2, r21
     f8e:	35 0a       	sbc	r3, r21
     f90:	64 e1       	ldi	r22, 0x14	; 20
     f92:	26 16       	cp	r2, r22
     f94:	31 04       	cpc	r3, r1
     f96:	09 f0       	breq	.+2      	; 0xf9a <CalibrateMPU6050+0x2dc>
     f98:	3d cf       	rjmp	.-390    	; 0xe14 <CalibrateMPU6050+0x156>
				gyro_bias[2]  += (int32_t) gyro_temp[2];
			}
		}
	}

	accel_bias[0] /= (int32_t) packet_total; // Normalize sums to get average count biases
     f9a:	c6 01       	movw	r24, r12
     f9c:	a0 e0       	ldi	r26, 0x00	; 0
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	8d 8f       	std	Y+29, r24	; 0x1d
     fa2:	9e 8f       	std	Y+30, r25	; 0x1e
     fa4:	af 8f       	std	Y+31, r26	; 0x1f
     fa6:	b8 a3       	std	Y+32, r27	; 0x20
     fa8:	6d 89       	ldd	r22, Y+21	; 0x15
     faa:	7e 89       	ldd	r23, Y+22	; 0x16
     fac:	8f 89       	ldd	r24, Y+23	; 0x17
     fae:	98 8d       	ldd	r25, Y+24	; 0x18
     fb0:	2d 8d       	ldd	r18, Y+29	; 0x1d
     fb2:	3e 8d       	ldd	r19, Y+30	; 0x1e
     fb4:	4f 8d       	ldd	r20, Y+31	; 0x1f
     fb6:	58 a1       	ldd	r21, Y+32	; 0x20
     fb8:	0e 94 b3 11 	call	0x2366	; 0x2366 <__divmodsi4>
     fbc:	2d 8b       	std	Y+21, r18	; 0x15
     fbe:	3e 8b       	std	Y+22, r19	; 0x16
     fc0:	4f 8b       	std	Y+23, r20	; 0x17
     fc2:	58 8f       	std	Y+24, r21	; 0x18
	accel_bias[1] /= (int32_t) packet_total;
     fc4:	69 89       	ldd	r22, Y+17	; 0x11
     fc6:	7a 89       	ldd	r23, Y+18	; 0x12
     fc8:	8b 89       	ldd	r24, Y+19	; 0x13
     fca:	9c 89       	ldd	r25, Y+20	; 0x14
     fcc:	2d 8d       	ldd	r18, Y+29	; 0x1d
     fce:	3e 8d       	ldd	r19, Y+30	; 0x1e
     fd0:	4f 8d       	ldd	r20, Y+31	; 0x1f
     fd2:	58 a1       	ldd	r21, Y+32	; 0x20
     fd4:	0e 94 b3 11 	call	0x2366	; 0x2366 <__divmodsi4>
     fd8:	29 8b       	std	Y+17, r18	; 0x11
     fda:	3a 8b       	std	Y+18, r19	; 0x12
     fdc:	4b 8b       	std	Y+19, r20	; 0x13
     fde:	5c 8b       	std	Y+20, r21	; 0x14
	accel_bias[2] /= (int32_t) packet_total;
     fe0:	6d 85       	ldd	r22, Y+13	; 0x0d
     fe2:	7e 85       	ldd	r23, Y+14	; 0x0e
     fe4:	8f 85       	ldd	r24, Y+15	; 0x0f
     fe6:	98 89       	ldd	r25, Y+16	; 0x10
     fe8:	2d 8d       	ldd	r18, Y+29	; 0x1d
     fea:	3e 8d       	ldd	r19, Y+30	; 0x1e
     fec:	4f 8d       	ldd	r20, Y+31	; 0x1f
     fee:	58 a1       	ldd	r21, Y+32	; 0x20
     ff0:	0e 94 b3 11 	call	0x2366	; 0x2366 <__divmodsi4>
     ff4:	69 01       	movw	r12, r18
     ff6:	7a 01       	movw	r14, r20
	gyro_bias[0]  /= (int32_t) packet_total;
     ff8:	69 8d       	ldd	r22, Y+25	; 0x19
     ffa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ffc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ffe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1000:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1002:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1004:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1006:	58 a1       	ldd	r21, Y+32	; 0x20
    1008:	0e 94 b3 11 	call	0x2366	; 0x2366 <__divmodsi4>
    100c:	2d 87       	std	Y+13, r18	; 0x0d
    100e:	3e 87       	std	Y+14, r19	; 0x0e
    1010:	4f 87       	std	Y+15, r20	; 0x0f
    1012:	58 8b       	std	Y+16, r21	; 0x10
	gyro_bias[1]  /= (int32_t) packet_total;
    1014:	c3 01       	movw	r24, r6
    1016:	b2 01       	movw	r22, r4
    1018:	2d 8d       	ldd	r18, Y+29	; 0x1d
    101a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    101c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    101e:	58 a1       	ldd	r21, Y+32	; 0x20
    1020:	0e 94 b3 11 	call	0x2366	; 0x2366 <__divmodsi4>
    1024:	29 01       	movw	r4, r18
    1026:	3a 01       	movw	r6, r20
	gyro_bias[2]  /= (int32_t) packet_total;
    1028:	c5 01       	movw	r24, r10
    102a:	b4 01       	movw	r22, r8
    102c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    102e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1030:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1032:	58 a1       	ldd	r21, Y+32	; 0x20
    1034:	0e 94 b3 11 	call	0x2366	; 0x2366 <__divmodsi4>

	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
    1038:	1c 14       	cp	r1, r12
    103a:	1d 04       	cpc	r1, r13
    103c:	1e 04       	cpc	r1, r14
    103e:	1f 04       	cpc	r1, r15
    1040:	34 f4       	brge	.+12     	; 0x104e <CalibrateMPU6050+0x390>
    1042:	d7 01       	movw	r26, r14
    1044:	c6 01       	movw	r24, r12
    1046:	90 54       	subi	r25, 0x40	; 64
    1048:	a1 09       	sbc	r26, r1
    104a:	b1 09       	sbc	r27, r1
    104c:	05 c0       	rjmp	.+10     	; 0x1058 <CalibrateMPU6050+0x39a>
	else {accel_bias[2] += (int32_t) accelsensitivity;}
    104e:	d7 01       	movw	r26, r14
    1050:	c6 01       	movw	r24, r12
    1052:	90 5c       	subi	r25, 0xC0	; 192
    1054:	af 4f       	sbci	r26, 0xFF	; 255
    1056:	bf 4f       	sbci	r27, 0xFF	; 255
	
	gyro_offset[0] = (int16_t) gyro_bias[0];
    1058:	6d 85       	ldd	r22, Y+13	; 0x0d
    105a:	7e 85       	ldd	r23, Y+14	; 0x0e
    105c:	e9 a1       	ldd	r30, Y+33	; 0x21
    105e:	fa a1       	ldd	r31, Y+34	; 0x22
    1060:	71 83       	std	Z+1, r23	; 0x01
    1062:	60 83       	st	Z, r22
	gyro_offset[1] = (int16_t) gyro_bias[1];
    1064:	53 82       	std	Z+3, r5	; 0x03
    1066:	42 82       	std	Z+2, r4	; 0x02
	gyro_offset[2] = (int16_t) gyro_bias[2];
    1068:	35 83       	std	Z+5, r19	; 0x05
    106a:	24 83       	std	Z+4, r18	; 0x04

	acc_offset[0]  = (int16_t) accel_bias[0];
    106c:	2d 89       	ldd	r18, Y+21	; 0x15
    106e:	3e 89       	ldd	r19, Y+22	; 0x16
    1070:	eb a1       	ldd	r30, Y+35	; 0x23
    1072:	fc a1       	ldd	r31, Y+36	; 0x24
    1074:	31 83       	std	Z+1, r19	; 0x01
    1076:	20 83       	st	Z, r18
	acc_offset[1]  = (int16_t) accel_bias[1];
    1078:	49 89       	ldd	r20, Y+17	; 0x11
    107a:	5a 89       	ldd	r21, Y+18	; 0x12
    107c:	53 83       	std	Z+3, r21	; 0x03
    107e:	42 83       	std	Z+2, r20	; 0x02
	acc_offset[2]  = (int16_t) accel_bias[2];
    1080:	95 83       	std	Z+5, r25	; 0x05
    1082:	84 83       	std	Z+4, r24	; 0x04
}
    1084:	a4 96       	adiw	r28, 0x24	; 36
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	de bf       	out	0x3e, r29	; 62
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	cd bf       	out	0x3d, r28	; 61
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
    1098:	ff 90       	pop	r15
    109a:	ef 90       	pop	r14
    109c:	df 90       	pop	r13
    109e:	cf 90       	pop	r12
    10a0:	bf 90       	pop	r11
    10a2:	af 90       	pop	r10
    10a4:	9f 90       	pop	r9
    10a6:	8f 90       	pop	r8
    10a8:	7f 90       	pop	r7
    10aa:	6f 90       	pop	r6
    10ac:	5f 90       	pop	r5
    10ae:	4f 90       	pop	r4
    10b0:	3f 90       	pop	r3
    10b2:	2f 90       	pop	r2
    10b4:	08 95       	ret

000010b6 <InitMPU6050>:


void InitMPU6050(void)
{
	// reset device, reset all registers, clear gyro and accelerometer bias registers
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
    10b6:	40 e8       	ldi	r20, 0x80	; 128
    10b8:	6b e6       	ldi	r22, 0x6B	; 107
    10ba:	88 e6       	ldi	r24, 0x68	; 104
    10bc:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
    10c0:	2f ef       	ldi	r18, 0xFF	; 255
    10c2:	81 ee       	ldi	r24, 0xE1	; 225
    10c4:	94 e0       	ldi	r25, 0x04	; 4
    10c6:	21 50       	subi	r18, 0x01	; 1
    10c8:	80 40       	sbci	r24, 0x00	; 0
    10ca:	90 40       	sbci	r25, 0x00	; 0
    10cc:	e1 f7       	brne	.-8      	; 0x10c6 <InitMPU6050+0x10>
    10ce:	00 c0       	rjmp	.+0      	; 0x10d0 <InitMPU6050+0x1a>
    10d0:	00 00       	nop
	_delay_ms(100);

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x01);
    10d2:	41 e0       	ldi	r20, 0x01	; 1
    10d4:	6b e6       	ldi	r22, 0x6B	; 107
    10d6:	88 e6       	ldi	r24, 0x68	; 104
    10d8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_2, 0x00);
    10dc:	40 e0       	ldi	r20, 0x00	; 0
    10de:	6c e6       	ldi	r22, 0x6C	; 108
    10e0:	88 e6       	ldi	r24, 0x68	; 104
    10e2:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
    10e6:	2f ef       	ldi	r18, 0xFF	; 255
    10e8:	83 ec       	ldi	r24, 0xC3	; 195
    10ea:	99 e0       	ldi	r25, 0x09	; 9
    10ec:	21 50       	subi	r18, 0x01	; 1
    10ee:	80 40       	sbci	r24, 0x00	; 0
    10f0:	90 40       	sbci	r25, 0x00	; 0
    10f2:	e1 f7       	brne	.-8      	; 0x10ec <InitMPU6050+0x36>
    10f4:	00 c0       	rjmp	.+0      	; 0x10f6 <InitMPU6050+0x40>
    10f6:	00 00       	nop
	_delay_ms(200);

	// Configure device for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
    10f8:	40 e0       	ldi	r20, 0x00	; 0
    10fa:	68 e3       	ldi	r22, 0x38	; 56
    10fc:	88 e6       	ldi	r24, 0x68	; 104
    10fe:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
    1102:	40 e0       	ldi	r20, 0x00	; 0
    1104:	63 e2       	ldi	r22, 0x23	; 35
    1106:	88 e6       	ldi	r24, 0x68	; 104
    1108:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
    110c:	40 e0       	ldi	r20, 0x00	; 0
    110e:	6b e6       	ldi	r22, 0x6B	; 107
    1110:	88 e6       	ldi	r24, 0x68	; 104
    1112:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
    1116:	40 e0       	ldi	r20, 0x00	; 0
    1118:	64 e2       	ldi	r22, 0x24	; 36
    111a:	88 e6       	ldi	r24, 0x68	; 104
    111c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
    1120:	40 e0       	ldi	r20, 0x00	; 0
    1122:	6a e6       	ldi	r22, 0x6A	; 106
    1124:	88 e6       	ldi	r24, 0x68	; 104
    1126:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
    112a:	4c e0       	ldi	r20, 0x0C	; 12
    112c:	6a e6       	ldi	r22, 0x6A	; 106
    112e:	88 e6       	ldi	r24, 0x68	; 104
    1130:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
    1134:	8f e5       	ldi	r24, 0x5F	; 95
    1136:	9a ee       	ldi	r25, 0xEA	; 234
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	f1 f7       	brne	.-4      	; 0x1138 <InitMPU6050+0x82>
    113c:	00 c0       	rjmp	.+0      	; 0x113e <InitMPU6050+0x88>
    113e:	00 00       	nop
	_delay_ms(15);

	// Configure MPU6050 gyro and accelerometer for bias calculation
	uint8_t fs = 1000 / MPU6050_FS;
	I2C_write_byte(MPU6050_ADDRESS, CONFIG, 0x03);       // Set low-pass filter to 44 Hz
    1140:	43 e0       	ldi	r20, 0x03	; 3
    1142:	6a e1       	ldi	r22, 0x1A	; 26
    1144:	88 e6       	ldi	r24, 0x68	; 104
    1146:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, SMPLRT_DIV, MPU6050_TIMING);	 // Set sample rate to be set in common.h
    114a:	44 e0       	ldi	r20, 0x04	; 4
    114c:	69 e1       	ldi	r22, 0x19	; 25
    114e:	88 e6       	ldi	r24, 0x68	; 104
    1150:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, GYRO_CONFIG, 0x08);  // Set gyro full-scale to 500 degrees per second - MPU6050_LSB
    1154:	48 e0       	ldi	r20, 0x08	; 8
    1156:	6b e1       	ldi	r22, 0x1B	; 27
    1158:	88 e6       	ldi	r24, 0x68	; 104
    115a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
    115e:	40 e0       	ldi	r20, 0x00	; 0
    1160:	6c e1       	ldi	r22, 0x1C	; 28
    1162:	88 e6       	ldi	r24, 0x68	; 104
    1164:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>

	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
    1168:	40 e4       	ldi	r20, 0x40	; 64
    116a:	6a e6       	ldi	r22, 0x6A	; 106
    116c:	88 e6       	ldi	r24, 0x68	; 104
    116e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 1024 bytes in MPU-6050)
    1172:	48 e7       	ldi	r20, 0x78	; 120
    1174:	63 e2       	ldi	r22, 0x23	; 35
    1176:	88 e6       	ldi	r24, 0x68	; 104
    1178:	0e 94 c7 05 	call	0xb8e	; 0xb8e <I2C_write_byte>
    117c:	08 95       	ret

0000117e <ReadMPU6050>:
}

void ReadMPU6050(void)
{
    117e:	8f 92       	push	r8
    1180:	9f 92       	push	r9
    1182:	af 92       	push	r10
    1184:	bf 92       	push	r11
    1186:	cf 92       	push	r12
    1188:	df 92       	push	r13
    118a:	ef 92       	push	r14
    118c:	ff 92       	push	r15
    118e:	0f 93       	push	r16
    1190:	1f 93       	push	r17
    1192:	cf 93       	push	r28
    1194:	df 93       	push	r29
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	68 97       	sbiw	r28, 0x18	; 24
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, fifo_count, packet_count;
	uint8_t data[12];
	int16_t gyro[3];
	int16_t acc[3];

	I2C_read_buf(MPU6050_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
    11a6:	9e 01       	movw	r18, r28
    11a8:	2f 5f       	subi	r18, 0xFF	; 255
    11aa:	3f 4f       	sbci	r19, 0xFF	; 255
    11ac:	42 e0       	ldi	r20, 0x02	; 2
    11ae:	62 e7       	ldi	r22, 0x72	; 114
    11b0:	88 e6       	ldi	r24, 0x68	; 104
    11b2:	0e 94 df 05 	call	0xbbe	; 0xbbe <I2C_read_buf>
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	9b ea       	ldi	r25, 0xAB	; 171
    11ba:	89 9f       	mul	r24, r25
    11bc:	c1 2c       	mov	r12, r1
    11be:	11 24       	eor	r1, r1
    11c0:	c6 94       	lsr	r12
    11c2:	c6 94       	lsr	r12
    11c4:	c6 94       	lsr	r12

	for (i = 0; i < packet_count; i++)
    11c6:	09 f4       	brne	.+2      	; 0x11ca <ReadMPU6050+0x4c>
    11c8:	6b c0       	rjmp	.+214    	; 0x12a0 <ReadMPU6050+0x122>
    11ca:	d1 2c       	mov	r13, r1
		acc[2] = (int16_t) (((int16_t)data[4] << 8)  | data[5] ) ;
		gyro[0]  = (int16_t) (((int16_t)data[6] << 8)  | data[7] ) ;
		gyro[1]  = (int16_t) (((int16_t)data[8] << 8)  | data[9] ) ;
		gyro[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
			
		acc[0] -= acc_offset[0];
    11cc:	0f 2e       	mov	r0, r31
    11ce:	fc e0       	ldi	r31, 0x0C	; 12
    11d0:	ef 2e       	mov	r14, r31
    11d2:	f2 e0       	ldi	r31, 0x02	; 2
    11d4:	ff 2e       	mov	r15, r31
    11d6:	f0 2d       	mov	r31, r0
		acc[1] -= acc_offset[1];
		acc[2] -= acc_offset[2];
		gyro[0] -= gyro_offset[0];
    11d8:	06 e1       	ldi	r16, 0x16	; 22
    11da:	12 e0       	ldi	r17, 0x02	; 2
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging

	for (i = 0; i < packet_count; i++)
	{
		I2C_read_buf(MPU6050_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
    11dc:	9e 01       	movw	r18, r28
    11de:	2f 5f       	subi	r18, 0xFF	; 255
    11e0:	3f 4f       	sbci	r19, 0xFF	; 255
    11e2:	4c e0       	ldi	r20, 0x0C	; 12
    11e4:	64 e7       	ldi	r22, 0x74	; 116
    11e6:	88 e6       	ldi	r24, 0x68	; 104
    11e8:	0e 94 df 05 	call	0xbbe	; 0xbbe <I2C_read_buf>
		acc[0] = (int16_t) (((int16_t)data[0] << 8)  | data[1] ) ;  // Form signed 16-bit integer for each sample in FIFO
		acc[1] = (int16_t) (((int16_t)data[2] << 8)  | data[3] ) ;
    11ec:	eb 81       	ldd	r30, Y+3	; 0x03
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	fe 2f       	mov	r31, r30
    11f2:	ee 27       	eor	r30, r30
    11f4:	8c 81       	ldd	r24, Y+4	; 0x04
    11f6:	4f 01       	movw	r8, r30
    11f8:	88 2a       	or	r8, r24
		acc[2] = (int16_t) (((int16_t)data[4] << 8)  | data[5] ) ;
    11fa:	6d 81       	ldd	r22, Y+5	; 0x05
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	76 2f       	mov	r23, r22
    1200:	66 27       	eor	r22, r22
    1202:	8e 81       	ldd	r24, Y+6	; 0x06
    1204:	68 2b       	or	r22, r24
		gyro[0]  = (int16_t) (((int16_t)data[6] << 8)  | data[7] ) ;
    1206:	4f 81       	ldd	r20, Y+7	; 0x07
    1208:	50 e0       	ldi	r21, 0x00	; 0
    120a:	54 2f       	mov	r21, r20
    120c:	44 27       	eor	r20, r20
    120e:	88 85       	ldd	r24, Y+8	; 0x08
    1210:	48 2b       	or	r20, r24
		gyro[1]  = (int16_t) (((int16_t)data[8] << 8)  | data[9] ) ;
    1212:	29 85       	ldd	r18, Y+9	; 0x09
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	32 2f       	mov	r19, r18
    1218:	22 27       	eor	r18, r18
    121a:	8a 85       	ldd	r24, Y+10	; 0x0a
    121c:	28 2b       	or	r18, r24
		gyro[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
    121e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	98 2f       	mov	r25, r24
    1224:	88 27       	eor	r24, r24
    1226:	ac 85       	ldd	r26, Y+12	; 0x0c
    1228:	8a 2b       	or	r24, r26
			
		acc[0] -= acc_offset[0];
    122a:	a9 81       	ldd	r26, Y+1	; 0x01
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	ba 2f       	mov	r27, r26
    1230:	aa 27       	eor	r26, r26
    1232:	ba 80       	ldd	r11, Y+2	; 0x02
    1234:	ab 29       	or	r26, r11
    1236:	f7 01       	movw	r30, r14
    1238:	a0 80       	ld	r10, Z
    123a:	b1 80       	ldd	r11, Z+1	; 0x01
    123c:	aa 19       	sub	r26, r10
    123e:	bb 09       	sbc	r27, r11
    1240:	bc 8b       	std	Y+20, r27	; 0x14
    1242:	ab 8b       	std	Y+19, r26	; 0x13
		acc[1] -= acc_offset[1];
    1244:	a2 81       	ldd	r26, Z+2	; 0x02
    1246:	b3 81       	ldd	r27, Z+3	; 0x03
    1248:	f4 01       	movw	r30, r8
    124a:	ea 1b       	sub	r30, r26
    124c:	fb 0b       	sbc	r31, r27
    124e:	fe 8b       	std	Y+22, r31	; 0x16
    1250:	ed 8b       	std	Y+21, r30	; 0x15
		acc[2] -= acc_offset[2];
    1252:	d7 01       	movw	r26, r14
    1254:	14 96       	adiw	r26, 0x04	; 4
    1256:	ed 91       	ld	r30, X+
    1258:	fc 91       	ld	r31, X
    125a:	15 97       	sbiw	r26, 0x05	; 5
    125c:	6e 1b       	sub	r22, r30
    125e:	7f 0b       	sbc	r23, r31
    1260:	78 8f       	std	Y+24, r23	; 0x18
    1262:	6f 8b       	std	Y+23, r22	; 0x17
		gyro[0] -= gyro_offset[0];
    1264:	f8 01       	movw	r30, r16
    1266:	60 81       	ld	r22, Z
    1268:	71 81       	ldd	r23, Z+1	; 0x01
    126a:	46 1b       	sub	r20, r22
    126c:	57 0b       	sbc	r21, r23
    126e:	5e 87       	std	Y+14, r21	; 0x0e
    1270:	4d 87       	std	Y+13, r20	; 0x0d
		gyro[1] -= gyro_offset[1];
    1272:	42 81       	ldd	r20, Z+2	; 0x02
    1274:	53 81       	ldd	r21, Z+3	; 0x03
    1276:	24 1b       	sub	r18, r20
    1278:	35 0b       	sbc	r19, r21
    127a:	38 8b       	std	Y+16, r19	; 0x10
    127c:	2f 87       	std	Y+15, r18	; 0x0f
		gyro[2] -= gyro_offset[2];
    127e:	24 81       	ldd	r18, Z+4	; 0x04
    1280:	35 81       	ldd	r19, Z+5	; 0x05
    1282:	82 1b       	sub	r24, r18
    1284:	93 0b       	sbc	r25, r19
    1286:	9a 8b       	std	Y+18, r25	; 0x12
    1288:	89 8b       	std	Y+17, r24	; 0x11

		PlaceInGyroBuffor(gyro);
    128a:	ce 01       	movw	r24, r28
    128c:	0d 96       	adiw	r24, 0x0d	; 13
    128e:	0e 94 ba 00 	call	0x174	; 0x174 <PlaceInGyroBuffor>
		PlaceInAccBuffor(acc);
    1292:	ce 01       	movw	r24, r28
    1294:	43 96       	adiw	r24, 0x13	; 19
    1296:	0e 94 ee 00 	call	0x1dc	; 0x1dc <PlaceInAccBuffor>

	I2C_read_buf(MPU6050_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging

	for (i = 0; i < packet_count; i++)
    129a:	d3 94       	inc	r13
    129c:	cd 10       	cpse	r12, r13
    129e:	9e cf       	rjmp	.-196    	; 0x11dc <ReadMPU6050+0x5e>
		gyro[2] -= gyro_offset[2];

		PlaceInGyroBuffor(gyro);
		PlaceInAccBuffor(acc);
	}
    12a0:	68 96       	adiw	r28, 0x18	; 24
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	de bf       	out	0x3e, r29	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	cd bf       	out	0x3d, r28	; 61
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	1f 91       	pop	r17
    12b2:	0f 91       	pop	r16
    12b4:	ff 90       	pop	r15
    12b6:	ef 90       	pop	r14
    12b8:	df 90       	pop	r13
    12ba:	cf 90       	pop	r12
    12bc:	bf 90       	pop	r11
    12be:	af 90       	pop	r10
    12c0:	9f 90       	pop	r9
    12c2:	8f 90       	pop	r8
    12c4:	08 95       	ret

000012c6 <er_service>:
		
}

int8_t er_service(char * params)
{
	SendLine("Uart is working");
    12c6:	80 e1       	ldi	r24, 0x10	; 16
    12c8:	91 e0       	ldi	r25, 0x01	; 1
    12ca:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <SendLine>
	return 0;
}
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	08 95       	ret

000012d2 <er_read>:

int8_t er_read(char * params)
{
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	2c 97       	sbiw	r28, 0x0c	; 12
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
	int16_t gyro[3];
	int16_t acc[3];
	
	ReadGyroSample_ViewOnly(gyro);
    12e6:	ce 01       	movw	r24, r28
    12e8:	01 96       	adiw	r24, 0x01	; 1
    12ea:	0e 94 7e 01 	call	0x2fc	; 0x2fc <ReadGyroSample_ViewOnly>
	ReadAccSample_ViewOnly(acc);
    12ee:	ce 01       	movw	r24, r28
    12f0:	07 96       	adiw	r24, 0x07	; 7
    12f2:	0e 94 a5 01 	call	0x34a	; 0x34a <ReadAccSample_ViewOnly>

	SendStringInt("G X ", gyro[0]);
    12f6:	49 81       	ldd	r20, Y+1	; 0x01
    12f8:	5a 81       	ldd	r21, Y+2	; 0x02
    12fa:	05 2e       	mov	r0, r21
    12fc:	00 0c       	add	r0, r0
    12fe:	66 0b       	sbc	r22, r22
    1300:	77 0b       	sbc	r23, r23
    1302:	80 e2       	ldi	r24, 0x20	; 32
    1304:	91 e0       	ldi	r25, 0x01	; 1
    1306:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <SendStringInt>
	SendStringInt("G Y ", gyro[1]);
    130a:	4b 81       	ldd	r20, Y+3	; 0x03
    130c:	5c 81       	ldd	r21, Y+4	; 0x04
    130e:	05 2e       	mov	r0, r21
    1310:	00 0c       	add	r0, r0
    1312:	66 0b       	sbc	r22, r22
    1314:	77 0b       	sbc	r23, r23
    1316:	85 e2       	ldi	r24, 0x25	; 37
    1318:	91 e0       	ldi	r25, 0x01	; 1
    131a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <SendStringInt>
	SendStringInt("G Z ", gyro[2]);
    131e:	4d 81       	ldd	r20, Y+5	; 0x05
    1320:	5e 81       	ldd	r21, Y+6	; 0x06
    1322:	05 2e       	mov	r0, r21
    1324:	00 0c       	add	r0, r0
    1326:	66 0b       	sbc	r22, r22
    1328:	77 0b       	sbc	r23, r23
    132a:	8a e2       	ldi	r24, 0x2A	; 42
    132c:	91 e0       	ldi	r25, 0x01	; 1
    132e:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <SendStringInt>
	SendStringInt("A X ", acc[0]);
    1332:	4f 81       	ldd	r20, Y+7	; 0x07
    1334:	58 85       	ldd	r21, Y+8	; 0x08
    1336:	05 2e       	mov	r0, r21
    1338:	00 0c       	add	r0, r0
    133a:	66 0b       	sbc	r22, r22
    133c:	77 0b       	sbc	r23, r23
    133e:	8f e2       	ldi	r24, 0x2F	; 47
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <SendStringInt>
	SendStringInt("A Y ", acc[1]);
    1346:	49 85       	ldd	r20, Y+9	; 0x09
    1348:	5a 85       	ldd	r21, Y+10	; 0x0a
    134a:	05 2e       	mov	r0, r21
    134c:	00 0c       	add	r0, r0
    134e:	66 0b       	sbc	r22, r22
    1350:	77 0b       	sbc	r23, r23
    1352:	84 e3       	ldi	r24, 0x34	; 52
    1354:	91 e0       	ldi	r25, 0x01	; 1
    1356:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <SendStringInt>
	SendStringInt("A Z ", acc[2]);
    135a:	4b 85       	ldd	r20, Y+11	; 0x0b
    135c:	5c 85       	ldd	r21, Y+12	; 0x0c
    135e:	05 2e       	mov	r0, r21
    1360:	00 0c       	add	r0, r0
    1362:	66 0b       	sbc	r22, r22
    1364:	77 0b       	sbc	r23, r23
    1366:	89 e3       	ldi	r24, 0x39	; 57
    1368:	91 e0       	ldi	r25, 0x01	; 1
    136a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <SendStringInt>

	return 0;
}
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	2c 96       	adiw	r28, 0x0c	; 12
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	cd bf       	out	0x3d, r28	; 61
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	08 95       	ret

00001382 <er_buf>:

int8_t er_buf(char * params)
{
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29
    1386:	00 d0       	rcall	.+0      	; 0x1388 <er_buf+0x6>
    1388:	00 d0       	rcall	.+0      	; 0x138a <er_buf+0x8>
    138a:	00 d0       	rcall	.+0      	; 0x138c <er_buf+0xa>
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
	int16_t data[3];

	if (SamplesGyroBuf())
    1390:	0e 94 cc 01 	call	0x398	; 0x398 <SamplesGyroBuf>
    1394:	88 23       	and	r24, r24
    1396:	c1 f0       	breq	.+48     	; 0x13c8 <er_buf+0x46>
	{
		ReadGyroBufAveraged(data);
    1398:	ce 01       	movw	r24, r28
    139a:	01 96       	adiw	r24, 0x01	; 1
    139c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <ReadGyroBufAveraged>

 	 	SendStringInt("G X ", data[0]);
    13a0:	49 81       	ldd	r20, Y+1	; 0x01
    13a2:	5a 81       	ldd	r21, Y+2	; 0x02
    13a4:	05 2e       	mov	r0, r21
    13a6:	00 0c       	add	r0, r0
    13a8:	66 0b       	sbc	r22, r22
    13aa:	77 0b       	sbc	r23, r23
    13ac:	80 e2       	ldi	r24, 0x20	; 32
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <SendStringInt>
 	 	SendStringInt("G Y ", data[1]);
    13b4:	4b 81       	ldd	r20, Y+3	; 0x03
    13b6:	5c 81       	ldd	r21, Y+4	; 0x04
    13b8:	05 2e       	mov	r0, r21
    13ba:	00 0c       	add	r0, r0
    13bc:	66 0b       	sbc	r22, r22
    13be:	77 0b       	sbc	r23, r23
    13c0:	85 e2       	ldi	r24, 0x25	; 37
    13c2:	91 e0       	ldi	r25, 0x01	; 1
    13c4:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <SendStringInt>
// 	 	SendStringInt("G Z ", data[2]);
	}

 	if (SamplesAccBuf())
    13c8:	0e 94 d5 01 	call	0x3aa	; 0x3aa <SamplesAccBuf>
    13cc:	88 23       	and	r24, r24
    13ce:	11 f1       	breq	.+68     	; 0x1414 <er_buf+0x92>
 	{
		ReadAccBufAveraged(data);
    13d0:	ce 01       	movw	r24, r28
    13d2:	01 96       	adiw	r24, 0x01	; 1
    13d4:	0e 94 de 03 	call	0x7bc	; 0x7bc <ReadAccBufAveraged>

		SendStringInt("A X ", data[0]);
    13d8:	49 81       	ldd	r20, Y+1	; 0x01
    13da:	5a 81       	ldd	r21, Y+2	; 0x02
    13dc:	05 2e       	mov	r0, r21
    13de:	00 0c       	add	r0, r0
    13e0:	66 0b       	sbc	r22, r22
    13e2:	77 0b       	sbc	r23, r23
    13e4:	8f e2       	ldi	r24, 0x2F	; 47
    13e6:	91 e0       	ldi	r25, 0x01	; 1
    13e8:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <SendStringInt>
		SendStringInt("A Y ", data[1]);
    13ec:	4b 81       	ldd	r20, Y+3	; 0x03
    13ee:	5c 81       	ldd	r21, Y+4	; 0x04
    13f0:	05 2e       	mov	r0, r21
    13f2:	00 0c       	add	r0, r0
    13f4:	66 0b       	sbc	r22, r22
    13f6:	77 0b       	sbc	r23, r23
    13f8:	84 e3       	ldi	r24, 0x34	; 52
    13fa:	91 e0       	ldi	r25, 0x01	; 1
    13fc:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <SendStringInt>
		SendStringInt("A Z ", data[2]);
    1400:	4d 81       	ldd	r20, Y+5	; 0x05
    1402:	5e 81       	ldd	r21, Y+6	; 0x06
    1404:	05 2e       	mov	r0, r21
    1406:	00 0c       	add	r0, r0
    1408:	66 0b       	sbc	r22, r22
    140a:	77 0b       	sbc	r23, r23
    140c:	89 e3       	ldi	r24, 0x39	; 57
    140e:	91 e0       	ldi	r25, 0x01	; 1
    1410:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <SendStringInt>
 	}

	SendStringInt("S ", SamplesAccBuf());
    1414:	0e 94 d5 01 	call	0x3aa	; 0x3aa <SamplesAccBuf>
    1418:	48 2f       	mov	r20, r24
    141a:	50 e0       	ldi	r21, 0x00	; 0
    141c:	60 e0       	ldi	r22, 0x00	; 0
    141e:	70 e0       	ldi	r23, 0x00	; 0
    1420:	8e e3       	ldi	r24, 0x3E	; 62
    1422:	91 e0       	ldi	r25, 0x01	; 1
    1424:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <SendStringInt>
	return 0;
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	26 96       	adiw	r28, 0x06	; 6
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	f8 94       	cli
    1430:	de bf       	out	0x3e, r29	; 62
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	cd bf       	out	0x3d, r28	; 61
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	08 95       	ret

0000143c <ProcessString>:
	{"ER_BUF", er_buf},
};


void ProcessString(uint8_t start, uint8_t stop)
{
    143c:	4f 92       	push	r4
    143e:	5f 92       	push	r5
    1440:	6f 92       	push	r6
    1442:	8f 92       	push	r8
    1444:	9f 92       	push	r9
    1446:	af 92       	push	r10
    1448:	bf 92       	push	r11
    144a:	cf 92       	push	r12
    144c:	df 92       	push	r13
    144e:	ef 92       	push	r14
    1450:	ff 92       	push	r15
    1452:	0f 93       	push	r16
    1454:	1f 93       	push	r17
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	a2 97       	sbiw	r28, 0x22	; 34
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	f8 94       	cli
    1464:	de bf       	out	0x3e, r29	; 62
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	cd bf       	out	0x3d, r28	; 61
    146a:	fe 01       	movw	r30, r28
    146c:	31 96       	adiw	r30, 0x01	; 1
    146e:	9e 01       	movw	r18, r28
    1470:	2f 5d       	subi	r18, 0xDF	; 223
    1472:	3f 4f       	sbci	r19, 0xFF	; 255
	char string[RX_SIZE];
	uint8_t i;	//counter value

	for (i=0; i<RX_SIZE; i++)
	{
		string[i] = 0;
    1474:	11 92       	st	Z+, r1
	
	//	stop = (stop +1) & RX_SIZE_BIN;
	char string[RX_SIZE];
	uint8_t i;	//counter value

	for (i=0; i<RX_SIZE; i++)
    1476:	2e 17       	cp	r18, r30
    1478:	3f 07       	cpc	r19, r31
    147a:	e1 f7       	brne	.-8      	; 0x1474 <ProcessString+0x38>
	}

	i=0;

	// Assign rX string to command
	while (start!=stop)
    147c:	86 17       	cp	r24, r22
    147e:	99 f0       	breq	.+38     	; 0x14a6 <ProcessString+0x6a>
    1480:	10 e0       	ldi	r17, 0x00	; 0
	{
		string[i] = RxBuffor[start];
    1482:	a1 e0       	ldi	r26, 0x01	; 1
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	ac 0f       	add	r26, r28
    1488:	bd 1f       	adc	r27, r29
    148a:	a1 0f       	add	r26, r17
    148c:	b1 1d       	adc	r27, r1
    148e:	e8 2f       	mov	r30, r24
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	e6 5e       	subi	r30, 0xE6	; 230
    1494:	fc 4f       	sbci	r31, 0xFC	; 252
    1496:	90 81       	ld	r25, Z
    1498:	9c 93       	st	X, r25
		start = (start + 1) & RX_SIZE_BIN;
    149a:	8f 5f       	subi	r24, 0xFF	; 255
    149c:	8f 71       	andi	r24, 0x1F	; 31
		i++;
    149e:	1f 5f       	subi	r17, 0xFF	; 255
	}

	i=0;

	// Assign rX string to command
	while (start!=stop)
    14a0:	68 13       	cpse	r22, r24
    14a2:	ef cf       	rjmp	.-34     	; 0x1482 <ProcessString+0x46>
    14a4:	01 c0       	rjmp	.+2      	; 0x14a8 <ProcessString+0x6c>
    14a6:	10 e0       	ldi	r17, 0x00	; 0
	}

	char * rest;
	char * begining;

	begining = strtok_r(string, " ", &rest);
    14a8:	ae 01       	movw	r20, r28
    14aa:	4f 5d       	subi	r20, 0xDF	; 223
    14ac:	5f 4f       	sbci	r21, 0xFF	; 255
    14ae:	6f e4       	ldi	r22, 0x4F	; 79
    14b0:	71 e0       	ldi	r23, 0x01	; 1
    14b2:	ce 01       	movw	r24, r28
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	0e 94 4c 12 	call	0x2498	; 0x2498 <strtok_r>
    14ba:	5c 01       	movw	r10, r24

	uint8_t j;
	uint8_t command_length;
	uint8_t string_length = strlen(begining);
    14bc:	fc 01       	movw	r30, r24
    14be:	01 90       	ld	r0, Z+
    14c0:	00 20       	and	r0, r0
    14c2:	e9 f7       	brne	.-6      	; 0x14be <ProcessString+0x82>
    14c4:	31 97       	sbiw	r30, 0x01	; 1
    14c6:	6e 2e       	mov	r6, r30
    14c8:	68 1a       	sub	r6, r24
    14ca:	0f 2e       	mov	r0, r31
    14cc:	f4 ef       	ldi	r31, 0xF4	; 244
    14ce:	ef 2e       	mov	r14, r31
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	ff 2e       	mov	r15, r31
    14d4:	f0 2d       	mov	r31, r0
    14d6:	c1 2c       	mov	r12, r1
    14d8:	d1 2c       	mov	r13, r1
	for (j=0; j < RX_COMMANDS; j++)
    14da:	00 e0       	ldi	r16, 0x00	; 0
	{
		command_length = strlen_P(ER_commands[j].command);
		
		if (command_length == string_length)
		{
			if (0 == strncasecmp_P(begining, ER_commands[j].command, i))
    14dc:	81 2e       	mov	r8, r17
    14de:	91 2c       	mov	r9, r1
#else
extern size_t __strlen_P(const char *) __ATTR_CONST__;  /* internal helper function */
__attribute__((__always_inline__)) static __inline__ size_t strlen_P(const char * s);
static __inline__ size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
    14e0:	c7 01       	movw	r24, r14
    14e2:	0e 94 2b 12 	call	0x2456	; 0x2456 <__strlen_P>
	uint8_t string_length = strlen(begining);
	for (j=0; j < RX_COMMANDS; j++)
	{
		command_length = strlen_P(ER_commands[j].command);
		
		if (command_length == string_length)
    14e6:	68 12       	cpse	r6, r24
    14e8:	18 c0       	rjmp	.+48     	; 0x151a <ProcessString+0xde>
		{
			if (0 == strncasecmp_P(begining, ER_commands[j].command, i))
    14ea:	a4 01       	movw	r20, r8
    14ec:	b7 01       	movw	r22, r14
    14ee:	c5 01       	movw	r24, r10
    14f0:	0e 94 34 12 	call	0x2468	; 0x2468 <strncasecmp_P>
    14f4:	89 2b       	or	r24, r25
    14f6:	89 f4       	brne	.+34     	; 0x151a <ProcessString+0xde>
			{
				_er_srv = (void *)pgm_read_word(&ER_commands[j].ER_service);
    14f8:	86 e1       	ldi	r24, 0x16	; 22
    14fa:	8c 9d       	mul	r24, r12
    14fc:	f0 01       	movw	r30, r0
    14fe:	8d 9d       	mul	r24, r13
    1500:	f0 0d       	add	r31, r0
    1502:	11 24       	eor	r1, r1
    1504:	e8 5f       	subi	r30, 0xF8	; 248
    1506:	fe 4f       	sbci	r31, 0xFE	; 254
    1508:	25 91       	lpm	r18, Z+
    150a:	34 91       	lpm	r19, Z
				_er_srv(rest);
    150c:	89 a1       	ldd	r24, Y+33	; 0x21
    150e:	9a a1       	ldd	r25, Y+34	; 0x22
    1510:	f9 01       	movw	r30, r18
    1512:	09 95       	icall
				break;
			}
		}
	}
	if (j==RX_COMMANDS)
    1514:	03 30       	cpi	r16, 0x03	; 3
    1516:	a1 f4       	brne	.+40     	; 0x1540 <ProcessString+0x104>
    1518:	09 c0       	rjmp	.+18     	; 0x152c <ProcessString+0xf0>
	begining = strtok_r(string, " ", &rest);

	uint8_t j;
	uint8_t command_length;
	uint8_t string_length = strlen(begining);
	for (j=0; j < RX_COMMANDS; j++)
    151a:	0f 5f       	subi	r16, 0xFF	; 255
    151c:	ff ef       	ldi	r31, 0xFF	; 255
    151e:	cf 1a       	sub	r12, r31
    1520:	df 0a       	sbc	r13, r31
    1522:	86 e1       	ldi	r24, 0x16	; 22
    1524:	e8 0e       	add	r14, r24
    1526:	f1 1c       	adc	r15, r1
    1528:	03 30       	cpi	r16, 0x03	; 3
    152a:	d1 f6       	brne	.-76     	; 0x14e0 <ProcessString+0xa4>
			}
		}
	}
	if (j==RX_COMMANDS)
	{
		SendString("Wrong command: ");
    152c:	81 e4       	ldi	r24, 0x41	; 65
    152e:	91 e0       	ldi	r25, 0x01	; 1
    1530:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SendString>
		SendString(string);
    1534:	ce 01       	movw	r24, r28
    1536:	01 96       	adiw	r24, 0x01	; 1
    1538:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SendString>
		SendEnter();
    153c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <SendEnter>
	}
		
}
    1540:	a2 96       	adiw	r28, 0x22	; 34
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	de bf       	out	0x3e, r29	; 62
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	cd bf       	out	0x3d, r28	; 61
    154c:	df 91       	pop	r29
    154e:	cf 91       	pop	r28
    1550:	1f 91       	pop	r17
    1552:	0f 91       	pop	r16
    1554:	ff 90       	pop	r15
    1556:	ef 90       	pop	r14
    1558:	df 90       	pop	r13
    155a:	cf 90       	pop	r12
    155c:	bf 90       	pop	r11
    155e:	af 90       	pop	r10
    1560:	9f 90       	pop	r9
    1562:	8f 90       	pop	r8
    1564:	6f 90       	pop	r6
    1566:	5f 90       	pop	r5
    1568:	4f 90       	pop	r4
    156a:	08 95       	ret

0000156c <test>:
		}
	}
}

void test(void)
{
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	2c 97       	sbiw	r28, 0x0c	; 12
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
	test_counter = POS_TIMING;
    1580:	84 e1       	ldi	r24, 0x14	; 20
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <test_counter+0x1>
    1588:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <test_counter>
	int16_t gyro[3], acc[3];
	if (SamplesGyroBuf())
    158c:	0e 94 cc 01 	call	0x398	; 0x398 <SamplesGyroBuf>
    1590:	88 23       	and	r24, r24
    1592:	21 f0       	breq	.+8      	; 0x159c <test+0x30>
		ReadGyroBufAveraged(gyro);
    1594:	ce 01       	movw	r24, r28
    1596:	01 96       	adiw	r24, 0x01	; 1
    1598:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <ReadGyroBufAveraged>

	if (SamplesAccBuf())
    159c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <SamplesAccBuf>
    15a0:	88 23       	and	r24, r24
    15a2:	21 f0       	breq	.+8      	; 0x15ac <test+0x40>
		ReadAccBufAveraged(acc);
    15a4:	ce 01       	movw	r24, r28
    15a6:	07 96       	adiw	r24, 0x07	; 7
    15a8:	0e 94 de 03 	call	0x7bc	; 0x7bc <ReadAccBufAveraged>

	ProcessPosition(gyro, acc);
    15ac:	be 01       	movw	r22, r28
    15ae:	69 5f       	subi	r22, 0xF9	; 249
    15b0:	7f 4f       	sbci	r23, 0xFF	; 255
    15b2:	ce 01       	movw	r24, r28
    15b4:	01 96       	adiw	r24, 0x01	; 1
    15b6:	0e 94 ee 04 	call	0x9dc	; 0x9dc <ProcessPosition>
// 	pomocnicza *= 99;
// 	pomocnicza /= 100;
// 	pos_y = pos_acc + pomocnicza;


	SendStringInt("B X ", pos_x);
    15ba:	40 91 1e 02 	lds	r20, 0x021E	; 0x80021e <pos_x>
    15be:	50 91 1f 02 	lds	r21, 0x021F	; 0x80021f <pos_x+0x1>
    15c2:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <pos_x+0x2>
    15c6:	70 91 21 02 	lds	r23, 0x0221	; 0x800221 <pos_x+0x3>
    15ca:	81 e5       	ldi	r24, 0x51	; 81
    15cc:	91 e0       	ldi	r25, 0x01	; 1
    15ce:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <SendStringInt>
	SendStringInt("B Y ", pos_y);
    15d2:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <pos_y>
    15d6:	50 91 13 02 	lds	r21, 0x0213	; 0x800213 <pos_y+0x1>
    15da:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <pos_y+0x2>
    15de:	70 91 15 02 	lds	r23, 0x0215	; 0x800215 <pos_y+0x3>
    15e2:	86 e5       	ldi	r24, 0x56	; 86
    15e4:	91 e0       	ldi	r25, 0x01	; 1
    15e6:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <SendStringInt>
}
    15ea:	2c 96       	adiw	r28, 0x0c	; 12
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	f8 94       	cli
    15f0:	de bf       	out	0x3e, r29	; 62
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	cd bf       	out	0x3d, r28	; 61
    15f6:	df 91       	pop	r29
    15f8:	cf 91       	pop	r28
    15fa:	08 95       	ret

000015fc <InitCommonTimer>:
	{&test_counter, test},
};

void InitCommonTimer(void)
{
	TIMSK0 |= (1<<TOIE0);			//Overflow interupt enable
    15fc:	ee e6       	ldi	r30, 0x6E	; 110
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	81 60       	ori	r24, 0x01	; 1
    1604:	80 83       	st	Z, r24
	TCCR0B |= (1<<CS01)| (1<<CS00);	//Prescaler 64
    1606:	85 b5       	in	r24, 0x25	; 37
    1608:	83 60       	ori	r24, 0x03	; 3
    160a:	85 bd       	out	0x25, r24	; 37
    160c:	08 95       	ret

0000160e <CheckCommonTimer>:
void CheckCommonTimer(void)
{
	uint8_t i;
	for (i=0; i<COMMON_TIMERS;i++)
	{
		if (*decrement_common[i].counter == 0)
    160e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1612:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1616:	80 81       	ld	r24, Z
    1618:	91 81       	ldd	r25, Z+1	; 0x01
    161a:	89 2b       	or	r24, r25
    161c:	29 f4       	brne	.+10     	; 0x1628 <CheckCommonTimer+0x1a>
		{
			decrement_common[i].timer_service();
    161e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_start+0x2>
    1622:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_start+0x3>
    1626:	09 95       	icall
    1628:	08 95       	ret

0000162a <__vector_16>:
	SendStringInt("B X ", pos_x);
	SendStringInt("B Y ", pos_y);
}

ISR (TIMER0_OVF_vect)	//each 1,024ms
{
    162a:	1f 92       	push	r1
    162c:	0f 92       	push	r0
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	0f 92       	push	r0
    1632:	11 24       	eor	r1, r1
    1634:	2f 93       	push	r18
    1636:	8f 93       	push	r24
    1638:	9f 93       	push	r25
    163a:	ef 93       	push	r30
    163c:	ff 93       	push	r31
	uint8_t i;
	for (i=0; i<COMMON_TIMERS;i++)
	{
		if (*decrement_common[i].counter != 0 && *decrement_common[i].counter != 0xFFFF)
    163e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1642:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1646:	80 81       	ld	r24, Z
    1648:	91 81       	ldd	r25, Z+1	; 0x01
    164a:	01 97       	sbiw	r24, 0x01	; 1
    164c:	8e 3f       	cpi	r24, 0xFE	; 254
    164e:	2f ef       	ldi	r18, 0xFF	; 255
    1650:	92 07       	cpc	r25, r18
    1652:	10 f4       	brcc	.+4      	; 0x1658 <__vector_16+0x2e>
		{
			*decrement_common[i].counter = *decrement_common[i].counter - 1;
    1654:	91 83       	std	Z+1, r25	; 0x01
    1656:	80 83       	st	Z, r24
		}
	}
    1658:	ff 91       	pop	r31
    165a:	ef 91       	pop	r30
    165c:	9f 91       	pop	r25
    165e:	8f 91       	pop	r24
    1660:	2f 91       	pop	r18
    1662:	0f 90       	pop	r0
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	0f 90       	pop	r0
    1668:	1f 90       	pop	r1
    166a:	18 95       	reti

0000166c <__vector_24>:
void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
}

ISR (TWI0_vect)	//TWI finished vector
{	//TWI interrupt
    166c:	1f 92       	push	r1
    166e:	0f 92       	push	r0
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	0f 92       	push	r0
    1674:	11 24       	eor	r1, r1
    1676:	2f 93       	push	r18
    1678:	3f 93       	push	r19
    167a:	4f 93       	push	r20
    167c:	5f 93       	push	r21
    167e:	8f 93       	push	r24
    1680:	9f 93       	push	r25
    1682:	af 93       	push	r26
    1684:	bf 93       	push	r27
    1686:	ef 93       	push	r30
    1688:	ff 93       	push	r31

	uint8_t SLA = ((uint8_t)twi_bufor[twi_buf_pos.tail].sla << 1);
    168a:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    168e:	e6 95       	lsr	r30
    1690:	e6 95       	lsr	r30
    1692:	e6 95       	lsr	r30
    1694:	e7 70       	andi	r30, 0x07	; 7
    1696:	4e 2f       	mov	r20, r30
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	84 e1       	ldi	r24, 0x14	; 20
    169c:	e8 9f       	mul	r30, r24
    169e:	f0 01       	movw	r30, r0
    16a0:	11 24       	eor	r1, r1
    16a2:	e6 58       	subi	r30, 0x86	; 134
    16a4:	fd 4f       	sbci	r31, 0xFD	; 253
    16a6:	80 81       	ld	r24, Z
    16a8:	28 2f       	mov	r18, r24
    16aa:	2e 7f       	andi	r18, 0xFE	; 254
	uint8_t REG = twi_bufor[twi_buf_pos.tail].reg;
	
	switch (twi_bufor[twi_buf_pos.tail].status){
    16ac:	e3 89       	ldd	r30, Z+19	; 0x13
    16ae:	8e 2f       	mov	r24, r30
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	fc 01       	movw	r30, r24
    16b4:	34 97       	sbiw	r30, 0x04	; 4
    16b6:	e9 30       	cpi	r30, 0x09	; 9
    16b8:	f1 05       	cpc	r31, r1
    16ba:	08 f0       	brcs	.+2      	; 0x16be <__vector_24+0x52>
    16bc:	e4 c1       	rjmp	.+968    	; 0x1a86 <__vector_24+0x41a>
    16be:	e6 5a       	subi	r30, 0xA6	; 166
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__tablejump2__>
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    16c6:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    16ca:	85 e8       	ldi	r24, 0x85	; 133
    16cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	uint8_t REG = twi_bufor[twi_buf_pos.tail].reg;
	
	switch (twi_bufor[twi_buf_pos.tail].status){
		case start:
			TWI_write(SLA);
			twi_bufor[twi_buf_pos.tail].status = write_adress;
    16d0:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    16d4:	e6 95       	lsr	r30
    16d6:	e6 95       	lsr	r30
    16d8:	e6 95       	lsr	r30
    16da:	e7 70       	andi	r30, 0x07	; 7
    16dc:	84 e1       	ldi	r24, 0x14	; 20
    16de:	e8 9f       	mul	r30, r24
    16e0:	f0 01       	movw	r30, r0
    16e2:	11 24       	eor	r1, r1
    16e4:	e6 58       	subi	r30, 0x86	; 134
    16e6:	fd 4f       	sbci	r31, 0xFD	; 253
    16e8:	85 e0       	ldi	r24, 0x05	; 5
    16ea:	83 8b       	std	Z+19, r24	; 0x13
			break;
    16ec:	cc c1       	rjmp	.+920    	; 0x1a86 <__vector_24+0x41a>

ISR (TWI0_vect)	//TWI finished vector
{	//TWI interrupt

	uint8_t SLA = ((uint8_t)twi_bufor[twi_buf_pos.tail].sla << 1);
	uint8_t REG = twi_bufor[twi_buf_pos.tail].reg;
    16ee:	84 e1       	ldi	r24, 0x14	; 20
    16f0:	84 9f       	mul	r24, r20
    16f2:	f0 01       	movw	r30, r0
    16f4:	85 9f       	mul	r24, r21
    16f6:	f0 0d       	add	r31, r0
    16f8:	11 24       	eor	r1, r1
    16fa:	e6 58       	subi	r30, 0x86	; 134
    16fc:	fd 4f       	sbci	r31, 0xFD	; 253
    16fe:	91 81       	ldd	r25, Z+1	; 0x01
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    1700:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    1704:	95 e8       	ldi	r25, 0x85	; 133
    1706:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			twi_bufor[twi_buf_pos.tail].status = write_adress;
			break;

		case write_adress:
			TWI_write(REG);
			twi_bufor[twi_buf_pos.tail].status = write_register;
    170a:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    170e:	e6 95       	lsr	r30
    1710:	e6 95       	lsr	r30
    1712:	e6 95       	lsr	r30
    1714:	e7 70       	andi	r30, 0x07	; 7
    1716:	8e 9f       	mul	r24, r30
    1718:	f0 01       	movw	r30, r0
    171a:	11 24       	eor	r1, r1
    171c:	e6 58       	subi	r30, 0x86	; 134
    171e:	fd 4f       	sbci	r31, 0xFD	; 253
    1720:	86 e0       	ldi	r24, 0x06	; 6
    1722:	83 8b       	std	Z+19, r24	; 0x13
			break;
    1724:	b0 c1       	rjmp	.+864    	; 0x1a86 <__vector_24+0x41a>

		case write_register:
			if (twi_bufor[twi_buf_pos.tail].read)	//check if reading is required
    1726:	84 e1       	ldi	r24, 0x14	; 20
    1728:	84 9f       	mul	r24, r20
    172a:	f0 01       	movw	r30, r0
    172c:	85 9f       	mul	r24, r21
    172e:	f0 0d       	add	r31, r0
    1730:	11 24       	eor	r1, r1
    1732:	e6 58       	subi	r30, 0x86	; 134
    1734:	fd 4f       	sbci	r31, 0xFD	; 253
    1736:	80 81       	ld	r24, Z
    1738:	80 ff       	sbrs	r24, 0
    173a:	12 c0       	rjmp	.+36     	; 0x1760 <__vector_24+0xf4>
}

//low level functions

void TWI_start(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA)|(1<<TWIE);
    173c:	85 ea       	ldi	r24, 0xA5	; 165
    173e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

		case write_register:
			if (twi_bufor[twi_buf_pos.tail].read)	//check if reading is required
			{
				TWI_start();
				twi_bufor[twi_buf_pos.tail].status = restart;
    1742:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    1746:	e6 95       	lsr	r30
    1748:	e6 95       	lsr	r30
    174a:	e6 95       	lsr	r30
    174c:	e7 70       	andi	r30, 0x07	; 7
    174e:	84 e1       	ldi	r24, 0x14	; 20
    1750:	e8 9f       	mul	r30, r24
    1752:	f0 01       	movw	r30, r0
    1754:	11 24       	eor	r1, r1
    1756:	e6 58       	subi	r30, 0x86	; 134
    1758:	fd 4f       	sbci	r31, 0xFD	; 253
    175a:	87 e0       	ldi	r24, 0x07	; 7
    175c:	83 8b       	std	Z+19, r24	; 0x13
    175e:	93 c1       	rjmp	.+806    	; 0x1a86 <__vector_24+0x41a>
			}
			else	//process writing
			{
				if (twi_bufor[twi_buf_pos.tail].lenght > 1){	//if more than 1 char to write
    1760:	84 e1       	ldi	r24, 0x14	; 20
    1762:	84 9f       	mul	r24, r20
    1764:	f0 01       	movw	r30, r0
    1766:	85 9f       	mul	r24, r21
    1768:	f0 0d       	add	r31, r0
    176a:	11 24       	eor	r1, r1
    176c:	e6 58       	subi	r30, 0x86	; 134
    176e:	fd 4f       	sbci	r31, 0xFD	; 253
    1770:	87 85       	ldd	r24, Z+15	; 0x0f
    1772:	82 30       	cpi	r24, 0x02	; 2
    1774:	e8 f0       	brcs	.+58     	; 0x17b0 <__vector_24+0x144>
					TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
    1776:	84 e1       	ldi	r24, 0x14	; 20
    1778:	84 9f       	mul	r24, r20
    177a:	f0 01       	movw	r30, r0
    177c:	85 9f       	mul	r24, r21
    177e:	f0 0d       	add	r31, r0
    1780:	11 24       	eor	r1, r1
    1782:	e6 58       	subi	r30, 0x86	; 134
    1784:	fd 4f       	sbci	r31, 0xFD	; 253
    1786:	92 81       	ldd	r25, Z+2	; 0x02
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    1788:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    178c:	95 e8       	ldi	r25, 0x85	; 133
    178e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			}
			else	//process writing
			{
				if (twi_bufor[twi_buf_pos.tail].lenght > 1){	//if more than 1 char to write
					TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
					twi_bufor[twi_buf_pos.tail].status = write;
    1792:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    1796:	e6 95       	lsr	r30
    1798:	e6 95       	lsr	r30
    179a:	e6 95       	lsr	r30
    179c:	e7 70       	andi	r30, 0x07	; 7
    179e:	8e 9f       	mul	r24, r30
    17a0:	f0 01       	movw	r30, r0
    17a2:	11 24       	eor	r1, r1
    17a4:	e6 58       	subi	r30, 0x86	; 134
    17a6:	fd 4f       	sbci	r31, 0xFD	; 253
    17a8:	8b e0       	ldi	r24, 0x0B	; 11
    17aa:	83 8b       	std	Z+19, r24	; 0x13
					twi_bufor[twi_buf_pos.tail].buf_pos = 0;
    17ac:	14 86       	std	Z+12, r1	; 0x0c
    17ae:	1b c0       	rjmp	.+54     	; 0x17e6 <__vector_24+0x17a>
				}

				else {	//only 1 byte to send
					TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
    17b0:	84 e1       	ldi	r24, 0x14	; 20
    17b2:	84 9f       	mul	r24, r20
    17b4:	f0 01       	movw	r30, r0
    17b6:	85 9f       	mul	r24, r21
    17b8:	f0 0d       	add	r31, r0
    17ba:	11 24       	eor	r1, r1
    17bc:	e6 58       	subi	r30, 0x86	; 134
    17be:	fd 4f       	sbci	r31, 0xFD	; 253
    17c0:	92 81       	ldd	r25, Z+2	; 0x02
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    17c2:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    17c6:	95 e8       	ldi	r25, 0x85	; 133
    17c8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
					twi_bufor[twi_buf_pos.tail].buf_pos = 0;
				}

				else {	//only 1 byte to send
					TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
					twi_bufor[twi_buf_pos.tail].status = last_byte_write;
    17cc:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    17d0:	e6 95       	lsr	r30
    17d2:	e6 95       	lsr	r30
    17d4:	e6 95       	lsr	r30
    17d6:	e7 70       	andi	r30, 0x07	; 7
    17d8:	8e 9f       	mul	r24, r30
    17da:	f0 01       	movw	r30, r0
    17dc:	11 24       	eor	r1, r1
    17de:	e6 58       	subi	r30, 0x86	; 134
    17e0:	fd 4f       	sbci	r31, 0xFD	; 253
    17e2:	8c e0       	ldi	r24, 0x0C	; 12
    17e4:	83 8b       	std	Z+19, r24	; 0x13
				}
				twi_bufor[twi_buf_pos.tail].lenght --;
    17e6:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    17ea:	e6 95       	lsr	r30
    17ec:	e6 95       	lsr	r30
    17ee:	e6 95       	lsr	r30
    17f0:	e7 70       	andi	r30, 0x07	; 7
    17f2:	84 e1       	ldi	r24, 0x14	; 20
    17f4:	e8 9f       	mul	r30, r24
    17f6:	f0 01       	movw	r30, r0
    17f8:	11 24       	eor	r1, r1
    17fa:	e6 58       	subi	r30, 0x86	; 134
    17fc:	fd 4f       	sbci	r31, 0xFD	; 253
    17fe:	87 85       	ldd	r24, Z+15	; 0x0f
    1800:	81 50       	subi	r24, 0x01	; 1
    1802:	87 87       	std	Z+15, r24	; 0x0f
    1804:	40 c1       	rjmp	.+640    	; 0x1a86 <__vector_24+0x41a>
			}
			break;

		case restart:
			SLA++;
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	82 0f       	add	r24, r18
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    180a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    180e:	85 e8       	ldi	r24, 0x85	; 133
    1810:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;

		case restart:
			SLA++;
			TWI_write(SLA);
			twi_bufor[twi_buf_pos.tail].status = set_to_read;
    1814:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    1818:	e6 95       	lsr	r30
    181a:	e6 95       	lsr	r30
    181c:	e6 95       	lsr	r30
    181e:	e7 70       	andi	r30, 0x07	; 7
    1820:	84 e1       	ldi	r24, 0x14	; 20
    1822:	e8 9f       	mul	r30, r24
    1824:	f0 01       	movw	r30, r0
    1826:	11 24       	eor	r1, r1
    1828:	e6 58       	subi	r30, 0x86	; 134
    182a:	fd 4f       	sbci	r31, 0xFD	; 253
    182c:	88 e0       	ldi	r24, 0x08	; 8
    182e:	83 8b       	std	Z+19, r24	; 0x13
			break;
    1830:	2a c1       	rjmp	.+596    	; 0x1a86 <__vector_24+0x41a>

		case set_to_read:
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){
    1832:	84 e1       	ldi	r24, 0x14	; 20
    1834:	84 9f       	mul	r24, r20
    1836:	f0 01       	movw	r30, r0
    1838:	85 9f       	mul	r24, r21
    183a:	f0 0d       	add	r31, r0
    183c:	11 24       	eor	r1, r1
    183e:	e6 58       	subi	r30, 0x86	; 134
    1840:	fd 4f       	sbci	r31, 0xFD	; 253
    1842:	87 85       	ldd	r24, Z+15	; 0x0f
    1844:	82 30       	cpi	r24, 0x02	; 2
    1846:	90 f0       	brcs	.+36     	; 0x186c <__vector_24+0x200>
	TWDR0 = bajt;
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
}

void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
    1848:	85 ec       	ldi	r24, 0xC5	; 197
    184a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;

		case set_to_read:
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){
				TWI_read(ACK);
				twi_bufor[twi_buf_pos.tail].status = read;
    184e:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    1852:	e6 95       	lsr	r30
    1854:	e6 95       	lsr	r30
    1856:	e6 95       	lsr	r30
    1858:	e7 70       	andi	r30, 0x07	; 7
    185a:	84 e1       	ldi	r24, 0x14	; 20
    185c:	e8 9f       	mul	r30, r24
    185e:	f0 01       	movw	r30, r0
    1860:	11 24       	eor	r1, r1
    1862:	e6 58       	subi	r30, 0x86	; 134
    1864:	fd 4f       	sbci	r31, 0xFD	; 253
    1866:	89 e0       	ldi	r24, 0x09	; 9
    1868:	83 8b       	std	Z+19, r24	; 0x13
    186a:	11 c0       	rjmp	.+34     	; 0x188e <__vector_24+0x222>
	TWDR0 = bajt;
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
}

void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
    186c:	85 e8       	ldi	r24, 0x85	; 133
    186e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

			}
			
			else{
				TWI_read(NACK);
				twi_bufor[twi_buf_pos.tail].status = stop_reading;
    1872:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    1876:	e6 95       	lsr	r30
    1878:	e6 95       	lsr	r30
    187a:	e6 95       	lsr	r30
    187c:	e7 70       	andi	r30, 0x07	; 7
    187e:	84 e1       	ldi	r24, 0x14	; 20
    1880:	e8 9f       	mul	r30, r24
    1882:	f0 01       	movw	r30, r0
    1884:	11 24       	eor	r1, r1
    1886:	e6 58       	subi	r30, 0x86	; 134
    1888:	fd 4f       	sbci	r31, 0xFD	; 253
    188a:	8a e0       	ldi	r24, 0x0A	; 10
    188c:	83 8b       	std	Z+19, r24	; 0x13
			}

			twi_bufor[twi_buf_pos.tail].lenght --;
    188e:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    1892:	e6 95       	lsr	r30
    1894:	e6 95       	lsr	r30
    1896:	e6 95       	lsr	r30
    1898:	e7 70       	andi	r30, 0x07	; 7
    189a:	84 e1       	ldi	r24, 0x14	; 20
    189c:	e8 9f       	mul	r30, r24
    189e:	f0 01       	movw	r30, r0
    18a0:	11 24       	eor	r1, r1
    18a2:	e6 58       	subi	r30, 0x86	; 134
    18a4:	fd 4f       	sbci	r31, 0xFD	; 253
    18a6:	87 85       	ldd	r24, Z+15	; 0x0f
    18a8:	81 50       	subi	r24, 0x01	; 1
    18aa:	87 87       	std	Z+15, r24	; 0x0f
			break;
    18ac:	ec c0       	rjmp	.+472    	; 0x1a86 <__vector_24+0x41a>

		case read:
			*twi_bufor[twi_buf_pos.tail].bufor_ref++ = TWDR0;	//read received byte
    18ae:	84 e1       	ldi	r24, 0x14	; 20
    18b0:	84 9f       	mul	r24, r20
    18b2:	f0 01       	movw	r30, r0
    18b4:	85 9f       	mul	r24, r21
    18b6:	f0 0d       	add	r31, r0
    18b8:	11 24       	eor	r1, r1
    18ba:	e6 58       	subi	r30, 0x86	; 134
    18bc:	fd 4f       	sbci	r31, 0xFD	; 253
    18be:	a5 85       	ldd	r26, Z+13	; 0x0d
    18c0:	b6 85       	ldd	r27, Z+14	; 0x0e
    18c2:	9d 01       	movw	r18, r26
    18c4:	2f 5f       	subi	r18, 0xFF	; 255
    18c6:	3f 4f       	sbci	r19, 0xFF	; 255
    18c8:	36 87       	std	Z+14, r19	; 0x0e
    18ca:	25 87       	std	Z+13, r18	; 0x0d
    18cc:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    18d0:	9c 93       	st	X, r25
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){
    18d2:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    18d6:	e6 95       	lsr	r30
    18d8:	e6 95       	lsr	r30
    18da:	e6 95       	lsr	r30
    18dc:	e7 70       	andi	r30, 0x07	; 7
    18de:	8e 9f       	mul	r24, r30
    18e0:	f0 01       	movw	r30, r0
    18e2:	11 24       	eor	r1, r1
    18e4:	e6 58       	subi	r30, 0x86	; 134
    18e6:	fd 4f       	sbci	r31, 0xFD	; 253
    18e8:	87 85       	ldd	r24, Z+15	; 0x0f
    18ea:	82 30       	cpi	r24, 0x02	; 2
    18ec:	90 f0       	brcs	.+36     	; 0x1912 <__vector_24+0x2a6>
	TWDR0 = bajt;
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
}

void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
    18ee:	85 ec       	ldi	r24, 0xC5	; 197
    18f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

		case read:
			*twi_bufor[twi_buf_pos.tail].bufor_ref++ = TWDR0;	//read received byte
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){
				TWI_read(ACK);	//going to read more
				twi_bufor[twi_buf_pos.tail].status = read;
    18f4:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    18f8:	e6 95       	lsr	r30
    18fa:	e6 95       	lsr	r30
    18fc:	e6 95       	lsr	r30
    18fe:	e7 70       	andi	r30, 0x07	; 7
    1900:	84 e1       	ldi	r24, 0x14	; 20
    1902:	e8 9f       	mul	r30, r24
    1904:	f0 01       	movw	r30, r0
    1906:	11 24       	eor	r1, r1
    1908:	e6 58       	subi	r30, 0x86	; 134
    190a:	fd 4f       	sbci	r31, 0xFD	; 253
    190c:	89 e0       	ldi	r24, 0x09	; 9
    190e:	83 8b       	std	Z+19, r24	; 0x13
    1910:	11 c0       	rjmp	.+34     	; 0x1934 <__vector_24+0x2c8>
	TWDR0 = bajt;
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
}

void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
    1912:	85 e8       	ldi	r24, 0x85	; 133
    1914:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				TWI_read(ACK);	//going to read more
				twi_bufor[twi_buf_pos.tail].status = read;
			}
			else{
				TWI_read(NACK);	//finishing reading
				twi_bufor[twi_buf_pos.tail].status = stop_reading;
    1918:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    191c:	e6 95       	lsr	r30
    191e:	e6 95       	lsr	r30
    1920:	e6 95       	lsr	r30
    1922:	e7 70       	andi	r30, 0x07	; 7
    1924:	84 e1       	ldi	r24, 0x14	; 20
    1926:	e8 9f       	mul	r30, r24
    1928:	f0 01       	movw	r30, r0
    192a:	11 24       	eor	r1, r1
    192c:	e6 58       	subi	r30, 0x86	; 134
    192e:	fd 4f       	sbci	r31, 0xFD	; 253
    1930:	8a e0       	ldi	r24, 0x0A	; 10
    1932:	83 8b       	std	Z+19, r24	; 0x13
			}
			twi_bufor[twi_buf_pos.tail].lenght --;
    1934:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    1938:	e6 95       	lsr	r30
    193a:	e6 95       	lsr	r30
    193c:	e6 95       	lsr	r30
    193e:	e7 70       	andi	r30, 0x07	; 7
    1940:	84 e1       	ldi	r24, 0x14	; 20
    1942:	e8 9f       	mul	r30, r24
    1944:	f0 01       	movw	r30, r0
    1946:	11 24       	eor	r1, r1
    1948:	e6 58       	subi	r30, 0x86	; 134
    194a:	fd 4f       	sbci	r31, 0xFD	; 253
    194c:	87 85       	ldd	r24, Z+15	; 0x0f
    194e:	81 50       	subi	r24, 0x01	; 1
    1950:	87 87       	std	Z+15, r24	; 0x0f
			break;
    1952:	99 c0       	rjmp	.+306    	; 0x1a86 <__vector_24+0x41a>

		case stop_reading:
			*twi_bufor[twi_buf_pos.tail].bufor_ref++ = TWDR0;	//read last received byte
    1954:	84 e1       	ldi	r24, 0x14	; 20
    1956:	84 9f       	mul	r24, r20
    1958:	f0 01       	movw	r30, r0
    195a:	85 9f       	mul	r24, r21
    195c:	f0 0d       	add	r31, r0
    195e:	11 24       	eor	r1, r1
    1960:	e6 58       	subi	r30, 0x86	; 134
    1962:	fd 4f       	sbci	r31, 0xFD	; 253
    1964:	a5 85       	ldd	r26, Z+13	; 0x0d
    1966:	b6 85       	ldd	r27, Z+14	; 0x0e
    1968:	9d 01       	movw	r18, r26
    196a:	2f 5f       	subi	r18, 0xFF	; 255
    196c:	3f 4f       	sbci	r19, 0xFF	; 255
    196e:	36 87       	std	Z+14, r19	; 0x0e
    1970:	25 87       	std	Z+13, r18	; 0x0d
    1972:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1976:	9c 93       	st	X, r25
			*twi_bufor[twi_buf_pos.tail].flag_register = twi_bufor[twi_buf_pos.tail].flag_mask;	//set read done flag
    1978:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    197c:	e6 95       	lsr	r30
    197e:	e6 95       	lsr	r30
    1980:	e6 95       	lsr	r30
    1982:	e7 70       	andi	r30, 0x07	; 7
    1984:	8e 9f       	mul	r24, r30
    1986:	f0 01       	movw	r30, r0
    1988:	11 24       	eor	r1, r1
    198a:	e6 58       	subi	r30, 0x86	; 134
    198c:	fd 4f       	sbci	r31, 0xFD	; 253
    198e:	a0 89       	ldd	r26, Z+16	; 0x10
    1990:	b1 89       	ldd	r27, Z+17	; 0x11
    1992:	92 89       	ldd	r25, Z+18	; 0x12
    1994:	9c 93       	st	X, r25
void TWI_start(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA)|(1<<TWIE);
}

void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
    1996:	95 e9       	ldi	r25, 0x95	; 149
    1998:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

		case stop_reading:
			*twi_bufor[twi_buf_pos.tail].bufor_ref++ = TWDR0;	//read last received byte
			*twi_bufor[twi_buf_pos.tail].flag_register = twi_bufor[twi_buf_pos.tail].flag_mask;	//set read done flag
			TWI_stop();
			twi_bufor[twi_buf_pos.tail].status = done;
    199c:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    19a0:	e6 95       	lsr	r30
    19a2:	e6 95       	lsr	r30
    19a4:	e6 95       	lsr	r30
    19a6:	e7 70       	andi	r30, 0x07	; 7
    19a8:	8e 9f       	mul	r24, r30
    19aa:	f0 01       	movw	r30, r0
    19ac:	11 24       	eor	r1, r1
    19ae:	e6 58       	subi	r30, 0x86	; 134
    19b0:	fd 4f       	sbci	r31, 0xFD	; 253
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	83 8b       	std	Z+19, r24	; 0x13
			break;
    19b6:	67 c0       	rjmp	.+206    	; 0x1a86 <__vector_24+0x41a>

		case write:
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){	//if more than 1 char to write
    19b8:	84 e1       	ldi	r24, 0x14	; 20
    19ba:	84 9f       	mul	r24, r20
    19bc:	f0 01       	movw	r30, r0
    19be:	85 9f       	mul	r24, r21
    19c0:	f0 0d       	add	r31, r0
    19c2:	11 24       	eor	r1, r1
    19c4:	e6 58       	subi	r30, 0x86	; 134
    19c6:	fd 4f       	sbci	r31, 0xFD	; 253
    19c8:	87 85       	ldd	r24, Z+15	; 0x0f
    19ca:	82 30       	cpi	r24, 0x02	; 2
    19cc:	e8 f0       	brcs	.+58     	; 0x1a08 <__vector_24+0x39c>
				TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
    19ce:	84 e1       	ldi	r24, 0x14	; 20
    19d0:	84 9f       	mul	r24, r20
    19d2:	f0 01       	movw	r30, r0
    19d4:	85 9f       	mul	r24, r21
    19d6:	f0 0d       	add	r31, r0
    19d8:	11 24       	eor	r1, r1
    19da:	e6 58       	subi	r30, 0x86	; 134
    19dc:	fd 4f       	sbci	r31, 0xFD	; 253
    19de:	92 81       	ldd	r25, Z+2	; 0x02
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    19e0:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    19e4:	95 e8       	ldi	r25, 0x85	; 133
    19e6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;

		case write:
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){	//if more than 1 char to write
				TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
				twi_bufor[twi_buf_pos.tail].status = write;
    19ea:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    19ee:	e6 95       	lsr	r30
    19f0:	e6 95       	lsr	r30
    19f2:	e6 95       	lsr	r30
    19f4:	e7 70       	andi	r30, 0x07	; 7
    19f6:	8e 9f       	mul	r24, r30
    19f8:	f0 01       	movw	r30, r0
    19fa:	11 24       	eor	r1, r1
    19fc:	e6 58       	subi	r30, 0x86	; 134
    19fe:	fd 4f       	sbci	r31, 0xFD	; 253
    1a00:	8b e0       	ldi	r24, 0x0B	; 11
    1a02:	83 8b       	std	Z+19, r24	; 0x13
				twi_bufor[twi_buf_pos.tail].buf_pos = 0;
    1a04:	14 86       	std	Z+12, r1	; 0x0c
    1a06:	1b c0       	rjmp	.+54     	; 0x1a3e <__vector_24+0x3d2>
			}

			else {	//only 1 byte to send
				TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
    1a08:	84 e1       	ldi	r24, 0x14	; 20
    1a0a:	84 9f       	mul	r24, r20
    1a0c:	f0 01       	movw	r30, r0
    1a0e:	85 9f       	mul	r24, r21
    1a10:	f0 0d       	add	r31, r0
    1a12:	11 24       	eor	r1, r1
    1a14:	e6 58       	subi	r30, 0x86	; 134
    1a16:	fd 4f       	sbci	r31, 0xFD	; 253
    1a18:	92 81       	ldd	r25, Z+2	; 0x02
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    1a1a:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    1a1e:	95 e8       	ldi	r25, 0x85	; 133
    1a20:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				twi_bufor[twi_buf_pos.tail].buf_pos = 0;
			}

			else {	//only 1 byte to send
				TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
				twi_bufor[twi_buf_pos.tail].status = last_byte_write;
    1a24:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    1a28:	e6 95       	lsr	r30
    1a2a:	e6 95       	lsr	r30
    1a2c:	e6 95       	lsr	r30
    1a2e:	e7 70       	andi	r30, 0x07	; 7
    1a30:	8e 9f       	mul	r24, r30
    1a32:	f0 01       	movw	r30, r0
    1a34:	11 24       	eor	r1, r1
    1a36:	e6 58       	subi	r30, 0x86	; 134
    1a38:	fd 4f       	sbci	r31, 0xFD	; 253
    1a3a:	8c e0       	ldi	r24, 0x0C	; 12
    1a3c:	83 8b       	std	Z+19, r24	; 0x13
			}
			twi_bufor[twi_buf_pos.tail].lenght --;
    1a3e:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    1a42:	e6 95       	lsr	r30
    1a44:	e6 95       	lsr	r30
    1a46:	e6 95       	lsr	r30
    1a48:	e7 70       	andi	r30, 0x07	; 7
    1a4a:	84 e1       	ldi	r24, 0x14	; 20
    1a4c:	e8 9f       	mul	r30, r24
    1a4e:	f0 01       	movw	r30, r0
    1a50:	11 24       	eor	r1, r1
    1a52:	e6 58       	subi	r30, 0x86	; 134
    1a54:	fd 4f       	sbci	r31, 0xFD	; 253
    1a56:	87 85       	ldd	r24, Z+15	; 0x0f
    1a58:	81 50       	subi	r24, 0x01	; 1
    1a5a:	87 87       	std	Z+15, r24	; 0x0f
			break;
    1a5c:	14 c0       	rjmp	.+40     	; 0x1a86 <__vector_24+0x41a>
void TWI_start(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA)|(1<<TWIE);
}

void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
    1a5e:	85 e9       	ldi	r24, 0x95	; 149
    1a60:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			twi_bufor[twi_buf_pos.tail].lenght --;
			break;

		case last_byte_write:
			TWI_stop();
			twi_bufor[twi_buf_pos.tail].status = done;
    1a64:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    1a68:	e6 95       	lsr	r30
    1a6a:	e6 95       	lsr	r30
    1a6c:	e6 95       	lsr	r30
    1a6e:	e7 70       	andi	r30, 0x07	; 7
    1a70:	84 e1       	ldi	r24, 0x14	; 20
    1a72:	e8 9f       	mul	r30, r24
    1a74:	f0 01       	movw	r30, r0
    1a76:	11 24       	eor	r1, r1
    1a78:	e6 58       	subi	r30, 0x86	; 134
    1a7a:	fd 4f       	sbci	r31, 0xFD	; 253
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	83 8b       	std	Z+19, r24	; 0x13
			twi_reset_counter = 0xFF;	//turn of timer, sending procedure finished correctly
    1a80:	8f ef       	ldi	r24, 0xFF	; 255
    1a82:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <twi_reset_counter>

		default:

			break;
	}
    1a86:	ff 91       	pop	r31
    1a88:	ef 91       	pop	r30
    1a8a:	bf 91       	pop	r27
    1a8c:	af 91       	pop	r26
    1a8e:	9f 91       	pop	r25
    1a90:	8f 91       	pop	r24
    1a92:	5f 91       	pop	r21
    1a94:	4f 91       	pop	r20
    1a96:	3f 91       	pop	r19
    1a98:	2f 91       	pop	r18
    1a9a:	0f 90       	pop	r0
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	0f 90       	pop	r0
    1aa0:	1f 90       	pop	r1
    1aa2:	18 95       	reti

00001aa4 <InitUartCOM>:
void SendStringUint(char string[], uint16_t number)
{
	SendString(string);
	SendUint(number);
	SendEnter();
}
    1aa4:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <InitUartCOM_HW>
    1aa8:	08 95       	ret

00001aaa <ReceiveChar>:
    1aaa:	88 23       	and	r24, r24
    1aac:	91 f0       	breq	.+36     	; 0x1ad2 <ReceiveChar+0x28>
    1aae:	8a 30       	cpi	r24, 0x0A	; 10
    1ab0:	81 f0       	breq	.+32     	; 0x1ad2 <ReceiveChar+0x28>
    1ab2:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <RxHead>
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	e6 5e       	subi	r30, 0xE6	; 230
    1aba:	fc 4f       	sbci	r31, 0xFC	; 252
    1abc:	80 83       	st	Z, r24
    1abe:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <RxHead>
    1ac2:	8f 5f       	subi	r24, 0xFF	; 255
    1ac4:	8f 71       	andi	r24, 0x1F	; 31
    1ac6:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <RxHead>
    1aca:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <RxHead>
    1ace:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <RxTail>
    1ad2:	08 95       	ret

00001ad4 <SendString>:
    1ad4:	0f 93       	push	r16
    1ad6:	1f 93       	push	r17
    1ad8:	cf 93       	push	r28
    1ada:	fc 01       	movw	r30, r24
    1adc:	80 81       	ld	r24, Z
    1ade:	88 23       	and	r24, r24
    1ae0:	59 f0       	breq	.+22     	; 0x1af8 <SendString+0x24>
    1ae2:	8f 01       	movw	r16, r30
    1ae4:	c0 e0       	ldi	r28, 0x00	; 0
    1ae6:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <PutCharToBuffor>
    1aea:	cf 5f       	subi	r28, 0xFF	; 255
    1aec:	f8 01       	movw	r30, r16
    1aee:	ec 0f       	add	r30, r28
    1af0:	f1 1d       	adc	r31, r1
    1af2:	80 81       	ld	r24, Z
    1af4:	81 11       	cpse	r24, r1
    1af6:	f7 cf       	rjmp	.-18     	; 0x1ae6 <SendString+0x12>
    1af8:	cf 91       	pop	r28
    1afa:	1f 91       	pop	r17
    1afc:	0f 91       	pop	r16
    1afe:	08 95       	ret

00001b00 <SendEnter>:
    1b00:	8d e0       	ldi	r24, 0x0D	; 13
    1b02:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <PutCharToBuffor>
    1b06:	8a e0       	ldi	r24, 0x0A	; 10
    1b08:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <PutCharToBuffor>
    1b0c:	08 95       	ret

00001b0e <SendLine>:
    1b0e:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SendString>
    1b12:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <SendEnter>
    1b16:	08 95       	ret

00001b18 <SendInt>:
    1b18:	4f 92       	push	r4
    1b1a:	5f 92       	push	r5
    1b1c:	6f 92       	push	r6
    1b1e:	7f 92       	push	r7
    1b20:	8f 92       	push	r8
    1b22:	9f 92       	push	r9
    1b24:	af 92       	push	r10
    1b26:	bf 92       	push	r11
    1b28:	cf 92       	push	r12
    1b2a:	df 92       	push	r13
    1b2c:	ef 92       	push	r14
    1b2e:	ff 92       	push	r15
    1b30:	0f 93       	push	r16
    1b32:	1f 93       	push	r17
    1b34:	cf 93       	push	r28
    1b36:	df 93       	push	r29
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	a8 97       	sbiw	r28, 0x28	; 40
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
    1b48:	6b 01       	movw	r12, r22
    1b4a:	7c 01       	movw	r14, r24
    1b4c:	fe 01       	movw	r30, r28
    1b4e:	75 96       	adiw	r30, 0x15	; 21
    1b50:	8e 01       	movw	r16, r28
    1b52:	0f 5f       	subi	r16, 0xFF	; 255
    1b54:	1f 4f       	sbci	r17, 0xFF	; 255
    1b56:	ce 01       	movw	r24, r28
    1b58:	4d 96       	adiw	r24, 0x1d	; 29
    1b5a:	d8 01       	movw	r26, r16
    1b5c:	11 92       	st	Z+, r1
    1b5e:	1d 92       	st	X+, r1
    1b60:	e8 17       	cp	r30, r24
    1b62:	f9 07       	cpc	r31, r25
    1b64:	d9 f7       	brne	.-10     	; 0x1b5c <SendInt+0x44>
    1b66:	ff 20       	and	r15, r15
    1b68:	0c f0       	brlt	.+2      	; 0x1b6c <SendInt+0x54>
    1b6a:	5d c0       	rjmp	.+186    	; 0x1c26 <SendInt+0x10e>
    1b6c:	81 c0       	rjmp	.+258    	; 0x1c70 <SendInt+0x158>
    1b6e:	5e 01       	movw	r10, r28
    1b70:	26 e1       	ldi	r18, 0x16	; 22
    1b72:	a2 0e       	add	r10, r18
    1b74:	b1 1c       	adc	r11, r1
    1b76:	99 24       	eor	r9, r9
    1b78:	93 94       	inc	r9
    1b7a:	0f 2e       	mov	r0, r31
    1b7c:	fa e0       	ldi	r31, 0x0A	; 10
    1b7e:	4f 2e       	mov	r4, r31
    1b80:	51 2c       	mov	r5, r1
    1b82:	61 2c       	mov	r6, r1
    1b84:	71 2c       	mov	r7, r1
    1b86:	f0 2d       	mov	r31, r0
    1b88:	01 c0       	rjmp	.+2      	; 0x1b8c <SendInt+0x74>
    1b8a:	98 2e       	mov	r9, r24
    1b8c:	c7 01       	movw	r24, r14
    1b8e:	b6 01       	movw	r22, r12
    1b90:	a3 01       	movw	r20, r6
    1b92:	92 01       	movw	r18, r4
    1b94:	0e 94 b3 11 	call	0x2366	; 0x2366 <__divmodsi4>
    1b98:	20 e3       	ldi	r18, 0x30	; 48
    1b9a:	26 0f       	add	r18, r22
    1b9c:	d5 01       	movw	r26, r10
    1b9e:	2d 93       	st	X+, r18
    1ba0:	5d 01       	movw	r10, r26
    1ba2:	a7 01       	movw	r20, r14
    1ba4:	96 01       	movw	r18, r12
    1ba6:	26 1b       	sub	r18, r22
    1ba8:	37 0b       	sbc	r19, r23
    1baa:	48 0b       	sbc	r20, r24
    1bac:	59 0b       	sbc	r21, r25
    1bae:	ca 01       	movw	r24, r20
    1bb0:	b9 01       	movw	r22, r18
    1bb2:	a3 01       	movw	r20, r6
    1bb4:	92 01       	movw	r18, r4
    1bb6:	0e 94 b3 11 	call	0x2366	; 0x2366 <__divmodsi4>
    1bba:	69 01       	movw	r12, r18
    1bbc:	7a 01       	movw	r14, r20
    1bbe:	23 2b       	or	r18, r19
    1bc0:	24 2b       	or	r18, r20
    1bc2:	25 2b       	or	r18, r21
    1bc4:	21 f0       	breq	.+8      	; 0x1bce <SendInt+0xb6>
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	89 0d       	add	r24, r9
    1bca:	84 31       	cpi	r24, 0x14	; 20
    1bcc:	f1 f6       	brne	.-68     	; 0x1b8a <SendInt+0x72>
    1bce:	21 e0       	ldi	r18, 0x01	; 1
    1bd0:	29 0d       	add	r18, r9
    1bd2:	88 20       	and	r8, r8
    1bd4:	54 f4       	brge	.+20     	; 0x1bea <SendInt+0xd2>
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc <SendInt+0xc4>
    1bd8:	21 e0       	ldi	r18, 0x01	; 1
    1bda:	91 2c       	mov	r9, r1
    1bdc:	fe 01       	movw	r30, r28
    1bde:	e2 0f       	add	r30, r18
    1be0:	f1 1d       	adc	r31, r1
    1be2:	8d e2       	ldi	r24, 0x2D	; 45
    1be4:	85 8b       	std	Z+21, r24	; 0x15
    1be6:	22 e0       	ldi	r18, 0x02	; 2
    1be8:	29 0d       	add	r18, r9
    1bea:	21 11       	cpse	r18, r1
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <SendInt+0xda>
    1bee:	0f c0       	rjmp	.+30     	; 0x1c0e <SendInt+0xf6>
    1bf0:	21 e0       	ldi	r18, 0x01	; 1
    1bf2:	e5 e1       	ldi	r30, 0x15	; 21
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	ec 0f       	add	r30, r28
    1bf8:	fd 1f       	adc	r31, r29
    1bfa:	e2 0f       	add	r30, r18
    1bfc:	f1 1d       	adc	r31, r1
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	92 91       	ld	r25, -Z
    1c02:	d8 01       	movw	r26, r16
    1c04:	9d 93       	st	X+, r25
    1c06:	8d 01       	movw	r16, r26
    1c08:	8f 5f       	subi	r24, 0xFF	; 255
    1c0a:	82 17       	cp	r24, r18
    1c0c:	c8 f3       	brcs	.-14     	; 0x1c00 <SendInt+0xe8>
    1c0e:	e1 e0       	ldi	r30, 0x01	; 1
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	ec 0f       	add	r30, r28
    1c14:	fd 1f       	adc	r31, r29
    1c16:	e2 0f       	add	r30, r18
    1c18:	f1 1d       	adc	r31, r1
    1c1a:	10 82       	st	Z, r1
    1c1c:	ce 01       	movw	r24, r28
    1c1e:	01 96       	adiw	r24, 0x01	; 1
    1c20:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SendString>
    1c24:	53 c0       	rjmp	.+166    	; 0x1ccc <SendInt+0x1b4>
    1c26:	0f 2e       	mov	r0, r31
    1c28:	fa e0       	ldi	r31, 0x0A	; 10
    1c2a:	8f 2e       	mov	r8, r31
    1c2c:	91 2c       	mov	r9, r1
    1c2e:	a1 2c       	mov	r10, r1
    1c30:	b1 2c       	mov	r11, r1
    1c32:	f0 2d       	mov	r31, r0
    1c34:	c7 01       	movw	r24, r14
    1c36:	b6 01       	movw	r22, r12
    1c38:	a5 01       	movw	r20, r10
    1c3a:	94 01       	movw	r18, r8
    1c3c:	0e 94 b3 11 	call	0x2366	; 0x2366 <__divmodsi4>
    1c40:	20 e3       	ldi	r18, 0x30	; 48
    1c42:	26 0f       	add	r18, r22
    1c44:	2d 8b       	std	Y+21, r18	; 0x15
    1c46:	a7 01       	movw	r20, r14
    1c48:	96 01       	movw	r18, r12
    1c4a:	26 1b       	sub	r18, r22
    1c4c:	37 0b       	sbc	r19, r23
    1c4e:	48 0b       	sbc	r20, r24
    1c50:	59 0b       	sbc	r21, r25
    1c52:	ca 01       	movw	r24, r20
    1c54:	b9 01       	movw	r22, r18
    1c56:	a5 01       	movw	r20, r10
    1c58:	94 01       	movw	r18, r8
    1c5a:	0e 94 b3 11 	call	0x2366	; 0x2366 <__divmodsi4>
    1c5e:	69 01       	movw	r12, r18
    1c60:	7a 01       	movw	r14, r20
    1c62:	23 2b       	or	r18, r19
    1c64:	24 2b       	or	r18, r20
    1c66:	25 2b       	or	r18, r21
    1c68:	19 f2       	breq	.-122    	; 0x1bf0 <SendInt+0xd8>
    1c6a:	88 24       	eor	r8, r8
    1c6c:	83 94       	inc	r8
    1c6e:	7f cf       	rjmp	.-258    	; 0x1b6e <SendInt+0x56>
    1c70:	f0 94       	com	r15
    1c72:	e0 94       	com	r14
    1c74:	d0 94       	com	r13
    1c76:	c0 94       	com	r12
    1c78:	c1 1c       	adc	r12, r1
    1c7a:	d1 1c       	adc	r13, r1
    1c7c:	e1 1c       	adc	r14, r1
    1c7e:	f1 1c       	adc	r15, r1
    1c80:	0f 2e       	mov	r0, r31
    1c82:	fa e0       	ldi	r31, 0x0A	; 10
    1c84:	8f 2e       	mov	r8, r31
    1c86:	91 2c       	mov	r9, r1
    1c88:	a1 2c       	mov	r10, r1
    1c8a:	b1 2c       	mov	r11, r1
    1c8c:	f0 2d       	mov	r31, r0
    1c8e:	c7 01       	movw	r24, r14
    1c90:	b6 01       	movw	r22, r12
    1c92:	a5 01       	movw	r20, r10
    1c94:	94 01       	movw	r18, r8
    1c96:	0e 94 b3 11 	call	0x2366	; 0x2366 <__divmodsi4>
    1c9a:	20 e3       	ldi	r18, 0x30	; 48
    1c9c:	26 0f       	add	r18, r22
    1c9e:	2d 8b       	std	Y+21, r18	; 0x15
    1ca0:	a7 01       	movw	r20, r14
    1ca2:	96 01       	movw	r18, r12
    1ca4:	26 1b       	sub	r18, r22
    1ca6:	37 0b       	sbc	r19, r23
    1ca8:	48 0b       	sbc	r20, r24
    1caa:	59 0b       	sbc	r21, r25
    1cac:	ca 01       	movw	r24, r20
    1cae:	b9 01       	movw	r22, r18
    1cb0:	a5 01       	movw	r20, r10
    1cb2:	94 01       	movw	r18, r8
    1cb4:	0e 94 b3 11 	call	0x2366	; 0x2366 <__divmodsi4>
    1cb8:	69 01       	movw	r12, r18
    1cba:	7a 01       	movw	r14, r20
    1cbc:	23 2b       	or	r18, r19
    1cbe:	24 2b       	or	r18, r20
    1cc0:	25 2b       	or	r18, r21
    1cc2:	09 f4       	brne	.+2      	; 0x1cc6 <SendInt+0x1ae>
    1cc4:	89 cf       	rjmp	.-238    	; 0x1bd8 <SendInt+0xc0>
    1cc6:	88 24       	eor	r8, r8
    1cc8:	8a 94       	dec	r8
    1cca:	51 cf       	rjmp	.-350    	; 0x1b6e <SendInt+0x56>
    1ccc:	a8 96       	adiw	r28, 0x28	; 40
    1cce:	0f b6       	in	r0, 0x3f	; 63
    1cd0:	f8 94       	cli
    1cd2:	de bf       	out	0x3e, r29	; 62
    1cd4:	0f be       	out	0x3f, r0	; 63
    1cd6:	cd bf       	out	0x3d, r28	; 61
    1cd8:	df 91       	pop	r29
    1cda:	cf 91       	pop	r28
    1cdc:	1f 91       	pop	r17
    1cde:	0f 91       	pop	r16
    1ce0:	ff 90       	pop	r15
    1ce2:	ef 90       	pop	r14
    1ce4:	df 90       	pop	r13
    1ce6:	cf 90       	pop	r12
    1ce8:	bf 90       	pop	r11
    1cea:	af 90       	pop	r10
    1cec:	9f 90       	pop	r9
    1cee:	8f 90       	pop	r8
    1cf0:	7f 90       	pop	r7
    1cf2:	6f 90       	pop	r6
    1cf4:	5f 90       	pop	r5
    1cf6:	4f 90       	pop	r4
    1cf8:	08 95       	ret

00001cfa <SendStringInt>:
    1cfa:	cf 92       	push	r12
    1cfc:	df 92       	push	r13
    1cfe:	ef 92       	push	r14
    1d00:	ff 92       	push	r15
    1d02:	6a 01       	movw	r12, r20
    1d04:	7b 01       	movw	r14, r22
    1d06:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SendString>
    1d0a:	c7 01       	movw	r24, r14
    1d0c:	b6 01       	movw	r22, r12
    1d0e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <SendInt>
    1d12:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <SendEnter>
    1d16:	ff 90       	pop	r15
    1d18:	ef 90       	pop	r14
    1d1a:	df 90       	pop	r13
    1d1c:	cf 90       	pop	r12
    1d1e:	08 95       	ret

00001d20 <CheckRxBuffor>:
		string[pozycja] = 0;
		SendString(string);
}

void CheckRxBuffor(void)
{
    1d20:	cf 93       	push	r28
	if (RxHead != RxTail)	//Check if buffer is not empty
    1d22:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <RxHead>
    1d26:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <RxTail>
    1d2a:	98 17       	cp	r25, r24
    1d2c:	29 f1       	breq	.+74     	; 0x1d78 <CheckRxBuffor+0x58>
	{
		uint8_t i = RxTail;
    1d2e:	c0 91 63 01 	lds	r28, 0x0163	; 0x800163 <RxTail>

		while(i != RxHead)	//search for end of line
    1d32:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <RxHead>
    1d36:	c8 17       	cp	r28, r24
    1d38:	f9 f0       	breq	.+62     	; 0x1d78 <CheckRxBuffor+0x58>
		{
			//If end of line process Command
			
			if (RxBuffor[i] == 13)
    1d3a:	ec 2f       	mov	r30, r28
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	e6 5e       	subi	r30, 0xE6	; 230
    1d40:	fc 4f       	sbci	r31, 0xFC	; 252
    1d42:	80 81       	ld	r24, Z
    1d44:	8d 30       	cpi	r24, 0x0D	; 13
    1d46:	91 f4       	brne	.+36     	; 0x1d6c <CheckRxBuffor+0x4c>
    1d48:	07 c0       	rjmp	.+14     	; 0x1d58 <CheckRxBuffor+0x38>
    1d4a:	ec 2f       	mov	r30, r28
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	e6 5e       	subi	r30, 0xE6	; 230
    1d50:	fc 4f       	sbci	r31, 0xFC	; 252
    1d52:	80 81       	ld	r24, Z
    1d54:	8d 30       	cpi	r24, 0x0D	; 13
    1d56:	51 f4       	brne	.+20     	; 0x1d6c <CheckRxBuffor+0x4c>
			{
				ProcessString(RxTail, i);
    1d58:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <RxTail>
    1d5c:	6c 2f       	mov	r22, r28
    1d5e:	0e 94 1e 0a 	call	0x143c	; 0x143c <ProcessString>
				i = (i+1) & RX_SIZE_BIN;
    1d62:	cf 5f       	subi	r28, 0xFF	; 255
    1d64:	cf 71       	andi	r28, 0x1F	; 31
				RxTail = i;
    1d66:	c0 93 63 01 	sts	0x0163, r28	; 0x800163 <RxTail>
				break;
    1d6a:	06 c0       	rjmp	.+12     	; 0x1d78 <CheckRxBuffor+0x58>
			}

			i = (i+1) & RX_SIZE_BIN;
    1d6c:	cf 5f       	subi	r28, 0xFF	; 255
    1d6e:	cf 71       	andi	r28, 0x1F	; 31
{
	if (RxHead != RxTail)	//Check if buffer is not empty
	{
		uint8_t i = RxTail;

		while(i != RxHead)	//search for end of line
    1d70:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <RxHead>
    1d74:	8c 13       	cpse	r24, r28
    1d76:	e9 cf       	rjmp	.-46     	; 0x1d4a <CheckRxBuffor+0x2a>
			}

			i = (i+1) & RX_SIZE_BIN;
		}
	}
    1d78:	cf 91       	pop	r28
    1d7a:	08 95       	ret

00001d7c <InitUartCOM_HW>:


	UBRR0 = 9;	//100k at 16MHz clock

	//Init COM Uart
	UCSR0B = (1<<RXEN0) | (1<<RXCIE0) |
    1d7c:	83 e0       	ldi	r24, 0x03	; 3
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1d84:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1d88:	88 ed       	ldi	r24, 0xD8	; 216
    1d8a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1d8e:	08 95       	ret

00001d90 <PutCharToBuffor>:
}


void PutCharToBuffor(uint8_t x)
{
	if ((UCSR0A & (1<<UDRE0)) && (TxHead == TxTail))	//check if can put next char
    1d90:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1d94:	95 ff       	sbrs	r25, 5
    1d96:	09 c0       	rjmp	.+18     	; 0x1daa <PutCharToBuffor+0x1a>
    1d98:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <TxHead>
    1d9c:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <TxTail>
    1da0:	29 13       	cpse	r18, r25
    1da2:	03 c0       	rjmp	.+6      	; 0x1daa <PutCharToBuffor+0x1a>
	{
		UDR0 = x;		
    1da4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1da8:	08 95       	ret
	}
	else	//if not ready put char to sending queue
	{
		TxBuffor[TxHead] = x;
    1daa:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <TxHead>
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	e6 5c       	subi	r30, 0xC6	; 198
    1db2:	fc 4f       	sbci	r31, 0xFC	; 252
    1db4:	80 83       	st	Z, r24
		TxHead = (TxHead+1) & TX_SIZE_BIN;
    1db6:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <TxHead>
    1dba:	8f 5f       	subi	r24, 0xFF	; 255
    1dbc:	8f 77       	andi	r24, 0x7F	; 127
    1dbe:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <TxHead>
    1dc2:	08 95       	ret

00001dc4 <__vector_20>:
	}
}


ISR (USART0_TX_vect)
{
    1dc4:	1f 92       	push	r1
    1dc6:	0f 92       	push	r0
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	0f 92       	push	r0
    1dcc:	11 24       	eor	r1, r1
    1dce:	8f 93       	push	r24
    1dd0:	9f 93       	push	r25
    1dd2:	ef 93       	push	r30
    1dd4:	ff 93       	push	r31
	if (TxTail == TxHead)
    1dd6:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <TxTail>
    1dda:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <TxHead>
    1dde:	98 13       	cpse	r25, r24
    1de0:	03 c0       	rjmp	.+6      	; 0x1de8 <__vector_20+0x24>
	{
		uint8_t x = UDR0;
    1de2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1de6:	0e c0       	rjmp	.+28     	; 0x1e04 <__vector_20+0x40>
	}

	else
	{
		UDR0 = TxBuffor[TxTail];
    1de8:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <TxTail>
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	e6 5c       	subi	r30, 0xC6	; 198
    1df0:	fc 4f       	sbci	r31, 0xFC	; 252
    1df2:	80 81       	ld	r24, Z
    1df4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		TxTail = (TxTail+1) & TX_SIZE_BIN;
    1df8:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <TxTail>
    1dfc:	8f 5f       	subi	r24, 0xFF	; 255
    1dfe:	8f 77       	andi	r24, 0x7F	; 127
    1e00:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <TxTail>
	}
}
    1e04:	ff 91       	pop	r31
    1e06:	ef 91       	pop	r30
    1e08:	9f 91       	pop	r25
    1e0a:	8f 91       	pop	r24
    1e0c:	0f 90       	pop	r0
    1e0e:	0f be       	out	0x3f, r0	; 63
    1e10:	0f 90       	pop	r0
    1e12:	1f 90       	pop	r1
    1e14:	18 95       	reti

00001e16 <__vector_18>:

ISR (USART0_RX_vect)	//COM Rx
{
    1e16:	1f 92       	push	r1
    1e18:	0f 92       	push	r0
    1e1a:	0f b6       	in	r0, 0x3f	; 63
    1e1c:	0f 92       	push	r0
    1e1e:	11 24       	eor	r1, r1
    1e20:	2f 93       	push	r18
    1e22:	3f 93       	push	r19
    1e24:	4f 93       	push	r20
    1e26:	5f 93       	push	r21
    1e28:	6f 93       	push	r22
    1e2a:	7f 93       	push	r23
    1e2c:	8f 93       	push	r24
    1e2e:	9f 93       	push	r25
    1e30:	af 93       	push	r26
    1e32:	bf 93       	push	r27
    1e34:	ef 93       	push	r30
    1e36:	ff 93       	push	r31
// 	uint8_t x = UDR0;
// 	ReceiveChar(x);
// 	PutCharToBuffor(x);
	ReceiveChar(UDR0);
    1e38:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1e3c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <ReceiveChar>
    1e40:	ff 91       	pop	r31
    1e42:	ef 91       	pop	r30
    1e44:	bf 91       	pop	r27
    1e46:	af 91       	pop	r26
    1e48:	9f 91       	pop	r25
    1e4a:	8f 91       	pop	r24
    1e4c:	7f 91       	pop	r23
    1e4e:	6f 91       	pop	r22
    1e50:	5f 91       	pop	r21
    1e52:	4f 91       	pop	r20
    1e54:	3f 91       	pop	r19
    1e56:	2f 91       	pop	r18
    1e58:	0f 90       	pop	r0
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	0f 90       	pop	r0
    1e5e:	1f 90       	pop	r1
    1e60:	18 95       	reti

00001e62 <__subsf3>:
    1e62:	50 58       	subi	r21, 0x80	; 128

00001e64 <__addsf3>:
    1e64:	bb 27       	eor	r27, r27
    1e66:	aa 27       	eor	r26, r26
    1e68:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__addsf3x>
    1e6c:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__fp_round>
    1e70:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__fp_pscA>
    1e74:	38 f0       	brcs	.+14     	; 0x1e84 <__addsf3+0x20>
    1e76:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__fp_pscB>
    1e7a:	20 f0       	brcs	.+8      	; 0x1e84 <__addsf3+0x20>
    1e7c:	39 f4       	brne	.+14     	; 0x1e8c <__addsf3+0x28>
    1e7e:	9f 3f       	cpi	r25, 0xFF	; 255
    1e80:	19 f4       	brne	.+6      	; 0x1e88 <__addsf3+0x24>
    1e82:	26 f4       	brtc	.+8      	; 0x1e8c <__addsf3+0x28>
    1e84:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__fp_nan>
    1e88:	0e f4       	brtc	.+2      	; 0x1e8c <__addsf3+0x28>
    1e8a:	e0 95       	com	r30
    1e8c:	e7 fb       	bst	r30, 7
    1e8e:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__fp_inf>

00001e92 <__addsf3x>:
    1e92:	e9 2f       	mov	r30, r25
    1e94:	0e 94 01 11 	call	0x2202	; 0x2202 <__fp_split3>
    1e98:	58 f3       	brcs	.-42     	; 0x1e70 <__addsf3+0xc>
    1e9a:	ba 17       	cp	r27, r26
    1e9c:	62 07       	cpc	r22, r18
    1e9e:	73 07       	cpc	r23, r19
    1ea0:	84 07       	cpc	r24, r20
    1ea2:	95 07       	cpc	r25, r21
    1ea4:	20 f0       	brcs	.+8      	; 0x1eae <__addsf3x+0x1c>
    1ea6:	79 f4       	brne	.+30     	; 0x1ec6 <__addsf3x+0x34>
    1ea8:	a6 f5       	brtc	.+104    	; 0x1f12 <__addsf3x+0x80>
    1eaa:	0c 94 23 11 	jmp	0x2246	; 0x2246 <__fp_zero>
    1eae:	0e f4       	brtc	.+2      	; 0x1eb2 <__addsf3x+0x20>
    1eb0:	e0 95       	com	r30
    1eb2:	0b 2e       	mov	r0, r27
    1eb4:	ba 2f       	mov	r27, r26
    1eb6:	a0 2d       	mov	r26, r0
    1eb8:	0b 01       	movw	r0, r22
    1eba:	b9 01       	movw	r22, r18
    1ebc:	90 01       	movw	r18, r0
    1ebe:	0c 01       	movw	r0, r24
    1ec0:	ca 01       	movw	r24, r20
    1ec2:	a0 01       	movw	r20, r0
    1ec4:	11 24       	eor	r1, r1
    1ec6:	ff 27       	eor	r31, r31
    1ec8:	59 1b       	sub	r21, r25
    1eca:	99 f0       	breq	.+38     	; 0x1ef2 <__addsf3x+0x60>
    1ecc:	59 3f       	cpi	r21, 0xF9	; 249
    1ece:	50 f4       	brcc	.+20     	; 0x1ee4 <__addsf3x+0x52>
    1ed0:	50 3e       	cpi	r21, 0xE0	; 224
    1ed2:	68 f1       	brcs	.+90     	; 0x1f2e <__addsf3x+0x9c>
    1ed4:	1a 16       	cp	r1, r26
    1ed6:	f0 40       	sbci	r31, 0x00	; 0
    1ed8:	a2 2f       	mov	r26, r18
    1eda:	23 2f       	mov	r18, r19
    1edc:	34 2f       	mov	r19, r20
    1ede:	44 27       	eor	r20, r20
    1ee0:	58 5f       	subi	r21, 0xF8	; 248
    1ee2:	f3 cf       	rjmp	.-26     	; 0x1eca <__addsf3x+0x38>
    1ee4:	46 95       	lsr	r20
    1ee6:	37 95       	ror	r19
    1ee8:	27 95       	ror	r18
    1eea:	a7 95       	ror	r26
    1eec:	f0 40       	sbci	r31, 0x00	; 0
    1eee:	53 95       	inc	r21
    1ef0:	c9 f7       	brne	.-14     	; 0x1ee4 <__addsf3x+0x52>
    1ef2:	7e f4       	brtc	.+30     	; 0x1f12 <__addsf3x+0x80>
    1ef4:	1f 16       	cp	r1, r31
    1ef6:	ba 0b       	sbc	r27, r26
    1ef8:	62 0b       	sbc	r22, r18
    1efa:	73 0b       	sbc	r23, r19
    1efc:	84 0b       	sbc	r24, r20
    1efe:	ba f0       	brmi	.+46     	; 0x1f2e <__addsf3x+0x9c>
    1f00:	91 50       	subi	r25, 0x01	; 1
    1f02:	a1 f0       	breq	.+40     	; 0x1f2c <__addsf3x+0x9a>
    1f04:	ff 0f       	add	r31, r31
    1f06:	bb 1f       	adc	r27, r27
    1f08:	66 1f       	adc	r22, r22
    1f0a:	77 1f       	adc	r23, r23
    1f0c:	88 1f       	adc	r24, r24
    1f0e:	c2 f7       	brpl	.-16     	; 0x1f00 <__addsf3x+0x6e>
    1f10:	0e c0       	rjmp	.+28     	; 0x1f2e <__addsf3x+0x9c>
    1f12:	ba 0f       	add	r27, r26
    1f14:	62 1f       	adc	r22, r18
    1f16:	73 1f       	adc	r23, r19
    1f18:	84 1f       	adc	r24, r20
    1f1a:	48 f4       	brcc	.+18     	; 0x1f2e <__addsf3x+0x9c>
    1f1c:	87 95       	ror	r24
    1f1e:	77 95       	ror	r23
    1f20:	67 95       	ror	r22
    1f22:	b7 95       	ror	r27
    1f24:	f7 95       	ror	r31
    1f26:	9e 3f       	cpi	r25, 0xFE	; 254
    1f28:	08 f0       	brcs	.+2      	; 0x1f2c <__addsf3x+0x9a>
    1f2a:	b0 cf       	rjmp	.-160    	; 0x1e8c <__addsf3+0x28>
    1f2c:	93 95       	inc	r25
    1f2e:	88 0f       	add	r24, r24
    1f30:	08 f0       	brcs	.+2      	; 0x1f34 <__addsf3x+0xa2>
    1f32:	99 27       	eor	r25, r25
    1f34:	ee 0f       	add	r30, r30
    1f36:	97 95       	ror	r25
    1f38:	87 95       	ror	r24
    1f3a:	08 95       	ret

00001f3c <atan>:
    1f3c:	df 93       	push	r29
    1f3e:	dd 27       	eor	r29, r29
    1f40:	b9 2f       	mov	r27, r25
    1f42:	bf 77       	andi	r27, 0x7F	; 127
    1f44:	40 e8       	ldi	r20, 0x80	; 128
    1f46:	5f e3       	ldi	r21, 0x3F	; 63
    1f48:	16 16       	cp	r1, r22
    1f4a:	17 06       	cpc	r1, r23
    1f4c:	48 07       	cpc	r20, r24
    1f4e:	5b 07       	cpc	r21, r27
    1f50:	18 f4       	brcc	.+6      	; 0x1f58 <atan+0x1c>
    1f52:	d9 2f       	mov	r29, r25
    1f54:	0e 94 2a 11 	call	0x2254	; 0x2254 <inverse>
    1f58:	9f 93       	push	r25
    1f5a:	8f 93       	push	r24
    1f5c:	7f 93       	push	r23
    1f5e:	6f 93       	push	r22
    1f60:	0e 94 9f 11 	call	0x233e	; 0x233e <square>
    1f64:	e6 ec       	ldi	r30, 0xC6	; 198
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	0e 94 bb 10 	call	0x2176	; 0x2176 <__fp_powser>
    1f6c:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__fp_round>
    1f70:	2f 91       	pop	r18
    1f72:	3f 91       	pop	r19
    1f74:	4f 91       	pop	r20
    1f76:	5f 91       	pop	r21
    1f78:	0e 94 45 11 	call	0x228a	; 0x228a <__mulsf3x>
    1f7c:	dd 23       	and	r29, r29
    1f7e:	51 f0       	breq	.+20     	; 0x1f94 <atan+0x58>
    1f80:	90 58       	subi	r25, 0x80	; 128
    1f82:	a2 ea       	ldi	r26, 0xA2	; 162
    1f84:	2a ed       	ldi	r18, 0xDA	; 218
    1f86:	3f e0       	ldi	r19, 0x0F	; 15
    1f88:	49 ec       	ldi	r20, 0xC9	; 201
    1f8a:	5f e3       	ldi	r21, 0x3F	; 63
    1f8c:	d0 78       	andi	r29, 0x80	; 128
    1f8e:	5d 27       	eor	r21, r29
    1f90:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__addsf3x>
    1f94:	df 91       	pop	r29
    1f96:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__fp_round>

00001f9a <__divsf3>:
    1f9a:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__divsf3x>
    1f9e:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__fp_round>
    1fa2:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__fp_pscB>
    1fa6:	58 f0       	brcs	.+22     	; 0x1fbe <__divsf3+0x24>
    1fa8:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__fp_pscA>
    1fac:	40 f0       	brcs	.+16     	; 0x1fbe <__divsf3+0x24>
    1fae:	29 f4       	brne	.+10     	; 0x1fba <__divsf3+0x20>
    1fb0:	5f 3f       	cpi	r21, 0xFF	; 255
    1fb2:	29 f0       	breq	.+10     	; 0x1fbe <__divsf3+0x24>
    1fb4:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__fp_inf>
    1fb8:	51 11       	cpse	r21, r1
    1fba:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__fp_szero>
    1fbe:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__fp_nan>

00001fc2 <__divsf3x>:
    1fc2:	0e 94 01 11 	call	0x2202	; 0x2202 <__fp_split3>
    1fc6:	68 f3       	brcs	.-38     	; 0x1fa2 <__divsf3+0x8>

00001fc8 <__divsf3_pse>:
    1fc8:	99 23       	and	r25, r25
    1fca:	b1 f3       	breq	.-20     	; 0x1fb8 <__divsf3+0x1e>
    1fcc:	55 23       	and	r21, r21
    1fce:	91 f3       	breq	.-28     	; 0x1fb4 <__divsf3+0x1a>
    1fd0:	95 1b       	sub	r25, r21
    1fd2:	55 0b       	sbc	r21, r21
    1fd4:	bb 27       	eor	r27, r27
    1fd6:	aa 27       	eor	r26, r26
    1fd8:	62 17       	cp	r22, r18
    1fda:	73 07       	cpc	r23, r19
    1fdc:	84 07       	cpc	r24, r20
    1fde:	38 f0       	brcs	.+14     	; 0x1fee <__divsf3_pse+0x26>
    1fe0:	9f 5f       	subi	r25, 0xFF	; 255
    1fe2:	5f 4f       	sbci	r21, 0xFF	; 255
    1fe4:	22 0f       	add	r18, r18
    1fe6:	33 1f       	adc	r19, r19
    1fe8:	44 1f       	adc	r20, r20
    1fea:	aa 1f       	adc	r26, r26
    1fec:	a9 f3       	breq	.-22     	; 0x1fd8 <__divsf3_pse+0x10>
    1fee:	35 d0       	rcall	.+106    	; 0x205a <__divsf3_pse+0x92>
    1ff0:	0e 2e       	mov	r0, r30
    1ff2:	3a f0       	brmi	.+14     	; 0x2002 <__divsf3_pse+0x3a>
    1ff4:	e0 e8       	ldi	r30, 0x80	; 128
    1ff6:	32 d0       	rcall	.+100    	; 0x205c <__divsf3_pse+0x94>
    1ff8:	91 50       	subi	r25, 0x01	; 1
    1ffa:	50 40       	sbci	r21, 0x00	; 0
    1ffc:	e6 95       	lsr	r30
    1ffe:	00 1c       	adc	r0, r0
    2000:	ca f7       	brpl	.-14     	; 0x1ff4 <__divsf3_pse+0x2c>
    2002:	2b d0       	rcall	.+86     	; 0x205a <__divsf3_pse+0x92>
    2004:	fe 2f       	mov	r31, r30
    2006:	29 d0       	rcall	.+82     	; 0x205a <__divsf3_pse+0x92>
    2008:	66 0f       	add	r22, r22
    200a:	77 1f       	adc	r23, r23
    200c:	88 1f       	adc	r24, r24
    200e:	bb 1f       	adc	r27, r27
    2010:	26 17       	cp	r18, r22
    2012:	37 07       	cpc	r19, r23
    2014:	48 07       	cpc	r20, r24
    2016:	ab 07       	cpc	r26, r27
    2018:	b0 e8       	ldi	r27, 0x80	; 128
    201a:	09 f0       	breq	.+2      	; 0x201e <__divsf3_pse+0x56>
    201c:	bb 0b       	sbc	r27, r27
    201e:	80 2d       	mov	r24, r0
    2020:	bf 01       	movw	r22, r30
    2022:	ff 27       	eor	r31, r31
    2024:	93 58       	subi	r25, 0x83	; 131
    2026:	5f 4f       	sbci	r21, 0xFF	; 255
    2028:	3a f0       	brmi	.+14     	; 0x2038 <__divsf3_pse+0x70>
    202a:	9e 3f       	cpi	r25, 0xFE	; 254
    202c:	51 05       	cpc	r21, r1
    202e:	78 f0       	brcs	.+30     	; 0x204e <__divsf3_pse+0x86>
    2030:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__fp_inf>
    2034:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__fp_szero>
    2038:	5f 3f       	cpi	r21, 0xFF	; 255
    203a:	e4 f3       	brlt	.-8      	; 0x2034 <__divsf3_pse+0x6c>
    203c:	98 3e       	cpi	r25, 0xE8	; 232
    203e:	d4 f3       	brlt	.-12     	; 0x2034 <__divsf3_pse+0x6c>
    2040:	86 95       	lsr	r24
    2042:	77 95       	ror	r23
    2044:	67 95       	ror	r22
    2046:	b7 95       	ror	r27
    2048:	f7 95       	ror	r31
    204a:	9f 5f       	subi	r25, 0xFF	; 255
    204c:	c9 f7       	brne	.-14     	; 0x2040 <__divsf3_pse+0x78>
    204e:	88 0f       	add	r24, r24
    2050:	91 1d       	adc	r25, r1
    2052:	96 95       	lsr	r25
    2054:	87 95       	ror	r24
    2056:	97 f9       	bld	r25, 7
    2058:	08 95       	ret
    205a:	e1 e0       	ldi	r30, 0x01	; 1
    205c:	66 0f       	add	r22, r22
    205e:	77 1f       	adc	r23, r23
    2060:	88 1f       	adc	r24, r24
    2062:	bb 1f       	adc	r27, r27
    2064:	62 17       	cp	r22, r18
    2066:	73 07       	cpc	r23, r19
    2068:	84 07       	cpc	r24, r20
    206a:	ba 07       	cpc	r27, r26
    206c:	20 f0       	brcs	.+8      	; 0x2076 <__divsf3_pse+0xae>
    206e:	62 1b       	sub	r22, r18
    2070:	73 0b       	sbc	r23, r19
    2072:	84 0b       	sbc	r24, r20
    2074:	ba 0b       	sbc	r27, r26
    2076:	ee 1f       	adc	r30, r30
    2078:	88 f7       	brcc	.-30     	; 0x205c <__divsf3_pse+0x94>
    207a:	e0 95       	com	r30
    207c:	08 95       	ret

0000207e <__fixsfsi>:
    207e:	0e 94 46 10 	call	0x208c	; 0x208c <__fixunssfsi>
    2082:	68 94       	set
    2084:	b1 11       	cpse	r27, r1
    2086:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__fp_szero>
    208a:	08 95       	ret

0000208c <__fixunssfsi>:
    208c:	0e 94 09 11 	call	0x2212	; 0x2212 <__fp_splitA>
    2090:	88 f0       	brcs	.+34     	; 0x20b4 <__fixunssfsi+0x28>
    2092:	9f 57       	subi	r25, 0x7F	; 127
    2094:	98 f0       	brcs	.+38     	; 0x20bc <__fixunssfsi+0x30>
    2096:	b9 2f       	mov	r27, r25
    2098:	99 27       	eor	r25, r25
    209a:	b7 51       	subi	r27, 0x17	; 23
    209c:	b0 f0       	brcs	.+44     	; 0x20ca <__fixunssfsi+0x3e>
    209e:	e1 f0       	breq	.+56     	; 0x20d8 <__fixunssfsi+0x4c>
    20a0:	66 0f       	add	r22, r22
    20a2:	77 1f       	adc	r23, r23
    20a4:	88 1f       	adc	r24, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	1a f0       	brmi	.+6      	; 0x20b0 <__fixunssfsi+0x24>
    20aa:	ba 95       	dec	r27
    20ac:	c9 f7       	brne	.-14     	; 0x20a0 <__fixunssfsi+0x14>
    20ae:	14 c0       	rjmp	.+40     	; 0x20d8 <__fixunssfsi+0x4c>
    20b0:	b1 30       	cpi	r27, 0x01	; 1
    20b2:	91 f0       	breq	.+36     	; 0x20d8 <__fixunssfsi+0x4c>
    20b4:	0e 94 23 11 	call	0x2246	; 0x2246 <__fp_zero>
    20b8:	b1 e0       	ldi	r27, 0x01	; 1
    20ba:	08 95       	ret
    20bc:	0c 94 23 11 	jmp	0x2246	; 0x2246 <__fp_zero>
    20c0:	67 2f       	mov	r22, r23
    20c2:	78 2f       	mov	r23, r24
    20c4:	88 27       	eor	r24, r24
    20c6:	b8 5f       	subi	r27, 0xF8	; 248
    20c8:	39 f0       	breq	.+14     	; 0x20d8 <__fixunssfsi+0x4c>
    20ca:	b9 3f       	cpi	r27, 0xF9	; 249
    20cc:	cc f3       	brlt	.-14     	; 0x20c0 <__fixunssfsi+0x34>
    20ce:	86 95       	lsr	r24
    20d0:	77 95       	ror	r23
    20d2:	67 95       	ror	r22
    20d4:	b3 95       	inc	r27
    20d6:	d9 f7       	brne	.-10     	; 0x20ce <__fixunssfsi+0x42>
    20d8:	3e f4       	brtc	.+14     	; 0x20e8 <__fixunssfsi+0x5c>
    20da:	90 95       	com	r25
    20dc:	80 95       	com	r24
    20de:	70 95       	com	r23
    20e0:	61 95       	neg	r22
    20e2:	7f 4f       	sbci	r23, 0xFF	; 255
    20e4:	8f 4f       	sbci	r24, 0xFF	; 255
    20e6:	9f 4f       	sbci	r25, 0xFF	; 255
    20e8:	08 95       	ret

000020ea <__floatunsisf>:
    20ea:	e8 94       	clt
    20ec:	09 c0       	rjmp	.+18     	; 0x2100 <__floatsisf+0x12>

000020ee <__floatsisf>:
    20ee:	97 fb       	bst	r25, 7
    20f0:	3e f4       	brtc	.+14     	; 0x2100 <__floatsisf+0x12>
    20f2:	90 95       	com	r25
    20f4:	80 95       	com	r24
    20f6:	70 95       	com	r23
    20f8:	61 95       	neg	r22
    20fa:	7f 4f       	sbci	r23, 0xFF	; 255
    20fc:	8f 4f       	sbci	r24, 0xFF	; 255
    20fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2100:	99 23       	and	r25, r25
    2102:	a9 f0       	breq	.+42     	; 0x212e <__floatsisf+0x40>
    2104:	f9 2f       	mov	r31, r25
    2106:	96 e9       	ldi	r25, 0x96	; 150
    2108:	bb 27       	eor	r27, r27
    210a:	93 95       	inc	r25
    210c:	f6 95       	lsr	r31
    210e:	87 95       	ror	r24
    2110:	77 95       	ror	r23
    2112:	67 95       	ror	r22
    2114:	b7 95       	ror	r27
    2116:	f1 11       	cpse	r31, r1
    2118:	f8 cf       	rjmp	.-16     	; 0x210a <__floatsisf+0x1c>
    211a:	fa f4       	brpl	.+62     	; 0x215a <__floatsisf+0x6c>
    211c:	bb 0f       	add	r27, r27
    211e:	11 f4       	brne	.+4      	; 0x2124 <__floatsisf+0x36>
    2120:	60 ff       	sbrs	r22, 0
    2122:	1b c0       	rjmp	.+54     	; 0x215a <__floatsisf+0x6c>
    2124:	6f 5f       	subi	r22, 0xFF	; 255
    2126:	7f 4f       	sbci	r23, 0xFF	; 255
    2128:	8f 4f       	sbci	r24, 0xFF	; 255
    212a:	9f 4f       	sbci	r25, 0xFF	; 255
    212c:	16 c0       	rjmp	.+44     	; 0x215a <__floatsisf+0x6c>
    212e:	88 23       	and	r24, r24
    2130:	11 f0       	breq	.+4      	; 0x2136 <__floatsisf+0x48>
    2132:	96 e9       	ldi	r25, 0x96	; 150
    2134:	11 c0       	rjmp	.+34     	; 0x2158 <__floatsisf+0x6a>
    2136:	77 23       	and	r23, r23
    2138:	21 f0       	breq	.+8      	; 0x2142 <__floatsisf+0x54>
    213a:	9e e8       	ldi	r25, 0x8E	; 142
    213c:	87 2f       	mov	r24, r23
    213e:	76 2f       	mov	r23, r22
    2140:	05 c0       	rjmp	.+10     	; 0x214c <__floatsisf+0x5e>
    2142:	66 23       	and	r22, r22
    2144:	71 f0       	breq	.+28     	; 0x2162 <__floatsisf+0x74>
    2146:	96 e8       	ldi	r25, 0x86	; 134
    2148:	86 2f       	mov	r24, r22
    214a:	70 e0       	ldi	r23, 0x00	; 0
    214c:	60 e0       	ldi	r22, 0x00	; 0
    214e:	2a f0       	brmi	.+10     	; 0x215a <__floatsisf+0x6c>
    2150:	9a 95       	dec	r25
    2152:	66 0f       	add	r22, r22
    2154:	77 1f       	adc	r23, r23
    2156:	88 1f       	adc	r24, r24
    2158:	da f7       	brpl	.-10     	; 0x2150 <__floatsisf+0x62>
    215a:	88 0f       	add	r24, r24
    215c:	96 95       	lsr	r25
    215e:	87 95       	ror	r24
    2160:	97 f9       	bld	r25, 7
    2162:	08 95       	ret

00002164 <__fp_inf>:
    2164:	97 f9       	bld	r25, 7
    2166:	9f 67       	ori	r25, 0x7F	; 127
    2168:	80 e8       	ldi	r24, 0x80	; 128
    216a:	70 e0       	ldi	r23, 0x00	; 0
    216c:	60 e0       	ldi	r22, 0x00	; 0
    216e:	08 95       	ret

00002170 <__fp_nan>:
    2170:	9f ef       	ldi	r25, 0xFF	; 255
    2172:	80 ec       	ldi	r24, 0xC0	; 192
    2174:	08 95       	ret

00002176 <__fp_powser>:
    2176:	df 93       	push	r29
    2178:	cf 93       	push	r28
    217a:	1f 93       	push	r17
    217c:	0f 93       	push	r16
    217e:	ff 92       	push	r15
    2180:	ef 92       	push	r14
    2182:	df 92       	push	r13
    2184:	7b 01       	movw	r14, r22
    2186:	8c 01       	movw	r16, r24
    2188:	68 94       	set
    218a:	06 c0       	rjmp	.+12     	; 0x2198 <__fp_powser+0x22>
    218c:	da 2e       	mov	r13, r26
    218e:	ef 01       	movw	r28, r30
    2190:	0e 94 45 11 	call	0x228a	; 0x228a <__mulsf3x>
    2194:	fe 01       	movw	r30, r28
    2196:	e8 94       	clt
    2198:	a5 91       	lpm	r26, Z+
    219a:	25 91       	lpm	r18, Z+
    219c:	35 91       	lpm	r19, Z+
    219e:	45 91       	lpm	r20, Z+
    21a0:	55 91       	lpm	r21, Z+
    21a2:	a6 f3       	brts	.-24     	; 0x218c <__fp_powser+0x16>
    21a4:	ef 01       	movw	r28, r30
    21a6:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__addsf3x>
    21aa:	fe 01       	movw	r30, r28
    21ac:	97 01       	movw	r18, r14
    21ae:	a8 01       	movw	r20, r16
    21b0:	da 94       	dec	r13
    21b2:	69 f7       	brne	.-38     	; 0x218e <__fp_powser+0x18>
    21b4:	df 90       	pop	r13
    21b6:	ef 90       	pop	r14
    21b8:	ff 90       	pop	r15
    21ba:	0f 91       	pop	r16
    21bc:	1f 91       	pop	r17
    21be:	cf 91       	pop	r28
    21c0:	df 91       	pop	r29
    21c2:	08 95       	ret

000021c4 <__fp_pscA>:
    21c4:	00 24       	eor	r0, r0
    21c6:	0a 94       	dec	r0
    21c8:	16 16       	cp	r1, r22
    21ca:	17 06       	cpc	r1, r23
    21cc:	18 06       	cpc	r1, r24
    21ce:	09 06       	cpc	r0, r25
    21d0:	08 95       	ret

000021d2 <__fp_pscB>:
    21d2:	00 24       	eor	r0, r0
    21d4:	0a 94       	dec	r0
    21d6:	12 16       	cp	r1, r18
    21d8:	13 06       	cpc	r1, r19
    21da:	14 06       	cpc	r1, r20
    21dc:	05 06       	cpc	r0, r21
    21de:	08 95       	ret

000021e0 <__fp_round>:
    21e0:	09 2e       	mov	r0, r25
    21e2:	03 94       	inc	r0
    21e4:	00 0c       	add	r0, r0
    21e6:	11 f4       	brne	.+4      	; 0x21ec <__fp_round+0xc>
    21e8:	88 23       	and	r24, r24
    21ea:	52 f0       	brmi	.+20     	; 0x2200 <__fp_round+0x20>
    21ec:	bb 0f       	add	r27, r27
    21ee:	40 f4       	brcc	.+16     	; 0x2200 <__fp_round+0x20>
    21f0:	bf 2b       	or	r27, r31
    21f2:	11 f4       	brne	.+4      	; 0x21f8 <__fp_round+0x18>
    21f4:	60 ff       	sbrs	r22, 0
    21f6:	04 c0       	rjmp	.+8      	; 0x2200 <__fp_round+0x20>
    21f8:	6f 5f       	subi	r22, 0xFF	; 255
    21fa:	7f 4f       	sbci	r23, 0xFF	; 255
    21fc:	8f 4f       	sbci	r24, 0xFF	; 255
    21fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2200:	08 95       	ret

00002202 <__fp_split3>:
    2202:	57 fd       	sbrc	r21, 7
    2204:	90 58       	subi	r25, 0x80	; 128
    2206:	44 0f       	add	r20, r20
    2208:	55 1f       	adc	r21, r21
    220a:	59 f0       	breq	.+22     	; 0x2222 <__fp_splitA+0x10>
    220c:	5f 3f       	cpi	r21, 0xFF	; 255
    220e:	71 f0       	breq	.+28     	; 0x222c <__fp_splitA+0x1a>
    2210:	47 95       	ror	r20

00002212 <__fp_splitA>:
    2212:	88 0f       	add	r24, r24
    2214:	97 fb       	bst	r25, 7
    2216:	99 1f       	adc	r25, r25
    2218:	61 f0       	breq	.+24     	; 0x2232 <__fp_splitA+0x20>
    221a:	9f 3f       	cpi	r25, 0xFF	; 255
    221c:	79 f0       	breq	.+30     	; 0x223c <__fp_splitA+0x2a>
    221e:	87 95       	ror	r24
    2220:	08 95       	ret
    2222:	12 16       	cp	r1, r18
    2224:	13 06       	cpc	r1, r19
    2226:	14 06       	cpc	r1, r20
    2228:	55 1f       	adc	r21, r21
    222a:	f2 cf       	rjmp	.-28     	; 0x2210 <__fp_split3+0xe>
    222c:	46 95       	lsr	r20
    222e:	f1 df       	rcall	.-30     	; 0x2212 <__fp_splitA>
    2230:	08 c0       	rjmp	.+16     	; 0x2242 <__fp_splitA+0x30>
    2232:	16 16       	cp	r1, r22
    2234:	17 06       	cpc	r1, r23
    2236:	18 06       	cpc	r1, r24
    2238:	99 1f       	adc	r25, r25
    223a:	f1 cf       	rjmp	.-30     	; 0x221e <__fp_splitA+0xc>
    223c:	86 95       	lsr	r24
    223e:	71 05       	cpc	r23, r1
    2240:	61 05       	cpc	r22, r1
    2242:	08 94       	sec
    2244:	08 95       	ret

00002246 <__fp_zero>:
    2246:	e8 94       	clt

00002248 <__fp_szero>:
    2248:	bb 27       	eor	r27, r27
    224a:	66 27       	eor	r22, r22
    224c:	77 27       	eor	r23, r23
    224e:	cb 01       	movw	r24, r22
    2250:	97 f9       	bld	r25, 7
    2252:	08 95       	ret

00002254 <inverse>:
    2254:	9b 01       	movw	r18, r22
    2256:	ac 01       	movw	r20, r24
    2258:	60 e0       	ldi	r22, 0x00	; 0
    225a:	70 e0       	ldi	r23, 0x00	; 0
    225c:	80 e8       	ldi	r24, 0x80	; 128
    225e:	9f e3       	ldi	r25, 0x3F	; 63
    2260:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__divsf3>

00002264 <__mulsf3>:
    2264:	0e 94 45 11 	call	0x228a	; 0x228a <__mulsf3x>
    2268:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__fp_round>
    226c:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__fp_pscA>
    2270:	38 f0       	brcs	.+14     	; 0x2280 <__mulsf3+0x1c>
    2272:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__fp_pscB>
    2276:	20 f0       	brcs	.+8      	; 0x2280 <__mulsf3+0x1c>
    2278:	95 23       	and	r25, r21
    227a:	11 f0       	breq	.+4      	; 0x2280 <__mulsf3+0x1c>
    227c:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__fp_inf>
    2280:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__fp_nan>
    2284:	11 24       	eor	r1, r1
    2286:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__fp_szero>

0000228a <__mulsf3x>:
    228a:	0e 94 01 11 	call	0x2202	; 0x2202 <__fp_split3>
    228e:	70 f3       	brcs	.-36     	; 0x226c <__mulsf3+0x8>

00002290 <__mulsf3_pse>:
    2290:	95 9f       	mul	r25, r21
    2292:	c1 f3       	breq	.-16     	; 0x2284 <__mulsf3+0x20>
    2294:	95 0f       	add	r25, r21
    2296:	50 e0       	ldi	r21, 0x00	; 0
    2298:	55 1f       	adc	r21, r21
    229a:	62 9f       	mul	r22, r18
    229c:	f0 01       	movw	r30, r0
    229e:	72 9f       	mul	r23, r18
    22a0:	bb 27       	eor	r27, r27
    22a2:	f0 0d       	add	r31, r0
    22a4:	b1 1d       	adc	r27, r1
    22a6:	63 9f       	mul	r22, r19
    22a8:	aa 27       	eor	r26, r26
    22aa:	f0 0d       	add	r31, r0
    22ac:	b1 1d       	adc	r27, r1
    22ae:	aa 1f       	adc	r26, r26
    22b0:	64 9f       	mul	r22, r20
    22b2:	66 27       	eor	r22, r22
    22b4:	b0 0d       	add	r27, r0
    22b6:	a1 1d       	adc	r26, r1
    22b8:	66 1f       	adc	r22, r22
    22ba:	82 9f       	mul	r24, r18
    22bc:	22 27       	eor	r18, r18
    22be:	b0 0d       	add	r27, r0
    22c0:	a1 1d       	adc	r26, r1
    22c2:	62 1f       	adc	r22, r18
    22c4:	73 9f       	mul	r23, r19
    22c6:	b0 0d       	add	r27, r0
    22c8:	a1 1d       	adc	r26, r1
    22ca:	62 1f       	adc	r22, r18
    22cc:	83 9f       	mul	r24, r19
    22ce:	a0 0d       	add	r26, r0
    22d0:	61 1d       	adc	r22, r1
    22d2:	22 1f       	adc	r18, r18
    22d4:	74 9f       	mul	r23, r20
    22d6:	33 27       	eor	r19, r19
    22d8:	a0 0d       	add	r26, r0
    22da:	61 1d       	adc	r22, r1
    22dc:	23 1f       	adc	r18, r19
    22de:	84 9f       	mul	r24, r20
    22e0:	60 0d       	add	r22, r0
    22e2:	21 1d       	adc	r18, r1
    22e4:	82 2f       	mov	r24, r18
    22e6:	76 2f       	mov	r23, r22
    22e8:	6a 2f       	mov	r22, r26
    22ea:	11 24       	eor	r1, r1
    22ec:	9f 57       	subi	r25, 0x7F	; 127
    22ee:	50 40       	sbci	r21, 0x00	; 0
    22f0:	9a f0       	brmi	.+38     	; 0x2318 <__mulsf3_pse+0x88>
    22f2:	f1 f0       	breq	.+60     	; 0x2330 <__mulsf3_pse+0xa0>
    22f4:	88 23       	and	r24, r24
    22f6:	4a f0       	brmi	.+18     	; 0x230a <__mulsf3_pse+0x7a>
    22f8:	ee 0f       	add	r30, r30
    22fa:	ff 1f       	adc	r31, r31
    22fc:	bb 1f       	adc	r27, r27
    22fe:	66 1f       	adc	r22, r22
    2300:	77 1f       	adc	r23, r23
    2302:	88 1f       	adc	r24, r24
    2304:	91 50       	subi	r25, 0x01	; 1
    2306:	50 40       	sbci	r21, 0x00	; 0
    2308:	a9 f7       	brne	.-22     	; 0x22f4 <__mulsf3_pse+0x64>
    230a:	9e 3f       	cpi	r25, 0xFE	; 254
    230c:	51 05       	cpc	r21, r1
    230e:	80 f0       	brcs	.+32     	; 0x2330 <__mulsf3_pse+0xa0>
    2310:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__fp_inf>
    2314:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__fp_szero>
    2318:	5f 3f       	cpi	r21, 0xFF	; 255
    231a:	e4 f3       	brlt	.-8      	; 0x2314 <__mulsf3_pse+0x84>
    231c:	98 3e       	cpi	r25, 0xE8	; 232
    231e:	d4 f3       	brlt	.-12     	; 0x2314 <__mulsf3_pse+0x84>
    2320:	86 95       	lsr	r24
    2322:	77 95       	ror	r23
    2324:	67 95       	ror	r22
    2326:	b7 95       	ror	r27
    2328:	f7 95       	ror	r31
    232a:	e7 95       	ror	r30
    232c:	9f 5f       	subi	r25, 0xFF	; 255
    232e:	c1 f7       	brne	.-16     	; 0x2320 <__mulsf3_pse+0x90>
    2330:	fe 2b       	or	r31, r30
    2332:	88 0f       	add	r24, r24
    2334:	91 1d       	adc	r25, r1
    2336:	96 95       	lsr	r25
    2338:	87 95       	ror	r24
    233a:	97 f9       	bld	r25, 7
    233c:	08 95       	ret

0000233e <square>:
    233e:	9b 01       	movw	r18, r22
    2340:	ac 01       	movw	r20, r24
    2342:	0c 94 32 11 	jmp	0x2264	; 0x2264 <__mulsf3>

00002346 <__mulsi3>:
    2346:	db 01       	movw	r26, r22
    2348:	8f 93       	push	r24
    234a:	9f 93       	push	r25
    234c:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__muluhisi3>
    2350:	bf 91       	pop	r27
    2352:	af 91       	pop	r26
    2354:	a2 9f       	mul	r26, r18
    2356:	80 0d       	add	r24, r0
    2358:	91 1d       	adc	r25, r1
    235a:	a3 9f       	mul	r26, r19
    235c:	90 0d       	add	r25, r0
    235e:	b2 9f       	mul	r27, r18
    2360:	90 0d       	add	r25, r0
    2362:	11 24       	eor	r1, r1
    2364:	08 95       	ret

00002366 <__divmodsi4>:
    2366:	05 2e       	mov	r0, r21
    2368:	97 fb       	bst	r25, 7
    236a:	1e f4       	brtc	.+6      	; 0x2372 <__divmodsi4+0xc>
    236c:	00 94       	com	r0
    236e:	0e 94 ca 11 	call	0x2394	; 0x2394 <__negsi2>
    2372:	57 fd       	sbrc	r21, 7
    2374:	07 d0       	rcall	.+14     	; 0x2384 <__divmodsi4_neg2>
    2376:	0e 94 09 12 	call	0x2412	; 0x2412 <__udivmodsi4>
    237a:	07 fc       	sbrc	r0, 7
    237c:	03 d0       	rcall	.+6      	; 0x2384 <__divmodsi4_neg2>
    237e:	4e f4       	brtc	.+18     	; 0x2392 <__divmodsi4_exit>
    2380:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__negsi2>

00002384 <__divmodsi4_neg2>:
    2384:	50 95       	com	r21
    2386:	40 95       	com	r20
    2388:	30 95       	com	r19
    238a:	21 95       	neg	r18
    238c:	3f 4f       	sbci	r19, 0xFF	; 255
    238e:	4f 4f       	sbci	r20, 0xFF	; 255
    2390:	5f 4f       	sbci	r21, 0xFF	; 255

00002392 <__divmodsi4_exit>:
    2392:	08 95       	ret

00002394 <__negsi2>:
    2394:	90 95       	com	r25
    2396:	80 95       	com	r24
    2398:	70 95       	com	r23
    239a:	61 95       	neg	r22
    239c:	7f 4f       	sbci	r23, 0xFF	; 255
    239e:	8f 4f       	sbci	r24, 0xFF	; 255
    23a0:	9f 4f       	sbci	r25, 0xFF	; 255
    23a2:	08 95       	ret

000023a4 <__tablejump2__>:
    23a4:	ee 0f       	add	r30, r30
    23a6:	ff 1f       	adc	r31, r31
    23a8:	05 90       	lpm	r0, Z+
    23aa:	f4 91       	lpm	r31, Z
    23ac:	e0 2d       	mov	r30, r0
    23ae:	09 94       	ijmp

000023b0 <__mulhisi3>:
    23b0:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__umulhisi3>
    23b4:	33 23       	and	r19, r19
    23b6:	12 f4       	brpl	.+4      	; 0x23bc <__mulhisi3+0xc>
    23b8:	8a 1b       	sub	r24, r26
    23ba:	9b 0b       	sbc	r25, r27
    23bc:	0c 94 f1 11 	jmp	0x23e2	; 0x23e2 <__usmulhisi3_tail>

000023c0 <__umulhisi3>:
    23c0:	a2 9f       	mul	r26, r18
    23c2:	b0 01       	movw	r22, r0
    23c4:	b3 9f       	mul	r27, r19
    23c6:	c0 01       	movw	r24, r0
    23c8:	a3 9f       	mul	r26, r19
    23ca:	70 0d       	add	r23, r0
    23cc:	81 1d       	adc	r24, r1
    23ce:	11 24       	eor	r1, r1
    23d0:	91 1d       	adc	r25, r1
    23d2:	b2 9f       	mul	r27, r18
    23d4:	70 0d       	add	r23, r0
    23d6:	81 1d       	adc	r24, r1
    23d8:	11 24       	eor	r1, r1
    23da:	91 1d       	adc	r25, r1
    23dc:	08 95       	ret

000023de <__usmulhisi3>:
    23de:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__umulhisi3>

000023e2 <__usmulhisi3_tail>:
    23e2:	b7 ff       	sbrs	r27, 7
    23e4:	08 95       	ret
    23e6:	82 1b       	sub	r24, r18
    23e8:	93 0b       	sbc	r25, r19
    23ea:	08 95       	ret

000023ec <__muluhisi3>:
    23ec:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__umulhisi3>
    23f0:	a5 9f       	mul	r26, r21
    23f2:	90 0d       	add	r25, r0
    23f4:	b4 9f       	mul	r27, r20
    23f6:	90 0d       	add	r25, r0
    23f8:	a4 9f       	mul	r26, r20
    23fa:	80 0d       	add	r24, r0
    23fc:	91 1d       	adc	r25, r1
    23fe:	11 24       	eor	r1, r1
    2400:	08 95       	ret

00002402 <__mulshisi3>:
    2402:	b7 ff       	sbrs	r27, 7
    2404:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <__muluhisi3>

00002408 <__mulohisi3>:
    2408:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__muluhisi3>
    240c:	82 1b       	sub	r24, r18
    240e:	93 0b       	sbc	r25, r19
    2410:	08 95       	ret

00002412 <__udivmodsi4>:
    2412:	a1 e2       	ldi	r26, 0x21	; 33
    2414:	1a 2e       	mov	r1, r26
    2416:	aa 1b       	sub	r26, r26
    2418:	bb 1b       	sub	r27, r27
    241a:	fd 01       	movw	r30, r26
    241c:	0d c0       	rjmp	.+26     	; 0x2438 <__udivmodsi4_ep>

0000241e <__udivmodsi4_loop>:
    241e:	aa 1f       	adc	r26, r26
    2420:	bb 1f       	adc	r27, r27
    2422:	ee 1f       	adc	r30, r30
    2424:	ff 1f       	adc	r31, r31
    2426:	a2 17       	cp	r26, r18
    2428:	b3 07       	cpc	r27, r19
    242a:	e4 07       	cpc	r30, r20
    242c:	f5 07       	cpc	r31, r21
    242e:	20 f0       	brcs	.+8      	; 0x2438 <__udivmodsi4_ep>
    2430:	a2 1b       	sub	r26, r18
    2432:	b3 0b       	sbc	r27, r19
    2434:	e4 0b       	sbc	r30, r20
    2436:	f5 0b       	sbc	r31, r21

00002438 <__udivmodsi4_ep>:
    2438:	66 1f       	adc	r22, r22
    243a:	77 1f       	adc	r23, r23
    243c:	88 1f       	adc	r24, r24
    243e:	99 1f       	adc	r25, r25
    2440:	1a 94       	dec	r1
    2442:	69 f7       	brne	.-38     	; 0x241e <__udivmodsi4_loop>
    2444:	60 95       	com	r22
    2446:	70 95       	com	r23
    2448:	80 95       	com	r24
    244a:	90 95       	com	r25
    244c:	9b 01       	movw	r18, r22
    244e:	ac 01       	movw	r20, r24
    2450:	bd 01       	movw	r22, r26
    2452:	cf 01       	movw	r24, r30
    2454:	08 95       	ret

00002456 <__strlen_P>:
    2456:	fc 01       	movw	r30, r24
    2458:	05 90       	lpm	r0, Z+
    245a:	00 20       	and	r0, r0
    245c:	e9 f7       	brne	.-6      	; 0x2458 <__strlen_P+0x2>
    245e:	80 95       	com	r24
    2460:	90 95       	com	r25
    2462:	8e 0f       	add	r24, r30
    2464:	9f 1f       	adc	r25, r31
    2466:	08 95       	ret

00002468 <strncasecmp_P>:
    2468:	fb 01       	movw	r30, r22
    246a:	dc 01       	movw	r26, r24
    246c:	41 50       	subi	r20, 0x01	; 1
    246e:	50 40       	sbci	r21, 0x00	; 0
    2470:	88 f0       	brcs	.+34     	; 0x2494 <strncasecmp_P+0x2c>
    2472:	8d 91       	ld	r24, X+
    2474:	81 34       	cpi	r24, 0x41	; 65
    2476:	1c f0       	brlt	.+6      	; 0x247e <strncasecmp_P+0x16>
    2478:	8b 35       	cpi	r24, 0x5B	; 91
    247a:	0c f4       	brge	.+2      	; 0x247e <strncasecmp_P+0x16>
    247c:	80 5e       	subi	r24, 0xE0	; 224
    247e:	65 91       	lpm	r22, Z+
    2480:	61 34       	cpi	r22, 0x41	; 65
    2482:	1c f0       	brlt	.+6      	; 0x248a <strncasecmp_P+0x22>
    2484:	6b 35       	cpi	r22, 0x5B	; 91
    2486:	0c f4       	brge	.+2      	; 0x248a <strncasecmp_P+0x22>
    2488:	60 5e       	subi	r22, 0xE0	; 224
    248a:	86 1b       	sub	r24, r22
    248c:	61 11       	cpse	r22, r1
    248e:	71 f3       	breq	.-36     	; 0x246c <strncasecmp_P+0x4>
    2490:	99 0b       	sbc	r25, r25
    2492:	08 95       	ret
    2494:	88 1b       	sub	r24, r24
    2496:	fc cf       	rjmp	.-8      	; 0x2490 <strncasecmp_P+0x28>

00002498 <strtok_r>:
    2498:	fa 01       	movw	r30, r20
    249a:	a1 91       	ld	r26, Z+
    249c:	b0 81       	ld	r27, Z
    249e:	00 97       	sbiw	r24, 0x00	; 0
    24a0:	19 f4       	brne	.+6      	; 0x24a8 <strtok_r+0x10>
    24a2:	10 97       	sbiw	r26, 0x00	; 0
    24a4:	e1 f0       	breq	.+56     	; 0x24de <strtok_r+0x46>
    24a6:	cd 01       	movw	r24, r26
    24a8:	dc 01       	movw	r26, r24
    24aa:	cd 01       	movw	r24, r26
    24ac:	0d 90       	ld	r0, X+
    24ae:	00 20       	and	r0, r0
    24b0:	11 f4       	brne	.+4      	; 0x24b6 <strtok_r+0x1e>
    24b2:	c0 01       	movw	r24, r0
    24b4:	13 c0       	rjmp	.+38     	; 0x24dc <strtok_r+0x44>
    24b6:	fb 01       	movw	r30, r22
    24b8:	21 91       	ld	r18, Z+
    24ba:	22 23       	and	r18, r18
    24bc:	19 f0       	breq	.+6      	; 0x24c4 <strtok_r+0x2c>
    24be:	20 15       	cp	r18, r0
    24c0:	d9 f7       	brne	.-10     	; 0x24b8 <strtok_r+0x20>
    24c2:	f3 cf       	rjmp	.-26     	; 0x24aa <strtok_r+0x12>
    24c4:	fb 01       	movw	r30, r22
    24c6:	21 91       	ld	r18, Z+
    24c8:	20 15       	cp	r18, r0
    24ca:	19 f4       	brne	.+6      	; 0x24d2 <strtok_r+0x3a>
    24cc:	1e 92       	st	-X, r1
    24ce:	11 96       	adiw	r26, 0x01	; 1
    24d0:	06 c0       	rjmp	.+12     	; 0x24de <strtok_r+0x46>
    24d2:	22 23       	and	r18, r18
    24d4:	c1 f7       	brne	.-16     	; 0x24c6 <strtok_r+0x2e>
    24d6:	0d 90       	ld	r0, X+
    24d8:	00 20       	and	r0, r0
    24da:	a1 f7       	brne	.-24     	; 0x24c4 <strtok_r+0x2c>
    24dc:	d0 01       	movw	r26, r0
    24de:	fa 01       	movw	r30, r20
    24e0:	a1 93       	st	Z+, r26
    24e2:	b0 83       	st	Z, r27
    24e4:	08 95       	ret

000024e6 <vfprintf>:
    24e6:	ab e0       	ldi	r26, 0x0B	; 11
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	e9 e7       	ldi	r30, 0x79	; 121
    24ec:	f2 e1       	ldi	r31, 0x12	; 18
    24ee:	0c 94 04 15 	jmp	0x2a08	; 0x2a08 <__prologue_saves__>
    24f2:	6c 01       	movw	r12, r24
    24f4:	7b 01       	movw	r14, r22
    24f6:	8a 01       	movw	r16, r20
    24f8:	fc 01       	movw	r30, r24
    24fa:	17 82       	std	Z+7, r1	; 0x07
    24fc:	16 82       	std	Z+6, r1	; 0x06
    24fe:	83 81       	ldd	r24, Z+3	; 0x03
    2500:	81 ff       	sbrs	r24, 1
    2502:	cc c1       	rjmp	.+920    	; 0x289c <vfprintf+0x3b6>
    2504:	ce 01       	movw	r24, r28
    2506:	01 96       	adiw	r24, 0x01	; 1
    2508:	3c 01       	movw	r6, r24
    250a:	f6 01       	movw	r30, r12
    250c:	93 81       	ldd	r25, Z+3	; 0x03
    250e:	f7 01       	movw	r30, r14
    2510:	93 fd       	sbrc	r25, 3
    2512:	85 91       	lpm	r24, Z+
    2514:	93 ff       	sbrs	r25, 3
    2516:	81 91       	ld	r24, Z+
    2518:	7f 01       	movw	r14, r30
    251a:	88 23       	and	r24, r24
    251c:	09 f4       	brne	.+2      	; 0x2520 <vfprintf+0x3a>
    251e:	ba c1       	rjmp	.+884    	; 0x2894 <vfprintf+0x3ae>
    2520:	85 32       	cpi	r24, 0x25	; 37
    2522:	39 f4       	brne	.+14     	; 0x2532 <vfprintf+0x4c>
    2524:	93 fd       	sbrc	r25, 3
    2526:	85 91       	lpm	r24, Z+
    2528:	93 ff       	sbrs	r25, 3
    252a:	81 91       	ld	r24, Z+
    252c:	7f 01       	movw	r14, r30
    252e:	85 32       	cpi	r24, 0x25	; 37
    2530:	29 f4       	brne	.+10     	; 0x253c <vfprintf+0x56>
    2532:	b6 01       	movw	r22, r12
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <fputc>
    253a:	e7 cf       	rjmp	.-50     	; 0x250a <vfprintf+0x24>
    253c:	91 2c       	mov	r9, r1
    253e:	21 2c       	mov	r2, r1
    2540:	31 2c       	mov	r3, r1
    2542:	ff e1       	ldi	r31, 0x1F	; 31
    2544:	f3 15       	cp	r31, r3
    2546:	d8 f0       	brcs	.+54     	; 0x257e <vfprintf+0x98>
    2548:	8b 32       	cpi	r24, 0x2B	; 43
    254a:	79 f0       	breq	.+30     	; 0x256a <vfprintf+0x84>
    254c:	38 f4       	brcc	.+14     	; 0x255c <vfprintf+0x76>
    254e:	80 32       	cpi	r24, 0x20	; 32
    2550:	79 f0       	breq	.+30     	; 0x2570 <vfprintf+0x8a>
    2552:	83 32       	cpi	r24, 0x23	; 35
    2554:	a1 f4       	brne	.+40     	; 0x257e <vfprintf+0x98>
    2556:	23 2d       	mov	r18, r3
    2558:	20 61       	ori	r18, 0x10	; 16
    255a:	1d c0       	rjmp	.+58     	; 0x2596 <vfprintf+0xb0>
    255c:	8d 32       	cpi	r24, 0x2D	; 45
    255e:	61 f0       	breq	.+24     	; 0x2578 <vfprintf+0x92>
    2560:	80 33       	cpi	r24, 0x30	; 48
    2562:	69 f4       	brne	.+26     	; 0x257e <vfprintf+0x98>
    2564:	23 2d       	mov	r18, r3
    2566:	21 60       	ori	r18, 0x01	; 1
    2568:	16 c0       	rjmp	.+44     	; 0x2596 <vfprintf+0xb0>
    256a:	83 2d       	mov	r24, r3
    256c:	82 60       	ori	r24, 0x02	; 2
    256e:	38 2e       	mov	r3, r24
    2570:	e3 2d       	mov	r30, r3
    2572:	e4 60       	ori	r30, 0x04	; 4
    2574:	3e 2e       	mov	r3, r30
    2576:	2a c0       	rjmp	.+84     	; 0x25cc <vfprintf+0xe6>
    2578:	f3 2d       	mov	r31, r3
    257a:	f8 60       	ori	r31, 0x08	; 8
    257c:	1d c0       	rjmp	.+58     	; 0x25b8 <vfprintf+0xd2>
    257e:	37 fc       	sbrc	r3, 7
    2580:	2d c0       	rjmp	.+90     	; 0x25dc <vfprintf+0xf6>
    2582:	20 ed       	ldi	r18, 0xD0	; 208
    2584:	28 0f       	add	r18, r24
    2586:	2a 30       	cpi	r18, 0x0A	; 10
    2588:	40 f0       	brcs	.+16     	; 0x259a <vfprintf+0xb4>
    258a:	8e 32       	cpi	r24, 0x2E	; 46
    258c:	b9 f4       	brne	.+46     	; 0x25bc <vfprintf+0xd6>
    258e:	36 fc       	sbrc	r3, 6
    2590:	81 c1       	rjmp	.+770    	; 0x2894 <vfprintf+0x3ae>
    2592:	23 2d       	mov	r18, r3
    2594:	20 64       	ori	r18, 0x40	; 64
    2596:	32 2e       	mov	r3, r18
    2598:	19 c0       	rjmp	.+50     	; 0x25cc <vfprintf+0xe6>
    259a:	36 fe       	sbrs	r3, 6
    259c:	06 c0       	rjmp	.+12     	; 0x25aa <vfprintf+0xc4>
    259e:	8a e0       	ldi	r24, 0x0A	; 10
    25a0:	98 9e       	mul	r9, r24
    25a2:	20 0d       	add	r18, r0
    25a4:	11 24       	eor	r1, r1
    25a6:	92 2e       	mov	r9, r18
    25a8:	11 c0       	rjmp	.+34     	; 0x25cc <vfprintf+0xe6>
    25aa:	ea e0       	ldi	r30, 0x0A	; 10
    25ac:	2e 9e       	mul	r2, r30
    25ae:	20 0d       	add	r18, r0
    25b0:	11 24       	eor	r1, r1
    25b2:	22 2e       	mov	r2, r18
    25b4:	f3 2d       	mov	r31, r3
    25b6:	f0 62       	ori	r31, 0x20	; 32
    25b8:	3f 2e       	mov	r3, r31
    25ba:	08 c0       	rjmp	.+16     	; 0x25cc <vfprintf+0xe6>
    25bc:	8c 36       	cpi	r24, 0x6C	; 108
    25be:	21 f4       	brne	.+8      	; 0x25c8 <vfprintf+0xe2>
    25c0:	83 2d       	mov	r24, r3
    25c2:	80 68       	ori	r24, 0x80	; 128
    25c4:	38 2e       	mov	r3, r24
    25c6:	02 c0       	rjmp	.+4      	; 0x25cc <vfprintf+0xe6>
    25c8:	88 36       	cpi	r24, 0x68	; 104
    25ca:	41 f4       	brne	.+16     	; 0x25dc <vfprintf+0xf6>
    25cc:	f7 01       	movw	r30, r14
    25ce:	93 fd       	sbrc	r25, 3
    25d0:	85 91       	lpm	r24, Z+
    25d2:	93 ff       	sbrs	r25, 3
    25d4:	81 91       	ld	r24, Z+
    25d6:	7f 01       	movw	r14, r30
    25d8:	81 11       	cpse	r24, r1
    25da:	b3 cf       	rjmp	.-154    	; 0x2542 <vfprintf+0x5c>
    25dc:	98 2f       	mov	r25, r24
    25de:	9f 7d       	andi	r25, 0xDF	; 223
    25e0:	95 54       	subi	r25, 0x45	; 69
    25e2:	93 30       	cpi	r25, 0x03	; 3
    25e4:	28 f4       	brcc	.+10     	; 0x25f0 <vfprintf+0x10a>
    25e6:	0c 5f       	subi	r16, 0xFC	; 252
    25e8:	1f 4f       	sbci	r17, 0xFF	; 255
    25ea:	9f e3       	ldi	r25, 0x3F	; 63
    25ec:	99 83       	std	Y+1, r25	; 0x01
    25ee:	0d c0       	rjmp	.+26     	; 0x260a <vfprintf+0x124>
    25f0:	83 36       	cpi	r24, 0x63	; 99
    25f2:	31 f0       	breq	.+12     	; 0x2600 <vfprintf+0x11a>
    25f4:	83 37       	cpi	r24, 0x73	; 115
    25f6:	71 f0       	breq	.+28     	; 0x2614 <vfprintf+0x12e>
    25f8:	83 35       	cpi	r24, 0x53	; 83
    25fa:	09 f0       	breq	.+2      	; 0x25fe <vfprintf+0x118>
    25fc:	59 c0       	rjmp	.+178    	; 0x26b0 <vfprintf+0x1ca>
    25fe:	21 c0       	rjmp	.+66     	; 0x2642 <vfprintf+0x15c>
    2600:	f8 01       	movw	r30, r16
    2602:	80 81       	ld	r24, Z
    2604:	89 83       	std	Y+1, r24	; 0x01
    2606:	0e 5f       	subi	r16, 0xFE	; 254
    2608:	1f 4f       	sbci	r17, 0xFF	; 255
    260a:	88 24       	eor	r8, r8
    260c:	83 94       	inc	r8
    260e:	91 2c       	mov	r9, r1
    2610:	53 01       	movw	r10, r6
    2612:	13 c0       	rjmp	.+38     	; 0x263a <vfprintf+0x154>
    2614:	28 01       	movw	r4, r16
    2616:	f2 e0       	ldi	r31, 0x02	; 2
    2618:	4f 0e       	add	r4, r31
    261a:	51 1c       	adc	r5, r1
    261c:	f8 01       	movw	r30, r16
    261e:	a0 80       	ld	r10, Z
    2620:	b1 80       	ldd	r11, Z+1	; 0x01
    2622:	36 fe       	sbrs	r3, 6
    2624:	03 c0       	rjmp	.+6      	; 0x262c <vfprintf+0x146>
    2626:	69 2d       	mov	r22, r9
    2628:	70 e0       	ldi	r23, 0x00	; 0
    262a:	02 c0       	rjmp	.+4      	; 0x2630 <vfprintf+0x14a>
    262c:	6f ef       	ldi	r22, 0xFF	; 255
    262e:	7f ef       	ldi	r23, 0xFF	; 255
    2630:	c5 01       	movw	r24, r10
    2632:	0e 94 5f 14 	call	0x28be	; 0x28be <strnlen>
    2636:	4c 01       	movw	r8, r24
    2638:	82 01       	movw	r16, r4
    263a:	f3 2d       	mov	r31, r3
    263c:	ff 77       	andi	r31, 0x7F	; 127
    263e:	3f 2e       	mov	r3, r31
    2640:	16 c0       	rjmp	.+44     	; 0x266e <vfprintf+0x188>
    2642:	28 01       	movw	r4, r16
    2644:	22 e0       	ldi	r18, 0x02	; 2
    2646:	42 0e       	add	r4, r18
    2648:	51 1c       	adc	r5, r1
    264a:	f8 01       	movw	r30, r16
    264c:	a0 80       	ld	r10, Z
    264e:	b1 80       	ldd	r11, Z+1	; 0x01
    2650:	36 fe       	sbrs	r3, 6
    2652:	03 c0       	rjmp	.+6      	; 0x265a <vfprintf+0x174>
    2654:	69 2d       	mov	r22, r9
    2656:	70 e0       	ldi	r23, 0x00	; 0
    2658:	02 c0       	rjmp	.+4      	; 0x265e <vfprintf+0x178>
    265a:	6f ef       	ldi	r22, 0xFF	; 255
    265c:	7f ef       	ldi	r23, 0xFF	; 255
    265e:	c5 01       	movw	r24, r10
    2660:	0e 94 54 14 	call	0x28a8	; 0x28a8 <strnlen_P>
    2664:	4c 01       	movw	r8, r24
    2666:	f3 2d       	mov	r31, r3
    2668:	f0 68       	ori	r31, 0x80	; 128
    266a:	3f 2e       	mov	r3, r31
    266c:	82 01       	movw	r16, r4
    266e:	33 fc       	sbrc	r3, 3
    2670:	1b c0       	rjmp	.+54     	; 0x26a8 <vfprintf+0x1c2>
    2672:	82 2d       	mov	r24, r2
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	88 16       	cp	r8, r24
    2678:	99 06       	cpc	r9, r25
    267a:	b0 f4       	brcc	.+44     	; 0x26a8 <vfprintf+0x1c2>
    267c:	b6 01       	movw	r22, r12
    267e:	80 e2       	ldi	r24, 0x20	; 32
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <fputc>
    2686:	2a 94       	dec	r2
    2688:	f4 cf       	rjmp	.-24     	; 0x2672 <vfprintf+0x18c>
    268a:	f5 01       	movw	r30, r10
    268c:	37 fc       	sbrc	r3, 7
    268e:	85 91       	lpm	r24, Z+
    2690:	37 fe       	sbrs	r3, 7
    2692:	81 91       	ld	r24, Z+
    2694:	5f 01       	movw	r10, r30
    2696:	b6 01       	movw	r22, r12
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <fputc>
    269e:	21 10       	cpse	r2, r1
    26a0:	2a 94       	dec	r2
    26a2:	21 e0       	ldi	r18, 0x01	; 1
    26a4:	82 1a       	sub	r8, r18
    26a6:	91 08       	sbc	r9, r1
    26a8:	81 14       	cp	r8, r1
    26aa:	91 04       	cpc	r9, r1
    26ac:	71 f7       	brne	.-36     	; 0x268a <vfprintf+0x1a4>
    26ae:	e8 c0       	rjmp	.+464    	; 0x2880 <vfprintf+0x39a>
    26b0:	84 36       	cpi	r24, 0x64	; 100
    26b2:	11 f0       	breq	.+4      	; 0x26b8 <vfprintf+0x1d2>
    26b4:	89 36       	cpi	r24, 0x69	; 105
    26b6:	41 f5       	brne	.+80     	; 0x2708 <vfprintf+0x222>
    26b8:	f8 01       	movw	r30, r16
    26ba:	37 fe       	sbrs	r3, 7
    26bc:	07 c0       	rjmp	.+14     	; 0x26cc <vfprintf+0x1e6>
    26be:	60 81       	ld	r22, Z
    26c0:	71 81       	ldd	r23, Z+1	; 0x01
    26c2:	82 81       	ldd	r24, Z+2	; 0x02
    26c4:	93 81       	ldd	r25, Z+3	; 0x03
    26c6:	0c 5f       	subi	r16, 0xFC	; 252
    26c8:	1f 4f       	sbci	r17, 0xFF	; 255
    26ca:	08 c0       	rjmp	.+16     	; 0x26dc <vfprintf+0x1f6>
    26cc:	60 81       	ld	r22, Z
    26ce:	71 81       	ldd	r23, Z+1	; 0x01
    26d0:	07 2e       	mov	r0, r23
    26d2:	00 0c       	add	r0, r0
    26d4:	88 0b       	sbc	r24, r24
    26d6:	99 0b       	sbc	r25, r25
    26d8:	0e 5f       	subi	r16, 0xFE	; 254
    26da:	1f 4f       	sbci	r17, 0xFF	; 255
    26dc:	f3 2d       	mov	r31, r3
    26de:	ff 76       	andi	r31, 0x6F	; 111
    26e0:	3f 2e       	mov	r3, r31
    26e2:	97 ff       	sbrs	r25, 7
    26e4:	09 c0       	rjmp	.+18     	; 0x26f8 <vfprintf+0x212>
    26e6:	90 95       	com	r25
    26e8:	80 95       	com	r24
    26ea:	70 95       	com	r23
    26ec:	61 95       	neg	r22
    26ee:	7f 4f       	sbci	r23, 0xFF	; 255
    26f0:	8f 4f       	sbci	r24, 0xFF	; 255
    26f2:	9f 4f       	sbci	r25, 0xFF	; 255
    26f4:	f0 68       	ori	r31, 0x80	; 128
    26f6:	3f 2e       	mov	r3, r31
    26f8:	2a e0       	ldi	r18, 0x0A	; 10
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	a3 01       	movw	r20, r6
    26fe:	0e 94 a6 14 	call	0x294c	; 0x294c <__ultoa_invert>
    2702:	88 2e       	mov	r8, r24
    2704:	86 18       	sub	r8, r6
    2706:	45 c0       	rjmp	.+138    	; 0x2792 <vfprintf+0x2ac>
    2708:	85 37       	cpi	r24, 0x75	; 117
    270a:	31 f4       	brne	.+12     	; 0x2718 <vfprintf+0x232>
    270c:	23 2d       	mov	r18, r3
    270e:	2f 7e       	andi	r18, 0xEF	; 239
    2710:	b2 2e       	mov	r11, r18
    2712:	2a e0       	ldi	r18, 0x0A	; 10
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	25 c0       	rjmp	.+74     	; 0x2762 <vfprintf+0x27c>
    2718:	93 2d       	mov	r25, r3
    271a:	99 7f       	andi	r25, 0xF9	; 249
    271c:	b9 2e       	mov	r11, r25
    271e:	8f 36       	cpi	r24, 0x6F	; 111
    2720:	c1 f0       	breq	.+48     	; 0x2752 <vfprintf+0x26c>
    2722:	18 f4       	brcc	.+6      	; 0x272a <vfprintf+0x244>
    2724:	88 35       	cpi	r24, 0x58	; 88
    2726:	79 f0       	breq	.+30     	; 0x2746 <vfprintf+0x260>
    2728:	b5 c0       	rjmp	.+362    	; 0x2894 <vfprintf+0x3ae>
    272a:	80 37       	cpi	r24, 0x70	; 112
    272c:	19 f0       	breq	.+6      	; 0x2734 <vfprintf+0x24e>
    272e:	88 37       	cpi	r24, 0x78	; 120
    2730:	21 f0       	breq	.+8      	; 0x273a <vfprintf+0x254>
    2732:	b0 c0       	rjmp	.+352    	; 0x2894 <vfprintf+0x3ae>
    2734:	e9 2f       	mov	r30, r25
    2736:	e0 61       	ori	r30, 0x10	; 16
    2738:	be 2e       	mov	r11, r30
    273a:	b4 fe       	sbrs	r11, 4
    273c:	0d c0       	rjmp	.+26     	; 0x2758 <vfprintf+0x272>
    273e:	fb 2d       	mov	r31, r11
    2740:	f4 60       	ori	r31, 0x04	; 4
    2742:	bf 2e       	mov	r11, r31
    2744:	09 c0       	rjmp	.+18     	; 0x2758 <vfprintf+0x272>
    2746:	34 fe       	sbrs	r3, 4
    2748:	0a c0       	rjmp	.+20     	; 0x275e <vfprintf+0x278>
    274a:	29 2f       	mov	r18, r25
    274c:	26 60       	ori	r18, 0x06	; 6
    274e:	b2 2e       	mov	r11, r18
    2750:	06 c0       	rjmp	.+12     	; 0x275e <vfprintf+0x278>
    2752:	28 e0       	ldi	r18, 0x08	; 8
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	05 c0       	rjmp	.+10     	; 0x2762 <vfprintf+0x27c>
    2758:	20 e1       	ldi	r18, 0x10	; 16
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	02 c0       	rjmp	.+4      	; 0x2762 <vfprintf+0x27c>
    275e:	20 e1       	ldi	r18, 0x10	; 16
    2760:	32 e0       	ldi	r19, 0x02	; 2
    2762:	f8 01       	movw	r30, r16
    2764:	b7 fe       	sbrs	r11, 7
    2766:	07 c0       	rjmp	.+14     	; 0x2776 <vfprintf+0x290>
    2768:	60 81       	ld	r22, Z
    276a:	71 81       	ldd	r23, Z+1	; 0x01
    276c:	82 81       	ldd	r24, Z+2	; 0x02
    276e:	93 81       	ldd	r25, Z+3	; 0x03
    2770:	0c 5f       	subi	r16, 0xFC	; 252
    2772:	1f 4f       	sbci	r17, 0xFF	; 255
    2774:	06 c0       	rjmp	.+12     	; 0x2782 <vfprintf+0x29c>
    2776:	60 81       	ld	r22, Z
    2778:	71 81       	ldd	r23, Z+1	; 0x01
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	0e 5f       	subi	r16, 0xFE	; 254
    2780:	1f 4f       	sbci	r17, 0xFF	; 255
    2782:	a3 01       	movw	r20, r6
    2784:	0e 94 a6 14 	call	0x294c	; 0x294c <__ultoa_invert>
    2788:	88 2e       	mov	r8, r24
    278a:	86 18       	sub	r8, r6
    278c:	fb 2d       	mov	r31, r11
    278e:	ff 77       	andi	r31, 0x7F	; 127
    2790:	3f 2e       	mov	r3, r31
    2792:	36 fe       	sbrs	r3, 6
    2794:	0d c0       	rjmp	.+26     	; 0x27b0 <vfprintf+0x2ca>
    2796:	23 2d       	mov	r18, r3
    2798:	2e 7f       	andi	r18, 0xFE	; 254
    279a:	a2 2e       	mov	r10, r18
    279c:	89 14       	cp	r8, r9
    279e:	58 f4       	brcc	.+22     	; 0x27b6 <vfprintf+0x2d0>
    27a0:	34 fe       	sbrs	r3, 4
    27a2:	0b c0       	rjmp	.+22     	; 0x27ba <vfprintf+0x2d4>
    27a4:	32 fc       	sbrc	r3, 2
    27a6:	09 c0       	rjmp	.+18     	; 0x27ba <vfprintf+0x2d4>
    27a8:	83 2d       	mov	r24, r3
    27aa:	8e 7e       	andi	r24, 0xEE	; 238
    27ac:	a8 2e       	mov	r10, r24
    27ae:	05 c0       	rjmp	.+10     	; 0x27ba <vfprintf+0x2d4>
    27b0:	b8 2c       	mov	r11, r8
    27b2:	a3 2c       	mov	r10, r3
    27b4:	03 c0       	rjmp	.+6      	; 0x27bc <vfprintf+0x2d6>
    27b6:	b8 2c       	mov	r11, r8
    27b8:	01 c0       	rjmp	.+2      	; 0x27bc <vfprintf+0x2d6>
    27ba:	b9 2c       	mov	r11, r9
    27bc:	a4 fe       	sbrs	r10, 4
    27be:	0f c0       	rjmp	.+30     	; 0x27de <vfprintf+0x2f8>
    27c0:	fe 01       	movw	r30, r28
    27c2:	e8 0d       	add	r30, r8
    27c4:	f1 1d       	adc	r31, r1
    27c6:	80 81       	ld	r24, Z
    27c8:	80 33       	cpi	r24, 0x30	; 48
    27ca:	21 f4       	brne	.+8      	; 0x27d4 <vfprintf+0x2ee>
    27cc:	9a 2d       	mov	r25, r10
    27ce:	99 7e       	andi	r25, 0xE9	; 233
    27d0:	a9 2e       	mov	r10, r25
    27d2:	09 c0       	rjmp	.+18     	; 0x27e6 <vfprintf+0x300>
    27d4:	a2 fe       	sbrs	r10, 2
    27d6:	06 c0       	rjmp	.+12     	; 0x27e4 <vfprintf+0x2fe>
    27d8:	b3 94       	inc	r11
    27da:	b3 94       	inc	r11
    27dc:	04 c0       	rjmp	.+8      	; 0x27e6 <vfprintf+0x300>
    27de:	8a 2d       	mov	r24, r10
    27e0:	86 78       	andi	r24, 0x86	; 134
    27e2:	09 f0       	breq	.+2      	; 0x27e6 <vfprintf+0x300>
    27e4:	b3 94       	inc	r11
    27e6:	a3 fc       	sbrc	r10, 3
    27e8:	11 c0       	rjmp	.+34     	; 0x280c <vfprintf+0x326>
    27ea:	a0 fe       	sbrs	r10, 0
    27ec:	06 c0       	rjmp	.+12     	; 0x27fa <vfprintf+0x314>
    27ee:	b2 14       	cp	r11, r2
    27f0:	88 f4       	brcc	.+34     	; 0x2814 <vfprintf+0x32e>
    27f2:	28 0c       	add	r2, r8
    27f4:	92 2c       	mov	r9, r2
    27f6:	9b 18       	sub	r9, r11
    27f8:	0e c0       	rjmp	.+28     	; 0x2816 <vfprintf+0x330>
    27fa:	b2 14       	cp	r11, r2
    27fc:	60 f4       	brcc	.+24     	; 0x2816 <vfprintf+0x330>
    27fe:	b6 01       	movw	r22, r12
    2800:	80 e2       	ldi	r24, 0x20	; 32
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <fputc>
    2808:	b3 94       	inc	r11
    280a:	f7 cf       	rjmp	.-18     	; 0x27fa <vfprintf+0x314>
    280c:	b2 14       	cp	r11, r2
    280e:	18 f4       	brcc	.+6      	; 0x2816 <vfprintf+0x330>
    2810:	2b 18       	sub	r2, r11
    2812:	02 c0       	rjmp	.+4      	; 0x2818 <vfprintf+0x332>
    2814:	98 2c       	mov	r9, r8
    2816:	21 2c       	mov	r2, r1
    2818:	a4 fe       	sbrs	r10, 4
    281a:	10 c0       	rjmp	.+32     	; 0x283c <vfprintf+0x356>
    281c:	b6 01       	movw	r22, r12
    281e:	80 e3       	ldi	r24, 0x30	; 48
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <fputc>
    2826:	a2 fe       	sbrs	r10, 2
    2828:	17 c0       	rjmp	.+46     	; 0x2858 <vfprintf+0x372>
    282a:	a1 fc       	sbrc	r10, 1
    282c:	03 c0       	rjmp	.+6      	; 0x2834 <vfprintf+0x34e>
    282e:	88 e7       	ldi	r24, 0x78	; 120
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	02 c0       	rjmp	.+4      	; 0x2838 <vfprintf+0x352>
    2834:	88 e5       	ldi	r24, 0x58	; 88
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	b6 01       	movw	r22, r12
    283a:	0c c0       	rjmp	.+24     	; 0x2854 <vfprintf+0x36e>
    283c:	8a 2d       	mov	r24, r10
    283e:	86 78       	andi	r24, 0x86	; 134
    2840:	59 f0       	breq	.+22     	; 0x2858 <vfprintf+0x372>
    2842:	a1 fe       	sbrs	r10, 1
    2844:	02 c0       	rjmp	.+4      	; 0x284a <vfprintf+0x364>
    2846:	8b e2       	ldi	r24, 0x2B	; 43
    2848:	01 c0       	rjmp	.+2      	; 0x284c <vfprintf+0x366>
    284a:	80 e2       	ldi	r24, 0x20	; 32
    284c:	a7 fc       	sbrc	r10, 7
    284e:	8d e2       	ldi	r24, 0x2D	; 45
    2850:	b6 01       	movw	r22, r12
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <fputc>
    2858:	89 14       	cp	r8, r9
    285a:	38 f4       	brcc	.+14     	; 0x286a <vfprintf+0x384>
    285c:	b6 01       	movw	r22, r12
    285e:	80 e3       	ldi	r24, 0x30	; 48
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <fputc>
    2866:	9a 94       	dec	r9
    2868:	f7 cf       	rjmp	.-18     	; 0x2858 <vfprintf+0x372>
    286a:	8a 94       	dec	r8
    286c:	f3 01       	movw	r30, r6
    286e:	e8 0d       	add	r30, r8
    2870:	f1 1d       	adc	r31, r1
    2872:	80 81       	ld	r24, Z
    2874:	b6 01       	movw	r22, r12
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <fputc>
    287c:	81 10       	cpse	r8, r1
    287e:	f5 cf       	rjmp	.-22     	; 0x286a <vfprintf+0x384>
    2880:	22 20       	and	r2, r2
    2882:	09 f4       	brne	.+2      	; 0x2886 <vfprintf+0x3a0>
    2884:	42 ce       	rjmp	.-892    	; 0x250a <vfprintf+0x24>
    2886:	b6 01       	movw	r22, r12
    2888:	80 e2       	ldi	r24, 0x20	; 32
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <fputc>
    2890:	2a 94       	dec	r2
    2892:	f6 cf       	rjmp	.-20     	; 0x2880 <vfprintf+0x39a>
    2894:	f6 01       	movw	r30, r12
    2896:	86 81       	ldd	r24, Z+6	; 0x06
    2898:	97 81       	ldd	r25, Z+7	; 0x07
    289a:	02 c0       	rjmp	.+4      	; 0x28a0 <vfprintf+0x3ba>
    289c:	8f ef       	ldi	r24, 0xFF	; 255
    289e:	9f ef       	ldi	r25, 0xFF	; 255
    28a0:	2b 96       	adiw	r28, 0x0b	; 11
    28a2:	e2 e1       	ldi	r30, 0x12	; 18
    28a4:	0c 94 20 15 	jmp	0x2a40	; 0x2a40 <__epilogue_restores__>

000028a8 <strnlen_P>:
    28a8:	fc 01       	movw	r30, r24
    28aa:	05 90       	lpm	r0, Z+
    28ac:	61 50       	subi	r22, 0x01	; 1
    28ae:	70 40       	sbci	r23, 0x00	; 0
    28b0:	01 10       	cpse	r0, r1
    28b2:	d8 f7       	brcc	.-10     	; 0x28aa <strnlen_P+0x2>
    28b4:	80 95       	com	r24
    28b6:	90 95       	com	r25
    28b8:	8e 0f       	add	r24, r30
    28ba:	9f 1f       	adc	r25, r31
    28bc:	08 95       	ret

000028be <strnlen>:
    28be:	fc 01       	movw	r30, r24
    28c0:	61 50       	subi	r22, 0x01	; 1
    28c2:	70 40       	sbci	r23, 0x00	; 0
    28c4:	01 90       	ld	r0, Z+
    28c6:	01 10       	cpse	r0, r1
    28c8:	d8 f7       	brcc	.-10     	; 0x28c0 <strnlen+0x2>
    28ca:	80 95       	com	r24
    28cc:	90 95       	com	r25
    28ce:	8e 0f       	add	r24, r30
    28d0:	9f 1f       	adc	r25, r31
    28d2:	08 95       	ret

000028d4 <fputc>:
    28d4:	0f 93       	push	r16
    28d6:	1f 93       	push	r17
    28d8:	cf 93       	push	r28
    28da:	df 93       	push	r29
    28dc:	fb 01       	movw	r30, r22
    28de:	23 81       	ldd	r18, Z+3	; 0x03
    28e0:	21 fd       	sbrc	r18, 1
    28e2:	03 c0       	rjmp	.+6      	; 0x28ea <fputc+0x16>
    28e4:	8f ef       	ldi	r24, 0xFF	; 255
    28e6:	9f ef       	ldi	r25, 0xFF	; 255
    28e8:	2c c0       	rjmp	.+88     	; 0x2942 <fputc+0x6e>
    28ea:	22 ff       	sbrs	r18, 2
    28ec:	16 c0       	rjmp	.+44     	; 0x291a <fputc+0x46>
    28ee:	46 81       	ldd	r20, Z+6	; 0x06
    28f0:	57 81       	ldd	r21, Z+7	; 0x07
    28f2:	24 81       	ldd	r18, Z+4	; 0x04
    28f4:	35 81       	ldd	r19, Z+5	; 0x05
    28f6:	42 17       	cp	r20, r18
    28f8:	53 07       	cpc	r21, r19
    28fa:	44 f4       	brge	.+16     	; 0x290c <fputc+0x38>
    28fc:	a0 81       	ld	r26, Z
    28fe:	b1 81       	ldd	r27, Z+1	; 0x01
    2900:	9d 01       	movw	r18, r26
    2902:	2f 5f       	subi	r18, 0xFF	; 255
    2904:	3f 4f       	sbci	r19, 0xFF	; 255
    2906:	31 83       	std	Z+1, r19	; 0x01
    2908:	20 83       	st	Z, r18
    290a:	8c 93       	st	X, r24
    290c:	26 81       	ldd	r18, Z+6	; 0x06
    290e:	37 81       	ldd	r19, Z+7	; 0x07
    2910:	2f 5f       	subi	r18, 0xFF	; 255
    2912:	3f 4f       	sbci	r19, 0xFF	; 255
    2914:	37 83       	std	Z+7, r19	; 0x07
    2916:	26 83       	std	Z+6, r18	; 0x06
    2918:	14 c0       	rjmp	.+40     	; 0x2942 <fputc+0x6e>
    291a:	8b 01       	movw	r16, r22
    291c:	ec 01       	movw	r28, r24
    291e:	fb 01       	movw	r30, r22
    2920:	00 84       	ldd	r0, Z+8	; 0x08
    2922:	f1 85       	ldd	r31, Z+9	; 0x09
    2924:	e0 2d       	mov	r30, r0
    2926:	09 95       	icall
    2928:	89 2b       	or	r24, r25
    292a:	e1 f6       	brne	.-72     	; 0x28e4 <fputc+0x10>
    292c:	d8 01       	movw	r26, r16
    292e:	16 96       	adiw	r26, 0x06	; 6
    2930:	8d 91       	ld	r24, X+
    2932:	9c 91       	ld	r25, X
    2934:	17 97       	sbiw	r26, 0x07	; 7
    2936:	01 96       	adiw	r24, 0x01	; 1
    2938:	17 96       	adiw	r26, 0x07	; 7
    293a:	9c 93       	st	X, r25
    293c:	8e 93       	st	-X, r24
    293e:	16 97       	sbiw	r26, 0x06	; 6
    2940:	ce 01       	movw	r24, r28
    2942:	df 91       	pop	r29
    2944:	cf 91       	pop	r28
    2946:	1f 91       	pop	r17
    2948:	0f 91       	pop	r16
    294a:	08 95       	ret

0000294c <__ultoa_invert>:
    294c:	fa 01       	movw	r30, r20
    294e:	aa 27       	eor	r26, r26
    2950:	28 30       	cpi	r18, 0x08	; 8
    2952:	51 f1       	breq	.+84     	; 0x29a8 <__ultoa_invert+0x5c>
    2954:	20 31       	cpi	r18, 0x10	; 16
    2956:	81 f1       	breq	.+96     	; 0x29b8 <__ultoa_invert+0x6c>
    2958:	e8 94       	clt
    295a:	6f 93       	push	r22
    295c:	6e 7f       	andi	r22, 0xFE	; 254
    295e:	6e 5f       	subi	r22, 0xFE	; 254
    2960:	7f 4f       	sbci	r23, 0xFF	; 255
    2962:	8f 4f       	sbci	r24, 0xFF	; 255
    2964:	9f 4f       	sbci	r25, 0xFF	; 255
    2966:	af 4f       	sbci	r26, 0xFF	; 255
    2968:	b1 e0       	ldi	r27, 0x01	; 1
    296a:	3e d0       	rcall	.+124    	; 0x29e8 <__ultoa_invert+0x9c>
    296c:	b4 e0       	ldi	r27, 0x04	; 4
    296e:	3c d0       	rcall	.+120    	; 0x29e8 <__ultoa_invert+0x9c>
    2970:	67 0f       	add	r22, r23
    2972:	78 1f       	adc	r23, r24
    2974:	89 1f       	adc	r24, r25
    2976:	9a 1f       	adc	r25, r26
    2978:	a1 1d       	adc	r26, r1
    297a:	68 0f       	add	r22, r24
    297c:	79 1f       	adc	r23, r25
    297e:	8a 1f       	adc	r24, r26
    2980:	91 1d       	adc	r25, r1
    2982:	a1 1d       	adc	r26, r1
    2984:	6a 0f       	add	r22, r26
    2986:	71 1d       	adc	r23, r1
    2988:	81 1d       	adc	r24, r1
    298a:	91 1d       	adc	r25, r1
    298c:	a1 1d       	adc	r26, r1
    298e:	20 d0       	rcall	.+64     	; 0x29d0 <__ultoa_invert+0x84>
    2990:	09 f4       	brne	.+2      	; 0x2994 <__ultoa_invert+0x48>
    2992:	68 94       	set
    2994:	3f 91       	pop	r19
    2996:	2a e0       	ldi	r18, 0x0A	; 10
    2998:	26 9f       	mul	r18, r22
    299a:	11 24       	eor	r1, r1
    299c:	30 19       	sub	r19, r0
    299e:	30 5d       	subi	r19, 0xD0	; 208
    29a0:	31 93       	st	Z+, r19
    29a2:	de f6       	brtc	.-74     	; 0x295a <__ultoa_invert+0xe>
    29a4:	cf 01       	movw	r24, r30
    29a6:	08 95       	ret
    29a8:	46 2f       	mov	r20, r22
    29aa:	47 70       	andi	r20, 0x07	; 7
    29ac:	40 5d       	subi	r20, 0xD0	; 208
    29ae:	41 93       	st	Z+, r20
    29b0:	b3 e0       	ldi	r27, 0x03	; 3
    29b2:	0f d0       	rcall	.+30     	; 0x29d2 <__ultoa_invert+0x86>
    29b4:	c9 f7       	brne	.-14     	; 0x29a8 <__ultoa_invert+0x5c>
    29b6:	f6 cf       	rjmp	.-20     	; 0x29a4 <__ultoa_invert+0x58>
    29b8:	46 2f       	mov	r20, r22
    29ba:	4f 70       	andi	r20, 0x0F	; 15
    29bc:	40 5d       	subi	r20, 0xD0	; 208
    29be:	4a 33       	cpi	r20, 0x3A	; 58
    29c0:	18 f0       	brcs	.+6      	; 0x29c8 <__ultoa_invert+0x7c>
    29c2:	49 5d       	subi	r20, 0xD9	; 217
    29c4:	31 fd       	sbrc	r19, 1
    29c6:	40 52       	subi	r20, 0x20	; 32
    29c8:	41 93       	st	Z+, r20
    29ca:	02 d0       	rcall	.+4      	; 0x29d0 <__ultoa_invert+0x84>
    29cc:	a9 f7       	brne	.-22     	; 0x29b8 <__ultoa_invert+0x6c>
    29ce:	ea cf       	rjmp	.-44     	; 0x29a4 <__ultoa_invert+0x58>
    29d0:	b4 e0       	ldi	r27, 0x04	; 4
    29d2:	a6 95       	lsr	r26
    29d4:	97 95       	ror	r25
    29d6:	87 95       	ror	r24
    29d8:	77 95       	ror	r23
    29da:	67 95       	ror	r22
    29dc:	ba 95       	dec	r27
    29de:	c9 f7       	brne	.-14     	; 0x29d2 <__ultoa_invert+0x86>
    29e0:	00 97       	sbiw	r24, 0x00	; 0
    29e2:	61 05       	cpc	r22, r1
    29e4:	71 05       	cpc	r23, r1
    29e6:	08 95       	ret
    29e8:	9b 01       	movw	r18, r22
    29ea:	ac 01       	movw	r20, r24
    29ec:	0a 2e       	mov	r0, r26
    29ee:	06 94       	lsr	r0
    29f0:	57 95       	ror	r21
    29f2:	47 95       	ror	r20
    29f4:	37 95       	ror	r19
    29f6:	27 95       	ror	r18
    29f8:	ba 95       	dec	r27
    29fa:	c9 f7       	brne	.-14     	; 0x29ee <__ultoa_invert+0xa2>
    29fc:	62 0f       	add	r22, r18
    29fe:	73 1f       	adc	r23, r19
    2a00:	84 1f       	adc	r24, r20
    2a02:	95 1f       	adc	r25, r21
    2a04:	a0 1d       	adc	r26, r0
    2a06:	08 95       	ret

00002a08 <__prologue_saves__>:
    2a08:	2f 92       	push	r2
    2a0a:	3f 92       	push	r3
    2a0c:	4f 92       	push	r4
    2a0e:	5f 92       	push	r5
    2a10:	6f 92       	push	r6
    2a12:	7f 92       	push	r7
    2a14:	8f 92       	push	r8
    2a16:	9f 92       	push	r9
    2a18:	af 92       	push	r10
    2a1a:	bf 92       	push	r11
    2a1c:	cf 92       	push	r12
    2a1e:	df 92       	push	r13
    2a20:	ef 92       	push	r14
    2a22:	ff 92       	push	r15
    2a24:	0f 93       	push	r16
    2a26:	1f 93       	push	r17
    2a28:	cf 93       	push	r28
    2a2a:	df 93       	push	r29
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
    2a30:	ca 1b       	sub	r28, r26
    2a32:	db 0b       	sbc	r29, r27
    2a34:	0f b6       	in	r0, 0x3f	; 63
    2a36:	f8 94       	cli
    2a38:	de bf       	out	0x3e, r29	; 62
    2a3a:	0f be       	out	0x3f, r0	; 63
    2a3c:	cd bf       	out	0x3d, r28	; 61
    2a3e:	09 94       	ijmp

00002a40 <__epilogue_restores__>:
    2a40:	2a 88       	ldd	r2, Y+18	; 0x12
    2a42:	39 88       	ldd	r3, Y+17	; 0x11
    2a44:	48 88       	ldd	r4, Y+16	; 0x10
    2a46:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a48:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a50:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a52:	b9 84       	ldd	r11, Y+9	; 0x09
    2a54:	c8 84       	ldd	r12, Y+8	; 0x08
    2a56:	df 80       	ldd	r13, Y+7	; 0x07
    2a58:	ee 80       	ldd	r14, Y+6	; 0x06
    2a5a:	fd 80       	ldd	r15, Y+5	; 0x05
    2a5c:	0c 81       	ldd	r16, Y+4	; 0x04
    2a5e:	1b 81       	ldd	r17, Y+3	; 0x03
    2a60:	aa 81       	ldd	r26, Y+2	; 0x02
    2a62:	b9 81       	ldd	r27, Y+1	; 0x01
    2a64:	ce 0f       	add	r28, r30
    2a66:	d1 1d       	adc	r29, r1
    2a68:	0f b6       	in	r0, 0x3f	; 63
    2a6a:	f8 94       	cli
    2a6c:	de bf       	out	0x3e, r29	; 62
    2a6e:	0f be       	out	0x3f, r0	; 63
    2a70:	cd bf       	out	0x3d, r28	; 61
    2a72:	ed 01       	movw	r28, r26
    2a74:	08 95       	ret

00002a76 <_exit>:
    2a76:	f8 94       	cli

00002a78 <__stop_program>:
    2a78:	ff cf       	rjmp	.-2      	; 0x2a78 <__stop_program>
