
Flight assistant.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  00001b8a  00001c1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000254  0080014e  0080014e  00001c6c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c6c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00001cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000034f3  00000000  00000000  00001f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014c3  00000000  00000000  00005457  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000194f  00000000  00000000  0000691a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000868  00000000  00000000  0000826c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b7e  00000000  00000000  00008ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002df0  00000000  00000000  00009652  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  0000c442  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 84 00 	jmp	0x108	; 0x108 <__ctors_end>
       4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
       8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
       c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      10:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      14:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      18:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      1c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      20:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      24:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      28:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      2c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      30:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      34:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      38:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      3c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      40:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      44:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      48:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <__vector_18>
      4c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      50:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <__vector_20>
      54:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      58:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      5c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      60:	0c 94 07 09 	jmp	0x120e	; 0x120e <__vector_24>
      64:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      68:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      6c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      70:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      74:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      78:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      7c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      80:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      84:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      88:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      8c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      90:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      94:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      98:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      9c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      a0:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      a4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      a8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      ac:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      b0:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      b4:	34 09       	sbc	r19, r4
      b6:	48 09       	sbc	r20, r8
      b8:	64 09       	sbc	r22, r4
      ba:	d4 09       	sbc	r29, r4
      bc:	ea 09       	sbc	r30, r10
      be:	28 0a       	sbc	r2, r24
      c0:	7b 0a       	sbc	r7, r27
      c2:	ad 0a       	sbc	r10, r29
      c4:	00 0b       	sbc	r16, r16

000000c6 <ER_commands>:
      c6:	45 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ER..............
      d6:	00 00 00 00 aa 07 45 52 5f 52 45 41 44 00 00 00     ......ER_READ...
	...
      ee:	00 00 b0 07 45 52 5f 42 55 46 00 00 00 00 00 00     ....ER_BUF......
	...
     106:	08 08                                               ..

00000108 <__ctors_end>:
     108:	11 24       	eor	r1, r1
     10a:	1f be       	out	0x3f, r1	; 63
     10c:	cf ef       	ldi	r28, 0xFF	; 255
     10e:	d8 e0       	ldi	r29, 0x08	; 8
     110:	de bf       	out	0x3e, r29	; 62
     112:	cd bf       	out	0x3d, r28	; 61

00000114 <__do_copy_data>:
     114:	11 e0       	ldi	r17, 0x01	; 1
     116:	a0 e0       	ldi	r26, 0x00	; 0
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	ea e8       	ldi	r30, 0x8A	; 138
     11c:	fb e1       	ldi	r31, 0x1B	; 27
     11e:	02 c0       	rjmp	.+4      	; 0x124 <__do_copy_data+0x10>
     120:	05 90       	lpm	r0, Z+
     122:	0d 92       	st	X+, r0
     124:	ae 34       	cpi	r26, 0x4E	; 78
     126:	b1 07       	cpc	r27, r17
     128:	d9 f7       	brne	.-10     	; 0x120 <__do_copy_data+0xc>

0000012a <__do_clear_bss>:
     12a:	23 e0       	ldi	r18, 0x03	; 3
     12c:	ae e4       	ldi	r26, 0x4E	; 78
     12e:	b1 e0       	ldi	r27, 0x01	; 1
     130:	01 c0       	rjmp	.+2      	; 0x134 <.do_clear_bss_start>

00000132 <.do_clear_bss_loop>:
     132:	1d 92       	st	X+, r1

00000134 <.do_clear_bss_start>:
     134:	a2 3a       	cpi	r26, 0xA2	; 162
     136:	b2 07       	cpc	r27, r18
     138:	e1 f7       	brne	.-8      	; 0x132 <.do_clear_bss_loop>
     13a:	0e 94 1f 04 	call	0x83e	; 0x83e <main>
     13e:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <_exit>

00000142 <__bad_interrupt>:
     142:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000146 <PlaceInGyroBuffor>:

uint8_t counter_testing = 0;


void PlaceInGyroBuffor(int16_t gyro_samples[])
{
     146:	fc 01       	movw	r30, r24
	X_gyro_buff[gyro_head] = gyro_samples[0];
     148:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <gyro_head>
     14c:	29 2f       	mov	r18, r25
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	40 81       	ld	r20, Z
     152:	51 81       	ldd	r21, Z+1	; 0x01
     154:	22 0f       	add	r18, r18
     156:	33 1f       	adc	r19, r19
     158:	d9 01       	movw	r26, r18
     15a:	aa 5a       	subi	r26, 0xAA	; 170
     15c:	be 4f       	sbci	r27, 0xFE	; 254
     15e:	4d 93       	st	X+, r20
     160:	5c 93       	st	X, r21
	Y_gyro_buff[gyro_head] = gyro_samples[1];
     162:	42 81       	ldd	r20, Z+2	; 0x02
     164:	53 81       	ldd	r21, Z+3	; 0x03
     166:	d9 01       	movw	r26, r18
     168:	a0 58       	subi	r26, 0x80	; 128
     16a:	be 4f       	sbci	r27, 0xFE	; 254
     16c:	4d 93       	st	X+, r20
     16e:	5c 93       	st	X, r21
	Z_gyro_buff[gyro_head] = gyro_samples[2];
     170:	44 81       	ldd	r20, Z+4	; 0x04
     172:	55 81       	ldd	r21, Z+5	; 0x05
     174:	f9 01       	movw	r30, r18
     176:	ec 5c       	subi	r30, 0xCC	; 204
     178:	fd 4f       	sbci	r31, 0xFD	; 253
     17a:	51 83       	std	Z+1, r21	; 0x01
     17c:	40 83       	st	Z, r20

	gyro_head++;
     17e:	9f 5f       	subi	r25, 0xFF	; 255
	if (gyro_head == SAMPLES)
     180:	95 31       	cpi	r25, 0x15	; 21
     182:	19 f0       	breq	.+6      	; 0x18a <PlaceInGyroBuffor+0x44>
{
	X_gyro_buff[gyro_head] = gyro_samples[0];
	Y_gyro_buff[gyro_head] = gyro_samples[1];
	Z_gyro_buff[gyro_head] = gyro_samples[2];

	gyro_head++;
     184:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <gyro_head>
     188:	02 c0       	rjmp	.+4      	; 0x18e <PlaceInGyroBuffor+0x48>
	if (gyro_head == SAMPLES)
	gyro_head = 0;
     18a:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <gyro_head>

	if (gyro_head == gyro_tail)
     18e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <gyro_head>
     192:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <gyro_tail>
     196:	89 13       	cpse	r24, r25
     198:	03 c0       	rjmp	.+6      	; 0x1a0 <PlaceInGyroBuffor+0x5a>
		gyro_tail++;
     19a:	8f 5f       	subi	r24, 0xFF	; 255
     19c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <gyro_tail>

	if (gyro_tail == SAMPLES)
     1a0:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <gyro_tail>
     1a4:	85 31       	cpi	r24, 0x15	; 21
     1a6:	11 f4       	brne	.+4      	; 0x1ac <PlaceInGyroBuffor+0x66>
		gyro_tail = 0;
     1a8:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <gyro_tail>
     1ac:	08 95       	ret

000001ae <PlaceInAccBuffor>:
}

void PlaceInAccBuffor(int16_t acc_samples[])
{
     1ae:	fc 01       	movw	r30, r24
	X_acc_buff[acc_head] = acc_samples[0];
     1b0:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <acc_head>
     1b4:	29 2f       	mov	r18, r25
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	40 81       	ld	r20, Z
     1ba:	51 81       	ldd	r21, Z+1	; 0x01
     1bc:	22 0f       	add	r18, r18
     1be:	33 1f       	adc	r19, r19
     1c0:	d9 01       	movw	r26, r18
     1c2:	ac 52       	subi	r26, 0x2C	; 44
     1c4:	be 4f       	sbci	r27, 0xFE	; 254
     1c6:	4d 93       	st	X+, r20
     1c8:	5c 93       	st	X, r21
	Y_acc_buff[acc_head] = acc_samples[1];
     1ca:	42 81       	ldd	r20, Z+2	; 0x02
     1cc:	53 81       	ldd	r21, Z+3	; 0x03
     1ce:	d9 01       	movw	r26, r18
     1d0:	a6 5f       	subi	r26, 0xF6	; 246
     1d2:	bd 4f       	sbci	r27, 0xFD	; 253
     1d4:	4d 93       	st	X+, r20
     1d6:	5c 93       	st	X, r21
	Z_acc_buff[acc_head] = acc_samples[2];
     1d8:	44 81       	ldd	r20, Z+4	; 0x04
     1da:	55 81       	ldd	r21, Z+5	; 0x05
     1dc:	f9 01       	movw	r30, r18
     1de:	e6 55       	subi	r30, 0x56	; 86
     1e0:	fe 4f       	sbci	r31, 0xFE	; 254
     1e2:	51 83       	std	Z+1, r21	; 0x01
     1e4:	40 83       	st	Z, r20

	acc_head++;
     1e6:	9f 5f       	subi	r25, 0xFF	; 255
	if (acc_head == SAMPLES)
     1e8:	95 31       	cpi	r25, 0x15	; 21
     1ea:	19 f0       	breq	.+6      	; 0x1f2 <PlaceInAccBuffor+0x44>
{
	X_acc_buff[acc_head] = acc_samples[0];
	Y_acc_buff[acc_head] = acc_samples[1];
	Z_acc_buff[acc_head] = acc_samples[2];

	acc_head++;
     1ec:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <acc_head>
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <PlaceInAccBuffor+0x48>
	if (acc_head == SAMPLES)
		acc_head = 0;
     1f2:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <acc_head>

	if (acc_head == acc_tail)
     1f6:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <acc_head>
     1fa:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <__data_end>
     1fe:	89 13       	cpse	r24, r25
     200:	03 c0       	rjmp	.+6      	; 0x208 <PlaceInAccBuffor+0x5a>
		acc_tail++;
     202:	8f 5f       	subi	r24, 0xFF	; 255
     204:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__data_end>

	if (acc_tail == SAMPLES)
     208:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__data_end>
     20c:	85 31       	cpi	r24, 0x15	; 21
     20e:	11 f4       	brne	.+4      	; 0x214 <PlaceInAccBuffor+0x66>
		acc_tail = 0;
     210:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__data_end>
     214:	08 95       	ret

00000216 <ReadGyroSample>:
}

void ReadGyroSample(int16_t reading_buf[])
{
     216:	dc 01       	movw	r26, r24
	reading_buf[0] = X_gyro_buff[gyro_tail];
     218:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <gyro_tail>
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	ee 0f       	add	r30, r30
     220:	ff 1f       	adc	r31, r31
     222:	ea 5a       	subi	r30, 0xAA	; 170
     224:	fe 4f       	sbci	r31, 0xFE	; 254
     226:	80 81       	ld	r24, Z
     228:	91 81       	ldd	r25, Z+1	; 0x01
     22a:	11 96       	adiw	r26, 0x01	; 1
     22c:	9c 93       	st	X, r25
     22e:	8e 93       	st	-X, r24
	reading_buf[1] = Y_gyro_buff[gyro_tail];
     230:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <gyro_tail>
     234:	29 2f       	mov	r18, r25
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	22 0f       	add	r18, r18
     23a:	33 1f       	adc	r19, r19
     23c:	f9 01       	movw	r30, r18
     23e:	e0 58       	subi	r30, 0x80	; 128
     240:	fe 4f       	sbci	r31, 0xFE	; 254
     242:	40 81       	ld	r20, Z
     244:	51 81       	ldd	r21, Z+1	; 0x01
     246:	13 96       	adiw	r26, 0x03	; 3
     248:	5c 93       	st	X, r21
     24a:	4e 93       	st	-X, r20
     24c:	12 97       	sbiw	r26, 0x02	; 2
	reading_buf[2] = Z_gyro_buff[gyro_tail];
     24e:	f9 01       	movw	r30, r18
     250:	ec 5c       	subi	r30, 0xCC	; 204
     252:	fd 4f       	sbci	r31, 0xFD	; 253
     254:	20 81       	ld	r18, Z
     256:	31 81       	ldd	r19, Z+1	; 0x01
     258:	15 96       	adiw	r26, 0x05	; 5
     25a:	3c 93       	st	X, r19
     25c:	2e 93       	st	-X, r18
     25e:	14 97       	sbiw	r26, 0x04	; 4

	gyro_tail++;
     260:	9f 5f       	subi	r25, 0xFF	; 255

	if (gyro_tail == SAMPLES)
     262:	95 31       	cpi	r25, 0x15	; 21
     264:	19 f0       	breq	.+6      	; 0x26c <ReadGyroSample+0x56>
{
	reading_buf[0] = X_gyro_buff[gyro_tail];
	reading_buf[1] = Y_gyro_buff[gyro_tail];
	reading_buf[2] = Z_gyro_buff[gyro_tail];

	gyro_tail++;
     266:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <gyro_tail>
     26a:	08 95       	ret

	if (gyro_tail == SAMPLES)
		gyro_tail = 0;
     26c:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <gyro_tail>
     270:	08 95       	ret

00000272 <ReadAccSample>:
}

void ReadAccSample(int16_t reading_buf[])
{
     272:	dc 01       	movw	r26, r24
	reading_buf[0] = X_acc_buff[acc_tail];
     274:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <__data_end>
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	ee 0f       	add	r30, r30
     27c:	ff 1f       	adc	r31, r31
     27e:	ec 52       	subi	r30, 0x2C	; 44
     280:	fe 4f       	sbci	r31, 0xFE	; 254
     282:	80 81       	ld	r24, Z
     284:	91 81       	ldd	r25, Z+1	; 0x01
     286:	11 96       	adiw	r26, 0x01	; 1
     288:	9c 93       	st	X, r25
     28a:	8e 93       	st	-X, r24
	reading_buf[1] = Y_acc_buff[acc_tail];
     28c:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <__data_end>
     290:	29 2f       	mov	r18, r25
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	22 0f       	add	r18, r18
     296:	33 1f       	adc	r19, r19
     298:	f9 01       	movw	r30, r18
     29a:	e6 5f       	subi	r30, 0xF6	; 246
     29c:	fd 4f       	sbci	r31, 0xFD	; 253
     29e:	40 81       	ld	r20, Z
     2a0:	51 81       	ldd	r21, Z+1	; 0x01
     2a2:	13 96       	adiw	r26, 0x03	; 3
     2a4:	5c 93       	st	X, r21
     2a6:	4e 93       	st	-X, r20
     2a8:	12 97       	sbiw	r26, 0x02	; 2
	reading_buf[2] = Z_acc_buff[acc_tail];
     2aa:	f9 01       	movw	r30, r18
     2ac:	e6 55       	subi	r30, 0x56	; 86
     2ae:	fe 4f       	sbci	r31, 0xFE	; 254
     2b0:	20 81       	ld	r18, Z
     2b2:	31 81       	ldd	r19, Z+1	; 0x01
     2b4:	15 96       	adiw	r26, 0x05	; 5
     2b6:	3c 93       	st	X, r19
     2b8:	2e 93       	st	-X, r18
     2ba:	14 97       	sbiw	r26, 0x04	; 4

	acc_tail++;
     2bc:	9f 5f       	subi	r25, 0xFF	; 255

	if (acc_tail == SAMPLES)
     2be:	95 31       	cpi	r25, 0x15	; 21
     2c0:	19 f0       	breq	.+6      	; 0x2c8 <ReadAccSample+0x56>
{
	reading_buf[0] = X_acc_buff[acc_tail];
	reading_buf[1] = Y_acc_buff[acc_tail];
	reading_buf[2] = Z_acc_buff[acc_tail];

	acc_tail++;
     2c2:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <__data_end>
     2c6:	08 95       	ret

	if (acc_tail == SAMPLES)
		acc_tail = 0;
     2c8:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__data_end>
     2cc:	08 95       	ret

000002ce <SamplesGyroBuf>:
}

uint8_t SamplesGyroBuf()
{
	uint8_t gyro_samples;
	gyro_samples = gyro_head - gyro_tail;
     2ce:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <gyro_head>
     2d2:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <gyro_tail>
     2d6:	89 1b       	sub	r24, r25
	if (gyro_samples > SAMPLES_BUFF_SIZE)
     2d8:	85 31       	cpi	r24, 0x15	; 21
     2da:	08 f0       	brcs	.+2      	; 0x2de <SamplesGyroBuf+0x10>
	{
		gyro_samples -= (255 - SAMPLES_BUFF_SIZE);
     2dc:	8b 5e       	subi	r24, 0xEB	; 235
	}
	return gyro_samples;
}
     2de:	08 95       	ret

000002e0 <SamplesAccBuf>:

uint8_t SamplesAccBuf()
{
	uint8_t acc_samples;
	acc_samples = acc_head - acc_tail;
     2e0:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <acc_head>
     2e4:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <__data_end>
     2e8:	89 1b       	sub	r24, r25
	if (acc_samples > SAMPLES_BUFF_SIZE)
     2ea:	85 31       	cpi	r24, 0x15	; 21
     2ec:	08 f0       	brcs	.+2      	; 0x2f0 <SamplesAccBuf+0x10>
	{
		acc_samples -= (255 - SAMPLES_BUFF_SIZE);
     2ee:	8b 5e       	subi	r24, 0xEB	; 235
	}
	return acc_samples;
}
     2f0:	08 95       	ret

000002f2 <ReadGyroBuf>:

void ReadGyroBuf(int16_t  reading_buf[3][SAMPLES_BUFF_SIZE], uint8_t sam_nr)
{
     2f2:	cf 92       	push	r12
     2f4:	df 92       	push	r13
     2f6:	ef 92       	push	r14
     2f8:	ff 92       	push	r15
     2fa:	0f 93       	push	r16
     2fc:	1f 93       	push	r17
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	00 d0       	rcall	.+0      	; 0x304 <ReadGyroBuf+0x12>
     304:	00 d0       	rcall	.+0      	; 0x306 <ReadGyroBuf+0x14>
     306:	00 d0       	rcall	.+0      	; 0x308 <ReadGyroBuf+0x16>
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
	int16_t bufor[3];
	uint8_t i;
	for(i = 0; i < sam_nr; i++)	//read all new samples from buffor
     30c:	66 23       	and	r22, r22
     30e:	29 f1       	breq	.+74     	; 0x35a <ReadGyroBuf+0x68>
     310:	6c 01       	movw	r12, r24
     312:	7c 01       	movw	r14, r24
     314:	8c 01       	movw	r16, r24
     316:	08 5d       	subi	r16, 0xD8	; 216
     318:	1f 4f       	sbci	r17, 0xFF	; 255
     31a:	61 50       	subi	r22, 0x01	; 1
     31c:	26 2f       	mov	r18, r22
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	2f 5f       	subi	r18, 0xFF	; 255
     322:	3f 4f       	sbci	r19, 0xFF	; 255
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	c2 0e       	add	r12, r18
     32a:	d3 1e       	adc	r13, r19
	{
 		ReadGyroSample(bufor);
     32c:	ce 01       	movw	r24, r28
     32e:	01 96       	adiw	r24, 0x01	; 1
     330:	0e 94 0b 01 	call	0x216	; 0x216 <ReadGyroSample>
 		reading_buf[X_AXIS][i] = bufor[X_AXIS];
     334:	89 81       	ldd	r24, Y+1	; 0x01
     336:	9a 81       	ldd	r25, Y+2	; 0x02
     338:	f7 01       	movw	r30, r14
     33a:	81 93       	st	Z+, r24
     33c:	91 93       	st	Z+, r25
     33e:	7f 01       	movw	r14, r30
 		reading_buf[Y_AXIS][i] = bufor[Y_AXIS];
     340:	2b 81       	ldd	r18, Y+3	; 0x03
     342:	3c 81       	ldd	r19, Y+4	; 0x04
     344:	f8 01       	movw	r30, r16
     346:	21 93       	st	Z+, r18
     348:	31 93       	st	Z+, r19
     34a:	8f 01       	movw	r16, r30
 		reading_buf[Z_AXIS][i] = bufor[Z_AXIS];
     34c:	2d 81       	ldd	r18, Y+5	; 0x05
     34e:	3e 81       	ldd	r19, Y+6	; 0x06
     350:	37 a3       	std	Z+39, r19	; 0x27
     352:	26 a3       	std	Z+38, r18	; 0x26

void ReadGyroBuf(int16_t  reading_buf[3][SAMPLES_BUFF_SIZE], uint8_t sam_nr)
{
	int16_t bufor[3];
	uint8_t i;
	for(i = 0; i < sam_nr; i++)	//read all new samples from buffor
     354:	ec 14       	cp	r14, r12
     356:	fd 04       	cpc	r15, r13
     358:	49 f7       	brne	.-46     	; 0x32c <ReadGyroBuf+0x3a>
 		ReadGyroSample(bufor);
 		reading_buf[X_AXIS][i] = bufor[X_AXIS];
 		reading_buf[Y_AXIS][i] = bufor[Y_AXIS];
 		reading_buf[Z_AXIS][i] = bufor[Z_AXIS];
	}
}
     35a:	26 96       	adiw	r28, 0x06	; 6
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	de bf       	out	0x3e, r29	; 62
     362:	0f be       	out	0x3f, r0	; 63
     364:	cd bf       	out	0x3d, r28	; 61
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	ff 90       	pop	r15
     370:	ef 90       	pop	r14
     372:	df 90       	pop	r13
     374:	cf 90       	pop	r12
     376:	08 95       	ret

00000378 <ReadAccBuf>:

void ReadAccBuf(int16_t  reading_buf[3][SAMPLES_BUFF_SIZE], uint8_t sam_nr)
{
     378:	cf 92       	push	r12
     37a:	df 92       	push	r13
     37c:	ef 92       	push	r14
     37e:	ff 92       	push	r15
     380:	0f 93       	push	r16
     382:	1f 93       	push	r17
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	00 d0       	rcall	.+0      	; 0x38a <ReadAccBuf+0x12>
     38a:	00 d0       	rcall	.+0      	; 0x38c <ReadAccBuf+0x14>
     38c:	00 d0       	rcall	.+0      	; 0x38e <ReadAccBuf+0x16>
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
	int16_t bufor[3];
	uint8_t i;
	for(i = 0; i < sam_nr; i++)	//read all new samples from buffor
     392:	66 23       	and	r22, r22
     394:	29 f1       	breq	.+74     	; 0x3e0 <ReadAccBuf+0x68>
     396:	6c 01       	movw	r12, r24
     398:	7c 01       	movw	r14, r24
     39a:	8c 01       	movw	r16, r24
     39c:	08 5d       	subi	r16, 0xD8	; 216
     39e:	1f 4f       	sbci	r17, 0xFF	; 255
     3a0:	61 50       	subi	r22, 0x01	; 1
     3a2:	26 2f       	mov	r18, r22
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	2f 5f       	subi	r18, 0xFF	; 255
     3a8:	3f 4f       	sbci	r19, 0xFF	; 255
     3aa:	22 0f       	add	r18, r18
     3ac:	33 1f       	adc	r19, r19
     3ae:	c2 0e       	add	r12, r18
     3b0:	d3 1e       	adc	r13, r19
	{
		ReadAccSample(bufor);
     3b2:	ce 01       	movw	r24, r28
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	0e 94 39 01 	call	0x272	; 0x272 <ReadAccSample>
 		reading_buf[X_AXIS][i] = bufor[X_AXIS];
     3ba:	89 81       	ldd	r24, Y+1	; 0x01
     3bc:	9a 81       	ldd	r25, Y+2	; 0x02
     3be:	f7 01       	movw	r30, r14
     3c0:	81 93       	st	Z+, r24
     3c2:	91 93       	st	Z+, r25
     3c4:	7f 01       	movw	r14, r30
 		reading_buf[Y_AXIS][i] = bufor[Y_AXIS];
     3c6:	2b 81       	ldd	r18, Y+3	; 0x03
     3c8:	3c 81       	ldd	r19, Y+4	; 0x04
     3ca:	f8 01       	movw	r30, r16
     3cc:	21 93       	st	Z+, r18
     3ce:	31 93       	st	Z+, r19
     3d0:	8f 01       	movw	r16, r30
 		reading_buf[Z_AXIS][i] = bufor[Z_AXIS];
     3d2:	2d 81       	ldd	r18, Y+5	; 0x05
     3d4:	3e 81       	ldd	r19, Y+6	; 0x06
     3d6:	37 a3       	std	Z+39, r19	; 0x27
     3d8:	26 a3       	std	Z+38, r18	; 0x26

void ReadAccBuf(int16_t  reading_buf[3][SAMPLES_BUFF_SIZE], uint8_t sam_nr)
{
	int16_t bufor[3];
	uint8_t i;
	for(i = 0; i < sam_nr; i++)	//read all new samples from buffor
     3da:	ec 14       	cp	r14, r12
     3dc:	fd 04       	cpc	r15, r13
     3de:	49 f7       	brne	.-46     	; 0x3b2 <ReadAccBuf+0x3a>
		ReadAccSample(bufor);
 		reading_buf[X_AXIS][i] = bufor[X_AXIS];
 		reading_buf[Y_AXIS][i] = bufor[Y_AXIS];
 		reading_buf[Z_AXIS][i] = bufor[Z_AXIS];
	}
}
     3e0:	26 96       	adiw	r28, 0x06	; 6
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	de bf       	out	0x3e, r29	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	cd bf       	out	0x3d, r28	; 61
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	1f 91       	pop	r17
     3f2:	0f 91       	pop	r16
     3f4:	ff 90       	pop	r15
     3f6:	ef 90       	pop	r14
     3f8:	df 90       	pop	r13
     3fa:	cf 90       	pop	r12
     3fc:	08 95       	ret

000003fe <AveragingLinearMPU6050>:
	ReadAccBuf(temp_buf, samples);
	AveragingWeightingMPU6050(temp_buf, samples, acc);
}

void AveragingLinearMPU6050(int16_t data[3][SAMPLES_BUFF_SIZE], uint8_t samples, int16_t results[3])
{
     3fe:	4f 92       	push	r4
     400:	5f 92       	push	r5
     402:	6f 92       	push	r6
     404:	7f 92       	push	r7
     406:	8f 92       	push	r8
     408:	9f 92       	push	r9
     40a:	af 92       	push	r10
     40c:	bf 92       	push	r11
     40e:	cf 92       	push	r12
     410:	df 92       	push	r13
     412:	ef 92       	push	r14
     414:	ff 92       	push	r15
     416:	0f 93       	push	r16
     418:	1f 93       	push	r17
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	ea 01       	movw	r28, r20
	int32_t sum[3];
	sum[0] = 0;
	sum[1] = 0;
	sum[2] = 0;

	for(uint8_t i = 0; i < samples; i++)
     420:	66 23       	and	r22, r22
     422:	b9 f1       	breq	.+110    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     424:	dc 01       	movw	r26, r24
     426:	fc 01       	movw	r30, r24
     428:	b8 96       	adiw	r30, 0x28	; 40
     42a:	2f ef       	ldi	r18, 0xFF	; 255
     42c:	26 0f       	add	r18, r22
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	2f 5f       	subi	r18, 0xFF	; 255
     432:	3f 4f       	sbci	r19, 0xFF	; 255
     434:	22 0f       	add	r18, r18
     436:	33 1f       	adc	r19, r19
     438:	82 0f       	add	r24, r18
     43a:	93 1f       	adc	r25, r19
     43c:	00 e0       	ldi	r16, 0x00	; 0
     43e:	10 e0       	ldi	r17, 0x00	; 0
     440:	98 01       	movw	r18, r16
     442:	81 2c       	mov	r8, r1
     444:	91 2c       	mov	r9, r1
     446:	54 01       	movw	r10, r8
     448:	c1 2c       	mov	r12, r1
     44a:	d1 2c       	mov	r13, r1
     44c:	76 01       	movw	r14, r12
	{
		sum[X_AXIS] += data[X_AXIS][i];
     44e:	4d 91       	ld	r20, X+
     450:	5d 91       	ld	r21, X+
     452:	2a 01       	movw	r4, r20
     454:	55 0f       	add	r21, r21
     456:	66 08       	sbc	r6, r6
     458:	77 08       	sbc	r7, r7
     45a:	04 0d       	add	r16, r4
     45c:	15 1d       	adc	r17, r5
     45e:	26 1d       	adc	r18, r6
     460:	37 1d       	adc	r19, r7
		sum[Y_AXIS] += data[Y_AXIS][i];
     462:	41 91       	ld	r20, Z+
     464:	51 91       	ld	r21, Z+
     466:	2a 01       	movw	r4, r20
     468:	55 0f       	add	r21, r21
     46a:	66 08       	sbc	r6, r6
     46c:	77 08       	sbc	r7, r7
     46e:	84 0c       	add	r8, r4
     470:	95 1c       	adc	r9, r5
     472:	a6 1c       	adc	r10, r6
     474:	b7 1c       	adc	r11, r7
		sum[Z_AXIS] += data[Z_AXIS][i];
     476:	46 a1       	ldd	r20, Z+38	; 0x26
     478:	57 a1       	ldd	r21, Z+39	; 0x27
     47a:	2a 01       	movw	r4, r20
     47c:	55 0f       	add	r21, r21
     47e:	66 08       	sbc	r6, r6
     480:	77 08       	sbc	r7, r7
     482:	c4 0c       	add	r12, r4
     484:	d5 1c       	adc	r13, r5
     486:	e6 1c       	adc	r14, r6
     488:	f7 1c       	adc	r15, r7
	int32_t sum[3];
	sum[0] = 0;
	sum[1] = 0;
	sum[2] = 0;

	for(uint8_t i = 0; i < samples; i++)
     48a:	a8 17       	cp	r26, r24
     48c:	b9 07       	cpc	r27, r25
     48e:	f9 f6       	brne	.-66     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     490:	09 c0       	rjmp	.+18     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
}

void AveragingLinearMPU6050(int16_t data[3][SAMPLES_BUFF_SIZE], uint8_t samples, int16_t results[3])
{
	int32_t sum[3];
	sum[0] = 0;
     492:	00 e0       	ldi	r16, 0x00	; 0
     494:	10 e0       	ldi	r17, 0x00	; 0
     496:	98 01       	movw	r18, r16
	sum[1] = 0;
     498:	81 2c       	mov	r8, r1
     49a:	91 2c       	mov	r9, r1
     49c:	54 01       	movw	r10, r8
	sum[2] = 0;
     49e:	c1 2c       	mov	r12, r1
     4a0:	d1 2c       	mov	r13, r1
     4a2:	76 01       	movw	r14, r12
		sum[X_AXIS] += data[X_AXIS][i];
		sum[Y_AXIS] += data[Y_AXIS][i];
		sum[Z_AXIS] += data[Z_AXIS][i];
	}

	sum[X_AXIS] /= (int32_t) samples;
     4a4:	46 2e       	mov	r4, r22
     4a6:	51 2c       	mov	r5, r1
     4a8:	61 2c       	mov	r6, r1
     4aa:	71 2c       	mov	r7, r1
	sum[Y_AXIS] /= (int32_t) samples;
	sum[Z_AXIS] /= (int32_t) samples;

	results[X_AXIS] = (int16_t) sum[X_AXIS];
     4ac:	c9 01       	movw	r24, r18
     4ae:	b8 01       	movw	r22, r16
     4b0:	a3 01       	movw	r20, r6
     4b2:	92 01       	movw	r18, r4
     4b4:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__divmodsi4>
     4b8:	39 83       	std	Y+1, r19	; 0x01
     4ba:	28 83       	st	Y, r18
	results[Y_AXIS] = (int16_t) sum[Y_AXIS];
     4bc:	c5 01       	movw	r24, r10
     4be:	b4 01       	movw	r22, r8
     4c0:	a3 01       	movw	r20, r6
     4c2:	92 01       	movw	r18, r4
     4c4:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__divmodsi4>
     4c8:	3b 83       	std	Y+3, r19	; 0x03
     4ca:	2a 83       	std	Y+2, r18	; 0x02
	results[Z_AXIS] = (int16_t) sum[Z_AXIS];
     4cc:	c7 01       	movw	r24, r14
     4ce:	b6 01       	movw	r22, r12
     4d0:	a3 01       	movw	r20, r6
     4d2:	92 01       	movw	r18, r4
     4d4:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__divmodsi4>
     4d8:	3d 83       	std	Y+5, r19	; 0x05
     4da:	2c 83       	std	Y+4, r18	; 0x04
}
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	1f 91       	pop	r17
     4e2:	0f 91       	pop	r16
     4e4:	ff 90       	pop	r15
     4e6:	ef 90       	pop	r14
     4e8:	df 90       	pop	r13
     4ea:	cf 90       	pop	r12
     4ec:	bf 90       	pop	r11
     4ee:	af 90       	pop	r10
     4f0:	9f 90       	pop	r9
     4f2:	8f 90       	pop	r8
     4f4:	7f 90       	pop	r7
     4f6:	6f 90       	pop	r6
     4f8:	5f 90       	pop	r5
     4fa:	4f 90       	pop	r4
     4fc:	08 95       	ret

000004fe <ReadGyroBufAveraged>:
	}
}

/*** Before calling this function, make sure there are samples in bufor ***/
void ReadGyroBufAveraged(int16_t gyro[3])
{
     4fe:	ef 92       	push	r14
     500:	ff 92       	push	r15
     502:	1f 93       	push	r17
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	cd b7       	in	r28, 0x3d	; 61
     50a:	de b7       	in	r29, 0x3e	; 62
     50c:	c8 57       	subi	r28, 0x78	; 120
     50e:	d1 09       	sbc	r29, r1
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	f8 94       	cli
     514:	de bf       	out	0x3e, r29	; 62
     516:	0f be       	out	0x3f, r0	; 63
     518:	cd bf       	out	0x3d, r28	; 61
     51a:	7c 01       	movw	r14, r24
	int16_t temp_buf[3][SAMPLES_BUFF_SIZE];	//bufor to store samples
	uint8_t samples;		//number of samples in bufor

	samples = SamplesGyroBuf();
     51c:	0e 94 67 01 	call	0x2ce	; 0x2ce <SamplesGyroBuf>
     520:	18 2f       	mov	r17, r24

	ReadGyroBuf(temp_buf, samples);
     522:	68 2f       	mov	r22, r24
     524:	ce 01       	movw	r24, r28
     526:	01 96       	adiw	r24, 0x01	; 1
     528:	0e 94 79 01 	call	0x2f2	; 0x2f2 <ReadGyroBuf>
	AveragingLinearMPU6050(temp_buf, samples, gyro);
     52c:	a7 01       	movw	r20, r14
     52e:	61 2f       	mov	r22, r17
     530:	ce 01       	movw	r24, r28
     532:	01 96       	adiw	r24, 0x01	; 1
     534:	0e 94 ff 01 	call	0x3fe	; 0x3fe <AveragingLinearMPU6050>
}
     538:	c8 58       	subi	r28, 0x88	; 136
     53a:	df 4f       	sbci	r29, 0xFF	; 255
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	f8 94       	cli
     540:	de bf       	out	0x3e, r29	; 62
     542:	0f be       	out	0x3f, r0	; 63
     544:	cd bf       	out	0x3d, r28	; 61
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	1f 91       	pop	r17
     54c:	ff 90       	pop	r15
     54e:	ef 90       	pop	r14
     550:	08 95       	ret

00000552 <AveragingWeightingMPU6050>:
	results[Y_AXIS] = (int16_t) sum[Y_AXIS];
	results[Z_AXIS] = (int16_t) sum[Z_AXIS];
}

void AveragingWeightingMPU6050(int16_t data[3][SAMPLES_BUFF_SIZE], uint8_t samples, int16_t results[3])
{
     552:	2f 92       	push	r2
     554:	3f 92       	push	r3
     556:	4f 92       	push	r4
     558:	5f 92       	push	r5
     55a:	6f 92       	push	r6
     55c:	7f 92       	push	r7
     55e:	8f 92       	push	r8
     560:	9f 92       	push	r9
     562:	af 92       	push	r10
     564:	bf 92       	push	r11
     566:	cf 92       	push	r12
     568:	df 92       	push	r13
     56a:	ef 92       	push	r14
     56c:	ff 92       	push	r15
     56e:	0f 93       	push	r16
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
     57a:	27 97       	sbiw	r28, 0x07	; 7
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	f8 94       	cli
     580:	de bf       	out	0x3e, r29	; 62
     582:	0f be       	out	0x3f, r0	; 63
     584:	cd bf       	out	0x3d, r28	; 61
     586:	5e 83       	std	Y+6, r21	; 0x06
     588:	4d 83       	std	Y+5, r20	; 0x05
	sum[0] = 0;
	sum[1] = 0;
	sum[2] = 0;
	uint8_t average = 0;

	for(uint8_t i = 0; i < samples; i++)
     58a:	66 23       	and	r22, r22
     58c:	09 f4       	brne	.+2      	; 0x590 <AveragingWeightingMPU6050+0x3e>
     58e:	66 c0       	rjmp	.+204    	; 0x65c <AveragingWeightingMPU6050+0x10a>
     590:	8c 01       	movw	r16, r24
     592:	fc 01       	movw	r30, r24
     594:	b8 96       	adiw	r30, 0x28	; 40
     596:	61 50       	subi	r22, 0x01	; 1
     598:	26 2e       	mov	r2, r22
     59a:	31 2c       	mov	r3, r1
     59c:	25 e1       	ldi	r18, 0x15	; 21
     59e:	22 0e       	add	r2, r18
     5a0:	31 1c       	adc	r3, r1
     5a2:	22 0c       	add	r2, r2
     5a4:	33 1c       	adc	r3, r3
     5a6:	28 0e       	add	r2, r24
     5a8:	39 1e       	adc	r3, r25
     5aa:	c1 2c       	mov	r12, r1
     5ac:	d1 2c       	mov	r13, r1
     5ae:	76 01       	movw	r14, r12
     5b0:	c3 94       	inc	r12
     5b2:	19 82       	std	Y+1, r1	; 0x01
     5b4:	1a 82       	std	Y+2, r1	; 0x02
     5b6:	1b 82       	std	Y+3, r1	; 0x03
     5b8:	1c 82       	std	Y+4, r1	; 0x04
     5ba:	41 2c       	mov	r4, r1
     5bc:	51 2c       	mov	r5, r1
     5be:	32 01       	movw	r6, r4
     5c0:	81 2c       	mov	r8, r1
     5c2:	91 2c       	mov	r9, r1
     5c4:	54 01       	movw	r10, r8
     5c6:	1f 82       	std	Y+7, r1	; 0x07
	{
		average += (i+1)*(i+1);
     5c8:	4f 81       	ldd	r20, Y+7	; 0x07
     5ca:	cc 9c       	mul	r12, r12
     5cc:	40 0d       	add	r20, r0
     5ce:	11 24       	eor	r1, r1
     5d0:	4f 83       	std	Y+7, r20	; 0x07
		sum[X_AXIS] += ((int32_t)data[X_AXIS][i] * (i+1)*(i+1));
     5d2:	d8 01       	movw	r26, r16
     5d4:	8d 91       	ld	r24, X+
     5d6:	9d 91       	ld	r25, X+
     5d8:	8d 01       	movw	r16, r26
     5da:	dc 01       	movw	r26, r24
     5dc:	a7 01       	movw	r20, r14
     5de:	96 01       	movw	r18, r12
     5e0:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__mulshisi3>
     5e4:	9b 01       	movw	r18, r22
     5e6:	ac 01       	movw	r20, r24
     5e8:	c7 01       	movw	r24, r14
     5ea:	b6 01       	movw	r22, r12
     5ec:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <__mulsi3>
     5f0:	29 81       	ldd	r18, Y+1	; 0x01
     5f2:	3a 81       	ldd	r19, Y+2	; 0x02
     5f4:	4b 81       	ldd	r20, Y+3	; 0x03
     5f6:	5c 81       	ldd	r21, Y+4	; 0x04
     5f8:	26 0f       	add	r18, r22
     5fa:	37 1f       	adc	r19, r23
     5fc:	48 1f       	adc	r20, r24
     5fe:	59 1f       	adc	r21, r25
     600:	29 83       	std	Y+1, r18	; 0x01
     602:	3a 83       	std	Y+2, r19	; 0x02
     604:	4b 83       	std	Y+3, r20	; 0x03
     606:	5c 83       	std	Y+4, r21	; 0x04
		sum[Y_AXIS] += ((int32_t)data[Y_AXIS][i] * (i+1)*(i+1));
     608:	a1 91       	ld	r26, Z+
     60a:	b1 91       	ld	r27, Z+
     60c:	a7 01       	movw	r20, r14
     60e:	96 01       	movw	r18, r12
     610:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__mulshisi3>
     614:	9b 01       	movw	r18, r22
     616:	ac 01       	movw	r20, r24
     618:	c7 01       	movw	r24, r14
     61a:	b6 01       	movw	r22, r12
     61c:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <__mulsi3>
     620:	46 0e       	add	r4, r22
     622:	57 1e       	adc	r5, r23
     624:	68 1e       	adc	r6, r24
     626:	79 1e       	adc	r7, r25
		sum[Z_AXIS] += ((int32_t)data[Z_AXIS][i] * (i+1)*(i+1));
     628:	a6 a1       	ldd	r26, Z+38	; 0x26
     62a:	b7 a1       	ldd	r27, Z+39	; 0x27
     62c:	a7 01       	movw	r20, r14
     62e:	96 01       	movw	r18, r12
     630:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__mulshisi3>
     634:	9b 01       	movw	r18, r22
     636:	ac 01       	movw	r20, r24
     638:	c7 01       	movw	r24, r14
     63a:	b6 01       	movw	r22, r12
     63c:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <__mulsi3>
     640:	86 0e       	add	r8, r22
     642:	97 1e       	adc	r9, r23
     644:	a8 1e       	adc	r10, r24
     646:	b9 1e       	adc	r11, r25
     648:	3f ef       	ldi	r19, 0xFF	; 255
     64a:	c3 1a       	sub	r12, r19
     64c:	d3 0a       	sbc	r13, r19
     64e:	e3 0a       	sbc	r14, r19
     650:	f3 0a       	sbc	r15, r19
	sum[0] = 0;
	sum[1] = 0;
	sum[2] = 0;
	uint8_t average = 0;

	for(uint8_t i = 0; i < samples; i++)
     652:	e2 15       	cp	r30, r2
     654:	f3 05       	cpc	r31, r3
     656:	09 f0       	breq	.+2      	; 0x65a <AveragingWeightingMPU6050+0x108>
     658:	b7 cf       	rjmp	.-146    	; 0x5c8 <AveragingWeightingMPU6050+0x76>
     65a:	0b c0       	rjmp	.+22     	; 0x672 <AveragingWeightingMPU6050+0x120>
}

void AveragingWeightingMPU6050(int16_t data[3][SAMPLES_BUFF_SIZE], uint8_t samples, int16_t results[3])
{
	int32_t sum[3];
	sum[0] = 0;
     65c:	19 82       	std	Y+1, r1	; 0x01
     65e:	1a 82       	std	Y+2, r1	; 0x02
     660:	1b 82       	std	Y+3, r1	; 0x03
     662:	1c 82       	std	Y+4, r1	; 0x04
	sum[1] = 0;
     664:	41 2c       	mov	r4, r1
     666:	51 2c       	mov	r5, r1
     668:	32 01       	movw	r6, r4
	sum[2] = 0;
     66a:	81 2c       	mov	r8, r1
     66c:	91 2c       	mov	r9, r1
     66e:	54 01       	movw	r10, r8
	uint8_t average = 0;
     670:	1f 82       	std	Y+7, r1	; 0x07
		sum[X_AXIS] += ((int32_t)data[X_AXIS][i] * (i+1)*(i+1));
		sum[Y_AXIS] += ((int32_t)data[Y_AXIS][i] * (i+1)*(i+1));
		sum[Z_AXIS] += ((int32_t)data[Z_AXIS][i] * (i+1)*(i+1));
	}

	sum[X_AXIS] /= (int32_t) average;
     672:	ff 81       	ldd	r31, Y+7	; 0x07
     674:	cf 2e       	mov	r12, r31
     676:	d1 2c       	mov	r13, r1
     678:	e1 2c       	mov	r14, r1
     67a:	f1 2c       	mov	r15, r1
	sum[Y_AXIS] /= (int32_t) average;
	sum[Z_AXIS] /= (int32_t) average;

	results[X_AXIS] = (int16_t) sum[X_AXIS];
     67c:	69 81       	ldd	r22, Y+1	; 0x01
     67e:	7a 81       	ldd	r23, Y+2	; 0x02
     680:	8b 81       	ldd	r24, Y+3	; 0x03
     682:	9c 81       	ldd	r25, Y+4	; 0x04
     684:	a7 01       	movw	r20, r14
     686:	96 01       	movw	r18, r12
     688:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__divmodsi4>
     68c:	ad 81       	ldd	r26, Y+5	; 0x05
     68e:	be 81       	ldd	r27, Y+6	; 0x06
     690:	2d 93       	st	X+, r18
     692:	3c 93       	st	X, r19
	results[Y_AXIS] = (int16_t) sum[Y_AXIS];
     694:	c3 01       	movw	r24, r6
     696:	b2 01       	movw	r22, r4
     698:	a7 01       	movw	r20, r14
     69a:	96 01       	movw	r18, r12
     69c:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__divmodsi4>
     6a0:	ed 81       	ldd	r30, Y+5	; 0x05
     6a2:	fe 81       	ldd	r31, Y+6	; 0x06
     6a4:	33 83       	std	Z+3, r19	; 0x03
     6a6:	22 83       	std	Z+2, r18	; 0x02
	results[Z_AXIS] = (int16_t) sum[Z_AXIS];
     6a8:	c5 01       	movw	r24, r10
     6aa:	b4 01       	movw	r22, r8
     6ac:	a7 01       	movw	r20, r14
     6ae:	96 01       	movw	r18, r12
     6b0:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__divmodsi4>
     6b4:	ad 81       	ldd	r26, Y+5	; 0x05
     6b6:	be 81       	ldd	r27, Y+6	; 0x06
     6b8:	15 96       	adiw	r26, 0x05	; 5
     6ba:	3c 93       	st	X, r19
     6bc:	2e 93       	st	-X, r18
     6be:	14 97       	sbiw	r26, 0x04	; 4
     6c0:	27 96       	adiw	r28, 0x07	; 7
     6c2:	0f b6       	in	r0, 0x3f	; 63
     6c4:	f8 94       	cli
     6c6:	de bf       	out	0x3e, r29	; 62
     6c8:	0f be       	out	0x3f, r0	; 63
     6ca:	cd bf       	out	0x3d, r28	; 61
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	1f 91       	pop	r17
     6d2:	0f 91       	pop	r16
     6d4:	ff 90       	pop	r15
     6d6:	ef 90       	pop	r14
     6d8:	df 90       	pop	r13
     6da:	cf 90       	pop	r12
     6dc:	bf 90       	pop	r11
     6de:	af 90       	pop	r10
     6e0:	9f 90       	pop	r9
     6e2:	8f 90       	pop	r8
     6e4:	7f 90       	pop	r7
     6e6:	6f 90       	pop	r6
     6e8:	5f 90       	pop	r5
     6ea:	4f 90       	pop	r4
     6ec:	3f 90       	pop	r3
     6ee:	2f 90       	pop	r2
     6f0:	08 95       	ret

000006f2 <ReadAccBufAveraged>:
	AveragingLinearMPU6050(temp_buf, samples, gyro);
}

/*** Before calling this function, make sure there are samples in bufor ***/
void ReadAccBufAveraged(int16_t acc[3])
{
     6f2:	ef 92       	push	r14
     6f4:	ff 92       	push	r15
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
     700:	c8 57       	subi	r28, 0x78	; 120
     702:	d1 09       	sbc	r29, r1
     704:	0f b6       	in	r0, 0x3f	; 63
     706:	f8 94       	cli
     708:	de bf       	out	0x3e, r29	; 62
     70a:	0f be       	out	0x3f, r0	; 63
     70c:	cd bf       	out	0x3d, r28	; 61
     70e:	7c 01       	movw	r14, r24
	int16_t temp_buf[3][SAMPLES_BUFF_SIZE];	//bufor to store samples
	uint8_t samples;	//number of samples in bufor

	samples = SamplesAccBuf();
     710:	0e 94 70 01 	call	0x2e0	; 0x2e0 <SamplesAccBuf>
     714:	18 2f       	mov	r17, r24

	ReadAccBuf(temp_buf, samples);
     716:	68 2f       	mov	r22, r24
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	0e 94 bc 01 	call	0x378	; 0x378 <ReadAccBuf>
	AveragingWeightingMPU6050(temp_buf, samples, acc);
     720:	a7 01       	movw	r20, r14
     722:	61 2f       	mov	r22, r17
     724:	ce 01       	movw	r24, r28
     726:	01 96       	adiw	r24, 0x01	; 1
     728:	0e 94 a9 02 	call	0x552	; 0x552 <AveragingWeightingMPU6050>
}
     72c:	c8 58       	subi	r28, 0x88	; 136
     72e:	df 4f       	sbci	r29, 0xFF	; 255
     730:	0f b6       	in	r0, 0x3f	; 63
     732:	f8 94       	cli
     734:	de bf       	out	0x3e, r29	; 62
     736:	0f be       	out	0x3f, r0	; 63
     738:	cd bf       	out	0x3d, r28	; 61
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	1f 91       	pop	r17
     740:	ff 90       	pop	r15
     742:	ef 90       	pop	r14
     744:	08 95       	ret

00000746 <I2C_start>:
	I2C_start();
	I2C_write(SLA + 1);
	byte = I2C_read(NACK);
	I2C_stop();
	return byte;
}
     746:	84 ea       	ldi	r24, 0xA4	; 164
     748:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     74c:	ec eb       	ldi	r30, 0xBC	; 188
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	80 81       	ld	r24, Z
     752:	88 23       	and	r24, r24
     754:	ec f7       	brge	.-6      	; 0x750 <I2C_start+0xa>
     756:	08 95       	ret

00000758 <I2C_stop>:
     758:	84 e9       	ldi	r24, 0x94	; 148
     75a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     75e:	ec eb       	ldi	r30, 0xBC	; 188
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	80 81       	ld	r24, Z
     764:	84 fd       	sbrc	r24, 4
     766:	fd cf       	rjmp	.-6      	; 0x762 <I2C_stop+0xa>
     768:	08 95       	ret

0000076a <I2C_write>:
     76a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     76e:	84 e8       	ldi	r24, 0x84	; 132
     770:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     774:	ec eb       	ldi	r30, 0xBC	; 188
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	80 81       	ld	r24, Z
     77a:	88 23       	and	r24, r24
     77c:	ec f7       	brge	.-6      	; 0x778 <I2C_write+0xe>
     77e:	08 95       	ret

00000780 <I2C_read>:
     780:	20 e4       	ldi	r18, 0x40	; 64
     782:	82 9f       	mul	r24, r18
     784:	c0 01       	movw	r24, r0
     786:	11 24       	eor	r1, r1
     788:	84 68       	ori	r24, 0x84	; 132
     78a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     78e:	ec eb       	ldi	r30, 0xBC	; 188
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	80 81       	ld	r24, Z
     794:	88 23       	and	r24, r24
     796:	ec f7       	brge	.-6      	; 0x792 <I2C_read+0x12>
     798:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     79c:	08 95       	ret

0000079e <I2C_write_byte>:
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	18 2f       	mov	r17, r24
     7a6:	d6 2f       	mov	r29, r22
     7a8:	c4 2f       	mov	r28, r20
     7aa:	0e 94 a3 03 	call	0x746	; 0x746 <I2C_start>
     7ae:	81 2f       	mov	r24, r17
     7b0:	88 0f       	add	r24, r24
     7b2:	0e 94 b5 03 	call	0x76a	; 0x76a <I2C_write>
     7b6:	8d 2f       	mov	r24, r29
     7b8:	0e 94 b5 03 	call	0x76a	; 0x76a <I2C_write>
     7bc:	8c 2f       	mov	r24, r28
     7be:	0e 94 b5 03 	call	0x76a	; 0x76a <I2C_write>
     7c2:	0e 94 ac 03 	call	0x758	; 0x758 <I2C_stop>
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	08 95       	ret

000007ce <I2C_read_buf>:


void I2C_read_buf(uint8_t SLA, uint8_t adr, uint8_t len, uint8_t *buf) {
     7ce:	ef 92       	push	r14
     7d0:	ff 92       	push	r15
     7d2:	0f 93       	push	r16
     7d4:	1f 93       	push	r17
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	16 2f       	mov	r17, r22
     7dc:	d4 2f       	mov	r29, r20
     7de:	e2 2e       	mov	r14, r18
     7e0:	f3 2e       	mov	r15, r19
	SLA = (SLA<<1);
     7e2:	c8 2f       	mov	r28, r24
     7e4:	cc 0f       	add	r28, r28
	I2C_start();
     7e6:	0e 94 a3 03 	call	0x746	; 0x746 <I2C_start>
	I2C_write(SLA);
     7ea:	8c 2f       	mov	r24, r28
     7ec:	0e 94 b5 03 	call	0x76a	; 0x76a <I2C_write>
	I2C_write(adr);
     7f0:	81 2f       	mov	r24, r17
     7f2:	0e 94 b5 03 	call	0x76a	; 0x76a <I2C_write>
	I2C_start();
     7f6:	0e 94 a3 03 	call	0x746	; 0x746 <I2C_start>
	I2C_write(SLA + 1);
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	8c 0f       	add	r24, r28
     7fe:	0e 94 b5 03 	call	0x76a	; 0x76a <I2C_write>
	while (len--) *buf++ = I2C_read( len ? ACK : NACK );
     802:	cf ef       	ldi	r28, 0xFF	; 255
     804:	cd 0f       	add	r28, r29
     806:	dd 23       	and	r29, r29
     808:	89 f0       	breq	.+34     	; 0x82c <I2C_read_buf+0x5e>
     80a:	0e 2d       	mov	r16, r14
     80c:	1f 2d       	mov	r17, r15
     80e:	d1 e0       	ldi	r29, 0x01	; 1
     810:	f1 2c       	mov	r15, r1
     812:	8d 2f       	mov	r24, r29
     814:	c1 11       	cpse	r28, r1
     816:	01 c0       	rjmp	.+2      	; 0x81a <I2C_read_buf+0x4c>
     818:	8f 2d       	mov	r24, r15
     81a:	0e 94 c0 03 	call	0x780	; 0x780 <I2C_read>
     81e:	f8 01       	movw	r30, r16
     820:	81 93       	st	Z+, r24
     822:	8f 01       	movw	r16, r30
     824:	8c 2f       	mov	r24, r28
     826:	c1 50       	subi	r28, 0x01	; 1
     828:	81 11       	cpse	r24, r1
     82a:	f3 cf       	rjmp	.-26     	; 0x812 <I2C_read_buf+0x44>
	I2C_stop();
     82c:	0e 94 ac 03 	call	0x758	; 0x758 <I2C_stop>
}
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	1f 91       	pop	r17
     836:	0f 91       	pop	r16
     838:	ff 90       	pop	r15
     83a:	ef 90       	pop	r14
     83c:	08 95       	ret

0000083e <main>:


int main(void)
{
//	InitTWI();
	DDRB = (1<<PB5);
     83e:	80 e2       	ldi	r24, 0x20	; 32
     840:	84 b9       	out	0x04, r24	; 4
	TWSR0 = 0x00;
     842:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR0 = 0x0C;
     846:	8c e0       	ldi	r24, 0x0C	; 12
     848:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWCR0 = (1<<TWEN);	//enable TWI
     84c:	84 e0       	ldi	r24, 0x04	; 4
     84e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

// 	test = I2C_read_byte(0x68, 0x75);
// 	test = test & 0b01111110;

	InitUartCOM();
     852:	0e 94 23 0b 	call	0x1646	; 0x1646 <InitUartCOM>
	sei();
     856:	78 94       	sei
	SendLine("Uart dziala");
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <SendLine>

	CalibrateMPU6050(gyro_offset, acc_offset);
     860:	6e ef       	ldi	r22, 0xFE	; 254
     862:	71 e0       	ldi	r23, 0x01	; 1
     864:	84 e0       	ldi	r24, 0x04	; 4
     866:	92 e0       	ldi	r25, 0x02	; 2
     868:	0e 94 3d 04 	call	0x87a	; 0x87a <CalibrateMPU6050>
	InitMPU6050();
     86c:	0e 94 6f 06 	call	0xcde	; 0xcde <InitMPU6050>

    while (1) 
    {
		CheckRxBuffor();
     870:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <CheckRxBuffor>
		ReadMPU6050();
     874:	0e 94 00 07 	call	0xe00	; 0xe00 <ReadMPU6050>
     878:	fb cf       	rjmp	.-10     	; 0x870 <main+0x32>

0000087a <CalibrateMPU6050>:
#include "MPU6050_registers.h"
#include "Uart.h"
#include "Common.h"

void CalibrateMPU6050(int16_t gyro_offset[], int16_t acc_offset[])
{
     87a:	2f 92       	push	r2
     87c:	3f 92       	push	r3
     87e:	4f 92       	push	r4
     880:	5f 92       	push	r5
     882:	6f 92       	push	r6
     884:	7f 92       	push	r7
     886:	8f 92       	push	r8
     888:	9f 92       	push	r9
     88a:	af 92       	push	r10
     88c:	bf 92       	push	r11
     88e:	cf 92       	push	r12
     890:	df 92       	push	r13
     892:	ef 92       	push	r14
     894:	ff 92       	push	r15
     896:	0f 93       	push	r16
     898:	1f 93       	push	r17
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	cd b7       	in	r28, 0x3d	; 61
     8a0:	de b7       	in	r29, 0x3e	; 62
     8a2:	a4 97       	sbiw	r28, 0x24	; 36
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	f8 94       	cli
     8a8:	de bf       	out	0x3e, r29	; 62
     8aa:	0f be       	out	0x3f, r0	; 63
     8ac:	cd bf       	out	0x3d, r28	; 61
     8ae:	9a a3       	std	Y+34, r25	; 0x22
     8b0:	89 a3       	std	Y+33, r24	; 0x21
     8b2:	7c a3       	std	Y+36, r23	; 0x24
     8b4:	6b a3       	std	Y+35, r22	; 0x23
	int32_t gyro_bias[3] = {0, 0, 0};
	int32_t accel_bias[3] = {0, 0, 0};
	packet_total = 0;

	// reset device, reset all registers, clear gyro and accelerometer bias registers
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
     8b6:	40 e8       	ldi	r20, 0x80	; 128
     8b8:	50 e0       	ldi	r21, 0x00	; 0
     8ba:	6b e6       	ldi	r22, 0x6B	; 107
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	88 e6       	ldi	r24, 0x68	; 104
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8c6:	2f ef       	ldi	r18, 0xFF	; 255
     8c8:	31 ee       	ldi	r19, 0xE1	; 225
     8ca:	44 e0       	ldi	r20, 0x04	; 4
     8cc:	21 50       	subi	r18, 0x01	; 1
     8ce:	30 40       	sbci	r19, 0x00	; 0
     8d0:	40 40       	sbci	r20, 0x00	; 0
     8d2:	e1 f7       	brne	.-8      	; 0x8cc <CalibrateMPU6050+0x52>
     8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <CalibrateMPU6050+0x5c>
     8d6:	00 00       	nop
	_delay_ms(100);

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x01);
     8d8:	41 e0       	ldi	r20, 0x01	; 1
     8da:	50 e0       	ldi	r21, 0x00	; 0
     8dc:	6b e6       	ldi	r22, 0x6B	; 107
     8de:	70 e0       	ldi	r23, 0x00	; 0
     8e0:	88 e6       	ldi	r24, 0x68	; 104
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_2, 0x00);
     8e8:	40 e0       	ldi	r20, 0x00	; 0
     8ea:	50 e0       	ldi	r21, 0x00	; 0
     8ec:	6c e6       	ldi	r22, 0x6C	; 108
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	88 e6       	ldi	r24, 0x68	; 104
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
     8f8:	5f ef       	ldi	r21, 0xFF	; 255
     8fa:	63 ec       	ldi	r22, 0xC3	; 195
     8fc:	79 e0       	ldi	r23, 0x09	; 9
     8fe:	51 50       	subi	r21, 0x01	; 1
     900:	60 40       	sbci	r22, 0x00	; 0
     902:	70 40       	sbci	r23, 0x00	; 0
     904:	e1 f7       	brne	.-8      	; 0x8fe <CalibrateMPU6050+0x84>
     906:	00 c0       	rjmp	.+0      	; 0x908 <__stack+0x9>
     908:	00 00       	nop
	_delay_ms(200);

	// Configure device for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
     90a:	40 e0       	ldi	r20, 0x00	; 0
     90c:	50 e0       	ldi	r21, 0x00	; 0
     90e:	68 e3       	ldi	r22, 0x38	; 56
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	88 e6       	ldi	r24, 0x68	; 104
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
     91a:	40 e0       	ldi	r20, 0x00	; 0
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	63 e2       	ldi	r22, 0x23	; 35
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
     92a:	40 e0       	ldi	r20, 0x00	; 0
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	6b e6       	ldi	r22, 0x6B	; 107
     930:	70 e0       	ldi	r23, 0x00	; 0
     932:	88 e6       	ldi	r24, 0x68	; 104
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
     93a:	40 e0       	ldi	r20, 0x00	; 0
     93c:	50 e0       	ldi	r21, 0x00	; 0
     93e:	64 e2       	ldi	r22, 0x24	; 36
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	88 e6       	ldi	r24, 0x68	; 104
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
     94a:	40 e0       	ldi	r20, 0x00	; 0
     94c:	50 e0       	ldi	r21, 0x00	; 0
     94e:	6a e6       	ldi	r22, 0x6A	; 106
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	88 e6       	ldi	r24, 0x68	; 104
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
     95a:	4c e0       	ldi	r20, 0x0C	; 12
     95c:	50 e0       	ldi	r21, 0x00	; 0
     95e:	6a e6       	ldi	r22, 0x6A	; 106
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	88 e6       	ldi	r24, 0x68	; 104
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
     96a:	8f e5       	ldi	r24, 0x5F	; 95
     96c:	9a ee       	ldi	r25, 0xEA	; 234
     96e:	01 97       	sbiw	r24, 0x01	; 1
     970:	f1 f7       	brne	.-4      	; 0x96e <__stack+0x6f>
     972:	00 c0       	rjmp	.+0      	; 0x974 <__stack+0x75>
     974:	00 00       	nop
	_delay_ms(15);

	// Configure MPU6050 gyro and accelerometer for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
     976:	41 e0       	ldi	r20, 0x01	; 1
     978:	50 e0       	ldi	r21, 0x00	; 0
     97a:	6a e1       	ldi	r22, 0x1A	; 26
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	88 e6       	ldi	r24, 0x68	; 104
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
     986:	40 e0       	ldi	r20, 0x00	; 0
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	69 e1       	ldi	r22, 0x19	; 25
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	88 e6       	ldi	r24, 0x68	; 104
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
     996:	40 e0       	ldi	r20, 0x00	; 0
     998:	50 e0       	ldi	r21, 0x00	; 0
     99a:	6b e1       	ldi	r22, 0x1B	; 27
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	88 e6       	ldi	r24, 0x68	; 104
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
     9a6:	40 e0       	ldi	r20, 0x00	; 0
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	6c e1       	ldi	r22, 0x1C	; 28
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	88 e6       	ldi	r24, 0x68	; 104
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
     9b6:	40 e4       	ldi	r20, 0x40	; 64
     9b8:	50 e0       	ldi	r21, 0x00	; 0
     9ba:	6a e6       	ldi	r22, 0x6A	; 106
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	88 e6       	ldi	r24, 0x68	; 104
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 1024 bytes in MPU-6050)
     9c6:	48 e7       	ldi	r20, 0x78	; 120
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	63 e2       	ldi	r22, 0x23	; 35
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	88 e6       	ldi	r24, 0x68	; 104
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
     9d6:	af e1       	ldi	r26, 0x1F	; 31
     9d8:	be e4       	ldi	r27, 0x4E	; 78
     9da:	11 97       	sbiw	r26, 0x01	; 1
     9dc:	f1 f7       	brne	.-4      	; 0x9da <__stack+0xdb>
     9de:	00 c0       	rjmp	.+0      	; 0x9e0 <__stack+0xe1>
     9e0:	00 00       	nop
     9e2:	bf ef       	ldi	r27, 0xFF	; 255
     9e4:	ef e8       	ldi	r30, 0x8F	; 143
     9e6:	f1 e0       	ldi	r31, 0x01	; 1
     9e8:	b1 50       	subi	r27, 0x01	; 1
     9ea:	e0 40       	sbci	r30, 0x00	; 0
     9ec:	f0 40       	sbci	r31, 0x00	; 0
     9ee:	e1 f7       	brne	.-8      	; 0x9e8 <__stack+0xe9>
     9f0:	00 c0       	rjmp	.+0      	; 0x9f2 <__stack+0xf3>
     9f2:	00 00       	nop

void CalibrateMPU6050(int16_t gyro_offset[], int16_t acc_offset[])
{
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, jj, packet_count, packet_total, fifo_count;
	int32_t gyro_bias[3] = {0, 0, 0};
     9f4:	19 8e       	std	Y+25, r1	; 0x19
     9f6:	1a 8e       	std	Y+26, r1	; 0x1a
     9f8:	1b 8e       	std	Y+27, r1	; 0x1b
     9fa:	1c 8e       	std	Y+28, r1	; 0x1c
     9fc:	41 2c       	mov	r4, r1
     9fe:	51 2c       	mov	r5, r1
     a00:	32 01       	movw	r6, r4
     a02:	81 2c       	mov	r8, r1
     a04:	91 2c       	mov	r9, r1
     a06:	54 01       	movw	r10, r8
	int32_t accel_bias[3] = {0, 0, 0};
     a08:	1d 8a       	std	Y+21, r1	; 0x15
     a0a:	1e 8a       	std	Y+22, r1	; 0x16
     a0c:	1f 8a       	std	Y+23, r1	; 0x17
     a0e:	18 8e       	std	Y+24, r1	; 0x18
     a10:	19 8a       	std	Y+17, r1	; 0x11
     a12:	1a 8a       	std	Y+18, r1	; 0x12
     a14:	1b 8a       	std	Y+19, r1	; 0x13
     a16:	1c 8a       	std	Y+20, r1	; 0x14
     a18:	1d 86       	std	Y+13, r1	; 0x0d
     a1a:	1e 86       	std	Y+14, r1	; 0x0e
     a1c:	1f 86       	std	Y+15, r1	; 0x0f
     a1e:	18 8a       	std	Y+16, r1	; 0x10
	packet_total = 0;
     a20:	c1 2c       	mov	r12, r1
     a22:	d1 2c       	mov	r13, r1
	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 1024 bytes in MPU-6050)
	_delay_ms(5);

	for (jj = 0; jj < 20; jj++)	//read samples for 1 second
     a24:	21 2c       	mov	r2, r1
     a26:	31 2c       	mov	r3, r1
     a28:	15 c0       	rjmp	.+42     	; 0xa54 <__stack+0x155>
     a2a:	2f ef       	ldi	r18, 0xFF	; 255
     a2c:	3f e8       	ldi	r19, 0x8F	; 143
     a2e:	41 e0       	ldi	r20, 0x01	; 1
     a30:	21 50       	subi	r18, 0x01	; 1
     a32:	30 40       	sbci	r19, 0x00	; 0
     a34:	40 40       	sbci	r20, 0x00	; 0
     a36:	e1 f7       	brne	.-8      	; 0xa30 <__stack+0x131>
     a38:	00 c0       	rjmp	.+0      	; 0xa3a <__stack+0x13b>
     a3a:	00 00       	nop
	{
		_delay_ms(32); // accumulate 50 samples in 50 milliseconds = 600 bytes
		// At end of sample accumulation, turn off FIFO sensor read
		if (jj == 19)	// Disable gyro and accelerometer sensors for FIFO
     a3c:	53 e1       	ldi	r21, 0x13	; 19
     a3e:	25 16       	cp	r2, r21
     a40:	31 04       	cpc	r3, r1
     a42:	41 f4       	brne	.+16     	; 0xa54 <__stack+0x155>
			I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x00);
     a44:	40 e0       	ldi	r20, 0x00	; 0
     a46:	50 e0       	ldi	r21, 0x00	; 0
     a48:	63 e2       	ldi	r22, 0x23	; 35
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	88 e6       	ldi	r24, 0x68	; 104
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
		I2C_read_buf(MPU6050_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
     a54:	9e 01       	movw	r18, r28
     a56:	2f 5f       	subi	r18, 0xFF	; 255
     a58:	3f 4f       	sbci	r19, 0xFF	; 255
     a5a:	42 e0       	ldi	r20, 0x02	; 2
     a5c:	50 e0       	ldi	r21, 0x00	; 0
     a5e:	62 e7       	ldi	r22, 0x72	; 114
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	88 e6       	ldi	r24, 0x68	; 104
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	0e 94 e7 03 	call	0x7ce	; 0x7ce <I2C_read_buf>
		fifo_count = ((uint16_t)data[0] << 8) | data[1];

		packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
     a6a:	29 81       	ldd	r18, Y+1	; 0x01
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	32 2f       	mov	r19, r18
     a70:	22 27       	eor	r18, r18
     a72:	8a 81       	ldd	r24, Y+2	; 0x02
     a74:	28 2b       	or	r18, r24
     a76:	ab ea       	ldi	r26, 0xAB	; 171
     a78:	ba ea       	ldi	r27, 0xAA	; 170
     a7a:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__umulhisi3>
     a7e:	7c 01       	movw	r14, r24
     a80:	f6 94       	lsr	r15
     a82:	e7 94       	ror	r14
     a84:	f6 94       	lsr	r15
     a86:	e7 94       	ror	r14
     a88:	f6 94       	lsr	r15
     a8a:	e7 94       	ror	r14

		for (ii = 0; ii < packet_count; ii++) 
     a8c:	e1 14       	cp	r14, r1
     a8e:	f1 04       	cpc	r15, r1
     a90:	09 f4       	brne	.+2      	; 0xa94 <__stack+0x195>
     a92:	8f c0       	rjmp	.+286    	; 0xbb2 <__stack+0x2b3>
     a94:	00 e0       	ldi	r16, 0x00	; 0
     a96:	10 e0       	ldi	r17, 0x00	; 0
		{
			int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
			I2C_read_buf(MPU6050_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
     a98:	9e 01       	movw	r18, r28
     a9a:	2f 5f       	subi	r18, 0xFF	; 255
     a9c:	3f 4f       	sbci	r19, 0xFF	; 255
     a9e:	4c e0       	ldi	r20, 0x0C	; 12
     aa0:	50 e0       	ldi	r21, 0x00	; 0
     aa2:	64 e7       	ldi	r22, 0x74	; 116
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	88 e6       	ldi	r24, 0x68	; 104
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	0e 94 e7 03 	call	0x7ce	; 0x7ce <I2C_read_buf>
			if (packet_total < 1024)
     aae:	c1 14       	cp	r12, r1
     ab0:	64 e0       	ldi	r22, 0x04	; 4
     ab2:	d6 06       	cpc	r13, r22
     ab4:	08 f0       	brcs	.+2      	; 0xab8 <__stack+0x1b9>
     ab6:	77 c0       	rjmp	.+238    	; 0xba6 <__stack+0x2a7>
			{
				packet_total++;
     ab8:	7f ef       	ldi	r23, 0xFF	; 255
     aba:	c7 1a       	sub	r12, r23
     abc:	d7 0a       	sbc	r13, r23
				accel_temp[2] = (int16_t) (((int16_t)data[4] << 8)  | data[5] ) ;
				gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8)  | data[7] ) ;
				gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8)  | data[9] ) ;
				gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
		
				accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
     abe:	89 81       	ldd	r24, Y+1	; 0x01
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	98 2f       	mov	r25, r24
     ac4:	88 27       	eor	r24, r24
     ac6:	2a 81       	ldd	r18, Y+2	; 0x02
     ac8:	82 2b       	or	r24, r18
     aca:	09 2e       	mov	r0, r25
     acc:	00 0c       	add	r0, r0
     ace:	aa 0b       	sbc	r26, r26
     ad0:	bb 0b       	sbc	r27, r27
     ad2:	2d 89       	ldd	r18, Y+21	; 0x15
     ad4:	3e 89       	ldd	r19, Y+22	; 0x16
     ad6:	4f 89       	ldd	r20, Y+23	; 0x17
     ad8:	58 8d       	ldd	r21, Y+24	; 0x18
     ada:	28 0f       	add	r18, r24
     adc:	39 1f       	adc	r19, r25
     ade:	4a 1f       	adc	r20, r26
     ae0:	5b 1f       	adc	r21, r27
     ae2:	2d 8b       	std	Y+21, r18	; 0x15
     ae4:	3e 8b       	std	Y+22, r19	; 0x16
     ae6:	4f 8b       	std	Y+23, r20	; 0x17
     ae8:	58 8f       	std	Y+24, r21	; 0x18
				accel_bias[1] += (int32_t) accel_temp[1];
     aea:	8b 81       	ldd	r24, Y+3	; 0x03
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	98 2f       	mov	r25, r24
     af0:	88 27       	eor	r24, r24
     af2:	2c 81       	ldd	r18, Y+4	; 0x04
     af4:	82 2b       	or	r24, r18
     af6:	09 2e       	mov	r0, r25
     af8:	00 0c       	add	r0, r0
     afa:	aa 0b       	sbc	r26, r26
     afc:	bb 0b       	sbc	r27, r27
     afe:	49 89       	ldd	r20, Y+17	; 0x11
     b00:	5a 89       	ldd	r21, Y+18	; 0x12
     b02:	6b 89       	ldd	r22, Y+19	; 0x13
     b04:	7c 89       	ldd	r23, Y+20	; 0x14
     b06:	48 0f       	add	r20, r24
     b08:	59 1f       	adc	r21, r25
     b0a:	6a 1f       	adc	r22, r26
     b0c:	7b 1f       	adc	r23, r27
     b0e:	49 8b       	std	Y+17, r20	; 0x11
     b10:	5a 8b       	std	Y+18, r21	; 0x12
     b12:	6b 8b       	std	Y+19, r22	; 0x13
     b14:	7c 8b       	std	Y+20, r23	; 0x14
				accel_bias[2] += (int32_t) accel_temp[2];
     b16:	8d 81       	ldd	r24, Y+5	; 0x05
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	98 2f       	mov	r25, r24
     b1c:	88 27       	eor	r24, r24
     b1e:	2e 81       	ldd	r18, Y+6	; 0x06
     b20:	82 2b       	or	r24, r18
     b22:	09 2e       	mov	r0, r25
     b24:	00 0c       	add	r0, r0
     b26:	aa 0b       	sbc	r26, r26
     b28:	bb 0b       	sbc	r27, r27
     b2a:	2d 85       	ldd	r18, Y+13	; 0x0d
     b2c:	3e 85       	ldd	r19, Y+14	; 0x0e
     b2e:	4f 85       	ldd	r20, Y+15	; 0x0f
     b30:	58 89       	ldd	r21, Y+16	; 0x10
     b32:	28 0f       	add	r18, r24
     b34:	39 1f       	adc	r19, r25
     b36:	4a 1f       	adc	r20, r26
     b38:	5b 1f       	adc	r21, r27
     b3a:	2d 87       	std	Y+13, r18	; 0x0d
     b3c:	3e 87       	std	Y+14, r19	; 0x0e
     b3e:	4f 87       	std	Y+15, r20	; 0x0f
     b40:	58 8b       	std	Y+16, r21	; 0x10
				gyro_bias[0]  += (int32_t) gyro_temp[0];
     b42:	8f 81       	ldd	r24, Y+7	; 0x07
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	98 2f       	mov	r25, r24
     b48:	88 27       	eor	r24, r24
     b4a:	28 85       	ldd	r18, Y+8	; 0x08
     b4c:	82 2b       	or	r24, r18
     b4e:	09 2e       	mov	r0, r25
     b50:	00 0c       	add	r0, r0
     b52:	aa 0b       	sbc	r26, r26
     b54:	bb 0b       	sbc	r27, r27
     b56:	49 8d       	ldd	r20, Y+25	; 0x19
     b58:	5a 8d       	ldd	r21, Y+26	; 0x1a
     b5a:	6b 8d       	ldd	r22, Y+27	; 0x1b
     b5c:	7c 8d       	ldd	r23, Y+28	; 0x1c
     b5e:	48 0f       	add	r20, r24
     b60:	59 1f       	adc	r21, r25
     b62:	6a 1f       	adc	r22, r26
     b64:	7b 1f       	adc	r23, r27
     b66:	49 8f       	std	Y+25, r20	; 0x19
     b68:	5a 8f       	std	Y+26, r21	; 0x1a
     b6a:	6b 8f       	std	Y+27, r22	; 0x1b
     b6c:	7c 8f       	std	Y+28, r23	; 0x1c
				gyro_bias[1]  += (int32_t) gyro_temp[1];
     b6e:	89 85       	ldd	r24, Y+9	; 0x09
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	98 2f       	mov	r25, r24
     b74:	88 27       	eor	r24, r24
     b76:	2a 85       	ldd	r18, Y+10	; 0x0a
     b78:	82 2b       	or	r24, r18
     b7a:	09 2e       	mov	r0, r25
     b7c:	00 0c       	add	r0, r0
     b7e:	aa 0b       	sbc	r26, r26
     b80:	bb 0b       	sbc	r27, r27
     b82:	48 0e       	add	r4, r24
     b84:	59 1e       	adc	r5, r25
     b86:	6a 1e       	adc	r6, r26
     b88:	7b 1e       	adc	r7, r27
				gyro_bias[2]  += (int32_t) gyro_temp[2];
     b8a:	8b 85       	ldd	r24, Y+11	; 0x0b
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	98 2f       	mov	r25, r24
     b90:	88 27       	eor	r24, r24
     b92:	2c 85       	ldd	r18, Y+12	; 0x0c
     b94:	82 2b       	or	r24, r18
     b96:	09 2e       	mov	r0, r25
     b98:	00 0c       	add	r0, r0
     b9a:	aa 0b       	sbc	r26, r26
     b9c:	bb 0b       	sbc	r27, r27
     b9e:	88 0e       	add	r8, r24
     ba0:	99 1e       	adc	r9, r25
     ba2:	aa 1e       	adc	r10, r26
     ba4:	bb 1e       	adc	r11, r27
		I2C_read_buf(MPU6050_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
		fifo_count = ((uint16_t)data[0] << 8) | data[1];

		packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging

		for (ii = 0; ii < packet_count; ii++) 
     ba6:	0f 5f       	subi	r16, 0xFF	; 255
     ba8:	1f 4f       	sbci	r17, 0xFF	; 255
     baa:	e0 16       	cp	r14, r16
     bac:	f1 06       	cpc	r15, r17
     bae:	09 f0       	breq	.+2      	; 0xbb2 <__stack+0x2b3>
     bb0:	73 cf       	rjmp	.-282    	; 0xa98 <__stack+0x199>
	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 1024 bytes in MPU-6050)
	_delay_ms(5);

	for (jj = 0; jj < 20; jj++)	//read samples for 1 second
     bb2:	5f ef       	ldi	r21, 0xFF	; 255
     bb4:	25 1a       	sub	r2, r21
     bb6:	35 0a       	sbc	r3, r21
     bb8:	64 e1       	ldi	r22, 0x14	; 20
     bba:	26 16       	cp	r2, r22
     bbc:	31 04       	cpc	r3, r1
     bbe:	09 f0       	breq	.+2      	; 0xbc2 <__stack+0x2c3>
     bc0:	34 cf       	rjmp	.-408    	; 0xa2a <__stack+0x12b>
				gyro_bias[2]  += (int32_t) gyro_temp[2];
			}
		}
	}

	accel_bias[0] /= (int32_t) packet_total; // Normalize sums to get average count biases
     bc2:	c6 01       	movw	r24, r12
     bc4:	a0 e0       	ldi	r26, 0x00	; 0
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	8d 8f       	std	Y+29, r24	; 0x1d
     bca:	9e 8f       	std	Y+30, r25	; 0x1e
     bcc:	af 8f       	std	Y+31, r26	; 0x1f
     bce:	b8 a3       	std	Y+32, r27	; 0x20
     bd0:	6d 89       	ldd	r22, Y+21	; 0x15
     bd2:	7e 89       	ldd	r23, Y+22	; 0x16
     bd4:	8f 89       	ldd	r24, Y+23	; 0x17
     bd6:	98 8d       	ldd	r25, Y+24	; 0x18
     bd8:	2d 8d       	ldd	r18, Y+29	; 0x1d
     bda:	3e 8d       	ldd	r19, Y+30	; 0x1e
     bdc:	4f 8d       	ldd	r20, Y+31	; 0x1f
     bde:	58 a1       	ldd	r21, Y+32	; 0x20
     be0:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__divmodsi4>
     be4:	2d 8b       	std	Y+21, r18	; 0x15
     be6:	3e 8b       	std	Y+22, r19	; 0x16
     be8:	4f 8b       	std	Y+23, r20	; 0x17
     bea:	58 8f       	std	Y+24, r21	; 0x18
	accel_bias[1] /= (int32_t) packet_total;
     bec:	69 89       	ldd	r22, Y+17	; 0x11
     bee:	7a 89       	ldd	r23, Y+18	; 0x12
     bf0:	8b 89       	ldd	r24, Y+19	; 0x13
     bf2:	9c 89       	ldd	r25, Y+20	; 0x14
     bf4:	2d 8d       	ldd	r18, Y+29	; 0x1d
     bf6:	3e 8d       	ldd	r19, Y+30	; 0x1e
     bf8:	4f 8d       	ldd	r20, Y+31	; 0x1f
     bfa:	58 a1       	ldd	r21, Y+32	; 0x20
     bfc:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__divmodsi4>
     c00:	29 8b       	std	Y+17, r18	; 0x11
     c02:	3a 8b       	std	Y+18, r19	; 0x12
     c04:	4b 8b       	std	Y+19, r20	; 0x13
     c06:	5c 8b       	std	Y+20, r21	; 0x14
	accel_bias[2] /= (int32_t) packet_total;
     c08:	6d 85       	ldd	r22, Y+13	; 0x0d
     c0a:	7e 85       	ldd	r23, Y+14	; 0x0e
     c0c:	8f 85       	ldd	r24, Y+15	; 0x0f
     c0e:	98 89       	ldd	r25, Y+16	; 0x10
     c10:	2d 8d       	ldd	r18, Y+29	; 0x1d
     c12:	3e 8d       	ldd	r19, Y+30	; 0x1e
     c14:	4f 8d       	ldd	r20, Y+31	; 0x1f
     c16:	58 a1       	ldd	r21, Y+32	; 0x20
     c18:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__divmodsi4>
     c1c:	69 01       	movw	r12, r18
     c1e:	7a 01       	movw	r14, r20
	gyro_bias[0]  /= (int32_t) packet_total;
     c20:	69 8d       	ldd	r22, Y+25	; 0x19
     c22:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c24:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c26:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c28:	2d 8d       	ldd	r18, Y+29	; 0x1d
     c2a:	3e 8d       	ldd	r19, Y+30	; 0x1e
     c2c:	4f 8d       	ldd	r20, Y+31	; 0x1f
     c2e:	58 a1       	ldd	r21, Y+32	; 0x20
     c30:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__divmodsi4>
     c34:	2d 87       	std	Y+13, r18	; 0x0d
     c36:	3e 87       	std	Y+14, r19	; 0x0e
     c38:	4f 87       	std	Y+15, r20	; 0x0f
     c3a:	58 8b       	std	Y+16, r21	; 0x10
	gyro_bias[1]  /= (int32_t) packet_total;
     c3c:	c3 01       	movw	r24, r6
     c3e:	b2 01       	movw	r22, r4
     c40:	2d 8d       	ldd	r18, Y+29	; 0x1d
     c42:	3e 8d       	ldd	r19, Y+30	; 0x1e
     c44:	4f 8d       	ldd	r20, Y+31	; 0x1f
     c46:	58 a1       	ldd	r21, Y+32	; 0x20
     c48:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__divmodsi4>
     c4c:	29 01       	movw	r4, r18
     c4e:	3a 01       	movw	r6, r20
	gyro_bias[2]  /= (int32_t) packet_total;
     c50:	c5 01       	movw	r24, r10
     c52:	b4 01       	movw	r22, r8
     c54:	2d 8d       	ldd	r18, Y+29	; 0x1d
     c56:	3e 8d       	ldd	r19, Y+30	; 0x1e
     c58:	4f 8d       	ldd	r20, Y+31	; 0x1f
     c5a:	58 a1       	ldd	r21, Y+32	; 0x20
     c5c:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__divmodsi4>

	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
     c60:	1c 14       	cp	r1, r12
     c62:	1d 04       	cpc	r1, r13
     c64:	1e 04       	cpc	r1, r14
     c66:	1f 04       	cpc	r1, r15
     c68:	34 f4       	brge	.+12     	; 0xc76 <__stack+0x377>
     c6a:	d7 01       	movw	r26, r14
     c6c:	c6 01       	movw	r24, r12
     c6e:	90 54       	subi	r25, 0x40	; 64
     c70:	a1 09       	sbc	r26, r1
     c72:	b1 09       	sbc	r27, r1
     c74:	05 c0       	rjmp	.+10     	; 0xc80 <__stack+0x381>
	else {accel_bias[2] += (int32_t) accelsensitivity;}
     c76:	d7 01       	movw	r26, r14
     c78:	c6 01       	movw	r24, r12
     c7a:	90 5c       	subi	r25, 0xC0	; 192
     c7c:	af 4f       	sbci	r26, 0xFF	; 255
     c7e:	bf 4f       	sbci	r27, 0xFF	; 255
	
	gyro_offset[0] = (int16_t) gyro_bias[0];
     c80:	6d 85       	ldd	r22, Y+13	; 0x0d
     c82:	7e 85       	ldd	r23, Y+14	; 0x0e
     c84:	e9 a1       	ldd	r30, Y+33	; 0x21
     c86:	fa a1       	ldd	r31, Y+34	; 0x22
     c88:	71 83       	std	Z+1, r23	; 0x01
     c8a:	60 83       	st	Z, r22
	gyro_offset[1] = (int16_t) gyro_bias[1];
     c8c:	53 82       	std	Z+3, r5	; 0x03
     c8e:	42 82       	std	Z+2, r4	; 0x02
	gyro_offset[2] = (int16_t) gyro_bias[2];
     c90:	35 83       	std	Z+5, r19	; 0x05
     c92:	24 83       	std	Z+4, r18	; 0x04

	acc_offset[0]  = (int16_t) accel_bias[0];
     c94:	2d 89       	ldd	r18, Y+21	; 0x15
     c96:	3e 89       	ldd	r19, Y+22	; 0x16
     c98:	eb a1       	ldd	r30, Y+35	; 0x23
     c9a:	fc a1       	ldd	r31, Y+36	; 0x24
     c9c:	31 83       	std	Z+1, r19	; 0x01
     c9e:	20 83       	st	Z, r18
	acc_offset[1]  = (int16_t) accel_bias[1];
     ca0:	49 89       	ldd	r20, Y+17	; 0x11
     ca2:	5a 89       	ldd	r21, Y+18	; 0x12
     ca4:	53 83       	std	Z+3, r21	; 0x03
     ca6:	42 83       	std	Z+2, r20	; 0x02
	acc_offset[2]  = (int16_t) accel_bias[2];
     ca8:	95 83       	std	Z+5, r25	; 0x05
     caa:	84 83       	std	Z+4, r24	; 0x04
}
     cac:	a4 96       	adiw	r28, 0x24	; 36
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	1f 91       	pop	r17
     cbe:	0f 91       	pop	r16
     cc0:	ff 90       	pop	r15
     cc2:	ef 90       	pop	r14
     cc4:	df 90       	pop	r13
     cc6:	cf 90       	pop	r12
     cc8:	bf 90       	pop	r11
     cca:	af 90       	pop	r10
     ccc:	9f 90       	pop	r9
     cce:	8f 90       	pop	r8
     cd0:	7f 90       	pop	r7
     cd2:	6f 90       	pop	r6
     cd4:	5f 90       	pop	r5
     cd6:	4f 90       	pop	r4
     cd8:	3f 90       	pop	r3
     cda:	2f 90       	pop	r2
     cdc:	08 95       	ret

00000cde <InitMPU6050>:


void InitMPU6050(void)
{
	// reset device, reset all registers, clear gyro and accelerometer bias registers
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
     cde:	40 e8       	ldi	r20, 0x80	; 128
     ce0:	50 e0       	ldi	r21, 0x00	; 0
     ce2:	6b e6       	ldi	r22, 0x6B	; 107
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	88 e6       	ldi	r24, 0x68	; 104
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
     cee:	2f ef       	ldi	r18, 0xFF	; 255
     cf0:	81 ee       	ldi	r24, 0xE1	; 225
     cf2:	94 e0       	ldi	r25, 0x04	; 4
     cf4:	21 50       	subi	r18, 0x01	; 1
     cf6:	80 40       	sbci	r24, 0x00	; 0
     cf8:	90 40       	sbci	r25, 0x00	; 0
     cfa:	e1 f7       	brne	.-8      	; 0xcf4 <InitMPU6050+0x16>
     cfc:	00 c0       	rjmp	.+0      	; 0xcfe <InitMPU6050+0x20>
     cfe:	00 00       	nop
	_delay_ms(100);

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x01);
     d00:	41 e0       	ldi	r20, 0x01	; 1
     d02:	50 e0       	ldi	r21, 0x00	; 0
     d04:	6b e6       	ldi	r22, 0x6B	; 107
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	88 e6       	ldi	r24, 0x68	; 104
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_2, 0x00);
     d10:	40 e0       	ldi	r20, 0x00	; 0
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	6c e6       	ldi	r22, 0x6C	; 108
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	88 e6       	ldi	r24, 0x68	; 104
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
     d20:	2f ef       	ldi	r18, 0xFF	; 255
     d22:	83 ec       	ldi	r24, 0xC3	; 195
     d24:	99 e0       	ldi	r25, 0x09	; 9
     d26:	21 50       	subi	r18, 0x01	; 1
     d28:	80 40       	sbci	r24, 0x00	; 0
     d2a:	90 40       	sbci	r25, 0x00	; 0
     d2c:	e1 f7       	brne	.-8      	; 0xd26 <InitMPU6050+0x48>
     d2e:	00 c0       	rjmp	.+0      	; 0xd30 <InitMPU6050+0x52>
     d30:	00 00       	nop
	_delay_ms(200);

	// Configure device for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
     d32:	40 e0       	ldi	r20, 0x00	; 0
     d34:	50 e0       	ldi	r21, 0x00	; 0
     d36:	68 e3       	ldi	r22, 0x38	; 56
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	88 e6       	ldi	r24, 0x68	; 104
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
     d42:	40 e0       	ldi	r20, 0x00	; 0
     d44:	50 e0       	ldi	r21, 0x00	; 0
     d46:	63 e2       	ldi	r22, 0x23	; 35
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	88 e6       	ldi	r24, 0x68	; 104
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	50 e0       	ldi	r21, 0x00	; 0
     d56:	6b e6       	ldi	r22, 0x6B	; 107
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	88 e6       	ldi	r24, 0x68	; 104
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
     d62:	40 e0       	ldi	r20, 0x00	; 0
     d64:	50 e0       	ldi	r21, 0x00	; 0
     d66:	64 e2       	ldi	r22, 0x24	; 36
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	88 e6       	ldi	r24, 0x68	; 104
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
     d72:	40 e0       	ldi	r20, 0x00	; 0
     d74:	50 e0       	ldi	r21, 0x00	; 0
     d76:	6a e6       	ldi	r22, 0x6A	; 106
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	88 e6       	ldi	r24, 0x68	; 104
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
     d82:	4c e0       	ldi	r20, 0x0C	; 12
     d84:	50 e0       	ldi	r21, 0x00	; 0
     d86:	6a e6       	ldi	r22, 0x6A	; 106
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	88 e6       	ldi	r24, 0x68	; 104
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
     d92:	8f e5       	ldi	r24, 0x5F	; 95
     d94:	9a ee       	ldi	r25, 0xEA	; 234
     d96:	01 97       	sbiw	r24, 0x01	; 1
     d98:	f1 f7       	brne	.-4      	; 0xd96 <InitMPU6050+0xb8>
     d9a:	00 c0       	rjmp	.+0      	; 0xd9c <InitMPU6050+0xbe>
     d9c:	00 00       	nop
	_delay_ms(15);

	// Configure MPU6050 gyro and accelerometer for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, CONFIG, 0x03);      // Set low-pass filter to 44 Hz
     d9e:	43 e0       	ldi	r20, 0x03	; 3
     da0:	50 e0       	ldi	r21, 0x00	; 0
     da2:	6a e1       	ldi	r22, 0x1A	; 26
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	88 e6       	ldi	r24, 0x68	; 104
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, SMPLRT_DIV, 4);  // Set sample rate to 1000 Hz
     dae:	44 e0       	ldi	r20, 0x04	; 4
     db0:	50 e0       	ldi	r21, 0x00	; 0
     db2:	69 e1       	ldi	r22, 0x19	; 25
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	88 e6       	ldi	r24, 0x68	; 104
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
     dbe:	40 e0       	ldi	r20, 0x00	; 0
     dc0:	50 e0       	ldi	r21, 0x00	; 0
     dc2:	6b e1       	ldi	r22, 0x1B	; 27
     dc4:	70 e0       	ldi	r23, 0x00	; 0
     dc6:	88 e6       	ldi	r24, 0x68	; 104
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
     dce:	40 e0       	ldi	r20, 0x00	; 0
     dd0:	50 e0       	ldi	r21, 0x00	; 0
     dd2:	6c e1       	ldi	r22, 0x1C	; 28
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	88 e6       	ldi	r24, 0x68	; 104
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>

	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
     dde:	40 e4       	ldi	r20, 0x40	; 64
     de0:	50 e0       	ldi	r21, 0x00	; 0
     de2:	6a e6       	ldi	r22, 0x6A	; 106
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	88 e6       	ldi	r24, 0x68	; 104
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 1024 bytes in MPU-6050)
     dee:	48 e7       	ldi	r20, 0x78	; 120
     df0:	50 e0       	ldi	r21, 0x00	; 0
     df2:	63 e2       	ldi	r22, 0x23	; 35
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	88 e6       	ldi	r24, 0x68	; 104
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_write_byte>
     dfe:	08 95       	ret

00000e00 <ReadMPU6050>:
}

void ReadMPU6050(void)
{
     e00:	8f 92       	push	r8
     e02:	9f 92       	push	r9
     e04:	af 92       	push	r10
     e06:	bf 92       	push	r11
     e08:	cf 92       	push	r12
     e0a:	df 92       	push	r13
     e0c:	ef 92       	push	r14
     e0e:	ff 92       	push	r15
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	68 97       	sbiw	r28, 0x18	; 24
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	f8 94       	cli
     e22:	de bf       	out	0x3e, r29	; 62
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, fifo_count, packet_count;
	uint8_t data[12];
	int16_t gyro[3];
	int16_t acc[3];

	I2C_read_buf(MPU6050_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
     e28:	9e 01       	movw	r18, r28
     e2a:	2f 5f       	subi	r18, 0xFF	; 255
     e2c:	3f 4f       	sbci	r19, 0xFF	; 255
     e2e:	42 e0       	ldi	r20, 0x02	; 2
     e30:	50 e0       	ldi	r21, 0x00	; 0
     e32:	62 e7       	ldi	r22, 0x72	; 114
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	88 e6       	ldi	r24, 0x68	; 104
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <I2C_read_buf>
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	9b ea       	ldi	r25, 0xAB	; 171
     e42:	89 9f       	mul	r24, r25
     e44:	c1 2c       	mov	r12, r1
     e46:	11 24       	eor	r1, r1
     e48:	c6 94       	lsr	r12
     e4a:	c6 94       	lsr	r12
     e4c:	c6 94       	lsr	r12

	for (i = 0; i < packet_count; i++)
     e4e:	09 f4       	brne	.+2      	; 0xe52 <ReadMPU6050+0x52>
     e50:	6e c0       	rjmp	.+220    	; 0xf2e <ReadMPU6050+0x12e>
     e52:	d1 2c       	mov	r13, r1
		acc[2] = (int16_t) (((int16_t)data[4] << 8)  | data[5] ) ;
		gyro[0]  = (int16_t) (((int16_t)data[6] << 8)  | data[7] ) ;
		gyro[1]  = (int16_t) (((int16_t)data[8] << 8)  | data[9] ) ;
		gyro[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
			
		acc[0] -= acc_offset[0];
     e54:	0f 2e       	mov	r0, r31
     e56:	fe ef       	ldi	r31, 0xFE	; 254
     e58:	ef 2e       	mov	r14, r31
     e5a:	f1 e0       	ldi	r31, 0x01	; 1
     e5c:	ff 2e       	mov	r15, r31
     e5e:	f0 2d       	mov	r31, r0
		acc[1] -= acc_offset[1];
		acc[2] -= acc_offset[2];
		gyro[0] -= gyro_offset[0];
     e60:	04 e0       	ldi	r16, 0x04	; 4
     e62:	12 e0       	ldi	r17, 0x02	; 2
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging

	for (i = 0; i < packet_count; i++)
	{
		I2C_read_buf(MPU6050_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
     e64:	9e 01       	movw	r18, r28
     e66:	2f 5f       	subi	r18, 0xFF	; 255
     e68:	3f 4f       	sbci	r19, 0xFF	; 255
     e6a:	4c e0       	ldi	r20, 0x0C	; 12
     e6c:	50 e0       	ldi	r21, 0x00	; 0
     e6e:	64 e7       	ldi	r22, 0x74	; 116
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	88 e6       	ldi	r24, 0x68	; 104
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 e7 03 	call	0x7ce	; 0x7ce <I2C_read_buf>
		acc[0] = (int16_t) (((int16_t)data[0] << 8)  | data[1] ) ;  // Form signed 16-bit integer for each sample in FIFO
		acc[1] = (int16_t) (((int16_t)data[2] << 8)  | data[3] ) ;
     e7a:	eb 81       	ldd	r30, Y+3	; 0x03
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	fe 2f       	mov	r31, r30
     e80:	ee 27       	eor	r30, r30
     e82:	8c 81       	ldd	r24, Y+4	; 0x04
     e84:	4f 01       	movw	r8, r30
     e86:	88 2a       	or	r8, r24
		acc[2] = (int16_t) (((int16_t)data[4] << 8)  | data[5] ) ;
     e88:	6d 81       	ldd	r22, Y+5	; 0x05
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	76 2f       	mov	r23, r22
     e8e:	66 27       	eor	r22, r22
     e90:	8e 81       	ldd	r24, Y+6	; 0x06
     e92:	68 2b       	or	r22, r24
		gyro[0]  = (int16_t) (((int16_t)data[6] << 8)  | data[7] ) ;
     e94:	4f 81       	ldd	r20, Y+7	; 0x07
     e96:	50 e0       	ldi	r21, 0x00	; 0
     e98:	54 2f       	mov	r21, r20
     e9a:	44 27       	eor	r20, r20
     e9c:	88 85       	ldd	r24, Y+8	; 0x08
     e9e:	48 2b       	or	r20, r24
		gyro[1]  = (int16_t) (((int16_t)data[8] << 8)  | data[9] ) ;
     ea0:	29 85       	ldd	r18, Y+9	; 0x09
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	32 2f       	mov	r19, r18
     ea6:	22 27       	eor	r18, r18
     ea8:	8a 85       	ldd	r24, Y+10	; 0x0a
     eaa:	28 2b       	or	r18, r24
		gyro[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
     eac:	8b 85       	ldd	r24, Y+11	; 0x0b
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	98 2f       	mov	r25, r24
     eb2:	88 27       	eor	r24, r24
     eb4:	ac 85       	ldd	r26, Y+12	; 0x0c
     eb6:	8a 2b       	or	r24, r26
			
		acc[0] -= acc_offset[0];
     eb8:	a9 81       	ldd	r26, Y+1	; 0x01
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	ba 2f       	mov	r27, r26
     ebe:	aa 27       	eor	r26, r26
     ec0:	ba 80       	ldd	r11, Y+2	; 0x02
     ec2:	ab 29       	or	r26, r11
     ec4:	f7 01       	movw	r30, r14
     ec6:	a0 80       	ld	r10, Z
     ec8:	b1 80       	ldd	r11, Z+1	; 0x01
     eca:	aa 19       	sub	r26, r10
     ecc:	bb 09       	sbc	r27, r11
     ece:	bc 8b       	std	Y+20, r27	; 0x14
     ed0:	ab 8b       	std	Y+19, r26	; 0x13
		acc[1] -= acc_offset[1];
     ed2:	a2 81       	ldd	r26, Z+2	; 0x02
     ed4:	b3 81       	ldd	r27, Z+3	; 0x03
     ed6:	f4 01       	movw	r30, r8
     ed8:	ea 1b       	sub	r30, r26
     eda:	fb 0b       	sbc	r31, r27
     edc:	fe 8b       	std	Y+22, r31	; 0x16
     ede:	ed 8b       	std	Y+21, r30	; 0x15
		acc[2] -= acc_offset[2];
     ee0:	d7 01       	movw	r26, r14
     ee2:	14 96       	adiw	r26, 0x04	; 4
     ee4:	ed 91       	ld	r30, X+
     ee6:	fc 91       	ld	r31, X
     ee8:	15 97       	sbiw	r26, 0x05	; 5
     eea:	6e 1b       	sub	r22, r30
     eec:	7f 0b       	sbc	r23, r31
     eee:	78 8f       	std	Y+24, r23	; 0x18
     ef0:	6f 8b       	std	Y+23, r22	; 0x17
		gyro[0] -= gyro_offset[0];
     ef2:	f8 01       	movw	r30, r16
     ef4:	60 81       	ld	r22, Z
     ef6:	71 81       	ldd	r23, Z+1	; 0x01
     ef8:	46 1b       	sub	r20, r22
     efa:	57 0b       	sbc	r21, r23
     efc:	5e 87       	std	Y+14, r21	; 0x0e
     efe:	4d 87       	std	Y+13, r20	; 0x0d
		gyro[1] -= gyro_offset[1];
     f00:	42 81       	ldd	r20, Z+2	; 0x02
     f02:	53 81       	ldd	r21, Z+3	; 0x03
     f04:	24 1b       	sub	r18, r20
     f06:	35 0b       	sbc	r19, r21
     f08:	38 8b       	std	Y+16, r19	; 0x10
     f0a:	2f 87       	std	Y+15, r18	; 0x0f
		gyro[2] -= gyro_offset[2];
     f0c:	24 81       	ldd	r18, Z+4	; 0x04
     f0e:	35 81       	ldd	r19, Z+5	; 0x05
     f10:	82 1b       	sub	r24, r18
     f12:	93 0b       	sbc	r25, r19
     f14:	9a 8b       	std	Y+18, r25	; 0x12
     f16:	89 8b       	std	Y+17, r24	; 0x11

		PlaceInGyroBuffor(gyro);
     f18:	ce 01       	movw	r24, r28
     f1a:	0d 96       	adiw	r24, 0x0d	; 13
     f1c:	0e 94 a3 00 	call	0x146	; 0x146 <PlaceInGyroBuffor>
		PlaceInAccBuffor(acc);
     f20:	ce 01       	movw	r24, r28
     f22:	43 96       	adiw	r24, 0x13	; 19
     f24:	0e 94 d7 00 	call	0x1ae	; 0x1ae <PlaceInAccBuffor>

	I2C_read_buf(MPU6050_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging

	for (i = 0; i < packet_count; i++)
     f28:	d3 94       	inc	r13
     f2a:	cd 10       	cpse	r12, r13
     f2c:	9b cf       	rjmp	.-202    	; 0xe64 <ReadMPU6050+0x64>
		gyro[2] -= gyro_offset[2];

		PlaceInGyroBuffor(gyro);
		PlaceInAccBuffor(acc);
	}
     f2e:	68 96       	adiw	r28, 0x18	; 24
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	de bf       	out	0x3e, r29	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	cd bf       	out	0x3d, r28	; 61
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	ff 90       	pop	r15
     f44:	ef 90       	pop	r14
     f46:	df 90       	pop	r13
     f48:	cf 90       	pop	r12
     f4a:	bf 90       	pop	r11
     f4c:	af 90       	pop	r10
     f4e:	9f 90       	pop	r9
     f50:	8f 90       	pop	r8
     f52:	08 95       	ret

00000f54 <er_service>:
		
}

int8_t er_service(char * params)
{
	SendLine("Uart is working");
     f54:	8c e0       	ldi	r24, 0x0C	; 12
     f56:	91 e0       	ldi	r25, 0x01	; 1
     f58:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <SendLine>
	return 0;
}
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	08 95       	ret

00000f60 <er_read>:

int8_t er_read(char * params)
{
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	2c 97       	sbiw	r28, 0x0c	; 12
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
	int16_t gyro[3];
	int16_t acc[3];
	
	ReadGyroSample(gyro);
     f74:	ce 01       	movw	r24, r28
     f76:	01 96       	adiw	r24, 0x01	; 1
     f78:	0e 94 0b 01 	call	0x216	; 0x216 <ReadGyroSample>
	ReadAccSample(acc);
     f7c:	ce 01       	movw	r24, r28
     f7e:	07 96       	adiw	r24, 0x07	; 7
     f80:	0e 94 39 01 	call	0x272	; 0x272 <ReadAccSample>

	SendStringInt("G X ", gyro[0]);
     f84:	49 81       	ldd	r20, Y+1	; 0x01
     f86:	5a 81       	ldd	r21, Y+2	; 0x02
     f88:	05 2e       	mov	r0, r21
     f8a:	00 0c       	add	r0, r0
     f8c:	66 0b       	sbc	r22, r22
     f8e:	77 0b       	sbc	r23, r23
     f90:	8c e1       	ldi	r24, 0x1C	; 28
     f92:	91 e0       	ldi	r25, 0x01	; 1
     f94:	0e 94 4e 0c 	call	0x189c	; 0x189c <SendStringInt>
	SendStringInt("G Y ", gyro[1]);
     f98:	4b 81       	ldd	r20, Y+3	; 0x03
     f9a:	5c 81       	ldd	r21, Y+4	; 0x04
     f9c:	05 2e       	mov	r0, r21
     f9e:	00 0c       	add	r0, r0
     fa0:	66 0b       	sbc	r22, r22
     fa2:	77 0b       	sbc	r23, r23
     fa4:	81 e2       	ldi	r24, 0x21	; 33
     fa6:	91 e0       	ldi	r25, 0x01	; 1
     fa8:	0e 94 4e 0c 	call	0x189c	; 0x189c <SendStringInt>
	SendStringInt("G Z ", gyro[2]);
     fac:	4d 81       	ldd	r20, Y+5	; 0x05
     fae:	5e 81       	ldd	r21, Y+6	; 0x06
     fb0:	05 2e       	mov	r0, r21
     fb2:	00 0c       	add	r0, r0
     fb4:	66 0b       	sbc	r22, r22
     fb6:	77 0b       	sbc	r23, r23
     fb8:	86 e2       	ldi	r24, 0x26	; 38
     fba:	91 e0       	ldi	r25, 0x01	; 1
     fbc:	0e 94 4e 0c 	call	0x189c	; 0x189c <SendStringInt>
	SendStringInt("A X ", acc[0]);
     fc0:	4f 81       	ldd	r20, Y+7	; 0x07
     fc2:	58 85       	ldd	r21, Y+8	; 0x08
     fc4:	05 2e       	mov	r0, r21
     fc6:	00 0c       	add	r0, r0
     fc8:	66 0b       	sbc	r22, r22
     fca:	77 0b       	sbc	r23, r23
     fcc:	8b e2       	ldi	r24, 0x2B	; 43
     fce:	91 e0       	ldi	r25, 0x01	; 1
     fd0:	0e 94 4e 0c 	call	0x189c	; 0x189c <SendStringInt>
	SendStringInt("A Y ", acc[1]);
     fd4:	49 85       	ldd	r20, Y+9	; 0x09
     fd6:	5a 85       	ldd	r21, Y+10	; 0x0a
     fd8:	05 2e       	mov	r0, r21
     fda:	00 0c       	add	r0, r0
     fdc:	66 0b       	sbc	r22, r22
     fde:	77 0b       	sbc	r23, r23
     fe0:	80 e3       	ldi	r24, 0x30	; 48
     fe2:	91 e0       	ldi	r25, 0x01	; 1
     fe4:	0e 94 4e 0c 	call	0x189c	; 0x189c <SendStringInt>
	SendStringInt("A Z ", acc[2]);
     fe8:	4b 85       	ldd	r20, Y+11	; 0x0b
     fea:	5c 85       	ldd	r21, Y+12	; 0x0c
     fec:	05 2e       	mov	r0, r21
     fee:	00 0c       	add	r0, r0
     ff0:	66 0b       	sbc	r22, r22
     ff2:	77 0b       	sbc	r23, r23
     ff4:	85 e3       	ldi	r24, 0x35	; 53
     ff6:	91 e0       	ldi	r25, 0x01	; 1
     ff8:	0e 94 4e 0c 	call	0x189c	; 0x189c <SendStringInt>

	return 0;
}
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	2c 96       	adiw	r28, 0x0c	; 12
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	08 95       	ret

00001010 <er_buf>:

int8_t er_buf(char * params)
{
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	00 d0       	rcall	.+0      	; 0x1016 <er_buf+0x6>
    1016:	00 d0       	rcall	.+0      	; 0x1018 <er_buf+0x8>
    1018:	00 d0       	rcall	.+0      	; 0x101a <er_buf+0xa>
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
	int16_t data[3];

	if (SamplesGyroBuf())
    101e:	0e 94 67 01 	call	0x2ce	; 0x2ce <SamplesGyroBuf>
    1022:	88 23       	and	r24, r24
    1024:	11 f1       	breq	.+68     	; 0x106a <er_buf+0x5a>
	{
		ReadGyroBufAveraged(data);
    1026:	ce 01       	movw	r24, r28
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ReadGyroBufAveraged>

 	 	SendStringInt("G X ", data[0]);
    102e:	49 81       	ldd	r20, Y+1	; 0x01
    1030:	5a 81       	ldd	r21, Y+2	; 0x02
    1032:	05 2e       	mov	r0, r21
    1034:	00 0c       	add	r0, r0
    1036:	66 0b       	sbc	r22, r22
    1038:	77 0b       	sbc	r23, r23
    103a:	8c e1       	ldi	r24, 0x1C	; 28
    103c:	91 e0       	ldi	r25, 0x01	; 1
    103e:	0e 94 4e 0c 	call	0x189c	; 0x189c <SendStringInt>
 	 	SendStringInt("G Y ", data[1]);
    1042:	4b 81       	ldd	r20, Y+3	; 0x03
    1044:	5c 81       	ldd	r21, Y+4	; 0x04
    1046:	05 2e       	mov	r0, r21
    1048:	00 0c       	add	r0, r0
    104a:	66 0b       	sbc	r22, r22
    104c:	77 0b       	sbc	r23, r23
    104e:	81 e2       	ldi	r24, 0x21	; 33
    1050:	91 e0       	ldi	r25, 0x01	; 1
    1052:	0e 94 4e 0c 	call	0x189c	; 0x189c <SendStringInt>
 	 	SendStringInt("G Z ", data[2]);
    1056:	4d 81       	ldd	r20, Y+5	; 0x05
    1058:	5e 81       	ldd	r21, Y+6	; 0x06
    105a:	05 2e       	mov	r0, r21
    105c:	00 0c       	add	r0, r0
    105e:	66 0b       	sbc	r22, r22
    1060:	77 0b       	sbc	r23, r23
    1062:	86 e2       	ldi	r24, 0x26	; 38
    1064:	91 e0       	ldi	r25, 0x01	; 1
    1066:	0e 94 4e 0c 	call	0x189c	; 0x189c <SendStringInt>
	}

 	if (SamplesAccBuf())
    106a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <SamplesAccBuf>
    106e:	88 23       	and	r24, r24
    1070:	11 f1       	breq	.+68     	; 0x10b6 <er_buf+0xa6>
 	{
		ReadAccBufAveraged(data);
    1072:	ce 01       	movw	r24, r28
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	0e 94 79 03 	call	0x6f2	; 0x6f2 <ReadAccBufAveraged>

		SendStringInt("A X ", data[0]);
    107a:	49 81       	ldd	r20, Y+1	; 0x01
    107c:	5a 81       	ldd	r21, Y+2	; 0x02
    107e:	05 2e       	mov	r0, r21
    1080:	00 0c       	add	r0, r0
    1082:	66 0b       	sbc	r22, r22
    1084:	77 0b       	sbc	r23, r23
    1086:	8b e2       	ldi	r24, 0x2B	; 43
    1088:	91 e0       	ldi	r25, 0x01	; 1
    108a:	0e 94 4e 0c 	call	0x189c	; 0x189c <SendStringInt>
		SendStringInt("A Y ", data[1]);
    108e:	4b 81       	ldd	r20, Y+3	; 0x03
    1090:	5c 81       	ldd	r21, Y+4	; 0x04
    1092:	05 2e       	mov	r0, r21
    1094:	00 0c       	add	r0, r0
    1096:	66 0b       	sbc	r22, r22
    1098:	77 0b       	sbc	r23, r23
    109a:	80 e3       	ldi	r24, 0x30	; 48
    109c:	91 e0       	ldi	r25, 0x01	; 1
    109e:	0e 94 4e 0c 	call	0x189c	; 0x189c <SendStringInt>
		SendStringInt("A Z ", data[2]);
    10a2:	4d 81       	ldd	r20, Y+5	; 0x05
    10a4:	5e 81       	ldd	r21, Y+6	; 0x06
    10a6:	05 2e       	mov	r0, r21
    10a8:	00 0c       	add	r0, r0
    10aa:	66 0b       	sbc	r22, r22
    10ac:	77 0b       	sbc	r23, r23
    10ae:	85 e3       	ldi	r24, 0x35	; 53
    10b0:	91 e0       	ldi	r25, 0x01	; 1
    10b2:	0e 94 4e 0c 	call	0x189c	; 0x189c <SendStringInt>
 	}

	SendStringInt("S ", SamplesAccBuf());
    10b6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <SamplesAccBuf>
    10ba:	48 2f       	mov	r20, r24
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	60 e0       	ldi	r22, 0x00	; 0
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	8a e3       	ldi	r24, 0x3A	; 58
    10c4:	91 e0       	ldi	r25, 0x01	; 1
    10c6:	0e 94 4e 0c 	call	0x189c	; 0x189c <SendStringInt>
	return 0;
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	26 96       	adiw	r28, 0x06	; 6
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28
    10dc:	08 95       	ret

000010de <ProcessString>:
	{"ER_BUF", er_buf},
};


void ProcessString(uint8_t start, uint8_t stop)
{
    10de:	4f 92       	push	r4
    10e0:	5f 92       	push	r5
    10e2:	6f 92       	push	r6
    10e4:	8f 92       	push	r8
    10e6:	9f 92       	push	r9
    10e8:	af 92       	push	r10
    10ea:	bf 92       	push	r11
    10ec:	cf 92       	push	r12
    10ee:	df 92       	push	r13
    10f0:	ef 92       	push	r14
    10f2:	ff 92       	push	r15
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	a2 97       	sbiw	r28, 0x22	; 34
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	cd bf       	out	0x3d, r28	; 61
    110c:	fe 01       	movw	r30, r28
    110e:	31 96       	adiw	r30, 0x01	; 1
    1110:	9e 01       	movw	r18, r28
    1112:	2f 5d       	subi	r18, 0xDF	; 223
    1114:	3f 4f       	sbci	r19, 0xFF	; 255
	char string[RX_SIZE];
	uint8_t i;	//counter value

	for (i=0; i<RX_SIZE; i++)
	{
		string[i] = 0;
    1116:	11 92       	st	Z+, r1
	
	//	stop = (stop +1) & RX_SIZE_BIN;
	char string[RX_SIZE];
	uint8_t i;	//counter value

	for (i=0; i<RX_SIZE; i++)
    1118:	2e 17       	cp	r18, r30
    111a:	3f 07       	cpc	r19, r31
    111c:	e1 f7       	brne	.-8      	; 0x1116 <ProcessString+0x38>
	}

	i=0;

	// Assign rX string to command
	while (start!=stop)
    111e:	86 17       	cp	r24, r22
    1120:	99 f0       	breq	.+38     	; 0x1148 <ProcessString+0x6a>
    1122:	10 e0       	ldi	r17, 0x00	; 0
	{
		string[i] = RxBuffor[start];
    1124:	a1 e0       	ldi	r26, 0x01	; 1
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	ac 0f       	add	r26, r28
    112a:	bd 1f       	adc	r27, r29
    112c:	a1 0f       	add	r26, r17
    112e:	b1 1d       	adc	r27, r1
    1130:	e8 2f       	mov	r30, r24
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	ee 5f       	subi	r30, 0xFE	; 254
    1136:	fc 4f       	sbci	r31, 0xFC	; 252
    1138:	90 81       	ld	r25, Z
    113a:	9c 93       	st	X, r25
		start = (start + 1) & RX_SIZE_BIN;
    113c:	8f 5f       	subi	r24, 0xFF	; 255
    113e:	8f 71       	andi	r24, 0x1F	; 31
		i++;
    1140:	1f 5f       	subi	r17, 0xFF	; 255
	}

	i=0;

	// Assign rX string to command
	while (start!=stop)
    1142:	68 13       	cpse	r22, r24
    1144:	ef cf       	rjmp	.-34     	; 0x1124 <ProcessString+0x46>
    1146:	01 c0       	rjmp	.+2      	; 0x114a <ProcessString+0x6c>
    1148:	10 e0       	ldi	r17, 0x00	; 0
	}

	char * rest;
	char * begining;

	begining = strtok_r(string, " ", &rest);
    114a:	ae 01       	movw	r20, r28
    114c:	4f 5d       	subi	r20, 0xDF	; 223
    114e:	5f 4f       	sbci	r21, 0xFF	; 255
    1150:	6b e4       	ldi	r22, 0x4B	; 75
    1152:	71 e0       	ldi	r23, 0x01	; 1
    1154:	ce 01       	movw	r24, r28
    1156:	01 96       	adiw	r24, 0x01	; 1
    1158:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <strtok_r>
    115c:	5c 01       	movw	r10, r24

	uint8_t j;
	uint8_t command_length;
	uint8_t string_length = strlen(begining);
    115e:	fc 01       	movw	r30, r24
    1160:	01 90       	ld	r0, Z+
    1162:	00 20       	and	r0, r0
    1164:	e9 f7       	brne	.-6      	; 0x1160 <ProcessString+0x82>
    1166:	31 97       	sbiw	r30, 0x01	; 1
    1168:	6e 2e       	mov	r6, r30
    116a:	68 1a       	sub	r6, r24
    116c:	0f 2e       	mov	r0, r31
    116e:	f6 ec       	ldi	r31, 0xC6	; 198
    1170:	ef 2e       	mov	r14, r31
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	ff 2e       	mov	r15, r31
    1176:	f0 2d       	mov	r31, r0
    1178:	c1 2c       	mov	r12, r1
    117a:	d1 2c       	mov	r13, r1
	for (j=0; j < RX_COMMANDS; j++)
    117c:	00 e0       	ldi	r16, 0x00	; 0
	{
		command_length = strlen_P(ER_commands[j].command);
		
		if (command_length == string_length)
		{
			if (0 == strncasecmp_P(begining, ER_commands[j].command, i))
    117e:	81 2e       	mov	r8, r17
    1180:	91 2c       	mov	r9, r1
#else
extern size_t __strlen_P(const char *) __ATTR_CONST__;  /* internal helper function */
__attribute__((__always_inline__)) static __inline__ size_t strlen_P(const char * s);
static __inline__ size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
    1182:	c7 01       	movw	r24, r14
    1184:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__strlen_P>
	uint8_t string_length = strlen(begining);
	for (j=0; j < RX_COMMANDS; j++)
	{
		command_length = strlen_P(ER_commands[j].command);
		
		if (command_length == string_length)
    1188:	68 12       	cpse	r6, r24
    118a:	18 c0       	rjmp	.+48     	; 0x11bc <ProcessString+0xde>
		{
			if (0 == strncasecmp_P(begining, ER_commands[j].command, i))
    118c:	a4 01       	movw	r20, r8
    118e:	b7 01       	movw	r22, r14
    1190:	c5 01       	movw	r24, r10
    1192:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <strncasecmp_P>
    1196:	89 2b       	or	r24, r25
    1198:	89 f4       	brne	.+34     	; 0x11bc <ProcessString+0xde>
			{
				_er_srv = (void *)pgm_read_word(&ER_commands[j].ER_service);
    119a:	86 e1       	ldi	r24, 0x16	; 22
    119c:	8c 9d       	mul	r24, r12
    119e:	f0 01       	movw	r30, r0
    11a0:	8d 9d       	mul	r24, r13
    11a2:	f0 0d       	add	r31, r0
    11a4:	11 24       	eor	r1, r1
    11a6:	e6 52       	subi	r30, 0x26	; 38
    11a8:	ff 4f       	sbci	r31, 0xFF	; 255
    11aa:	25 91       	lpm	r18, Z+
    11ac:	34 91       	lpm	r19, Z
				_er_srv(rest);
    11ae:	89 a1       	ldd	r24, Y+33	; 0x21
    11b0:	9a a1       	ldd	r25, Y+34	; 0x22
    11b2:	f9 01       	movw	r30, r18
    11b4:	09 95       	icall
				break;
			}
		}
	}
	if (j==RX_COMMANDS)
    11b6:	03 30       	cpi	r16, 0x03	; 3
    11b8:	a1 f4       	brne	.+40     	; 0x11e2 <ProcessString+0x104>
    11ba:	09 c0       	rjmp	.+18     	; 0x11ce <ProcessString+0xf0>
	begining = strtok_r(string, " ", &rest);

	uint8_t j;
	uint8_t command_length;
	uint8_t string_length = strlen(begining);
	for (j=0; j < RX_COMMANDS; j++)
    11bc:	0f 5f       	subi	r16, 0xFF	; 255
    11be:	ff ef       	ldi	r31, 0xFF	; 255
    11c0:	cf 1a       	sub	r12, r31
    11c2:	df 0a       	sbc	r13, r31
    11c4:	86 e1       	ldi	r24, 0x16	; 22
    11c6:	e8 0e       	add	r14, r24
    11c8:	f1 1c       	adc	r15, r1
    11ca:	03 30       	cpi	r16, 0x03	; 3
    11cc:	d1 f6       	brne	.-76     	; 0x1182 <ProcessString+0xa4>
			}
		}
	}
	if (j==RX_COMMANDS)
	{
		SendString("Wrong command: ");
    11ce:	8d e3       	ldi	r24, 0x3D	; 61
    11d0:	91 e0       	ldi	r25, 0x01	; 1
    11d2:	0e 94 3b 0b 	call	0x1676	; 0x1676 <SendString>
		SendString(string);
    11d6:	ce 01       	movw	r24, r28
    11d8:	01 96       	adiw	r24, 0x01	; 1
    11da:	0e 94 3b 0b 	call	0x1676	; 0x1676 <SendString>
		SendEnter();
    11de:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <SendEnter>
	}
		
}
    11e2:	a2 96       	adiw	r28, 0x22	; 34
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	df 91       	pop	r29
    11f0:	cf 91       	pop	r28
    11f2:	1f 91       	pop	r17
    11f4:	0f 91       	pop	r16
    11f6:	ff 90       	pop	r15
    11f8:	ef 90       	pop	r14
    11fa:	df 90       	pop	r13
    11fc:	cf 90       	pop	r12
    11fe:	bf 90       	pop	r11
    1200:	af 90       	pop	r10
    1202:	9f 90       	pop	r9
    1204:	8f 90       	pop	r8
    1206:	6f 90       	pop	r6
    1208:	5f 90       	pop	r5
    120a:	4f 90       	pop	r4
    120c:	08 95       	ret

0000120e <__vector_24>:
void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
}

ISR (TWI0_vect)	//TWI finished vector
{	//TWI interrupt
    120e:	1f 92       	push	r1
    1210:	0f 92       	push	r0
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	0f 92       	push	r0
    1216:	11 24       	eor	r1, r1
    1218:	2f 93       	push	r18
    121a:	3f 93       	push	r19
    121c:	4f 93       	push	r20
    121e:	5f 93       	push	r21
    1220:	8f 93       	push	r24
    1222:	9f 93       	push	r25
    1224:	af 93       	push	r26
    1226:	bf 93       	push	r27
    1228:	ef 93       	push	r30
    122a:	ff 93       	push	r31

	uint8_t SLA = ((uint8_t)twi_bufor[twi_buf_pos.tail].sla << 1);
    122c:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <twi_buf_pos>
    1230:	e6 95       	lsr	r30
    1232:	e6 95       	lsr	r30
    1234:	e6 95       	lsr	r30
    1236:	e7 70       	andi	r30, 0x07	; 7
    1238:	4e 2f       	mov	r20, r30
    123a:	50 e0       	ldi	r21, 0x00	; 0
    123c:	84 e1       	ldi	r24, 0x14	; 20
    123e:	e8 9f       	mul	r30, r24
    1240:	f0 01       	movw	r30, r0
    1242:	11 24       	eor	r1, r1
    1244:	ee 59       	subi	r30, 0x9E	; 158
    1246:	fd 4f       	sbci	r31, 0xFD	; 253
    1248:	80 81       	ld	r24, Z
    124a:	28 2f       	mov	r18, r24
    124c:	2e 7f       	andi	r18, 0xFE	; 254
	uint8_t REG = twi_bufor[twi_buf_pos.tail].reg;
	
	switch (twi_bufor[twi_buf_pos.tail].status){
    124e:	e3 89       	ldd	r30, Z+19	; 0x13
    1250:	8e 2f       	mov	r24, r30
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	fc 01       	movw	r30, r24
    1256:	34 97       	sbiw	r30, 0x04	; 4
    1258:	e9 30       	cpi	r30, 0x09	; 9
    125a:	f1 05       	cpc	r31, r1
    125c:	08 f0       	brcs	.+2      	; 0x1260 <__vector_24+0x52>
    125e:	e4 c1       	rjmp	.+968    	; 0x1628 <__vector_24+0x41a>
    1260:	e6 5a       	subi	r30, 0xA6	; 166
    1262:	ff 4f       	sbci	r31, 0xFF	; 255
    1264:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <__tablejump2__>
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    1268:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    126c:	85 e8       	ldi	r24, 0x85	; 133
    126e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	uint8_t REG = twi_bufor[twi_buf_pos.tail].reg;
	
	switch (twi_bufor[twi_buf_pos.tail].status){
		case start:
			TWI_write(SLA);
			twi_bufor[twi_buf_pos.tail].status = write_adress;
    1272:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <twi_buf_pos>
    1276:	e6 95       	lsr	r30
    1278:	e6 95       	lsr	r30
    127a:	e6 95       	lsr	r30
    127c:	e7 70       	andi	r30, 0x07	; 7
    127e:	84 e1       	ldi	r24, 0x14	; 20
    1280:	e8 9f       	mul	r30, r24
    1282:	f0 01       	movw	r30, r0
    1284:	11 24       	eor	r1, r1
    1286:	ee 59       	subi	r30, 0x9E	; 158
    1288:	fd 4f       	sbci	r31, 0xFD	; 253
    128a:	85 e0       	ldi	r24, 0x05	; 5
    128c:	83 8b       	std	Z+19, r24	; 0x13
			break;
    128e:	cc c1       	rjmp	.+920    	; 0x1628 <__vector_24+0x41a>

ISR (TWI0_vect)	//TWI finished vector
{	//TWI interrupt

	uint8_t SLA = ((uint8_t)twi_bufor[twi_buf_pos.tail].sla << 1);
	uint8_t REG = twi_bufor[twi_buf_pos.tail].reg;
    1290:	84 e1       	ldi	r24, 0x14	; 20
    1292:	84 9f       	mul	r24, r20
    1294:	f0 01       	movw	r30, r0
    1296:	85 9f       	mul	r24, r21
    1298:	f0 0d       	add	r31, r0
    129a:	11 24       	eor	r1, r1
    129c:	ee 59       	subi	r30, 0x9E	; 158
    129e:	fd 4f       	sbci	r31, 0xFD	; 253
    12a0:	91 81       	ldd	r25, Z+1	; 0x01
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    12a2:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    12a6:	95 e8       	ldi	r25, 0x85	; 133
    12a8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			twi_bufor[twi_buf_pos.tail].status = write_adress;
			break;

		case write_adress:
			TWI_write(REG);
			twi_bufor[twi_buf_pos.tail].status = write_register;
    12ac:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <twi_buf_pos>
    12b0:	e6 95       	lsr	r30
    12b2:	e6 95       	lsr	r30
    12b4:	e6 95       	lsr	r30
    12b6:	e7 70       	andi	r30, 0x07	; 7
    12b8:	8e 9f       	mul	r24, r30
    12ba:	f0 01       	movw	r30, r0
    12bc:	11 24       	eor	r1, r1
    12be:	ee 59       	subi	r30, 0x9E	; 158
    12c0:	fd 4f       	sbci	r31, 0xFD	; 253
    12c2:	86 e0       	ldi	r24, 0x06	; 6
    12c4:	83 8b       	std	Z+19, r24	; 0x13
			break;
    12c6:	b0 c1       	rjmp	.+864    	; 0x1628 <__vector_24+0x41a>

		case write_register:
			if (twi_bufor[twi_buf_pos.tail].read)	//check if reading is required
    12c8:	84 e1       	ldi	r24, 0x14	; 20
    12ca:	84 9f       	mul	r24, r20
    12cc:	f0 01       	movw	r30, r0
    12ce:	85 9f       	mul	r24, r21
    12d0:	f0 0d       	add	r31, r0
    12d2:	11 24       	eor	r1, r1
    12d4:	ee 59       	subi	r30, 0x9E	; 158
    12d6:	fd 4f       	sbci	r31, 0xFD	; 253
    12d8:	80 81       	ld	r24, Z
    12da:	80 ff       	sbrs	r24, 0
    12dc:	12 c0       	rjmp	.+36     	; 0x1302 <__vector_24+0xf4>
}

//low level functions

void TWI_start(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA)|(1<<TWIE);
    12de:	85 ea       	ldi	r24, 0xA5	; 165
    12e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

		case write_register:
			if (twi_bufor[twi_buf_pos.tail].read)	//check if reading is required
			{
				TWI_start();
				twi_bufor[twi_buf_pos.tail].status = restart;
    12e4:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <twi_buf_pos>
    12e8:	e6 95       	lsr	r30
    12ea:	e6 95       	lsr	r30
    12ec:	e6 95       	lsr	r30
    12ee:	e7 70       	andi	r30, 0x07	; 7
    12f0:	84 e1       	ldi	r24, 0x14	; 20
    12f2:	e8 9f       	mul	r30, r24
    12f4:	f0 01       	movw	r30, r0
    12f6:	11 24       	eor	r1, r1
    12f8:	ee 59       	subi	r30, 0x9E	; 158
    12fa:	fd 4f       	sbci	r31, 0xFD	; 253
    12fc:	87 e0       	ldi	r24, 0x07	; 7
    12fe:	83 8b       	std	Z+19, r24	; 0x13
    1300:	93 c1       	rjmp	.+806    	; 0x1628 <__vector_24+0x41a>
			}
			else	//process writing
			{
				if (twi_bufor[twi_buf_pos.tail].lenght > 1){	//if more than 1 char to write
    1302:	84 e1       	ldi	r24, 0x14	; 20
    1304:	84 9f       	mul	r24, r20
    1306:	f0 01       	movw	r30, r0
    1308:	85 9f       	mul	r24, r21
    130a:	f0 0d       	add	r31, r0
    130c:	11 24       	eor	r1, r1
    130e:	ee 59       	subi	r30, 0x9E	; 158
    1310:	fd 4f       	sbci	r31, 0xFD	; 253
    1312:	87 85       	ldd	r24, Z+15	; 0x0f
    1314:	82 30       	cpi	r24, 0x02	; 2
    1316:	e8 f0       	brcs	.+58     	; 0x1352 <__vector_24+0x144>
					TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
    1318:	84 e1       	ldi	r24, 0x14	; 20
    131a:	84 9f       	mul	r24, r20
    131c:	f0 01       	movw	r30, r0
    131e:	85 9f       	mul	r24, r21
    1320:	f0 0d       	add	r31, r0
    1322:	11 24       	eor	r1, r1
    1324:	ee 59       	subi	r30, 0x9E	; 158
    1326:	fd 4f       	sbci	r31, 0xFD	; 253
    1328:	92 81       	ldd	r25, Z+2	; 0x02
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    132a:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    132e:	95 e8       	ldi	r25, 0x85	; 133
    1330:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			}
			else	//process writing
			{
				if (twi_bufor[twi_buf_pos.tail].lenght > 1){	//if more than 1 char to write
					TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
					twi_bufor[twi_buf_pos.tail].status = write;
    1334:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <twi_buf_pos>
    1338:	e6 95       	lsr	r30
    133a:	e6 95       	lsr	r30
    133c:	e6 95       	lsr	r30
    133e:	e7 70       	andi	r30, 0x07	; 7
    1340:	8e 9f       	mul	r24, r30
    1342:	f0 01       	movw	r30, r0
    1344:	11 24       	eor	r1, r1
    1346:	ee 59       	subi	r30, 0x9E	; 158
    1348:	fd 4f       	sbci	r31, 0xFD	; 253
    134a:	8b e0       	ldi	r24, 0x0B	; 11
    134c:	83 8b       	std	Z+19, r24	; 0x13
					twi_bufor[twi_buf_pos.tail].buf_pos = 0;
    134e:	14 86       	std	Z+12, r1	; 0x0c
    1350:	1b c0       	rjmp	.+54     	; 0x1388 <__vector_24+0x17a>
				}

				else {	//only 1 byte to send
					TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
    1352:	84 e1       	ldi	r24, 0x14	; 20
    1354:	84 9f       	mul	r24, r20
    1356:	f0 01       	movw	r30, r0
    1358:	85 9f       	mul	r24, r21
    135a:	f0 0d       	add	r31, r0
    135c:	11 24       	eor	r1, r1
    135e:	ee 59       	subi	r30, 0x9E	; 158
    1360:	fd 4f       	sbci	r31, 0xFD	; 253
    1362:	92 81       	ldd	r25, Z+2	; 0x02
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    1364:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    1368:	95 e8       	ldi	r25, 0x85	; 133
    136a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
					twi_bufor[twi_buf_pos.tail].buf_pos = 0;
				}

				else {	//only 1 byte to send
					TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
					twi_bufor[twi_buf_pos.tail].status = last_byte_write;
    136e:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <twi_buf_pos>
    1372:	e6 95       	lsr	r30
    1374:	e6 95       	lsr	r30
    1376:	e6 95       	lsr	r30
    1378:	e7 70       	andi	r30, 0x07	; 7
    137a:	8e 9f       	mul	r24, r30
    137c:	f0 01       	movw	r30, r0
    137e:	11 24       	eor	r1, r1
    1380:	ee 59       	subi	r30, 0x9E	; 158
    1382:	fd 4f       	sbci	r31, 0xFD	; 253
    1384:	8c e0       	ldi	r24, 0x0C	; 12
    1386:	83 8b       	std	Z+19, r24	; 0x13
				}
				twi_bufor[twi_buf_pos.tail].lenght --;
    1388:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <twi_buf_pos>
    138c:	e6 95       	lsr	r30
    138e:	e6 95       	lsr	r30
    1390:	e6 95       	lsr	r30
    1392:	e7 70       	andi	r30, 0x07	; 7
    1394:	84 e1       	ldi	r24, 0x14	; 20
    1396:	e8 9f       	mul	r30, r24
    1398:	f0 01       	movw	r30, r0
    139a:	11 24       	eor	r1, r1
    139c:	ee 59       	subi	r30, 0x9E	; 158
    139e:	fd 4f       	sbci	r31, 0xFD	; 253
    13a0:	87 85       	ldd	r24, Z+15	; 0x0f
    13a2:	81 50       	subi	r24, 0x01	; 1
    13a4:	87 87       	std	Z+15, r24	; 0x0f
    13a6:	40 c1       	rjmp	.+640    	; 0x1628 <__vector_24+0x41a>
			}
			break;

		case restart:
			SLA++;
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	82 0f       	add	r24, r18
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    13ac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    13b0:	85 e8       	ldi	r24, 0x85	; 133
    13b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;

		case restart:
			SLA++;
			TWI_write(SLA);
			twi_bufor[twi_buf_pos.tail].status = set_to_read;
    13b6:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <twi_buf_pos>
    13ba:	e6 95       	lsr	r30
    13bc:	e6 95       	lsr	r30
    13be:	e6 95       	lsr	r30
    13c0:	e7 70       	andi	r30, 0x07	; 7
    13c2:	84 e1       	ldi	r24, 0x14	; 20
    13c4:	e8 9f       	mul	r30, r24
    13c6:	f0 01       	movw	r30, r0
    13c8:	11 24       	eor	r1, r1
    13ca:	ee 59       	subi	r30, 0x9E	; 158
    13cc:	fd 4f       	sbci	r31, 0xFD	; 253
    13ce:	88 e0       	ldi	r24, 0x08	; 8
    13d0:	83 8b       	std	Z+19, r24	; 0x13
			break;
    13d2:	2a c1       	rjmp	.+596    	; 0x1628 <__vector_24+0x41a>

		case set_to_read:
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){
    13d4:	84 e1       	ldi	r24, 0x14	; 20
    13d6:	84 9f       	mul	r24, r20
    13d8:	f0 01       	movw	r30, r0
    13da:	85 9f       	mul	r24, r21
    13dc:	f0 0d       	add	r31, r0
    13de:	11 24       	eor	r1, r1
    13e0:	ee 59       	subi	r30, 0x9E	; 158
    13e2:	fd 4f       	sbci	r31, 0xFD	; 253
    13e4:	87 85       	ldd	r24, Z+15	; 0x0f
    13e6:	82 30       	cpi	r24, 0x02	; 2
    13e8:	90 f0       	brcs	.+36     	; 0x140e <__vector_24+0x200>
	TWDR0 = bajt;
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
}

void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
    13ea:	85 ec       	ldi	r24, 0xC5	; 197
    13ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;

		case set_to_read:
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){
				TWI_read(ACK);
				twi_bufor[twi_buf_pos.tail].status = read;
    13f0:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <twi_buf_pos>
    13f4:	e6 95       	lsr	r30
    13f6:	e6 95       	lsr	r30
    13f8:	e6 95       	lsr	r30
    13fa:	e7 70       	andi	r30, 0x07	; 7
    13fc:	84 e1       	ldi	r24, 0x14	; 20
    13fe:	e8 9f       	mul	r30, r24
    1400:	f0 01       	movw	r30, r0
    1402:	11 24       	eor	r1, r1
    1404:	ee 59       	subi	r30, 0x9E	; 158
    1406:	fd 4f       	sbci	r31, 0xFD	; 253
    1408:	89 e0       	ldi	r24, 0x09	; 9
    140a:	83 8b       	std	Z+19, r24	; 0x13
    140c:	11 c0       	rjmp	.+34     	; 0x1430 <__vector_24+0x222>
	TWDR0 = bajt;
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
}

void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
    140e:	85 e8       	ldi	r24, 0x85	; 133
    1410:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

			}
			
			else{
				TWI_read(NACK);
				twi_bufor[twi_buf_pos.tail].status = stop_reading;
    1414:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <twi_buf_pos>
    1418:	e6 95       	lsr	r30
    141a:	e6 95       	lsr	r30
    141c:	e6 95       	lsr	r30
    141e:	e7 70       	andi	r30, 0x07	; 7
    1420:	84 e1       	ldi	r24, 0x14	; 20
    1422:	e8 9f       	mul	r30, r24
    1424:	f0 01       	movw	r30, r0
    1426:	11 24       	eor	r1, r1
    1428:	ee 59       	subi	r30, 0x9E	; 158
    142a:	fd 4f       	sbci	r31, 0xFD	; 253
    142c:	8a e0       	ldi	r24, 0x0A	; 10
    142e:	83 8b       	std	Z+19, r24	; 0x13
			}

			twi_bufor[twi_buf_pos.tail].lenght --;
    1430:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <twi_buf_pos>
    1434:	e6 95       	lsr	r30
    1436:	e6 95       	lsr	r30
    1438:	e6 95       	lsr	r30
    143a:	e7 70       	andi	r30, 0x07	; 7
    143c:	84 e1       	ldi	r24, 0x14	; 20
    143e:	e8 9f       	mul	r30, r24
    1440:	f0 01       	movw	r30, r0
    1442:	11 24       	eor	r1, r1
    1444:	ee 59       	subi	r30, 0x9E	; 158
    1446:	fd 4f       	sbci	r31, 0xFD	; 253
    1448:	87 85       	ldd	r24, Z+15	; 0x0f
    144a:	81 50       	subi	r24, 0x01	; 1
    144c:	87 87       	std	Z+15, r24	; 0x0f
			break;
    144e:	ec c0       	rjmp	.+472    	; 0x1628 <__vector_24+0x41a>

		case read:
			*twi_bufor[twi_buf_pos.tail].bufor_ref++ = TWDR0;	//read received byte
    1450:	84 e1       	ldi	r24, 0x14	; 20
    1452:	84 9f       	mul	r24, r20
    1454:	f0 01       	movw	r30, r0
    1456:	85 9f       	mul	r24, r21
    1458:	f0 0d       	add	r31, r0
    145a:	11 24       	eor	r1, r1
    145c:	ee 59       	subi	r30, 0x9E	; 158
    145e:	fd 4f       	sbci	r31, 0xFD	; 253
    1460:	a5 85       	ldd	r26, Z+13	; 0x0d
    1462:	b6 85       	ldd	r27, Z+14	; 0x0e
    1464:	9d 01       	movw	r18, r26
    1466:	2f 5f       	subi	r18, 0xFF	; 255
    1468:	3f 4f       	sbci	r19, 0xFF	; 255
    146a:	36 87       	std	Z+14, r19	; 0x0e
    146c:	25 87       	std	Z+13, r18	; 0x0d
    146e:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1472:	9c 93       	st	X, r25
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){
    1474:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <twi_buf_pos>
    1478:	e6 95       	lsr	r30
    147a:	e6 95       	lsr	r30
    147c:	e6 95       	lsr	r30
    147e:	e7 70       	andi	r30, 0x07	; 7
    1480:	8e 9f       	mul	r24, r30
    1482:	f0 01       	movw	r30, r0
    1484:	11 24       	eor	r1, r1
    1486:	ee 59       	subi	r30, 0x9E	; 158
    1488:	fd 4f       	sbci	r31, 0xFD	; 253
    148a:	87 85       	ldd	r24, Z+15	; 0x0f
    148c:	82 30       	cpi	r24, 0x02	; 2
    148e:	90 f0       	brcs	.+36     	; 0x14b4 <__vector_24+0x2a6>
	TWDR0 = bajt;
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
}

void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
    1490:	85 ec       	ldi	r24, 0xC5	; 197
    1492:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

		case read:
			*twi_bufor[twi_buf_pos.tail].bufor_ref++ = TWDR0;	//read received byte
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){
				TWI_read(ACK);	//going to read more
				twi_bufor[twi_buf_pos.tail].status = read;
    1496:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <twi_buf_pos>
    149a:	e6 95       	lsr	r30
    149c:	e6 95       	lsr	r30
    149e:	e6 95       	lsr	r30
    14a0:	e7 70       	andi	r30, 0x07	; 7
    14a2:	84 e1       	ldi	r24, 0x14	; 20
    14a4:	e8 9f       	mul	r30, r24
    14a6:	f0 01       	movw	r30, r0
    14a8:	11 24       	eor	r1, r1
    14aa:	ee 59       	subi	r30, 0x9E	; 158
    14ac:	fd 4f       	sbci	r31, 0xFD	; 253
    14ae:	89 e0       	ldi	r24, 0x09	; 9
    14b0:	83 8b       	std	Z+19, r24	; 0x13
    14b2:	11 c0       	rjmp	.+34     	; 0x14d6 <__vector_24+0x2c8>
	TWDR0 = bajt;
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
}

void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
    14b4:	85 e8       	ldi	r24, 0x85	; 133
    14b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				TWI_read(ACK);	//going to read more
				twi_bufor[twi_buf_pos.tail].status = read;
			}
			else{
				TWI_read(NACK);	//finishing reading
				twi_bufor[twi_buf_pos.tail].status = stop_reading;
    14ba:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <twi_buf_pos>
    14be:	e6 95       	lsr	r30
    14c0:	e6 95       	lsr	r30
    14c2:	e6 95       	lsr	r30
    14c4:	e7 70       	andi	r30, 0x07	; 7
    14c6:	84 e1       	ldi	r24, 0x14	; 20
    14c8:	e8 9f       	mul	r30, r24
    14ca:	f0 01       	movw	r30, r0
    14cc:	11 24       	eor	r1, r1
    14ce:	ee 59       	subi	r30, 0x9E	; 158
    14d0:	fd 4f       	sbci	r31, 0xFD	; 253
    14d2:	8a e0       	ldi	r24, 0x0A	; 10
    14d4:	83 8b       	std	Z+19, r24	; 0x13
			}
			twi_bufor[twi_buf_pos.tail].lenght --;
    14d6:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <twi_buf_pos>
    14da:	e6 95       	lsr	r30
    14dc:	e6 95       	lsr	r30
    14de:	e6 95       	lsr	r30
    14e0:	e7 70       	andi	r30, 0x07	; 7
    14e2:	84 e1       	ldi	r24, 0x14	; 20
    14e4:	e8 9f       	mul	r30, r24
    14e6:	f0 01       	movw	r30, r0
    14e8:	11 24       	eor	r1, r1
    14ea:	ee 59       	subi	r30, 0x9E	; 158
    14ec:	fd 4f       	sbci	r31, 0xFD	; 253
    14ee:	87 85       	ldd	r24, Z+15	; 0x0f
    14f0:	81 50       	subi	r24, 0x01	; 1
    14f2:	87 87       	std	Z+15, r24	; 0x0f
			break;
    14f4:	99 c0       	rjmp	.+306    	; 0x1628 <__vector_24+0x41a>

		case stop_reading:
			*twi_bufor[twi_buf_pos.tail].bufor_ref++ = TWDR0;	//read last received byte
    14f6:	84 e1       	ldi	r24, 0x14	; 20
    14f8:	84 9f       	mul	r24, r20
    14fa:	f0 01       	movw	r30, r0
    14fc:	85 9f       	mul	r24, r21
    14fe:	f0 0d       	add	r31, r0
    1500:	11 24       	eor	r1, r1
    1502:	ee 59       	subi	r30, 0x9E	; 158
    1504:	fd 4f       	sbci	r31, 0xFD	; 253
    1506:	a5 85       	ldd	r26, Z+13	; 0x0d
    1508:	b6 85       	ldd	r27, Z+14	; 0x0e
    150a:	9d 01       	movw	r18, r26
    150c:	2f 5f       	subi	r18, 0xFF	; 255
    150e:	3f 4f       	sbci	r19, 0xFF	; 255
    1510:	36 87       	std	Z+14, r19	; 0x0e
    1512:	25 87       	std	Z+13, r18	; 0x0d
    1514:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1518:	9c 93       	st	X, r25
			*twi_bufor[twi_buf_pos.tail].flag_register = twi_bufor[twi_buf_pos.tail].flag_mask;	//set read done flag
    151a:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <twi_buf_pos>
    151e:	e6 95       	lsr	r30
    1520:	e6 95       	lsr	r30
    1522:	e6 95       	lsr	r30
    1524:	e7 70       	andi	r30, 0x07	; 7
    1526:	8e 9f       	mul	r24, r30
    1528:	f0 01       	movw	r30, r0
    152a:	11 24       	eor	r1, r1
    152c:	ee 59       	subi	r30, 0x9E	; 158
    152e:	fd 4f       	sbci	r31, 0xFD	; 253
    1530:	a0 89       	ldd	r26, Z+16	; 0x10
    1532:	b1 89       	ldd	r27, Z+17	; 0x11
    1534:	92 89       	ldd	r25, Z+18	; 0x12
    1536:	9c 93       	st	X, r25
void TWI_start(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA)|(1<<TWIE);
}

void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
    1538:	95 e9       	ldi	r25, 0x95	; 149
    153a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

		case stop_reading:
			*twi_bufor[twi_buf_pos.tail].bufor_ref++ = TWDR0;	//read last received byte
			*twi_bufor[twi_buf_pos.tail].flag_register = twi_bufor[twi_buf_pos.tail].flag_mask;	//set read done flag
			TWI_stop();
			twi_bufor[twi_buf_pos.tail].status = done;
    153e:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <twi_buf_pos>
    1542:	e6 95       	lsr	r30
    1544:	e6 95       	lsr	r30
    1546:	e6 95       	lsr	r30
    1548:	e7 70       	andi	r30, 0x07	; 7
    154a:	8e 9f       	mul	r24, r30
    154c:	f0 01       	movw	r30, r0
    154e:	11 24       	eor	r1, r1
    1550:	ee 59       	subi	r30, 0x9E	; 158
    1552:	fd 4f       	sbci	r31, 0xFD	; 253
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	83 8b       	std	Z+19, r24	; 0x13
			break;
    1558:	67 c0       	rjmp	.+206    	; 0x1628 <__vector_24+0x41a>

		case write:
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){	//if more than 1 char to write
    155a:	84 e1       	ldi	r24, 0x14	; 20
    155c:	84 9f       	mul	r24, r20
    155e:	f0 01       	movw	r30, r0
    1560:	85 9f       	mul	r24, r21
    1562:	f0 0d       	add	r31, r0
    1564:	11 24       	eor	r1, r1
    1566:	ee 59       	subi	r30, 0x9E	; 158
    1568:	fd 4f       	sbci	r31, 0xFD	; 253
    156a:	87 85       	ldd	r24, Z+15	; 0x0f
    156c:	82 30       	cpi	r24, 0x02	; 2
    156e:	e8 f0       	brcs	.+58     	; 0x15aa <__vector_24+0x39c>
				TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
    1570:	84 e1       	ldi	r24, 0x14	; 20
    1572:	84 9f       	mul	r24, r20
    1574:	f0 01       	movw	r30, r0
    1576:	85 9f       	mul	r24, r21
    1578:	f0 0d       	add	r31, r0
    157a:	11 24       	eor	r1, r1
    157c:	ee 59       	subi	r30, 0x9E	; 158
    157e:	fd 4f       	sbci	r31, 0xFD	; 253
    1580:	92 81       	ldd	r25, Z+2	; 0x02
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    1582:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    1586:	95 e8       	ldi	r25, 0x85	; 133
    1588:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;

		case write:
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){	//if more than 1 char to write
				TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
				twi_bufor[twi_buf_pos.tail].status = write;
    158c:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <twi_buf_pos>
    1590:	e6 95       	lsr	r30
    1592:	e6 95       	lsr	r30
    1594:	e6 95       	lsr	r30
    1596:	e7 70       	andi	r30, 0x07	; 7
    1598:	8e 9f       	mul	r24, r30
    159a:	f0 01       	movw	r30, r0
    159c:	11 24       	eor	r1, r1
    159e:	ee 59       	subi	r30, 0x9E	; 158
    15a0:	fd 4f       	sbci	r31, 0xFD	; 253
    15a2:	8b e0       	ldi	r24, 0x0B	; 11
    15a4:	83 8b       	std	Z+19, r24	; 0x13
				twi_bufor[twi_buf_pos.tail].buf_pos = 0;
    15a6:	14 86       	std	Z+12, r1	; 0x0c
    15a8:	1b c0       	rjmp	.+54     	; 0x15e0 <__vector_24+0x3d2>
			}

			else {	//only 1 byte to send
				TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
    15aa:	84 e1       	ldi	r24, 0x14	; 20
    15ac:	84 9f       	mul	r24, r20
    15ae:	f0 01       	movw	r30, r0
    15b0:	85 9f       	mul	r24, r21
    15b2:	f0 0d       	add	r31, r0
    15b4:	11 24       	eor	r1, r1
    15b6:	ee 59       	subi	r30, 0x9E	; 158
    15b8:	fd 4f       	sbci	r31, 0xFD	; 253
    15ba:	92 81       	ldd	r25, Z+2	; 0x02
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    15bc:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    15c0:	95 e8       	ldi	r25, 0x85	; 133
    15c2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				twi_bufor[twi_buf_pos.tail].buf_pos = 0;
			}

			else {	//only 1 byte to send
				TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
				twi_bufor[twi_buf_pos.tail].status = last_byte_write;
    15c6:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <twi_buf_pos>
    15ca:	e6 95       	lsr	r30
    15cc:	e6 95       	lsr	r30
    15ce:	e6 95       	lsr	r30
    15d0:	e7 70       	andi	r30, 0x07	; 7
    15d2:	8e 9f       	mul	r24, r30
    15d4:	f0 01       	movw	r30, r0
    15d6:	11 24       	eor	r1, r1
    15d8:	ee 59       	subi	r30, 0x9E	; 158
    15da:	fd 4f       	sbci	r31, 0xFD	; 253
    15dc:	8c e0       	ldi	r24, 0x0C	; 12
    15de:	83 8b       	std	Z+19, r24	; 0x13
			}
			twi_bufor[twi_buf_pos.tail].lenght --;
    15e0:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <twi_buf_pos>
    15e4:	e6 95       	lsr	r30
    15e6:	e6 95       	lsr	r30
    15e8:	e6 95       	lsr	r30
    15ea:	e7 70       	andi	r30, 0x07	; 7
    15ec:	84 e1       	ldi	r24, 0x14	; 20
    15ee:	e8 9f       	mul	r30, r24
    15f0:	f0 01       	movw	r30, r0
    15f2:	11 24       	eor	r1, r1
    15f4:	ee 59       	subi	r30, 0x9E	; 158
    15f6:	fd 4f       	sbci	r31, 0xFD	; 253
    15f8:	87 85       	ldd	r24, Z+15	; 0x0f
    15fa:	81 50       	subi	r24, 0x01	; 1
    15fc:	87 87       	std	Z+15, r24	; 0x0f
			break;
    15fe:	14 c0       	rjmp	.+40     	; 0x1628 <__vector_24+0x41a>
void TWI_start(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA)|(1<<TWIE);
}

void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
    1600:	85 e9       	ldi	r24, 0x95	; 149
    1602:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			twi_bufor[twi_buf_pos.tail].lenght --;
			break;

		case last_byte_write:
			TWI_stop();
			twi_bufor[twi_buf_pos.tail].status = done;
    1606:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <twi_buf_pos>
    160a:	e6 95       	lsr	r30
    160c:	e6 95       	lsr	r30
    160e:	e6 95       	lsr	r30
    1610:	e7 70       	andi	r30, 0x07	; 7
    1612:	84 e1       	ldi	r24, 0x14	; 20
    1614:	e8 9f       	mul	r30, r24
    1616:	f0 01       	movw	r30, r0
    1618:	11 24       	eor	r1, r1
    161a:	ee 59       	subi	r30, 0x9E	; 158
    161c:	fd 4f       	sbci	r31, 0xFD	; 253
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	83 8b       	std	Z+19, r24	; 0x13
			twi_reset_counter = 0xFF;	//turn of timer, sending procedure finished correctly
    1622:	8f ef       	ldi	r24, 0xFF	; 255
    1624:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <twi_reset_counter>

		default:

			break;
	}
    1628:	ff 91       	pop	r31
    162a:	ef 91       	pop	r30
    162c:	bf 91       	pop	r27
    162e:	af 91       	pop	r26
    1630:	9f 91       	pop	r25
    1632:	8f 91       	pop	r24
    1634:	5f 91       	pop	r21
    1636:	4f 91       	pop	r20
    1638:	3f 91       	pop	r19
    163a:	2f 91       	pop	r18
    163c:	0f 90       	pop	r0
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	0f 90       	pop	r0
    1642:	1f 90       	pop	r1
    1644:	18 95       	reti

00001646 <InitUartCOM>:
void SendStringUint(char string[], uint16_t number)
{
	SendString(string);
	SendUint(number);
	SendEnter();
}
    1646:	0e 94 8f 0c 	call	0x191e	; 0x191e <InitUartCOM_HW>
    164a:	08 95       	ret

0000164c <ReceiveChar>:
    164c:	88 23       	and	r24, r24
    164e:	91 f0       	breq	.+36     	; 0x1674 <ReceiveChar+0x28>
    1650:	8a 30       	cpi	r24, 0x0A	; 10
    1652:	81 f0       	breq	.+32     	; 0x1674 <ReceiveChar+0x28>
    1654:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <RxHead>
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	ee 5f       	subi	r30, 0xFE	; 254
    165c:	fc 4f       	sbci	r31, 0xFC	; 252
    165e:	80 83       	st	Z, r24
    1660:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <RxHead>
    1664:	8f 5f       	subi	r24, 0xFF	; 255
    1666:	8f 71       	andi	r24, 0x1F	; 31
    1668:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <RxHead>
    166c:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <RxHead>
    1670:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <RxTail>
    1674:	08 95       	ret

00001676 <SendString>:
    1676:	0f 93       	push	r16
    1678:	1f 93       	push	r17
    167a:	cf 93       	push	r28
    167c:	fc 01       	movw	r30, r24
    167e:	80 81       	ld	r24, Z
    1680:	88 23       	and	r24, r24
    1682:	59 f0       	breq	.+22     	; 0x169a <SendString+0x24>
    1684:	8f 01       	movw	r16, r30
    1686:	c0 e0       	ldi	r28, 0x00	; 0
    1688:	0e 94 99 0c 	call	0x1932	; 0x1932 <PutCharToBuffor>
    168c:	cf 5f       	subi	r28, 0xFF	; 255
    168e:	f8 01       	movw	r30, r16
    1690:	ec 0f       	add	r30, r28
    1692:	f1 1d       	adc	r31, r1
    1694:	80 81       	ld	r24, Z
    1696:	81 11       	cpse	r24, r1
    1698:	f7 cf       	rjmp	.-18     	; 0x1688 <SendString+0x12>
    169a:	cf 91       	pop	r28
    169c:	1f 91       	pop	r17
    169e:	0f 91       	pop	r16
    16a0:	08 95       	ret

000016a2 <SendEnter>:
    16a2:	8d e0       	ldi	r24, 0x0D	; 13
    16a4:	0e 94 99 0c 	call	0x1932	; 0x1932 <PutCharToBuffor>
    16a8:	8a e0       	ldi	r24, 0x0A	; 10
    16aa:	0e 94 99 0c 	call	0x1932	; 0x1932 <PutCharToBuffor>
    16ae:	08 95       	ret

000016b0 <SendLine>:
    16b0:	0e 94 3b 0b 	call	0x1676	; 0x1676 <SendString>
    16b4:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <SendEnter>
    16b8:	08 95       	ret

000016ba <SendInt>:
    16ba:	4f 92       	push	r4
    16bc:	5f 92       	push	r5
    16be:	6f 92       	push	r6
    16c0:	7f 92       	push	r7
    16c2:	8f 92       	push	r8
    16c4:	9f 92       	push	r9
    16c6:	af 92       	push	r10
    16c8:	bf 92       	push	r11
    16ca:	cf 92       	push	r12
    16cc:	df 92       	push	r13
    16ce:	ef 92       	push	r14
    16d0:	ff 92       	push	r15
    16d2:	0f 93       	push	r16
    16d4:	1f 93       	push	r17
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
    16de:	a8 97       	sbiw	r28, 0x28	; 40
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	de bf       	out	0x3e, r29	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	cd bf       	out	0x3d, r28	; 61
    16ea:	6b 01       	movw	r12, r22
    16ec:	7c 01       	movw	r14, r24
    16ee:	fe 01       	movw	r30, r28
    16f0:	75 96       	adiw	r30, 0x15	; 21
    16f2:	8e 01       	movw	r16, r28
    16f4:	0f 5f       	subi	r16, 0xFF	; 255
    16f6:	1f 4f       	sbci	r17, 0xFF	; 255
    16f8:	ce 01       	movw	r24, r28
    16fa:	4d 96       	adiw	r24, 0x1d	; 29
    16fc:	d8 01       	movw	r26, r16
    16fe:	11 92       	st	Z+, r1
    1700:	1d 92       	st	X+, r1
    1702:	e8 17       	cp	r30, r24
    1704:	f9 07       	cpc	r31, r25
    1706:	d9 f7       	brne	.-10     	; 0x16fe <SendInt+0x44>
    1708:	ff 20       	and	r15, r15
    170a:	0c f0       	brlt	.+2      	; 0x170e <SendInt+0x54>
    170c:	5d c0       	rjmp	.+186    	; 0x17c8 <SendInt+0x10e>
    170e:	81 c0       	rjmp	.+258    	; 0x1812 <SendInt+0x158>
    1710:	5e 01       	movw	r10, r28
    1712:	26 e1       	ldi	r18, 0x16	; 22
    1714:	a2 0e       	add	r10, r18
    1716:	b1 1c       	adc	r11, r1
    1718:	99 24       	eor	r9, r9
    171a:	93 94       	inc	r9
    171c:	0f 2e       	mov	r0, r31
    171e:	fa e0       	ldi	r31, 0x0A	; 10
    1720:	4f 2e       	mov	r4, r31
    1722:	51 2c       	mov	r5, r1
    1724:	61 2c       	mov	r6, r1
    1726:	71 2c       	mov	r7, r1
    1728:	f0 2d       	mov	r31, r0
    172a:	01 c0       	rjmp	.+2      	; 0x172e <SendInt+0x74>
    172c:	98 2e       	mov	r9, r24
    172e:	c7 01       	movw	r24, r14
    1730:	b6 01       	movw	r22, r12
    1732:	a3 01       	movw	r20, r6
    1734:	92 01       	movw	r18, r4
    1736:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__divmodsi4>
    173a:	20 e3       	ldi	r18, 0x30	; 48
    173c:	26 0f       	add	r18, r22
    173e:	d5 01       	movw	r26, r10
    1740:	2d 93       	st	X+, r18
    1742:	5d 01       	movw	r10, r26
    1744:	a7 01       	movw	r20, r14
    1746:	96 01       	movw	r18, r12
    1748:	26 1b       	sub	r18, r22
    174a:	37 0b       	sbc	r19, r23
    174c:	48 0b       	sbc	r20, r24
    174e:	59 0b       	sbc	r21, r25
    1750:	ca 01       	movw	r24, r20
    1752:	b9 01       	movw	r22, r18
    1754:	a3 01       	movw	r20, r6
    1756:	92 01       	movw	r18, r4
    1758:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__divmodsi4>
    175c:	69 01       	movw	r12, r18
    175e:	7a 01       	movw	r14, r20
    1760:	23 2b       	or	r18, r19
    1762:	24 2b       	or	r18, r20
    1764:	25 2b       	or	r18, r21
    1766:	21 f0       	breq	.+8      	; 0x1770 <SendInt+0xb6>
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	89 0d       	add	r24, r9
    176c:	84 31       	cpi	r24, 0x14	; 20
    176e:	f1 f6       	brne	.-68     	; 0x172c <SendInt+0x72>
    1770:	21 e0       	ldi	r18, 0x01	; 1
    1772:	29 0d       	add	r18, r9
    1774:	88 20       	and	r8, r8
    1776:	54 f4       	brge	.+20     	; 0x178c <SendInt+0xd2>
    1778:	02 c0       	rjmp	.+4      	; 0x177e <SendInt+0xc4>
    177a:	21 e0       	ldi	r18, 0x01	; 1
    177c:	91 2c       	mov	r9, r1
    177e:	fe 01       	movw	r30, r28
    1780:	e2 0f       	add	r30, r18
    1782:	f1 1d       	adc	r31, r1
    1784:	8d e2       	ldi	r24, 0x2D	; 45
    1786:	85 8b       	std	Z+21, r24	; 0x15
    1788:	22 e0       	ldi	r18, 0x02	; 2
    178a:	29 0d       	add	r18, r9
    178c:	21 11       	cpse	r18, r1
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <SendInt+0xda>
    1790:	0f c0       	rjmp	.+30     	; 0x17b0 <SendInt+0xf6>
    1792:	21 e0       	ldi	r18, 0x01	; 1
    1794:	e5 e1       	ldi	r30, 0x15	; 21
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	ec 0f       	add	r30, r28
    179a:	fd 1f       	adc	r31, r29
    179c:	e2 0f       	add	r30, r18
    179e:	f1 1d       	adc	r31, r1
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	92 91       	ld	r25, -Z
    17a4:	d8 01       	movw	r26, r16
    17a6:	9d 93       	st	X+, r25
    17a8:	8d 01       	movw	r16, r26
    17aa:	8f 5f       	subi	r24, 0xFF	; 255
    17ac:	82 17       	cp	r24, r18
    17ae:	c8 f3       	brcs	.-14     	; 0x17a2 <SendInt+0xe8>
    17b0:	e1 e0       	ldi	r30, 0x01	; 1
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	ec 0f       	add	r30, r28
    17b6:	fd 1f       	adc	r31, r29
    17b8:	e2 0f       	add	r30, r18
    17ba:	f1 1d       	adc	r31, r1
    17bc:	10 82       	st	Z, r1
    17be:	ce 01       	movw	r24, r28
    17c0:	01 96       	adiw	r24, 0x01	; 1
    17c2:	0e 94 3b 0b 	call	0x1676	; 0x1676 <SendString>
    17c6:	53 c0       	rjmp	.+166    	; 0x186e <SendInt+0x1b4>
    17c8:	0f 2e       	mov	r0, r31
    17ca:	fa e0       	ldi	r31, 0x0A	; 10
    17cc:	8f 2e       	mov	r8, r31
    17ce:	91 2c       	mov	r9, r1
    17d0:	a1 2c       	mov	r10, r1
    17d2:	b1 2c       	mov	r11, r1
    17d4:	f0 2d       	mov	r31, r0
    17d6:	c7 01       	movw	r24, r14
    17d8:	b6 01       	movw	r22, r12
    17da:	a5 01       	movw	r20, r10
    17dc:	94 01       	movw	r18, r8
    17de:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__divmodsi4>
    17e2:	20 e3       	ldi	r18, 0x30	; 48
    17e4:	26 0f       	add	r18, r22
    17e6:	2d 8b       	std	Y+21, r18	; 0x15
    17e8:	a7 01       	movw	r20, r14
    17ea:	96 01       	movw	r18, r12
    17ec:	26 1b       	sub	r18, r22
    17ee:	37 0b       	sbc	r19, r23
    17f0:	48 0b       	sbc	r20, r24
    17f2:	59 0b       	sbc	r21, r25
    17f4:	ca 01       	movw	r24, r20
    17f6:	b9 01       	movw	r22, r18
    17f8:	a5 01       	movw	r20, r10
    17fa:	94 01       	movw	r18, r8
    17fc:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__divmodsi4>
    1800:	69 01       	movw	r12, r18
    1802:	7a 01       	movw	r14, r20
    1804:	23 2b       	or	r18, r19
    1806:	24 2b       	or	r18, r20
    1808:	25 2b       	or	r18, r21
    180a:	19 f2       	breq	.-122    	; 0x1792 <SendInt+0xd8>
    180c:	88 24       	eor	r8, r8
    180e:	83 94       	inc	r8
    1810:	7f cf       	rjmp	.-258    	; 0x1710 <SendInt+0x56>
    1812:	f0 94       	com	r15
    1814:	e0 94       	com	r14
    1816:	d0 94       	com	r13
    1818:	c0 94       	com	r12
    181a:	c1 1c       	adc	r12, r1
    181c:	d1 1c       	adc	r13, r1
    181e:	e1 1c       	adc	r14, r1
    1820:	f1 1c       	adc	r15, r1
    1822:	0f 2e       	mov	r0, r31
    1824:	fa e0       	ldi	r31, 0x0A	; 10
    1826:	8f 2e       	mov	r8, r31
    1828:	91 2c       	mov	r9, r1
    182a:	a1 2c       	mov	r10, r1
    182c:	b1 2c       	mov	r11, r1
    182e:	f0 2d       	mov	r31, r0
    1830:	c7 01       	movw	r24, r14
    1832:	b6 01       	movw	r22, r12
    1834:	a5 01       	movw	r20, r10
    1836:	94 01       	movw	r18, r8
    1838:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__divmodsi4>
    183c:	20 e3       	ldi	r18, 0x30	; 48
    183e:	26 0f       	add	r18, r22
    1840:	2d 8b       	std	Y+21, r18	; 0x15
    1842:	a7 01       	movw	r20, r14
    1844:	96 01       	movw	r18, r12
    1846:	26 1b       	sub	r18, r22
    1848:	37 0b       	sbc	r19, r23
    184a:	48 0b       	sbc	r20, r24
    184c:	59 0b       	sbc	r21, r25
    184e:	ca 01       	movw	r24, r20
    1850:	b9 01       	movw	r22, r18
    1852:	a5 01       	movw	r20, r10
    1854:	94 01       	movw	r18, r8
    1856:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__divmodsi4>
    185a:	69 01       	movw	r12, r18
    185c:	7a 01       	movw	r14, r20
    185e:	23 2b       	or	r18, r19
    1860:	24 2b       	or	r18, r20
    1862:	25 2b       	or	r18, r21
    1864:	09 f4       	brne	.+2      	; 0x1868 <SendInt+0x1ae>
    1866:	89 cf       	rjmp	.-238    	; 0x177a <SendInt+0xc0>
    1868:	88 24       	eor	r8, r8
    186a:	8a 94       	dec	r8
    186c:	51 cf       	rjmp	.-350    	; 0x1710 <SendInt+0x56>
    186e:	a8 96       	adiw	r28, 0x28	; 40
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	cd bf       	out	0x3d, r28	; 61
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	1f 91       	pop	r17
    1880:	0f 91       	pop	r16
    1882:	ff 90       	pop	r15
    1884:	ef 90       	pop	r14
    1886:	df 90       	pop	r13
    1888:	cf 90       	pop	r12
    188a:	bf 90       	pop	r11
    188c:	af 90       	pop	r10
    188e:	9f 90       	pop	r9
    1890:	8f 90       	pop	r8
    1892:	7f 90       	pop	r7
    1894:	6f 90       	pop	r6
    1896:	5f 90       	pop	r5
    1898:	4f 90       	pop	r4
    189a:	08 95       	ret

0000189c <SendStringInt>:
    189c:	cf 92       	push	r12
    189e:	df 92       	push	r13
    18a0:	ef 92       	push	r14
    18a2:	ff 92       	push	r15
    18a4:	6a 01       	movw	r12, r20
    18a6:	7b 01       	movw	r14, r22
    18a8:	0e 94 3b 0b 	call	0x1676	; 0x1676 <SendString>
    18ac:	c7 01       	movw	r24, r14
    18ae:	b6 01       	movw	r22, r12
    18b0:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <SendInt>
    18b4:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <SendEnter>
    18b8:	ff 90       	pop	r15
    18ba:	ef 90       	pop	r14
    18bc:	df 90       	pop	r13
    18be:	cf 90       	pop	r12
    18c0:	08 95       	ret

000018c2 <CheckRxBuffor>:
		string[pozycja] = 0;
		SendString(string);
}

void CheckRxBuffor(void)
{
    18c2:	cf 93       	push	r28
	if (RxHead != RxTail)	//Check if buffer is not empty
    18c4:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <RxHead>
    18c8:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <RxTail>
    18cc:	98 17       	cp	r25, r24
    18ce:	29 f1       	breq	.+74     	; 0x191a <CheckRxBuffor+0x58>
	{
		uint8_t i = RxTail;
    18d0:	c0 91 55 01 	lds	r28, 0x0155	; 0x800155 <RxTail>

		while(i != RxHead)	//search for end of line
    18d4:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <RxHead>
    18d8:	c8 17       	cp	r28, r24
    18da:	f9 f0       	breq	.+62     	; 0x191a <CheckRxBuffor+0x58>
		{
			//If end of line process Command
			
			if (RxBuffor[i] == 13)
    18dc:	ec 2f       	mov	r30, r28
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	ee 5f       	subi	r30, 0xFE	; 254
    18e2:	fc 4f       	sbci	r31, 0xFC	; 252
    18e4:	80 81       	ld	r24, Z
    18e6:	8d 30       	cpi	r24, 0x0D	; 13
    18e8:	91 f4       	brne	.+36     	; 0x190e <CheckRxBuffor+0x4c>
    18ea:	07 c0       	rjmp	.+14     	; 0x18fa <CheckRxBuffor+0x38>
    18ec:	ec 2f       	mov	r30, r28
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	ee 5f       	subi	r30, 0xFE	; 254
    18f2:	fc 4f       	sbci	r31, 0xFC	; 252
    18f4:	80 81       	ld	r24, Z
    18f6:	8d 30       	cpi	r24, 0x0D	; 13
    18f8:	51 f4       	brne	.+20     	; 0x190e <CheckRxBuffor+0x4c>
			{
				ProcessString(RxTail, i);
    18fa:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <RxTail>
    18fe:	6c 2f       	mov	r22, r28
    1900:	0e 94 6f 08 	call	0x10de	; 0x10de <ProcessString>
				i = (i+1) & RX_SIZE_BIN;
    1904:	cf 5f       	subi	r28, 0xFF	; 255
    1906:	cf 71       	andi	r28, 0x1F	; 31
				RxTail = i;
    1908:	c0 93 55 01 	sts	0x0155, r28	; 0x800155 <RxTail>
				break;
    190c:	06 c0       	rjmp	.+12     	; 0x191a <CheckRxBuffor+0x58>
			}

			i = (i+1) & RX_SIZE_BIN;
    190e:	cf 5f       	subi	r28, 0xFF	; 255
    1910:	cf 71       	andi	r28, 0x1F	; 31
{
	if (RxHead != RxTail)	//Check if buffer is not empty
	{
		uint8_t i = RxTail;

		while(i != RxHead)	//search for end of line
    1912:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <RxHead>
    1916:	8c 13       	cpse	r24, r28
    1918:	e9 cf       	rjmp	.-46     	; 0x18ec <CheckRxBuffor+0x2a>
			}

			i = (i+1) & RX_SIZE_BIN;
		}
	}
    191a:	cf 91       	pop	r28
    191c:	08 95       	ret

0000191e <InitUartCOM_HW>:


	UBRR0 = 9;	//100k at 16MHz clock

	//Init COM Uart
	UCSR0B = (1<<RXEN0) | (1<<RXCIE0) |
    191e:	83 e0       	ldi	r24, 0x03	; 3
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1926:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    192a:	88 ed       	ldi	r24, 0xD8	; 216
    192c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1930:	08 95       	ret

00001932 <PutCharToBuffor>:
}


void PutCharToBuffor(uint8_t x)
{
	if ((UCSR0A & (1<<UDRE0)) && (TxHead == TxTail))	//check if can put next char
    1932:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1936:	95 ff       	sbrs	r25, 5
    1938:	09 c0       	rjmp	.+18     	; 0x194c <PutCharToBuffor+0x1a>
    193a:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <TxHead>
    193e:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <TxTail>
    1942:	29 13       	cpse	r18, r25
    1944:	03 c0       	rjmp	.+6      	; 0x194c <PutCharToBuffor+0x1a>
	{
		UDR0 = x;		
    1946:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    194a:	08 95       	ret
	}
	else	//if not ready put char to sending queue
	{
		TxBuffor[TxHead] = x;
    194c:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <TxHead>
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	ee 5d       	subi	r30, 0xDE	; 222
    1954:	fc 4f       	sbci	r31, 0xFC	; 252
    1956:	80 83       	st	Z, r24
		TxHead = (TxHead+1) & TX_SIZE_BIN;
    1958:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <TxHead>
    195c:	8f 5f       	subi	r24, 0xFF	; 255
    195e:	8f 77       	andi	r24, 0x7F	; 127
    1960:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <TxHead>
    1964:	08 95       	ret

00001966 <__vector_20>:
	}
}


ISR (USART0_TX_vect)
{
    1966:	1f 92       	push	r1
    1968:	0f 92       	push	r0
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	0f 92       	push	r0
    196e:	11 24       	eor	r1, r1
    1970:	8f 93       	push	r24
    1972:	9f 93       	push	r25
    1974:	ef 93       	push	r30
    1976:	ff 93       	push	r31
	if (TxTail == TxHead)
    1978:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <TxTail>
    197c:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <TxHead>
    1980:	98 13       	cpse	r25, r24
    1982:	03 c0       	rjmp	.+6      	; 0x198a <__vector_20+0x24>
	{
		uint8_t x = UDR0;
    1984:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1988:	0e c0       	rjmp	.+28     	; 0x19a6 <__vector_20+0x40>
	}

	else
	{
		UDR0 = TxBuffor[TxTail];
    198a:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <TxTail>
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	ee 5d       	subi	r30, 0xDE	; 222
    1992:	fc 4f       	sbci	r31, 0xFC	; 252
    1994:	80 81       	ld	r24, Z
    1996:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		TxTail = (TxTail+1) & TX_SIZE_BIN;
    199a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <TxTail>
    199e:	8f 5f       	subi	r24, 0xFF	; 255
    19a0:	8f 77       	andi	r24, 0x7F	; 127
    19a2:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <TxTail>
	}
}
    19a6:	ff 91       	pop	r31
    19a8:	ef 91       	pop	r30
    19aa:	9f 91       	pop	r25
    19ac:	8f 91       	pop	r24
    19ae:	0f 90       	pop	r0
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	0f 90       	pop	r0
    19b4:	1f 90       	pop	r1
    19b6:	18 95       	reti

000019b8 <__vector_18>:

ISR (USART0_RX_vect)	//COM Rx
{
    19b8:	1f 92       	push	r1
    19ba:	0f 92       	push	r0
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	0f 92       	push	r0
    19c0:	11 24       	eor	r1, r1
    19c2:	2f 93       	push	r18
    19c4:	3f 93       	push	r19
    19c6:	4f 93       	push	r20
    19c8:	5f 93       	push	r21
    19ca:	6f 93       	push	r22
    19cc:	7f 93       	push	r23
    19ce:	8f 93       	push	r24
    19d0:	9f 93       	push	r25
    19d2:	af 93       	push	r26
    19d4:	bf 93       	push	r27
    19d6:	ef 93       	push	r30
    19d8:	ff 93       	push	r31
// 	uint8_t x = UDR0;
// 	ReceiveChar(x);
// 	PutCharToBuffor(x);
	ReceiveChar(UDR0);
    19da:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    19de:	0e 94 26 0b 	call	0x164c	; 0x164c <ReceiveChar>
    19e2:	ff 91       	pop	r31
    19e4:	ef 91       	pop	r30
    19e6:	bf 91       	pop	r27
    19e8:	af 91       	pop	r26
    19ea:	9f 91       	pop	r25
    19ec:	8f 91       	pop	r24
    19ee:	7f 91       	pop	r23
    19f0:	6f 91       	pop	r22
    19f2:	5f 91       	pop	r21
    19f4:	4f 91       	pop	r20
    19f6:	3f 91       	pop	r19
    19f8:	2f 91       	pop	r18
    19fa:	0f 90       	pop	r0
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	0f 90       	pop	r0
    1a00:	1f 90       	pop	r1
    1a02:	18 95       	reti

00001a04 <__mulsi3>:
    1a04:	db 01       	movw	r26, r22
    1a06:	8f 93       	push	r24
    1a08:	9f 93       	push	r25
    1a0a:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__muluhisi3>
    1a0e:	bf 91       	pop	r27
    1a10:	af 91       	pop	r26
    1a12:	a2 9f       	mul	r26, r18
    1a14:	80 0d       	add	r24, r0
    1a16:	91 1d       	adc	r25, r1
    1a18:	a3 9f       	mul	r26, r19
    1a1a:	90 0d       	add	r25, r0
    1a1c:	b2 9f       	mul	r27, r18
    1a1e:	90 0d       	add	r25, r0
    1a20:	11 24       	eor	r1, r1
    1a22:	08 95       	ret

00001a24 <__divmodsi4>:
    1a24:	05 2e       	mov	r0, r21
    1a26:	97 fb       	bst	r25, 7
    1a28:	1e f4       	brtc	.+6      	; 0x1a30 <__divmodsi4+0xc>
    1a2a:	00 94       	com	r0
    1a2c:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__negsi2>
    1a30:	57 fd       	sbrc	r21, 7
    1a32:	07 d0       	rcall	.+14     	; 0x1a42 <__divmodsi4_neg2>
    1a34:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__udivmodsi4>
    1a38:	07 fc       	sbrc	r0, 7
    1a3a:	03 d0       	rcall	.+6      	; 0x1a42 <__divmodsi4_neg2>
    1a3c:	4e f4       	brtc	.+18     	; 0x1a50 <__divmodsi4_exit>
    1a3e:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <__negsi2>

00001a42 <__divmodsi4_neg2>:
    1a42:	50 95       	com	r21
    1a44:	40 95       	com	r20
    1a46:	30 95       	com	r19
    1a48:	21 95       	neg	r18
    1a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4c:	4f 4f       	sbci	r20, 0xFF	; 255
    1a4e:	5f 4f       	sbci	r21, 0xFF	; 255

00001a50 <__divmodsi4_exit>:
    1a50:	08 95       	ret

00001a52 <__negsi2>:
    1a52:	90 95       	com	r25
    1a54:	80 95       	com	r24
    1a56:	70 95       	com	r23
    1a58:	61 95       	neg	r22
    1a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a60:	08 95       	ret

00001a62 <__tablejump2__>:
    1a62:	ee 0f       	add	r30, r30
    1a64:	ff 1f       	adc	r31, r31
    1a66:	05 90       	lpm	r0, Z+
    1a68:	f4 91       	lpm	r31, Z
    1a6a:	e0 2d       	mov	r30, r0
    1a6c:	09 94       	ijmp

00001a6e <__umulhisi3>:
    1a6e:	a2 9f       	mul	r26, r18
    1a70:	b0 01       	movw	r22, r0
    1a72:	b3 9f       	mul	r27, r19
    1a74:	c0 01       	movw	r24, r0
    1a76:	a3 9f       	mul	r26, r19
    1a78:	70 0d       	add	r23, r0
    1a7a:	81 1d       	adc	r24, r1
    1a7c:	11 24       	eor	r1, r1
    1a7e:	91 1d       	adc	r25, r1
    1a80:	b2 9f       	mul	r27, r18
    1a82:	70 0d       	add	r23, r0
    1a84:	81 1d       	adc	r24, r1
    1a86:	11 24       	eor	r1, r1
    1a88:	91 1d       	adc	r25, r1
    1a8a:	08 95       	ret

00001a8c <__muluhisi3>:
    1a8c:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__umulhisi3>
    1a90:	a5 9f       	mul	r26, r21
    1a92:	90 0d       	add	r25, r0
    1a94:	b4 9f       	mul	r27, r20
    1a96:	90 0d       	add	r25, r0
    1a98:	a4 9f       	mul	r26, r20
    1a9a:	80 0d       	add	r24, r0
    1a9c:	91 1d       	adc	r25, r1
    1a9e:	11 24       	eor	r1, r1
    1aa0:	08 95       	ret

00001aa2 <__mulshisi3>:
    1aa2:	b7 ff       	sbrs	r27, 7
    1aa4:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__muluhisi3>

00001aa8 <__mulohisi3>:
    1aa8:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__muluhisi3>
    1aac:	82 1b       	sub	r24, r18
    1aae:	93 0b       	sbc	r25, r19
    1ab0:	08 95       	ret

00001ab2 <__udivmodsi4>:
    1ab2:	a1 e2       	ldi	r26, 0x21	; 33
    1ab4:	1a 2e       	mov	r1, r26
    1ab6:	aa 1b       	sub	r26, r26
    1ab8:	bb 1b       	sub	r27, r27
    1aba:	fd 01       	movw	r30, r26
    1abc:	0d c0       	rjmp	.+26     	; 0x1ad8 <__udivmodsi4_ep>

00001abe <__udivmodsi4_loop>:
    1abe:	aa 1f       	adc	r26, r26
    1ac0:	bb 1f       	adc	r27, r27
    1ac2:	ee 1f       	adc	r30, r30
    1ac4:	ff 1f       	adc	r31, r31
    1ac6:	a2 17       	cp	r26, r18
    1ac8:	b3 07       	cpc	r27, r19
    1aca:	e4 07       	cpc	r30, r20
    1acc:	f5 07       	cpc	r31, r21
    1ace:	20 f0       	brcs	.+8      	; 0x1ad8 <__udivmodsi4_ep>
    1ad0:	a2 1b       	sub	r26, r18
    1ad2:	b3 0b       	sbc	r27, r19
    1ad4:	e4 0b       	sbc	r30, r20
    1ad6:	f5 0b       	sbc	r31, r21

00001ad8 <__udivmodsi4_ep>:
    1ad8:	66 1f       	adc	r22, r22
    1ada:	77 1f       	adc	r23, r23
    1adc:	88 1f       	adc	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	1a 94       	dec	r1
    1ae2:	69 f7       	brne	.-38     	; 0x1abe <__udivmodsi4_loop>
    1ae4:	60 95       	com	r22
    1ae6:	70 95       	com	r23
    1ae8:	80 95       	com	r24
    1aea:	90 95       	com	r25
    1aec:	9b 01       	movw	r18, r22
    1aee:	ac 01       	movw	r20, r24
    1af0:	bd 01       	movw	r22, r26
    1af2:	cf 01       	movw	r24, r30
    1af4:	08 95       	ret

00001af6 <__strlen_P>:
    1af6:	fc 01       	movw	r30, r24
    1af8:	05 90       	lpm	r0, Z+
    1afa:	00 20       	and	r0, r0
    1afc:	e9 f7       	brne	.-6      	; 0x1af8 <__strlen_P+0x2>
    1afe:	80 95       	com	r24
    1b00:	90 95       	com	r25
    1b02:	8e 0f       	add	r24, r30
    1b04:	9f 1f       	adc	r25, r31
    1b06:	08 95       	ret

00001b08 <strncasecmp_P>:
    1b08:	fb 01       	movw	r30, r22
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	41 50       	subi	r20, 0x01	; 1
    1b0e:	50 40       	sbci	r21, 0x00	; 0
    1b10:	88 f0       	brcs	.+34     	; 0x1b34 <strncasecmp_P+0x2c>
    1b12:	8d 91       	ld	r24, X+
    1b14:	81 34       	cpi	r24, 0x41	; 65
    1b16:	1c f0       	brlt	.+6      	; 0x1b1e <strncasecmp_P+0x16>
    1b18:	8b 35       	cpi	r24, 0x5B	; 91
    1b1a:	0c f4       	brge	.+2      	; 0x1b1e <strncasecmp_P+0x16>
    1b1c:	80 5e       	subi	r24, 0xE0	; 224
    1b1e:	65 91       	lpm	r22, Z+
    1b20:	61 34       	cpi	r22, 0x41	; 65
    1b22:	1c f0       	brlt	.+6      	; 0x1b2a <strncasecmp_P+0x22>
    1b24:	6b 35       	cpi	r22, 0x5B	; 91
    1b26:	0c f4       	brge	.+2      	; 0x1b2a <strncasecmp_P+0x22>
    1b28:	60 5e       	subi	r22, 0xE0	; 224
    1b2a:	86 1b       	sub	r24, r22
    1b2c:	61 11       	cpse	r22, r1
    1b2e:	71 f3       	breq	.-36     	; 0x1b0c <strncasecmp_P+0x4>
    1b30:	99 0b       	sbc	r25, r25
    1b32:	08 95       	ret
    1b34:	88 1b       	sub	r24, r24
    1b36:	fc cf       	rjmp	.-8      	; 0x1b30 <strncasecmp_P+0x28>

00001b38 <strtok_r>:
    1b38:	fa 01       	movw	r30, r20
    1b3a:	a1 91       	ld	r26, Z+
    1b3c:	b0 81       	ld	r27, Z
    1b3e:	00 97       	sbiw	r24, 0x00	; 0
    1b40:	19 f4       	brne	.+6      	; 0x1b48 <strtok_r+0x10>
    1b42:	10 97       	sbiw	r26, 0x00	; 0
    1b44:	e1 f0       	breq	.+56     	; 0x1b7e <strtok_r+0x46>
    1b46:	cd 01       	movw	r24, r26
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cd 01       	movw	r24, r26
    1b4c:	0d 90       	ld	r0, X+
    1b4e:	00 20       	and	r0, r0
    1b50:	11 f4       	brne	.+4      	; 0x1b56 <strtok_r+0x1e>
    1b52:	c0 01       	movw	r24, r0
    1b54:	13 c0       	rjmp	.+38     	; 0x1b7c <strtok_r+0x44>
    1b56:	fb 01       	movw	r30, r22
    1b58:	21 91       	ld	r18, Z+
    1b5a:	22 23       	and	r18, r18
    1b5c:	19 f0       	breq	.+6      	; 0x1b64 <strtok_r+0x2c>
    1b5e:	20 15       	cp	r18, r0
    1b60:	d9 f7       	brne	.-10     	; 0x1b58 <strtok_r+0x20>
    1b62:	f3 cf       	rjmp	.-26     	; 0x1b4a <strtok_r+0x12>
    1b64:	fb 01       	movw	r30, r22
    1b66:	21 91       	ld	r18, Z+
    1b68:	20 15       	cp	r18, r0
    1b6a:	19 f4       	brne	.+6      	; 0x1b72 <strtok_r+0x3a>
    1b6c:	1e 92       	st	-X, r1
    1b6e:	11 96       	adiw	r26, 0x01	; 1
    1b70:	06 c0       	rjmp	.+12     	; 0x1b7e <strtok_r+0x46>
    1b72:	22 23       	and	r18, r18
    1b74:	c1 f7       	brne	.-16     	; 0x1b66 <strtok_r+0x2e>
    1b76:	0d 90       	ld	r0, X+
    1b78:	00 20       	and	r0, r0
    1b7a:	a1 f7       	brne	.-24     	; 0x1b64 <strtok_r+0x2c>
    1b7c:	d0 01       	movw	r26, r0
    1b7e:	fa 01       	movw	r30, r20
    1b80:	a1 93       	st	Z+, r26
    1b82:	b0 83       	st	Z, r27
    1b84:	08 95       	ret

00001b86 <_exit>:
    1b86:	f8 94       	cli

00001b88 <__stop_program>:
    1b88:	ff cf       	rjmp	.-2      	; 0x1b88 <__stop_program>
