
Flight assistant.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  00001a1a  00001aae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a0  0080014e  0080014e  00001afc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001afc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003376  00000000  00000000  00001dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001477  00000000  00000000  0000514a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018db  00000000  00000000  000065c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000077c  00000000  00000000  00007e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b15  00000000  00000000  00008618  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002915  00000000  00000000  0000912d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  0000ba42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 84 00 	jmp	0x108	; 0x108 <__ctors_end>
       4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
       8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
       c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      10:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      14:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      18:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      1c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      20:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      24:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      28:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      2c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      30:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      34:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      38:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      3c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      40:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      44:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      48:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <__vector_18>
      4c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      50:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <__vector_20>
      54:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      58:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      5c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      60:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__vector_24>
      64:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      68:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      6c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      70:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      74:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      78:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      7c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      80:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      84:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      88:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      8c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      90:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      94:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      98:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      9c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      a0:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      a4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      a8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      ac:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      b0:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      b4:	7c 08       	sbc	r7, r12
      b6:	90 08       	sbc	r9, r0
      b8:	ac 08       	sbc	r10, r12
      ba:	1c 09       	sbc	r17, r12
      bc:	32 09       	sbc	r19, r2
      be:	70 09       	sbc	r23, r0
      c0:	c3 09       	sbc	r28, r3
      c2:	f5 09       	sbc	r31, r5
      c4:	48 0a       	sbc	r4, r24

000000c6 <ER_commands>:
      c6:	45 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ER..............
      d6:	00 00 00 00 fc 05 45 52 5f 52 45 41 44 00 00 00     ......ER_READ...
	...
      ee:	00 00 02 06 45 52 5f 42 55 46 00 00 00 00 00 00     ....ER_BUF......
	...
     106:	5a 06                                               Z.

00000108 <__ctors_end>:
     108:	11 24       	eor	r1, r1
     10a:	1f be       	out	0x3f, r1	; 63
     10c:	cf ef       	ldi	r28, 0xFF	; 255
     10e:	d8 e0       	ldi	r29, 0x08	; 8
     110:	de bf       	out	0x3e, r29	; 62
     112:	cd bf       	out	0x3d, r28	; 61

00000114 <__do_copy_data>:
     114:	11 e0       	ldi	r17, 0x01	; 1
     116:	a0 e0       	ldi	r26, 0x00	; 0
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	ea e1       	ldi	r30, 0x1A	; 26
     11c:	fa e1       	ldi	r31, 0x1A	; 26
     11e:	02 c0       	rjmp	.+4      	; 0x124 <__do_copy_data+0x10>
     120:	05 90       	lpm	r0, Z+
     122:	0d 92       	st	X+, r0
     124:	ae 34       	cpi	r26, 0x4E	; 78
     126:	b1 07       	cpc	r27, r17
     128:	d9 f7       	brne	.-10     	; 0x120 <__do_copy_data+0xc>

0000012a <__do_clear_bss>:
     12a:	22 e0       	ldi	r18, 0x02	; 2
     12c:	ae e4       	ldi	r26, 0x4E	; 78
     12e:	b1 e0       	ldi	r27, 0x01	; 1
     130:	01 c0       	rjmp	.+2      	; 0x134 <.do_clear_bss_start>

00000132 <.do_clear_bss_loop>:
     132:	1d 92       	st	X+, r1

00000134 <.do_clear_bss_start>:
     134:	ae 3e       	cpi	r26, 0xEE	; 238
     136:	b2 07       	cpc	r27, r18
     138:	e1 f7       	brne	.-8      	; 0x132 <.do_clear_bss_loop>
     13a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <main>
     13e:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <_exit>

00000142 <__bad_interrupt>:
     142:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000146 <PlaceInGyroBuffor>:

uint8_t counter_testing = 0;


void PlaceInGyroBuffor(int16_t gyro_samples[])
{
     146:	fc 01       	movw	r30, r24
	X_gyro_buff[gyro_head] = gyro_samples[0];
     148:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <gyro_head>
     14c:	29 2f       	mov	r18, r25
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	40 81       	ld	r20, Z
     152:	51 81       	ldd	r21, Z+1	; 0x01
     154:	22 0f       	add	r18, r18
     156:	33 1f       	adc	r19, r19
     158:	d9 01       	movw	r26, r18
     15a:	aa 5a       	subi	r26, 0xAA	; 170
     15c:	be 4f       	sbci	r27, 0xFE	; 254
     15e:	4d 93       	st	X+, r20
     160:	5c 93       	st	X, r21
	Y_gyro_buff[gyro_head] = gyro_samples[1];
     162:	42 81       	ldd	r20, Z+2	; 0x02
     164:	53 81       	ldd	r21, Z+3	; 0x03
     166:	d9 01       	movw	r26, r18
     168:	ae 59       	subi	r26, 0x9E	; 158
     16a:	be 4f       	sbci	r27, 0xFE	; 254
     16c:	4d 93       	st	X+, r20
     16e:	5c 93       	st	X, r21
	Z_gyro_buff[gyro_head] = gyro_samples[2];
     170:	44 81       	ldd	r20, Z+4	; 0x04
     172:	55 81       	ldd	r21, Z+5	; 0x05
     174:	f9 01       	movw	r30, r18
     176:	e2 56       	subi	r30, 0x62	; 98
     178:	fe 4f       	sbci	r31, 0xFE	; 254
     17a:	51 83       	std	Z+1, r21	; 0x01
     17c:	40 83       	st	Z, r20

	gyro_head++;
     17e:	9f 5f       	subi	r25, 0xFF	; 255
	if (gyro_head == SAMPLES)
     180:	96 30       	cpi	r25, 0x06	; 6
     182:	19 f0       	breq	.+6      	; 0x18a <PlaceInGyroBuffor+0x44>
{
	X_gyro_buff[gyro_head] = gyro_samples[0];
	Y_gyro_buff[gyro_head] = gyro_samples[1];
	Z_gyro_buff[gyro_head] = gyro_samples[2];

	gyro_head++;
     184:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <gyro_head>
     188:	02 c0       	rjmp	.+4      	; 0x18e <PlaceInGyroBuffor+0x48>
	if (gyro_head == SAMPLES)
	gyro_head = 0;
     18a:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <gyro_head>

	if (gyro_head == gyro_tail)
     18e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <gyro_head>
     192:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <gyro_tail>
     196:	89 13       	cpse	r24, r25
     198:	03 c0       	rjmp	.+6      	; 0x1a0 <PlaceInGyroBuffor+0x5a>
		gyro_tail++;
     19a:	8f 5f       	subi	r24, 0xFF	; 255
     19c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <gyro_tail>

	if (gyro_tail == SAMPLES)
     1a0:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <gyro_tail>
     1a4:	86 30       	cpi	r24, 0x06	; 6
     1a6:	11 f4       	brne	.+4      	; 0x1ac <PlaceInGyroBuffor+0x66>
		gyro_tail = 0;
     1a8:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <gyro_tail>
     1ac:	08 95       	ret

000001ae <PlaceInAccBuffor>:
}

void PlaceInAccBuffor(int16_t acc_samples[])
{
     1ae:	fc 01       	movw	r30, r24
	X_acc_buff[acc_head] = acc_samples[0];
     1b0:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <acc_head>
     1b4:	29 2f       	mov	r18, r25
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	40 81       	ld	r20, Z
     1ba:	51 81       	ldd	r21, Z+1	; 0x01
     1bc:	22 0f       	add	r18, r18
     1be:	33 1f       	adc	r19, r19
     1c0:	d9 01       	movw	r26, r18
     1c2:	a6 58       	subi	r26, 0x86	; 134
     1c4:	be 4f       	sbci	r27, 0xFE	; 254
     1c6:	4d 93       	st	X+, r20
     1c8:	5c 93       	st	X, r21
	Y_acc_buff[acc_head] = acc_samples[1];
     1ca:	42 81       	ldd	r20, Z+2	; 0x02
     1cc:	53 81       	ldd	r21, Z+3	; 0x03
     1ce:	d9 01       	movw	r26, r18
     1d0:	ae 56       	subi	r26, 0x6E	; 110
     1d2:	be 4f       	sbci	r27, 0xFE	; 254
     1d4:	4d 93       	st	X+, r20
     1d6:	5c 93       	st	X, r21
	Z_acc_buff[acc_head] = acc_samples[2];
     1d8:	44 81       	ldd	r20, Z+4	; 0x04
     1da:	55 81       	ldd	r21, Z+5	; 0x05
     1dc:	f9 01       	movw	r30, r18
     1de:	e2 59       	subi	r30, 0x92	; 146
     1e0:	fe 4f       	sbci	r31, 0xFE	; 254
     1e2:	51 83       	std	Z+1, r21	; 0x01
     1e4:	40 83       	st	Z, r20

	acc_head++;
     1e6:	9f 5f       	subi	r25, 0xFF	; 255
	if (acc_head == SAMPLES)
     1e8:	96 30       	cpi	r25, 0x06	; 6
     1ea:	19 f0       	breq	.+6      	; 0x1f2 <PlaceInAccBuffor+0x44>
{
	X_acc_buff[acc_head] = acc_samples[0];
	Y_acc_buff[acc_head] = acc_samples[1];
	Z_acc_buff[acc_head] = acc_samples[2];

	acc_head++;
     1ec:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <acc_head>
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <PlaceInAccBuffor+0x48>
	if (acc_head == SAMPLES)
		acc_head = 0;
     1f2:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <acc_head>

	if (acc_head == acc_tail)
     1f6:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <acc_head>
     1fa:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <__data_end>
     1fe:	89 13       	cpse	r24, r25
     200:	03 c0       	rjmp	.+6      	; 0x208 <PlaceInAccBuffor+0x5a>
		acc_tail++;
     202:	8f 5f       	subi	r24, 0xFF	; 255
     204:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__data_end>

	if (acc_tail == SAMPLES)
     208:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__data_end>
     20c:	86 30       	cpi	r24, 0x06	; 6
     20e:	11 f4       	brne	.+4      	; 0x214 <PlaceInAccBuffor+0x66>
		acc_tail = 0;
     210:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__data_end>
     214:	08 95       	ret

00000216 <ReadGyroSample>:
}

void ReadGyroSample(int16_t reading_buf[])
{
     216:	dc 01       	movw	r26, r24
	reading_buf[0] = X_gyro_buff[gyro_tail];
     218:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <gyro_tail>
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	ee 0f       	add	r30, r30
     220:	ff 1f       	adc	r31, r31
     222:	ea 5a       	subi	r30, 0xAA	; 170
     224:	fe 4f       	sbci	r31, 0xFE	; 254
     226:	80 81       	ld	r24, Z
     228:	91 81       	ldd	r25, Z+1	; 0x01
     22a:	11 96       	adiw	r26, 0x01	; 1
     22c:	9c 93       	st	X, r25
     22e:	8e 93       	st	-X, r24
	reading_buf[1] = Y_gyro_buff[gyro_tail];
     230:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <gyro_tail>
     234:	29 2f       	mov	r18, r25
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	22 0f       	add	r18, r18
     23a:	33 1f       	adc	r19, r19
     23c:	f9 01       	movw	r30, r18
     23e:	ee 59       	subi	r30, 0x9E	; 158
     240:	fe 4f       	sbci	r31, 0xFE	; 254
     242:	40 81       	ld	r20, Z
     244:	51 81       	ldd	r21, Z+1	; 0x01
     246:	13 96       	adiw	r26, 0x03	; 3
     248:	5c 93       	st	X, r21
     24a:	4e 93       	st	-X, r20
     24c:	12 97       	sbiw	r26, 0x02	; 2
	reading_buf[2] = Z_gyro_buff[gyro_tail];
     24e:	f9 01       	movw	r30, r18
     250:	e2 56       	subi	r30, 0x62	; 98
     252:	fe 4f       	sbci	r31, 0xFE	; 254
     254:	20 81       	ld	r18, Z
     256:	31 81       	ldd	r19, Z+1	; 0x01
     258:	15 96       	adiw	r26, 0x05	; 5
     25a:	3c 93       	st	X, r19
     25c:	2e 93       	st	-X, r18
     25e:	14 97       	sbiw	r26, 0x04	; 4

	gyro_tail++;
     260:	9f 5f       	subi	r25, 0xFF	; 255

	if (gyro_tail == SAMPLES)
     262:	96 30       	cpi	r25, 0x06	; 6
     264:	19 f0       	breq	.+6      	; 0x26c <ReadGyroSample+0x56>
{
	reading_buf[0] = X_gyro_buff[gyro_tail];
	reading_buf[1] = Y_gyro_buff[gyro_tail];
	reading_buf[2] = Z_gyro_buff[gyro_tail];

	gyro_tail++;
     266:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <gyro_tail>
     26a:	08 95       	ret

	if (gyro_tail == SAMPLES)
		gyro_tail = 0;
     26c:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <gyro_tail>
     270:	08 95       	ret

00000272 <ReadAccSample>:
}

void ReadAccSample(int16_t reading_buf[])
{
     272:	dc 01       	movw	r26, r24
	reading_buf[0] = X_acc_buff[acc_tail];
     274:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <__data_end>
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	ee 0f       	add	r30, r30
     27c:	ff 1f       	adc	r31, r31
     27e:	e6 58       	subi	r30, 0x86	; 134
     280:	fe 4f       	sbci	r31, 0xFE	; 254
     282:	80 81       	ld	r24, Z
     284:	91 81       	ldd	r25, Z+1	; 0x01
     286:	11 96       	adiw	r26, 0x01	; 1
     288:	9c 93       	st	X, r25
     28a:	8e 93       	st	-X, r24
	reading_buf[1] = Y_acc_buff[acc_tail];
     28c:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <__data_end>
     290:	29 2f       	mov	r18, r25
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	22 0f       	add	r18, r18
     296:	33 1f       	adc	r19, r19
     298:	f9 01       	movw	r30, r18
     29a:	ee 56       	subi	r30, 0x6E	; 110
     29c:	fe 4f       	sbci	r31, 0xFE	; 254
     29e:	40 81       	ld	r20, Z
     2a0:	51 81       	ldd	r21, Z+1	; 0x01
     2a2:	13 96       	adiw	r26, 0x03	; 3
     2a4:	5c 93       	st	X, r21
     2a6:	4e 93       	st	-X, r20
     2a8:	12 97       	sbiw	r26, 0x02	; 2
	reading_buf[2] = Z_acc_buff[acc_tail];
     2aa:	f9 01       	movw	r30, r18
     2ac:	e2 59       	subi	r30, 0x92	; 146
     2ae:	fe 4f       	sbci	r31, 0xFE	; 254
     2b0:	20 81       	ld	r18, Z
     2b2:	31 81       	ldd	r19, Z+1	; 0x01
     2b4:	15 96       	adiw	r26, 0x05	; 5
     2b6:	3c 93       	st	X, r19
     2b8:	2e 93       	st	-X, r18
     2ba:	14 97       	sbiw	r26, 0x04	; 4

	acc_tail++;
     2bc:	9f 5f       	subi	r25, 0xFF	; 255

	if (acc_tail == SAMPLES)
     2be:	96 30       	cpi	r25, 0x06	; 6
     2c0:	19 f0       	breq	.+6      	; 0x2c8 <ReadAccSample+0x56>
{
	reading_buf[0] = X_acc_buff[acc_tail];
	reading_buf[1] = Y_acc_buff[acc_tail];
	reading_buf[2] = Z_acc_buff[acc_tail];

	acc_tail++;
     2c2:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <__data_end>
     2c6:	08 95       	ret

	if (acc_tail == SAMPLES)
		acc_tail = 0;
     2c8:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__data_end>
     2cc:	08 95       	ret

000002ce <SamplesGyroBuf>:
}

uint8_t SamplesGyroBuf()
{
	uint8_t gyro_samples;
	gyro_samples = gyro_head - gyro_tail;
     2ce:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <gyro_head>
     2d2:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <gyro_tail>
     2d6:	89 1b       	sub	r24, r25
	if (gyro_samples > SAMPLES_BUFF_SIZE)
     2d8:	86 30       	cpi	r24, 0x06	; 6
     2da:	08 f0       	brcs	.+2      	; 0x2de <SamplesGyroBuf+0x10>
	{
		gyro_samples -= (255 - SAMPLES_BUFF_SIZE);
     2dc:	8a 5f       	subi	r24, 0xFA	; 250
	}
	return gyro_samples;
}
     2de:	08 95       	ret

000002e0 <SamplesAccBuf>:

uint8_t SamplesAccBuf()
{
	uint8_t acc_samples;
	acc_samples = acc_head - acc_tail;
     2e0:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <acc_head>
     2e4:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <__data_end>
     2e8:	89 1b       	sub	r24, r25
	if (acc_samples > SAMPLES_BUFF_SIZE)
     2ea:	86 30       	cpi	r24, 0x06	; 6
     2ec:	08 f0       	brcs	.+2      	; 0x2f0 <SamplesAccBuf+0x10>
	{
		acc_samples -= (255 - SAMPLES_BUFF_SIZE);
     2ee:	8a 5f       	subi	r24, 0xFA	; 250
	}
	return acc_samples;
}
     2f0:	08 95       	ret

000002f2 <ReadGyroBuf>:

void ReadGyroBuf(int16_t  reading_buf[3][SAMPLES_BUFF_SIZE], uint8_t * sam_nr)
{
     2f2:	df 92       	push	r13
     2f4:	ef 92       	push	r14
     2f6:	ff 92       	push	r15
     2f8:	0f 93       	push	r16
     2fa:	1f 93       	push	r17
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	00 d0       	rcall	.+0      	; 0x302 <ReadGyroBuf+0x10>
     302:	00 d0       	rcall	.+0      	; 0x304 <ReadGyroBuf+0x12>
     304:	00 d0       	rcall	.+0      	; 0x306 <ReadGyroBuf+0x14>
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
     30a:	7c 01       	movw	r14, r24
     30c:	8b 01       	movw	r16, r22
	*sam_nr = SamplesGyroBuf();
     30e:	0e 94 67 01 	call	0x2ce	; 0x2ce <SamplesGyroBuf>
     312:	f8 01       	movw	r30, r16
     314:	80 83       	st	Z, r24

	int16_t bufor[3];
	uint8_t i;
	for(i = 0; i < *sam_nr; i++)	//read all new samples from buffor
     316:	88 23       	and	r24, r24
     318:	e1 f0       	breq	.+56     	; 0x352 <ReadGyroBuf+0x60>
     31a:	d1 2c       	mov	r13, r1
	{
 		ReadGyroSample(bufor);
     31c:	ce 01       	movw	r24, r28
     31e:	01 96       	adiw	r24, 0x01	; 1
     320:	0e 94 0b 01 	call	0x216	; 0x216 <ReadGyroSample>
     324:	ed 2d       	mov	r30, r13
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	ee 0f       	add	r30, r30
     32a:	ff 1f       	adc	r31, r31
     32c:	ee 0d       	add	r30, r14
     32e:	ff 1d       	adc	r31, r15
 		reading_buf[X_AXIS][i] = bufor[X_AXIS];
     330:	89 81       	ldd	r24, Y+1	; 0x01
     332:	9a 81       	ldd	r25, Y+2	; 0x02
     334:	91 83       	std	Z+1, r25	; 0x01
     336:	80 83       	st	Z, r24
 		reading_buf[Y_AXIS][i] = bufor[Y_AXIS];
     338:	8b 81       	ldd	r24, Y+3	; 0x03
     33a:	9c 81       	ldd	r25, Y+4	; 0x04
     33c:	93 87       	std	Z+11, r25	; 0x0b
     33e:	82 87       	std	Z+10, r24	; 0x0a
 		reading_buf[Z_AXIS][i] = bufor[Z_AXIS];
     340:	8d 81       	ldd	r24, Y+5	; 0x05
     342:	9e 81       	ldd	r25, Y+6	; 0x06
     344:	95 8b       	std	Z+21, r25	; 0x15
     346:	84 8b       	std	Z+20, r24	; 0x14
{
	*sam_nr = SamplesGyroBuf();

	int16_t bufor[3];
	uint8_t i;
	for(i = 0; i < *sam_nr; i++)	//read all new samples from buffor
     348:	d3 94       	inc	r13
     34a:	f8 01       	movw	r30, r16
     34c:	80 81       	ld	r24, Z
     34e:	d8 16       	cp	r13, r24
     350:	28 f3       	brcs	.-54     	; 0x31c <ReadGyroBuf+0x2a>
 		ReadGyroSample(bufor);
 		reading_buf[X_AXIS][i] = bufor[X_AXIS];
 		reading_buf[Y_AXIS][i] = bufor[Y_AXIS];
 		reading_buf[Z_AXIS][i] = bufor[Z_AXIS];
	}
}
     352:	26 96       	adiw	r28, 0x06	; 6
     354:	0f b6       	in	r0, 0x3f	; 63
     356:	f8 94       	cli
     358:	de bf       	out	0x3e, r29	; 62
     35a:	0f be       	out	0x3f, r0	; 63
     35c:	cd bf       	out	0x3d, r28	; 61
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
     364:	0f 91       	pop	r16
     366:	ff 90       	pop	r15
     368:	ef 90       	pop	r14
     36a:	df 90       	pop	r13
     36c:	08 95       	ret

0000036e <ReadAccBuf>:

void ReadAccBuf(int16_t  reading_buf[3][SAMPLES_BUFF_SIZE], uint8_t * sam_nr)
{
     36e:	df 92       	push	r13
     370:	ef 92       	push	r14
     372:	ff 92       	push	r15
     374:	0f 93       	push	r16
     376:	1f 93       	push	r17
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	00 d0       	rcall	.+0      	; 0x37e <ReadAccBuf+0x10>
     37e:	00 d0       	rcall	.+0      	; 0x380 <ReadAccBuf+0x12>
     380:	00 d0       	rcall	.+0      	; 0x382 <ReadAccBuf+0x14>
     382:	cd b7       	in	r28, 0x3d	; 61
     384:	de b7       	in	r29, 0x3e	; 62
     386:	7c 01       	movw	r14, r24
     388:	8b 01       	movw	r16, r22
	*sam_nr = SamplesAccBuf();
     38a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <SamplesAccBuf>
     38e:	f8 01       	movw	r30, r16
     390:	80 83       	st	Z, r24

	int16_t bufor[3];
	uint8_t i;
	for(i = 0; i < *sam_nr; i++)	//read all new samples from buffor
     392:	88 23       	and	r24, r24
     394:	e1 f0       	breq	.+56     	; 0x3ce <ReadAccBuf+0x60>
     396:	d1 2c       	mov	r13, r1
	{
		ReadAccSample(bufor);
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	0e 94 39 01 	call	0x272	; 0x272 <ReadAccSample>
     3a0:	ed 2d       	mov	r30, r13
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	ee 0f       	add	r30, r30
     3a6:	ff 1f       	adc	r31, r31
     3a8:	ee 0d       	add	r30, r14
     3aa:	ff 1d       	adc	r31, r15
 		reading_buf[X_AXIS][i] = bufor[X_AXIS];
     3ac:	89 81       	ldd	r24, Y+1	; 0x01
     3ae:	9a 81       	ldd	r25, Y+2	; 0x02
     3b0:	91 83       	std	Z+1, r25	; 0x01
     3b2:	80 83       	st	Z, r24
 		reading_buf[Y_AXIS][i] = bufor[Y_AXIS];
     3b4:	8b 81       	ldd	r24, Y+3	; 0x03
     3b6:	9c 81       	ldd	r25, Y+4	; 0x04
     3b8:	93 87       	std	Z+11, r25	; 0x0b
     3ba:	82 87       	std	Z+10, r24	; 0x0a
 		reading_buf[Z_AXIS][i] = bufor[Z_AXIS];
     3bc:	8d 81       	ldd	r24, Y+5	; 0x05
     3be:	9e 81       	ldd	r25, Y+6	; 0x06
     3c0:	95 8b       	std	Z+21, r25	; 0x15
     3c2:	84 8b       	std	Z+20, r24	; 0x14
{
	*sam_nr = SamplesAccBuf();

	int16_t bufor[3];
	uint8_t i;
	for(i = 0; i < *sam_nr; i++)	//read all new samples from buffor
     3c4:	d3 94       	inc	r13
     3c6:	f8 01       	movw	r30, r16
     3c8:	80 81       	ld	r24, Z
     3ca:	d8 16       	cp	r13, r24
     3cc:	28 f3       	brcs	.-54     	; 0x398 <ReadAccBuf+0x2a>
		ReadAccSample(bufor);
 		reading_buf[X_AXIS][i] = bufor[X_AXIS];
 		reading_buf[Y_AXIS][i] = bufor[Y_AXIS];
 		reading_buf[Z_AXIS][i] = bufor[Z_AXIS];
	}
     3ce:	26 96       	adiw	r28, 0x06	; 6
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	f8 94       	cli
     3d4:	de bf       	out	0x3e, r29	; 62
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	cd bf       	out	0x3d, r28	; 61
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	1f 91       	pop	r17
     3e0:	0f 91       	pop	r16
     3e2:	ff 90       	pop	r15
     3e4:	ef 90       	pop	r14
     3e6:	df 90       	pop	r13
     3e8:	08 95       	ret

000003ea <I2C_start>:
	I2C_start();
	I2C_write(SLA + 1);
	byte = I2C_read(NACK);
	I2C_stop();
	return byte;
}
     3ea:	84 ea       	ldi	r24, 0xA4	; 164
     3ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     3f0:	ec eb       	ldi	r30, 0xBC	; 188
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	80 81       	ld	r24, Z
     3f6:	88 23       	and	r24, r24
     3f8:	ec f7       	brge	.-6      	; 0x3f4 <I2C_start+0xa>
     3fa:	08 95       	ret

000003fc <I2C_stop>:
     3fc:	84 e9       	ldi	r24, 0x94	; 148
     3fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     402:	ec eb       	ldi	r30, 0xBC	; 188
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	80 81       	ld	r24, Z
     408:	84 fd       	sbrc	r24, 4
     40a:	fd cf       	rjmp	.-6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     40c:	08 95       	ret

0000040e <I2C_write>:
     40e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     412:	84 e8       	ldi	r24, 0x84	; 132
     414:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     418:	ec eb       	ldi	r30, 0xBC	; 188
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	80 81       	ld	r24, Z
     41e:	88 23       	and	r24, r24
     420:	ec f7       	brge	.-6      	; 0x41c <I2C_write+0xe>
     422:	08 95       	ret

00000424 <I2C_read>:
     424:	20 e4       	ldi	r18, 0x40	; 64
     426:	82 9f       	mul	r24, r18
     428:	c0 01       	movw	r24, r0
     42a:	11 24       	eor	r1, r1
     42c:	84 68       	ori	r24, 0x84	; 132
     42e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     432:	ec eb       	ldi	r30, 0xBC	; 188
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	80 81       	ld	r24, Z
     438:	88 23       	and	r24, r24
     43a:	ec f7       	brge	.-6      	; 0x436 <I2C_read+0x12>
     43c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     440:	08 95       	ret

00000442 <I2C_write_byte>:
     442:	1f 93       	push	r17
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
     448:	18 2f       	mov	r17, r24
     44a:	d6 2f       	mov	r29, r22
     44c:	c4 2f       	mov	r28, r20
     44e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <I2C_start>
     452:	81 2f       	mov	r24, r17
     454:	88 0f       	add	r24, r24
     456:	0e 94 07 02 	call	0x40e	; 0x40e <I2C_write>
     45a:	8d 2f       	mov	r24, r29
     45c:	0e 94 07 02 	call	0x40e	; 0x40e <I2C_write>
     460:	8c 2f       	mov	r24, r28
     462:	0e 94 07 02 	call	0x40e	; 0x40e <I2C_write>
     466:	0e 94 fe 01 	call	0x3fc	; 0x3fc <I2C_stop>
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	1f 91       	pop	r17
     470:	08 95       	ret

00000472 <I2C_read_buf>:


void I2C_read_buf(uint8_t SLA, uint8_t adr, uint8_t len, uint8_t *buf) {
     472:	ef 92       	push	r14
     474:	ff 92       	push	r15
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	16 2f       	mov	r17, r22
     480:	d4 2f       	mov	r29, r20
     482:	e2 2e       	mov	r14, r18
     484:	f3 2e       	mov	r15, r19
	SLA = (SLA<<1);
     486:	c8 2f       	mov	r28, r24
     488:	cc 0f       	add	r28, r28
	I2C_start();
     48a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <I2C_start>
	I2C_write(SLA);
     48e:	8c 2f       	mov	r24, r28
     490:	0e 94 07 02 	call	0x40e	; 0x40e <I2C_write>
	I2C_write(adr);
     494:	81 2f       	mov	r24, r17
     496:	0e 94 07 02 	call	0x40e	; 0x40e <I2C_write>
	I2C_start();
     49a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <I2C_start>
	I2C_write(SLA + 1);
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	8c 0f       	add	r24, r28
     4a2:	0e 94 07 02 	call	0x40e	; 0x40e <I2C_write>
	while (len--) *buf++ = I2C_read( len ? ACK : NACK );
     4a6:	cf ef       	ldi	r28, 0xFF	; 255
     4a8:	cd 0f       	add	r28, r29
     4aa:	dd 23       	and	r29, r29
     4ac:	89 f0       	breq	.+34     	; 0x4d0 <I2C_read_buf+0x5e>
     4ae:	0e 2d       	mov	r16, r14
     4b0:	1f 2d       	mov	r17, r15
     4b2:	d1 e0       	ldi	r29, 0x01	; 1
     4b4:	f1 2c       	mov	r15, r1
     4b6:	8d 2f       	mov	r24, r29
     4b8:	c1 11       	cpse	r28, r1
     4ba:	01 c0       	rjmp	.+2      	; 0x4be <I2C_read_buf+0x4c>
     4bc:	8f 2d       	mov	r24, r15
     4be:	0e 94 12 02 	call	0x424	; 0x424 <I2C_read>
     4c2:	f8 01       	movw	r30, r16
     4c4:	81 93       	st	Z+, r24
     4c6:	8f 01       	movw	r16, r30
     4c8:	8c 2f       	mov	r24, r28
     4ca:	c1 50       	subi	r28, 0x01	; 1
     4cc:	81 11       	cpse	r24, r1
     4ce:	f3 cf       	rjmp	.-26     	; 0x4b6 <I2C_read_buf+0x44>
	I2C_stop();
     4d0:	0e 94 fe 01 	call	0x3fc	; 0x3fc <I2C_stop>
}
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	ff 90       	pop	r15
     4de:	ef 90       	pop	r14
     4e0:	08 95       	ret

000004e2 <main>:


int main(void)
{
//	InitTWI();
	DDRB = (1<<PB5);
     4e2:	80 e2       	ldi	r24, 0x20	; 32
     4e4:	84 b9       	out	0x04, r24	; 4
	TWSR0 = 0x00;
     4e6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR0 = 0x0C;
     4ea:	8c e0       	ldi	r24, 0x0C	; 12
     4ec:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWCR0 = (1<<TWEN);	//enable TWI
     4f0:	84 e0       	ldi	r24, 0x04	; 4
     4f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

// 	test = I2C_read_byte(0x68, 0x75);
// 	test = test & 0b01111110;

	InitUartCOM();
     4f6:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <InitUartCOM>
	sei();
     4fa:	78 94       	sei
	SendLine("Uart dziala");
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	0e 94 a0 0a 	call	0x1540	; 0x1540 <SendLine>

	CalibrateMPU6050(gyro_offset, acc_offset);
     504:	66 e8       	ldi	r22, 0x86	; 134
     506:	71 e0       	ldi	r23, 0x01	; 1
     508:	8c e8       	ldi	r24, 0x8C	; 140
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	0e 94 8f 02 	call	0x51e	; 0x51e <CalibrateMPU6050>
	InitMPU6050();
     510:	0e 94 c1 04 	call	0x982	; 0x982 <InitMPU6050>

    while (1) 
    {
		CheckRxBuffor();
     514:	0e 94 a9 0b 	call	0x1752	; 0x1752 <CheckRxBuffor>
		ReadMPU6050();
     518:	0e 94 52 05 	call	0xaa4	; 0xaa4 <ReadMPU6050>
     51c:	fb cf       	rjmp	.-10     	; 0x514 <main+0x32>

0000051e <CalibrateMPU6050>:
#include "MPU6050_registers.h"
#include "Uart.h"
#include "Common.h"

void CalibrateMPU6050(int16_t gyro_offset[], int16_t acc_offset[])
{
     51e:	2f 92       	push	r2
     520:	3f 92       	push	r3
     522:	4f 92       	push	r4
     524:	5f 92       	push	r5
     526:	6f 92       	push	r6
     528:	7f 92       	push	r7
     52a:	8f 92       	push	r8
     52c:	9f 92       	push	r9
     52e:	af 92       	push	r10
     530:	bf 92       	push	r11
     532:	cf 92       	push	r12
     534:	df 92       	push	r13
     536:	ef 92       	push	r14
     538:	ff 92       	push	r15
     53a:	0f 93       	push	r16
     53c:	1f 93       	push	r17
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
     546:	a4 97       	sbiw	r28, 0x24	; 36
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	f8 94       	cli
     54c:	de bf       	out	0x3e, r29	; 62
     54e:	0f be       	out	0x3f, r0	; 63
     550:	cd bf       	out	0x3d, r28	; 61
     552:	9a a3       	std	Y+34, r25	; 0x22
     554:	89 a3       	std	Y+33, r24	; 0x21
     556:	7c a3       	std	Y+36, r23	; 0x24
     558:	6b a3       	std	Y+35, r22	; 0x23
	int32_t gyro_bias[3] = {0, 0, 0};
	int32_t accel_bias[3] = {0, 0, 0};
	packet_total = 0;

	// reset device, reset all registers, clear gyro and accelerometer bias registers
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
     55a:	40 e8       	ldi	r20, 0x80	; 128
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	6b e6       	ldi	r22, 0x6B	; 107
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	88 e6       	ldi	r24, 0x68	; 104
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     56a:	2f ef       	ldi	r18, 0xFF	; 255
     56c:	31 ee       	ldi	r19, 0xE1	; 225
     56e:	44 e0       	ldi	r20, 0x04	; 4
     570:	21 50       	subi	r18, 0x01	; 1
     572:	30 40       	sbci	r19, 0x00	; 0
     574:	40 40       	sbci	r20, 0x00	; 0
     576:	e1 f7       	brne	.-8      	; 0x570 <CalibrateMPU6050+0x52>
     578:	00 c0       	rjmp	.+0      	; 0x57a <CalibrateMPU6050+0x5c>
     57a:	00 00       	nop
	_delay_ms(100);

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x01);
     57c:	41 e0       	ldi	r20, 0x01	; 1
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	6b e6       	ldi	r22, 0x6B	; 107
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	88 e6       	ldi	r24, 0x68	; 104
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_2, 0x00);
     58c:	40 e0       	ldi	r20, 0x00	; 0
     58e:	50 e0       	ldi	r21, 0x00	; 0
     590:	6c e6       	ldi	r22, 0x6C	; 108
     592:	70 e0       	ldi	r23, 0x00	; 0
     594:	88 e6       	ldi	r24, 0x68	; 104
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
     59c:	5f ef       	ldi	r21, 0xFF	; 255
     59e:	63 ec       	ldi	r22, 0xC3	; 195
     5a0:	79 e0       	ldi	r23, 0x09	; 9
     5a2:	51 50       	subi	r21, 0x01	; 1
     5a4:	60 40       	sbci	r22, 0x00	; 0
     5a6:	70 40       	sbci	r23, 0x00	; 0
     5a8:	e1 f7       	brne	.-8      	; 0x5a2 <CalibrateMPU6050+0x84>
     5aa:	00 c0       	rjmp	.+0      	; 0x5ac <CalibrateMPU6050+0x8e>
     5ac:	00 00       	nop
	_delay_ms(200);

	// Configure device for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
     5ae:	40 e0       	ldi	r20, 0x00	; 0
     5b0:	50 e0       	ldi	r21, 0x00	; 0
     5b2:	68 e3       	ldi	r22, 0x38	; 56
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	88 e6       	ldi	r24, 0x68	; 104
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
     5be:	40 e0       	ldi	r20, 0x00	; 0
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	63 e2       	ldi	r22, 0x23	; 35
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	88 e6       	ldi	r24, 0x68	; 104
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
     5ce:	40 e0       	ldi	r20, 0x00	; 0
     5d0:	50 e0       	ldi	r21, 0x00	; 0
     5d2:	6b e6       	ldi	r22, 0x6B	; 107
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	88 e6       	ldi	r24, 0x68	; 104
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
     5de:	40 e0       	ldi	r20, 0x00	; 0
     5e0:	50 e0       	ldi	r21, 0x00	; 0
     5e2:	64 e2       	ldi	r22, 0x24	; 36
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	88 e6       	ldi	r24, 0x68	; 104
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
     5ee:	40 e0       	ldi	r20, 0x00	; 0
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	6a e6       	ldi	r22, 0x6A	; 106
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	88 e6       	ldi	r24, 0x68	; 104
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
     5fe:	4c e0       	ldi	r20, 0x0C	; 12
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	6a e6       	ldi	r22, 0x6A	; 106
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	88 e6       	ldi	r24, 0x68	; 104
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
     60e:	8f e5       	ldi	r24, 0x5F	; 95
     610:	9a ee       	ldi	r25, 0xEA	; 234
     612:	01 97       	sbiw	r24, 0x01	; 1
     614:	f1 f7       	brne	.-4      	; 0x612 <CalibrateMPU6050+0xf4>
     616:	00 c0       	rjmp	.+0      	; 0x618 <CalibrateMPU6050+0xfa>
     618:	00 00       	nop
	_delay_ms(15);

	// Configure MPU6050 gyro and accelerometer for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
     61a:	41 e0       	ldi	r20, 0x01	; 1
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	6a e1       	ldi	r22, 0x1A	; 26
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	88 e6       	ldi	r24, 0x68	; 104
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
     62a:	40 e0       	ldi	r20, 0x00	; 0
     62c:	50 e0       	ldi	r21, 0x00	; 0
     62e:	69 e1       	ldi	r22, 0x19	; 25
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	88 e6       	ldi	r24, 0x68	; 104
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
     63a:	40 e0       	ldi	r20, 0x00	; 0
     63c:	50 e0       	ldi	r21, 0x00	; 0
     63e:	6b e1       	ldi	r22, 0x1B	; 27
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	88 e6       	ldi	r24, 0x68	; 104
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
     64a:	40 e0       	ldi	r20, 0x00	; 0
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	6c e1       	ldi	r22, 0x1C	; 28
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	88 e6       	ldi	r24, 0x68	; 104
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
     65a:	40 e4       	ldi	r20, 0x40	; 64
     65c:	50 e0       	ldi	r21, 0x00	; 0
     65e:	6a e6       	ldi	r22, 0x6A	; 106
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	88 e6       	ldi	r24, 0x68	; 104
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 1024 bytes in MPU-6050)
     66a:	48 e7       	ldi	r20, 0x78	; 120
     66c:	50 e0       	ldi	r21, 0x00	; 0
     66e:	63 e2       	ldi	r22, 0x23	; 35
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	88 e6       	ldi	r24, 0x68	; 104
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
     67a:	af e1       	ldi	r26, 0x1F	; 31
     67c:	be e4       	ldi	r27, 0x4E	; 78
     67e:	11 97       	sbiw	r26, 0x01	; 1
     680:	f1 f7       	brne	.-4      	; 0x67e <CalibrateMPU6050+0x160>
     682:	00 c0       	rjmp	.+0      	; 0x684 <CalibrateMPU6050+0x166>
     684:	00 00       	nop
     686:	bf ef       	ldi	r27, 0xFF	; 255
     688:	ef e8       	ldi	r30, 0x8F	; 143
     68a:	f1 e0       	ldi	r31, 0x01	; 1
     68c:	b1 50       	subi	r27, 0x01	; 1
     68e:	e0 40       	sbci	r30, 0x00	; 0
     690:	f0 40       	sbci	r31, 0x00	; 0
     692:	e1 f7       	brne	.-8      	; 0x68c <CalibrateMPU6050+0x16e>
     694:	00 c0       	rjmp	.+0      	; 0x696 <CalibrateMPU6050+0x178>
     696:	00 00       	nop

void CalibrateMPU6050(int16_t gyro_offset[], int16_t acc_offset[])
{
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, jj, packet_count, packet_total, fifo_count;
	int32_t gyro_bias[3] = {0, 0, 0};
     698:	19 8e       	std	Y+25, r1	; 0x19
     69a:	1a 8e       	std	Y+26, r1	; 0x1a
     69c:	1b 8e       	std	Y+27, r1	; 0x1b
     69e:	1c 8e       	std	Y+28, r1	; 0x1c
     6a0:	41 2c       	mov	r4, r1
     6a2:	51 2c       	mov	r5, r1
     6a4:	32 01       	movw	r6, r4
     6a6:	81 2c       	mov	r8, r1
     6a8:	91 2c       	mov	r9, r1
     6aa:	54 01       	movw	r10, r8
	int32_t accel_bias[3] = {0, 0, 0};
     6ac:	1d 8a       	std	Y+21, r1	; 0x15
     6ae:	1e 8a       	std	Y+22, r1	; 0x16
     6b0:	1f 8a       	std	Y+23, r1	; 0x17
     6b2:	18 8e       	std	Y+24, r1	; 0x18
     6b4:	19 8a       	std	Y+17, r1	; 0x11
     6b6:	1a 8a       	std	Y+18, r1	; 0x12
     6b8:	1b 8a       	std	Y+19, r1	; 0x13
     6ba:	1c 8a       	std	Y+20, r1	; 0x14
     6bc:	1d 86       	std	Y+13, r1	; 0x0d
     6be:	1e 86       	std	Y+14, r1	; 0x0e
     6c0:	1f 86       	std	Y+15, r1	; 0x0f
     6c2:	18 8a       	std	Y+16, r1	; 0x10
	packet_total = 0;
     6c4:	c1 2c       	mov	r12, r1
     6c6:	d1 2c       	mov	r13, r1
	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 1024 bytes in MPU-6050)
	_delay_ms(5);

	for (jj = 0; jj < 20; jj++)	//read samples for 1 second
     6c8:	21 2c       	mov	r2, r1
     6ca:	31 2c       	mov	r3, r1
     6cc:	15 c0       	rjmp	.+42     	; 0x6f8 <CalibrateMPU6050+0x1da>
     6ce:	2f ef       	ldi	r18, 0xFF	; 255
     6d0:	3f e8       	ldi	r19, 0x8F	; 143
     6d2:	41 e0       	ldi	r20, 0x01	; 1
     6d4:	21 50       	subi	r18, 0x01	; 1
     6d6:	30 40       	sbci	r19, 0x00	; 0
     6d8:	40 40       	sbci	r20, 0x00	; 0
     6da:	e1 f7       	brne	.-8      	; 0x6d4 <CalibrateMPU6050+0x1b6>
     6dc:	00 c0       	rjmp	.+0      	; 0x6de <CalibrateMPU6050+0x1c0>
     6de:	00 00       	nop
	{
		_delay_ms(32); // accumulate 50 samples in 50 milliseconds = 600 bytes
		// At end of sample accumulation, turn off FIFO sensor read
		if (jj == 19)	// Disable gyro and accelerometer sensors for FIFO
     6e0:	53 e1       	ldi	r21, 0x13	; 19
     6e2:	25 16       	cp	r2, r21
     6e4:	31 04       	cpc	r3, r1
     6e6:	41 f4       	brne	.+16     	; 0x6f8 <CalibrateMPU6050+0x1da>
			I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x00);
     6e8:	40 e0       	ldi	r20, 0x00	; 0
     6ea:	50 e0       	ldi	r21, 0x00	; 0
     6ec:	63 e2       	ldi	r22, 0x23	; 35
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	88 e6       	ldi	r24, 0x68	; 104
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
		I2C_read_buf(MPU6050_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
     6f8:	9e 01       	movw	r18, r28
     6fa:	2f 5f       	subi	r18, 0xFF	; 255
     6fc:	3f 4f       	sbci	r19, 0xFF	; 255
     6fe:	42 e0       	ldi	r20, 0x02	; 2
     700:	50 e0       	ldi	r21, 0x00	; 0
     702:	62 e7       	ldi	r22, 0x72	; 114
     704:	70 e0       	ldi	r23, 0x00	; 0
     706:	88 e6       	ldi	r24, 0x68	; 104
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	0e 94 39 02 	call	0x472	; 0x472 <I2C_read_buf>
		fifo_count = ((uint16_t)data[0] << 8) | data[1];

		packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
     70e:	29 81       	ldd	r18, Y+1	; 0x01
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	32 2f       	mov	r19, r18
     714:	22 27       	eor	r18, r18
     716:	8a 81       	ldd	r24, Y+2	; 0x02
     718:	28 2b       	or	r18, r24
     71a:	ab ea       	ldi	r26, 0xAB	; 171
     71c:	ba ea       	ldi	r27, 0xAA	; 170
     71e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__umulhisi3>
     722:	7c 01       	movw	r14, r24
     724:	f6 94       	lsr	r15
     726:	e7 94       	ror	r14
     728:	f6 94       	lsr	r15
     72a:	e7 94       	ror	r14
     72c:	f6 94       	lsr	r15
     72e:	e7 94       	ror	r14

		for (ii = 0; ii < packet_count; ii++) 
     730:	e1 14       	cp	r14, r1
     732:	f1 04       	cpc	r15, r1
     734:	09 f4       	brne	.+2      	; 0x738 <CalibrateMPU6050+0x21a>
     736:	8f c0       	rjmp	.+286    	; 0x856 <CalibrateMPU6050+0x338>
     738:	00 e0       	ldi	r16, 0x00	; 0
     73a:	10 e0       	ldi	r17, 0x00	; 0
		{
			int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
			I2C_read_buf(MPU6050_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
     73c:	9e 01       	movw	r18, r28
     73e:	2f 5f       	subi	r18, 0xFF	; 255
     740:	3f 4f       	sbci	r19, 0xFF	; 255
     742:	4c e0       	ldi	r20, 0x0C	; 12
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	64 e7       	ldi	r22, 0x74	; 116
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	88 e6       	ldi	r24, 0x68	; 104
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 39 02 	call	0x472	; 0x472 <I2C_read_buf>
			if (packet_total < 1024)
     752:	c1 14       	cp	r12, r1
     754:	64 e0       	ldi	r22, 0x04	; 4
     756:	d6 06       	cpc	r13, r22
     758:	08 f0       	brcs	.+2      	; 0x75c <CalibrateMPU6050+0x23e>
     75a:	77 c0       	rjmp	.+238    	; 0x84a <CalibrateMPU6050+0x32c>
			{
				packet_total++;
     75c:	7f ef       	ldi	r23, 0xFF	; 255
     75e:	c7 1a       	sub	r12, r23
     760:	d7 0a       	sbc	r13, r23
				accel_temp[2] = (int16_t) (((int16_t)data[4] << 8)  | data[5] ) ;
				gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8)  | data[7] ) ;
				gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8)  | data[9] ) ;
				gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
		
				accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
     762:	89 81       	ldd	r24, Y+1	; 0x01
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	98 2f       	mov	r25, r24
     768:	88 27       	eor	r24, r24
     76a:	2a 81       	ldd	r18, Y+2	; 0x02
     76c:	82 2b       	or	r24, r18
     76e:	09 2e       	mov	r0, r25
     770:	00 0c       	add	r0, r0
     772:	aa 0b       	sbc	r26, r26
     774:	bb 0b       	sbc	r27, r27
     776:	2d 89       	ldd	r18, Y+21	; 0x15
     778:	3e 89       	ldd	r19, Y+22	; 0x16
     77a:	4f 89       	ldd	r20, Y+23	; 0x17
     77c:	58 8d       	ldd	r21, Y+24	; 0x18
     77e:	28 0f       	add	r18, r24
     780:	39 1f       	adc	r19, r25
     782:	4a 1f       	adc	r20, r26
     784:	5b 1f       	adc	r21, r27
     786:	2d 8b       	std	Y+21, r18	; 0x15
     788:	3e 8b       	std	Y+22, r19	; 0x16
     78a:	4f 8b       	std	Y+23, r20	; 0x17
     78c:	58 8f       	std	Y+24, r21	; 0x18
				accel_bias[1] += (int32_t) accel_temp[1];
     78e:	8b 81       	ldd	r24, Y+3	; 0x03
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	98 2f       	mov	r25, r24
     794:	88 27       	eor	r24, r24
     796:	2c 81       	ldd	r18, Y+4	; 0x04
     798:	82 2b       	or	r24, r18
     79a:	09 2e       	mov	r0, r25
     79c:	00 0c       	add	r0, r0
     79e:	aa 0b       	sbc	r26, r26
     7a0:	bb 0b       	sbc	r27, r27
     7a2:	49 89       	ldd	r20, Y+17	; 0x11
     7a4:	5a 89       	ldd	r21, Y+18	; 0x12
     7a6:	6b 89       	ldd	r22, Y+19	; 0x13
     7a8:	7c 89       	ldd	r23, Y+20	; 0x14
     7aa:	48 0f       	add	r20, r24
     7ac:	59 1f       	adc	r21, r25
     7ae:	6a 1f       	adc	r22, r26
     7b0:	7b 1f       	adc	r23, r27
     7b2:	49 8b       	std	Y+17, r20	; 0x11
     7b4:	5a 8b       	std	Y+18, r21	; 0x12
     7b6:	6b 8b       	std	Y+19, r22	; 0x13
     7b8:	7c 8b       	std	Y+20, r23	; 0x14
				accel_bias[2] += (int32_t) accel_temp[2];
     7ba:	8d 81       	ldd	r24, Y+5	; 0x05
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	98 2f       	mov	r25, r24
     7c0:	88 27       	eor	r24, r24
     7c2:	2e 81       	ldd	r18, Y+6	; 0x06
     7c4:	82 2b       	or	r24, r18
     7c6:	09 2e       	mov	r0, r25
     7c8:	00 0c       	add	r0, r0
     7ca:	aa 0b       	sbc	r26, r26
     7cc:	bb 0b       	sbc	r27, r27
     7ce:	2d 85       	ldd	r18, Y+13	; 0x0d
     7d0:	3e 85       	ldd	r19, Y+14	; 0x0e
     7d2:	4f 85       	ldd	r20, Y+15	; 0x0f
     7d4:	58 89       	ldd	r21, Y+16	; 0x10
     7d6:	28 0f       	add	r18, r24
     7d8:	39 1f       	adc	r19, r25
     7da:	4a 1f       	adc	r20, r26
     7dc:	5b 1f       	adc	r21, r27
     7de:	2d 87       	std	Y+13, r18	; 0x0d
     7e0:	3e 87       	std	Y+14, r19	; 0x0e
     7e2:	4f 87       	std	Y+15, r20	; 0x0f
     7e4:	58 8b       	std	Y+16, r21	; 0x10
				gyro_bias[0]  += (int32_t) gyro_temp[0];
     7e6:	8f 81       	ldd	r24, Y+7	; 0x07
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	98 2f       	mov	r25, r24
     7ec:	88 27       	eor	r24, r24
     7ee:	28 85       	ldd	r18, Y+8	; 0x08
     7f0:	82 2b       	or	r24, r18
     7f2:	09 2e       	mov	r0, r25
     7f4:	00 0c       	add	r0, r0
     7f6:	aa 0b       	sbc	r26, r26
     7f8:	bb 0b       	sbc	r27, r27
     7fa:	49 8d       	ldd	r20, Y+25	; 0x19
     7fc:	5a 8d       	ldd	r21, Y+26	; 0x1a
     7fe:	6b 8d       	ldd	r22, Y+27	; 0x1b
     800:	7c 8d       	ldd	r23, Y+28	; 0x1c
     802:	48 0f       	add	r20, r24
     804:	59 1f       	adc	r21, r25
     806:	6a 1f       	adc	r22, r26
     808:	7b 1f       	adc	r23, r27
     80a:	49 8f       	std	Y+25, r20	; 0x19
     80c:	5a 8f       	std	Y+26, r21	; 0x1a
     80e:	6b 8f       	std	Y+27, r22	; 0x1b
     810:	7c 8f       	std	Y+28, r23	; 0x1c
				gyro_bias[1]  += (int32_t) gyro_temp[1];
     812:	89 85       	ldd	r24, Y+9	; 0x09
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	98 2f       	mov	r25, r24
     818:	88 27       	eor	r24, r24
     81a:	2a 85       	ldd	r18, Y+10	; 0x0a
     81c:	82 2b       	or	r24, r18
     81e:	09 2e       	mov	r0, r25
     820:	00 0c       	add	r0, r0
     822:	aa 0b       	sbc	r26, r26
     824:	bb 0b       	sbc	r27, r27
     826:	48 0e       	add	r4, r24
     828:	59 1e       	adc	r5, r25
     82a:	6a 1e       	adc	r6, r26
     82c:	7b 1e       	adc	r7, r27
				gyro_bias[2]  += (int32_t) gyro_temp[2];
     82e:	8b 85       	ldd	r24, Y+11	; 0x0b
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	98 2f       	mov	r25, r24
     834:	88 27       	eor	r24, r24
     836:	2c 85       	ldd	r18, Y+12	; 0x0c
     838:	82 2b       	or	r24, r18
     83a:	09 2e       	mov	r0, r25
     83c:	00 0c       	add	r0, r0
     83e:	aa 0b       	sbc	r26, r26
     840:	bb 0b       	sbc	r27, r27
     842:	88 0e       	add	r8, r24
     844:	99 1e       	adc	r9, r25
     846:	aa 1e       	adc	r10, r26
     848:	bb 1e       	adc	r11, r27
		I2C_read_buf(MPU6050_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
		fifo_count = ((uint16_t)data[0] << 8) | data[1];

		packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging

		for (ii = 0; ii < packet_count; ii++) 
     84a:	0f 5f       	subi	r16, 0xFF	; 255
     84c:	1f 4f       	sbci	r17, 0xFF	; 255
     84e:	e0 16       	cp	r14, r16
     850:	f1 06       	cpc	r15, r17
     852:	09 f0       	breq	.+2      	; 0x856 <CalibrateMPU6050+0x338>
     854:	73 cf       	rjmp	.-282    	; 0x73c <CalibrateMPU6050+0x21e>
	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 1024 bytes in MPU-6050)
	_delay_ms(5);

	for (jj = 0; jj < 20; jj++)	//read samples for 1 second
     856:	5f ef       	ldi	r21, 0xFF	; 255
     858:	25 1a       	sub	r2, r21
     85a:	35 0a       	sbc	r3, r21
     85c:	64 e1       	ldi	r22, 0x14	; 20
     85e:	26 16       	cp	r2, r22
     860:	31 04       	cpc	r3, r1
     862:	09 f0       	breq	.+2      	; 0x866 <CalibrateMPU6050+0x348>
     864:	34 cf       	rjmp	.-408    	; 0x6ce <CalibrateMPU6050+0x1b0>
				gyro_bias[2]  += (int32_t) gyro_temp[2];
			}
		}
	}

	accel_bias[0] /= (int32_t) packet_total; // Normalize sums to get average count biases
     866:	c6 01       	movw	r24, r12
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	8d 8f       	std	Y+29, r24	; 0x1d
     86e:	9e 8f       	std	Y+30, r25	; 0x1e
     870:	af 8f       	std	Y+31, r26	; 0x1f
     872:	b8 a3       	std	Y+32, r27	; 0x20
     874:	6d 89       	ldd	r22, Y+21	; 0x15
     876:	7e 89       	ldd	r23, Y+22	; 0x16
     878:	8f 89       	ldd	r24, Y+23	; 0x17
     87a:	98 8d       	ldd	r25, Y+24	; 0x18
     87c:	2d 8d       	ldd	r18, Y+29	; 0x1d
     87e:	3e 8d       	ldd	r19, Y+30	; 0x1e
     880:	4f 8d       	ldd	r20, Y+31	; 0x1f
     882:	58 a1       	ldd	r21, Y+32	; 0x20
     884:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__divmodsi4>
     888:	2d 8b       	std	Y+21, r18	; 0x15
     88a:	3e 8b       	std	Y+22, r19	; 0x16
     88c:	4f 8b       	std	Y+23, r20	; 0x17
     88e:	58 8f       	std	Y+24, r21	; 0x18
	accel_bias[1] /= (int32_t) packet_total;
     890:	69 89       	ldd	r22, Y+17	; 0x11
     892:	7a 89       	ldd	r23, Y+18	; 0x12
     894:	8b 89       	ldd	r24, Y+19	; 0x13
     896:	9c 89       	ldd	r25, Y+20	; 0x14
     898:	2d 8d       	ldd	r18, Y+29	; 0x1d
     89a:	3e 8d       	ldd	r19, Y+30	; 0x1e
     89c:	4f 8d       	ldd	r20, Y+31	; 0x1f
     89e:	58 a1       	ldd	r21, Y+32	; 0x20
     8a0:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__divmodsi4>
     8a4:	29 8b       	std	Y+17, r18	; 0x11
     8a6:	3a 8b       	std	Y+18, r19	; 0x12
     8a8:	4b 8b       	std	Y+19, r20	; 0x13
     8aa:	5c 8b       	std	Y+20, r21	; 0x14
	accel_bias[2] /= (int32_t) packet_total;
     8ac:	6d 85       	ldd	r22, Y+13	; 0x0d
     8ae:	7e 85       	ldd	r23, Y+14	; 0x0e
     8b0:	8f 85       	ldd	r24, Y+15	; 0x0f
     8b2:	98 89       	ldd	r25, Y+16	; 0x10
     8b4:	2d 8d       	ldd	r18, Y+29	; 0x1d
     8b6:	3e 8d       	ldd	r19, Y+30	; 0x1e
     8b8:	4f 8d       	ldd	r20, Y+31	; 0x1f
     8ba:	58 a1       	ldd	r21, Y+32	; 0x20
     8bc:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__divmodsi4>
     8c0:	69 01       	movw	r12, r18
     8c2:	7a 01       	movw	r14, r20
	gyro_bias[0]  /= (int32_t) packet_total;
     8c4:	69 8d       	ldd	r22, Y+25	; 0x19
     8c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     8c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8cc:	2d 8d       	ldd	r18, Y+29	; 0x1d
     8ce:	3e 8d       	ldd	r19, Y+30	; 0x1e
     8d0:	4f 8d       	ldd	r20, Y+31	; 0x1f
     8d2:	58 a1       	ldd	r21, Y+32	; 0x20
     8d4:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__divmodsi4>
     8d8:	2d 87       	std	Y+13, r18	; 0x0d
     8da:	3e 87       	std	Y+14, r19	; 0x0e
     8dc:	4f 87       	std	Y+15, r20	; 0x0f
     8de:	58 8b       	std	Y+16, r21	; 0x10
	gyro_bias[1]  /= (int32_t) packet_total;
     8e0:	c3 01       	movw	r24, r6
     8e2:	b2 01       	movw	r22, r4
     8e4:	2d 8d       	ldd	r18, Y+29	; 0x1d
     8e6:	3e 8d       	ldd	r19, Y+30	; 0x1e
     8e8:	4f 8d       	ldd	r20, Y+31	; 0x1f
     8ea:	58 a1       	ldd	r21, Y+32	; 0x20
     8ec:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__divmodsi4>
     8f0:	29 01       	movw	r4, r18
     8f2:	3a 01       	movw	r6, r20
	gyro_bias[2]  /= (int32_t) packet_total;
     8f4:	c5 01       	movw	r24, r10
     8f6:	b4 01       	movw	r22, r8
     8f8:	2d 8d       	ldd	r18, Y+29	; 0x1d
     8fa:	3e 8d       	ldd	r19, Y+30	; 0x1e
     8fc:	4f 8d       	ldd	r20, Y+31	; 0x1f
     8fe:	58 a1       	ldd	r21, Y+32	; 0x20
     900:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__divmodsi4>

	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
     904:	1c 14       	cp	r1, r12
     906:	1d 04       	cpc	r1, r13
     908:	1e 04       	cpc	r1, r14
     90a:	1f 04       	cpc	r1, r15
     90c:	34 f4       	brge	.+12     	; 0x91a <__stack+0x1b>
     90e:	d7 01       	movw	r26, r14
     910:	c6 01       	movw	r24, r12
     912:	90 54       	subi	r25, 0x40	; 64
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	05 c0       	rjmp	.+10     	; 0x924 <__stack+0x25>
	else {accel_bias[2] += (int32_t) accelsensitivity;}
     91a:	d7 01       	movw	r26, r14
     91c:	c6 01       	movw	r24, r12
     91e:	90 5c       	subi	r25, 0xC0	; 192
     920:	af 4f       	sbci	r26, 0xFF	; 255
     922:	bf 4f       	sbci	r27, 0xFF	; 255
	
	gyro_offset[0] = (int16_t) gyro_bias[0];
     924:	6d 85       	ldd	r22, Y+13	; 0x0d
     926:	7e 85       	ldd	r23, Y+14	; 0x0e
     928:	e9 a1       	ldd	r30, Y+33	; 0x21
     92a:	fa a1       	ldd	r31, Y+34	; 0x22
     92c:	71 83       	std	Z+1, r23	; 0x01
     92e:	60 83       	st	Z, r22
	gyro_offset[1] = (int16_t) gyro_bias[1];
     930:	53 82       	std	Z+3, r5	; 0x03
     932:	42 82       	std	Z+2, r4	; 0x02
	gyro_offset[2] = (int16_t) gyro_bias[2];
     934:	35 83       	std	Z+5, r19	; 0x05
     936:	24 83       	std	Z+4, r18	; 0x04

	acc_offset[0]  = (int16_t) accel_bias[0];
     938:	2d 89       	ldd	r18, Y+21	; 0x15
     93a:	3e 89       	ldd	r19, Y+22	; 0x16
     93c:	eb a1       	ldd	r30, Y+35	; 0x23
     93e:	fc a1       	ldd	r31, Y+36	; 0x24
     940:	31 83       	std	Z+1, r19	; 0x01
     942:	20 83       	st	Z, r18
	acc_offset[1]  = (int16_t) accel_bias[1];
     944:	49 89       	ldd	r20, Y+17	; 0x11
     946:	5a 89       	ldd	r21, Y+18	; 0x12
     948:	53 83       	std	Z+3, r21	; 0x03
     94a:	42 83       	std	Z+2, r20	; 0x02
	acc_offset[2]  = (int16_t) accel_bias[2];
     94c:	95 83       	std	Z+5, r25	; 0x05
     94e:	84 83       	std	Z+4, r24	; 0x04
}
     950:	a4 96       	adiw	r28, 0x24	; 36
     952:	0f b6       	in	r0, 0x3f	; 63
     954:	f8 94       	cli
     956:	de bf       	out	0x3e, r29	; 62
     958:	0f be       	out	0x3f, r0	; 63
     95a:	cd bf       	out	0x3d, r28	; 61
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	ff 90       	pop	r15
     966:	ef 90       	pop	r14
     968:	df 90       	pop	r13
     96a:	cf 90       	pop	r12
     96c:	bf 90       	pop	r11
     96e:	af 90       	pop	r10
     970:	9f 90       	pop	r9
     972:	8f 90       	pop	r8
     974:	7f 90       	pop	r7
     976:	6f 90       	pop	r6
     978:	5f 90       	pop	r5
     97a:	4f 90       	pop	r4
     97c:	3f 90       	pop	r3
     97e:	2f 90       	pop	r2
     980:	08 95       	ret

00000982 <InitMPU6050>:


void InitMPU6050(void)
{
	// reset device, reset all registers, clear gyro and accelerometer bias registers
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
     982:	40 e8       	ldi	r20, 0x80	; 128
     984:	50 e0       	ldi	r21, 0x00	; 0
     986:	6b e6       	ldi	r22, 0x6B	; 107
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	88 e6       	ldi	r24, 0x68	; 104
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
     992:	2f ef       	ldi	r18, 0xFF	; 255
     994:	81 ee       	ldi	r24, 0xE1	; 225
     996:	94 e0       	ldi	r25, 0x04	; 4
     998:	21 50       	subi	r18, 0x01	; 1
     99a:	80 40       	sbci	r24, 0x00	; 0
     99c:	90 40       	sbci	r25, 0x00	; 0
     99e:	e1 f7       	brne	.-8      	; 0x998 <InitMPU6050+0x16>
     9a0:	00 c0       	rjmp	.+0      	; 0x9a2 <InitMPU6050+0x20>
     9a2:	00 00       	nop
	_delay_ms(100);

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x01);
     9a4:	41 e0       	ldi	r20, 0x01	; 1
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	6b e6       	ldi	r22, 0x6B	; 107
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	88 e6       	ldi	r24, 0x68	; 104
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_2, 0x00);
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	6c e6       	ldi	r22, 0x6C	; 108
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	88 e6       	ldi	r24, 0x68	; 104
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
     9c4:	2f ef       	ldi	r18, 0xFF	; 255
     9c6:	83 ec       	ldi	r24, 0xC3	; 195
     9c8:	99 e0       	ldi	r25, 0x09	; 9
     9ca:	21 50       	subi	r18, 0x01	; 1
     9cc:	80 40       	sbci	r24, 0x00	; 0
     9ce:	90 40       	sbci	r25, 0x00	; 0
     9d0:	e1 f7       	brne	.-8      	; 0x9ca <InitMPU6050+0x48>
     9d2:	00 c0       	rjmp	.+0      	; 0x9d4 <InitMPU6050+0x52>
     9d4:	00 00       	nop
	_delay_ms(200);

	// Configure device for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
     9d6:	40 e0       	ldi	r20, 0x00	; 0
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	68 e3       	ldi	r22, 0x38	; 56
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	88 e6       	ldi	r24, 0x68	; 104
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
     9e6:	40 e0       	ldi	r20, 0x00	; 0
     9e8:	50 e0       	ldi	r21, 0x00	; 0
     9ea:	63 e2       	ldi	r22, 0x23	; 35
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	88 e6       	ldi	r24, 0x68	; 104
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
     9f6:	40 e0       	ldi	r20, 0x00	; 0
     9f8:	50 e0       	ldi	r21, 0x00	; 0
     9fa:	6b e6       	ldi	r22, 0x6B	; 107
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	88 e6       	ldi	r24, 0x68	; 104
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
     a06:	40 e0       	ldi	r20, 0x00	; 0
     a08:	50 e0       	ldi	r21, 0x00	; 0
     a0a:	64 e2       	ldi	r22, 0x24	; 36
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	88 e6       	ldi	r24, 0x68	; 104
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	50 e0       	ldi	r21, 0x00	; 0
     a1a:	6a e6       	ldi	r22, 0x6A	; 106
     a1c:	70 e0       	ldi	r23, 0x00	; 0
     a1e:	88 e6       	ldi	r24, 0x68	; 104
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
     a26:	4c e0       	ldi	r20, 0x0C	; 12
     a28:	50 e0       	ldi	r21, 0x00	; 0
     a2a:	6a e6       	ldi	r22, 0x6A	; 106
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	88 e6       	ldi	r24, 0x68	; 104
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
     a36:	8f e5       	ldi	r24, 0x5F	; 95
     a38:	9a ee       	ldi	r25, 0xEA	; 234
     a3a:	01 97       	sbiw	r24, 0x01	; 1
     a3c:	f1 f7       	brne	.-4      	; 0xa3a <InitMPU6050+0xb8>
     a3e:	00 c0       	rjmp	.+0      	; 0xa40 <InitMPU6050+0xbe>
     a40:	00 00       	nop
	_delay_ms(15);

	// Configure MPU6050 gyro and accelerometer for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, CONFIG, 0x03);      // Set low-pass filter to 44 Hz
     a42:	43 e0       	ldi	r20, 0x03	; 3
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	6a e1       	ldi	r22, 0x1A	; 26
     a48:	70 e0       	ldi	r23, 0x00	; 0
     a4a:	88 e6       	ldi	r24, 0x68	; 104
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, SMPLRT_DIV, 4);  // Set sample rate to 1000 Hz
     a52:	44 e0       	ldi	r20, 0x04	; 4
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	69 e1       	ldi	r22, 0x19	; 25
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	88 e6       	ldi	r24, 0x68	; 104
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
     a62:	40 e0       	ldi	r20, 0x00	; 0
     a64:	50 e0       	ldi	r21, 0x00	; 0
     a66:	6b e1       	ldi	r22, 0x1B	; 27
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	88 e6       	ldi	r24, 0x68	; 104
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
     a72:	40 e0       	ldi	r20, 0x00	; 0
     a74:	50 e0       	ldi	r21, 0x00	; 0
     a76:	6c e1       	ldi	r22, 0x1C	; 28
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	88 e6       	ldi	r24, 0x68	; 104
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>

	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
     a82:	40 e4       	ldi	r20, 0x40	; 64
     a84:	50 e0       	ldi	r21, 0x00	; 0
     a86:	6a e6       	ldi	r22, 0x6A	; 106
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	88 e6       	ldi	r24, 0x68	; 104
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 1024 bytes in MPU-6050)
     a92:	48 e7       	ldi	r20, 0x78	; 120
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	63 e2       	ldi	r22, 0x23	; 35
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	88 e6       	ldi	r24, 0x68	; 104
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 21 02 	call	0x442	; 0x442 <I2C_write_byte>
     aa2:	08 95       	ret

00000aa4 <ReadMPU6050>:
}

void ReadMPU6050(void)
{
     aa4:	8f 92       	push	r8
     aa6:	9f 92       	push	r9
     aa8:	af 92       	push	r10
     aaa:	bf 92       	push	r11
     aac:	cf 92       	push	r12
     aae:	df 92       	push	r13
     ab0:	ef 92       	push	r14
     ab2:	ff 92       	push	r15
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	cd b7       	in	r28, 0x3d	; 61
     abe:	de b7       	in	r29, 0x3e	; 62
     ac0:	68 97       	sbiw	r28, 0x18	; 24
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	f8 94       	cli
     ac6:	de bf       	out	0x3e, r29	; 62
     ac8:	0f be       	out	0x3f, r0	; 63
     aca:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, fifo_count, packet_count;
	uint8_t data[12];
	int16_t gyro[3];
	int16_t acc[3];

	I2C_read_buf(MPU6050_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
     acc:	9e 01       	movw	r18, r28
     ace:	2f 5f       	subi	r18, 0xFF	; 255
     ad0:	3f 4f       	sbci	r19, 0xFF	; 255
     ad2:	42 e0       	ldi	r20, 0x02	; 2
     ad4:	50 e0       	ldi	r21, 0x00	; 0
     ad6:	62 e7       	ldi	r22, 0x72	; 114
     ad8:	70 e0       	ldi	r23, 0x00	; 0
     ada:	88 e6       	ldi	r24, 0x68	; 104
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	0e 94 39 02 	call	0x472	; 0x472 <I2C_read_buf>
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
     ae2:	8a 81       	ldd	r24, Y+2	; 0x02
     ae4:	9b ea       	ldi	r25, 0xAB	; 171
     ae6:	89 9f       	mul	r24, r25
     ae8:	c1 2c       	mov	r12, r1
     aea:	11 24       	eor	r1, r1
     aec:	c6 94       	lsr	r12
     aee:	c6 94       	lsr	r12
     af0:	c6 94       	lsr	r12

	for (i = 0; i < packet_count; i++)
     af2:	09 f4       	brne	.+2      	; 0xaf6 <ReadMPU6050+0x52>
     af4:	6e c0       	rjmp	.+220    	; 0xbd2 <ReadMPU6050+0x12e>
     af6:	d1 2c       	mov	r13, r1
		acc[2] = (int16_t) (((int16_t)data[4] << 8)  | data[5] ) ;
		gyro[0]  = (int16_t) (((int16_t)data[6] << 8)  | data[7] ) ;
		gyro[1]  = (int16_t) (((int16_t)data[8] << 8)  | data[9] ) ;
		gyro[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
			
		acc[0] -= acc_offset[0];
     af8:	0f 2e       	mov	r0, r31
     afa:	f6 e8       	ldi	r31, 0x86	; 134
     afc:	ef 2e       	mov	r14, r31
     afe:	f1 e0       	ldi	r31, 0x01	; 1
     b00:	ff 2e       	mov	r15, r31
     b02:	f0 2d       	mov	r31, r0
		acc[1] -= acc_offset[1];
		acc[2] -= acc_offset[2];
		gyro[0] -= gyro_offset[0];
     b04:	0c e8       	ldi	r16, 0x8C	; 140
     b06:	11 e0       	ldi	r17, 0x01	; 1
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging

	for (i = 0; i < packet_count; i++)
	{
		I2C_read_buf(MPU6050_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
     b08:	9e 01       	movw	r18, r28
     b0a:	2f 5f       	subi	r18, 0xFF	; 255
     b0c:	3f 4f       	sbci	r19, 0xFF	; 255
     b0e:	4c e0       	ldi	r20, 0x0C	; 12
     b10:	50 e0       	ldi	r21, 0x00	; 0
     b12:	64 e7       	ldi	r22, 0x74	; 116
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	88 e6       	ldi	r24, 0x68	; 104
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	0e 94 39 02 	call	0x472	; 0x472 <I2C_read_buf>
		acc[0] = (int16_t) (((int16_t)data[0] << 8)  | data[1] ) ;  // Form signed 16-bit integer for each sample in FIFO
		acc[1] = (int16_t) (((int16_t)data[2] << 8)  | data[3] ) ;
     b1e:	eb 81       	ldd	r30, Y+3	; 0x03
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	fe 2f       	mov	r31, r30
     b24:	ee 27       	eor	r30, r30
     b26:	8c 81       	ldd	r24, Y+4	; 0x04
     b28:	4f 01       	movw	r8, r30
     b2a:	88 2a       	or	r8, r24
		acc[2] = (int16_t) (((int16_t)data[4] << 8)  | data[5] ) ;
     b2c:	6d 81       	ldd	r22, Y+5	; 0x05
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	76 2f       	mov	r23, r22
     b32:	66 27       	eor	r22, r22
     b34:	8e 81       	ldd	r24, Y+6	; 0x06
     b36:	68 2b       	or	r22, r24
		gyro[0]  = (int16_t) (((int16_t)data[6] << 8)  | data[7] ) ;
     b38:	4f 81       	ldd	r20, Y+7	; 0x07
     b3a:	50 e0       	ldi	r21, 0x00	; 0
     b3c:	54 2f       	mov	r21, r20
     b3e:	44 27       	eor	r20, r20
     b40:	88 85       	ldd	r24, Y+8	; 0x08
     b42:	48 2b       	or	r20, r24
		gyro[1]  = (int16_t) (((int16_t)data[8] << 8)  | data[9] ) ;
     b44:	29 85       	ldd	r18, Y+9	; 0x09
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	32 2f       	mov	r19, r18
     b4a:	22 27       	eor	r18, r18
     b4c:	8a 85       	ldd	r24, Y+10	; 0x0a
     b4e:	28 2b       	or	r18, r24
		gyro[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
     b50:	8b 85       	ldd	r24, Y+11	; 0x0b
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	98 2f       	mov	r25, r24
     b56:	88 27       	eor	r24, r24
     b58:	ac 85       	ldd	r26, Y+12	; 0x0c
     b5a:	8a 2b       	or	r24, r26
			
		acc[0] -= acc_offset[0];
     b5c:	a9 81       	ldd	r26, Y+1	; 0x01
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ba 2f       	mov	r27, r26
     b62:	aa 27       	eor	r26, r26
     b64:	ba 80       	ldd	r11, Y+2	; 0x02
     b66:	ab 29       	or	r26, r11
     b68:	f7 01       	movw	r30, r14
     b6a:	a0 80       	ld	r10, Z
     b6c:	b1 80       	ldd	r11, Z+1	; 0x01
     b6e:	aa 19       	sub	r26, r10
     b70:	bb 09       	sbc	r27, r11
     b72:	bc 8b       	std	Y+20, r27	; 0x14
     b74:	ab 8b       	std	Y+19, r26	; 0x13
		acc[1] -= acc_offset[1];
     b76:	a2 81       	ldd	r26, Z+2	; 0x02
     b78:	b3 81       	ldd	r27, Z+3	; 0x03
     b7a:	f4 01       	movw	r30, r8
     b7c:	ea 1b       	sub	r30, r26
     b7e:	fb 0b       	sbc	r31, r27
     b80:	fe 8b       	std	Y+22, r31	; 0x16
     b82:	ed 8b       	std	Y+21, r30	; 0x15
		acc[2] -= acc_offset[2];
     b84:	d7 01       	movw	r26, r14
     b86:	14 96       	adiw	r26, 0x04	; 4
     b88:	ed 91       	ld	r30, X+
     b8a:	fc 91       	ld	r31, X
     b8c:	15 97       	sbiw	r26, 0x05	; 5
     b8e:	6e 1b       	sub	r22, r30
     b90:	7f 0b       	sbc	r23, r31
     b92:	78 8f       	std	Y+24, r23	; 0x18
     b94:	6f 8b       	std	Y+23, r22	; 0x17
		gyro[0] -= gyro_offset[0];
     b96:	f8 01       	movw	r30, r16
     b98:	60 81       	ld	r22, Z
     b9a:	71 81       	ldd	r23, Z+1	; 0x01
     b9c:	46 1b       	sub	r20, r22
     b9e:	57 0b       	sbc	r21, r23
     ba0:	5e 87       	std	Y+14, r21	; 0x0e
     ba2:	4d 87       	std	Y+13, r20	; 0x0d
		gyro[1] -= gyro_offset[1];
     ba4:	42 81       	ldd	r20, Z+2	; 0x02
     ba6:	53 81       	ldd	r21, Z+3	; 0x03
     ba8:	24 1b       	sub	r18, r20
     baa:	35 0b       	sbc	r19, r21
     bac:	38 8b       	std	Y+16, r19	; 0x10
     bae:	2f 87       	std	Y+15, r18	; 0x0f
		gyro[2] -= gyro_offset[2];
     bb0:	24 81       	ldd	r18, Z+4	; 0x04
     bb2:	35 81       	ldd	r19, Z+5	; 0x05
     bb4:	82 1b       	sub	r24, r18
     bb6:	93 0b       	sbc	r25, r19
     bb8:	9a 8b       	std	Y+18, r25	; 0x12
     bba:	89 8b       	std	Y+17, r24	; 0x11

		PlaceInGyroBuffor(gyro);
     bbc:	ce 01       	movw	r24, r28
     bbe:	0d 96       	adiw	r24, 0x0d	; 13
     bc0:	0e 94 a3 00 	call	0x146	; 0x146 <PlaceInGyroBuffor>
		PlaceInAccBuffor(acc);
     bc4:	ce 01       	movw	r24, r28
     bc6:	43 96       	adiw	r24, 0x13	; 19
     bc8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <PlaceInAccBuffor>

	I2C_read_buf(MPU6050_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging

	for (i = 0; i < packet_count; i++)
     bcc:	d3 94       	inc	r13
     bce:	cd 10       	cpse	r12, r13
     bd0:	9b cf       	rjmp	.-202    	; 0xb08 <ReadMPU6050+0x64>
		gyro[2] -= gyro_offset[2];

		PlaceInGyroBuffor(gyro);
		PlaceInAccBuffor(acc);
	}
     bd2:	68 96       	adiw	r28, 0x18	; 24
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	f8 94       	cli
     bd8:	de bf       	out	0x3e, r29	; 62
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	cd bf       	out	0x3d, r28	; 61
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	1f 91       	pop	r17
     be4:	0f 91       	pop	r16
     be6:	ff 90       	pop	r15
     be8:	ef 90       	pop	r14
     bea:	df 90       	pop	r13
     bec:	cf 90       	pop	r12
     bee:	bf 90       	pop	r11
     bf0:	af 90       	pop	r10
     bf2:	9f 90       	pop	r9
     bf4:	8f 90       	pop	r8
     bf6:	08 95       	ret

00000bf8 <er_service>:
		
}

int8_t er_service(char * params)
{
	SendLine("Uart is working");
     bf8:	8c e0       	ldi	r24, 0x0C	; 12
     bfa:	91 e0       	ldi	r25, 0x01	; 1
     bfc:	0e 94 a0 0a 	call	0x1540	; 0x1540 <SendLine>
	return 0;
}
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	08 95       	ret

00000c04 <er_read>:

int8_t er_read(char * params)
{
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
     c0c:	2c 97       	sbiw	r28, 0x0c	; 12
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
	int16_t gyro[3];
	int16_t acc[3];
	
	ReadGyroSample(gyro);
     c18:	ce 01       	movw	r24, r28
     c1a:	01 96       	adiw	r24, 0x01	; 1
     c1c:	0e 94 0b 01 	call	0x216	; 0x216 <ReadGyroSample>
	ReadAccSample(acc);
     c20:	ce 01       	movw	r24, r28
     c22:	07 96       	adiw	r24, 0x07	; 7
     c24:	0e 94 39 01 	call	0x272	; 0x272 <ReadAccSample>

	SendStringInt("G X ", gyro[0]);
     c28:	49 81       	ldd	r20, Y+1	; 0x01
     c2a:	5a 81       	ldd	r21, Y+2	; 0x02
     c2c:	05 2e       	mov	r0, r21
     c2e:	00 0c       	add	r0, r0
     c30:	66 0b       	sbc	r22, r22
     c32:	77 0b       	sbc	r23, r23
     c34:	8c e1       	ldi	r24, 0x1C	; 28
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	0e 94 96 0b 	call	0x172c	; 0x172c <SendStringInt>
	SendStringInt("G Y ", gyro[1]);
     c3c:	4b 81       	ldd	r20, Y+3	; 0x03
     c3e:	5c 81       	ldd	r21, Y+4	; 0x04
     c40:	05 2e       	mov	r0, r21
     c42:	00 0c       	add	r0, r0
     c44:	66 0b       	sbc	r22, r22
     c46:	77 0b       	sbc	r23, r23
     c48:	81 e2       	ldi	r24, 0x21	; 33
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	0e 94 96 0b 	call	0x172c	; 0x172c <SendStringInt>
	SendStringInt("G Z ", gyro[2]);
     c50:	4d 81       	ldd	r20, Y+5	; 0x05
     c52:	5e 81       	ldd	r21, Y+6	; 0x06
     c54:	05 2e       	mov	r0, r21
     c56:	00 0c       	add	r0, r0
     c58:	66 0b       	sbc	r22, r22
     c5a:	77 0b       	sbc	r23, r23
     c5c:	86 e2       	ldi	r24, 0x26	; 38
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	0e 94 96 0b 	call	0x172c	; 0x172c <SendStringInt>
	SendStringInt("A X ", acc[0]);
     c64:	4f 81       	ldd	r20, Y+7	; 0x07
     c66:	58 85       	ldd	r21, Y+8	; 0x08
     c68:	05 2e       	mov	r0, r21
     c6a:	00 0c       	add	r0, r0
     c6c:	66 0b       	sbc	r22, r22
     c6e:	77 0b       	sbc	r23, r23
     c70:	8b e2       	ldi	r24, 0x2B	; 43
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	0e 94 96 0b 	call	0x172c	; 0x172c <SendStringInt>
	SendStringInt("A Y ", acc[1]);
     c78:	49 85       	ldd	r20, Y+9	; 0x09
     c7a:	5a 85       	ldd	r21, Y+10	; 0x0a
     c7c:	05 2e       	mov	r0, r21
     c7e:	00 0c       	add	r0, r0
     c80:	66 0b       	sbc	r22, r22
     c82:	77 0b       	sbc	r23, r23
     c84:	80 e3       	ldi	r24, 0x30	; 48
     c86:	91 e0       	ldi	r25, 0x01	; 1
     c88:	0e 94 96 0b 	call	0x172c	; 0x172c <SendStringInt>
	SendStringInt("A Z ", acc[2]);
     c8c:	4b 85       	ldd	r20, Y+11	; 0x0b
     c8e:	5c 85       	ldd	r21, Y+12	; 0x0c
     c90:	05 2e       	mov	r0, r21
     c92:	00 0c       	add	r0, r0
     c94:	66 0b       	sbc	r22, r22
     c96:	77 0b       	sbc	r23, r23
     c98:	85 e3       	ldi	r24, 0x35	; 53
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	0e 94 96 0b 	call	0x172c	; 0x172c <SendStringInt>

	return 0;
}
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	2c 96       	adiw	r28, 0x0c	; 12
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	08 95       	ret

00000cb4 <er_buf>:

int8_t er_buf(char * params)
{
     cb4:	3f 92       	push	r3
     cb6:	4f 92       	push	r4
     cb8:	5f 92       	push	r5
     cba:	6f 92       	push	r6
     cbc:	7f 92       	push	r7
     cbe:	8f 92       	push	r8
     cc0:	9f 92       	push	r9
     cc2:	af 92       	push	r10
     cc4:	bf 92       	push	r11
     cc6:	cf 92       	push	r12
     cc8:	df 92       	push	r13
     cca:	ef 92       	push	r14
     ccc:	ff 92       	push	r15
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	a3 97       	sbiw	r28, 0x23	; 35
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
	int16_t bufor[3][SAMPLES_BUFF_SIZE];
	int32_t sum[3];
	uint8_t i, samples;	

	samples = SamplesGyroBuf();
     ce6:	0e 94 67 01 	call	0x2ce	; 0x2ce <SamplesGyroBuf>
     cea:	8f 8f       	std	Y+31, r24	; 0x1f
	if (samples != 0)
     cec:	88 23       	and	r24, r24
     cee:	09 f4       	brne	.+2      	; 0xcf2 <er_buf+0x3e>
     cf0:	71 c0       	rjmp	.+226    	; 0xdd4 <er_buf+0x120>
	{
		ReadGyroBuf(bufor, &samples);
     cf2:	be 01       	movw	r22, r28
     cf4:	61 5e       	subi	r22, 0xE1	; 225
     cf6:	7f 4f       	sbci	r23, 0xFF	; 255
     cf8:	ce 01       	movw	r24, r28
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <ReadGyroBuf>
		sum[0] = 0;
		sum[1] = 0;
		sum[2] = 0;

		for(i = 0; i < samples; i++)
     d00:	3f 8d       	ldd	r19, Y+31	; 0x1f
     d02:	33 23       	and	r19, r19
     d04:	71 f1       	breq	.+92     	; 0xd62 <er_buf+0xae>
     d06:	fe 01       	movw	r30, r28
     d08:	31 96       	adiw	r30, 0x01	; 1
     d0a:	c1 2c       	mov	r12, r1
     d0c:	d1 2c       	mov	r13, r1
     d0e:	76 01       	movw	r14, r12
     d10:	40 e0       	ldi	r20, 0x00	; 0
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	ba 01       	movw	r22, r20
     d16:	81 2c       	mov	r8, r1
     d18:	91 2c       	mov	r9, r1
     d1a:	54 01       	movw	r10, r8
     d1c:	20 e0       	ldi	r18, 0x00	; 0
		{
			sum[X_AXIS] += bufor[X_AXIS][i];
     d1e:	81 91       	ld	r24, Z+
     d20:	91 91       	ld	r25, Z+
     d22:	09 2e       	mov	r0, r25
     d24:	00 0c       	add	r0, r0
     d26:	aa 0b       	sbc	r26, r26
     d28:	bb 0b       	sbc	r27, r27
     d2a:	c8 0e       	add	r12, r24
     d2c:	d9 1e       	adc	r13, r25
     d2e:	ea 1e       	adc	r14, r26
     d30:	fb 1e       	adc	r15, r27
			sum[Y_AXIS] += bufor[Y_AXIS][i];
     d32:	80 85       	ldd	r24, Z+8	; 0x08
     d34:	91 85       	ldd	r25, Z+9	; 0x09
     d36:	09 2e       	mov	r0, r25
     d38:	00 0c       	add	r0, r0
     d3a:	aa 0b       	sbc	r26, r26
     d3c:	bb 0b       	sbc	r27, r27
     d3e:	48 0f       	add	r20, r24
     d40:	59 1f       	adc	r21, r25
     d42:	6a 1f       	adc	r22, r26
     d44:	7b 1f       	adc	r23, r27
			sum[Z_AXIS] += bufor[Z_AXIS][i];
     d46:	82 89       	ldd	r24, Z+18	; 0x12
     d48:	93 89       	ldd	r25, Z+19	; 0x13
     d4a:	09 2e       	mov	r0, r25
     d4c:	00 0c       	add	r0, r0
     d4e:	aa 0b       	sbc	r26, r26
     d50:	bb 0b       	sbc	r27, r27
     d52:	88 0e       	add	r8, r24
     d54:	99 1e       	adc	r9, r25
     d56:	aa 1e       	adc	r10, r26
     d58:	bb 1e       	adc	r11, r27
		ReadGyroBuf(bufor, &samples);
		sum[0] = 0;
		sum[1] = 0;
		sum[2] = 0;

		for(i = 0; i < samples; i++)
     d5a:	2f 5f       	subi	r18, 0xFF	; 255
     d5c:	23 13       	cpse	r18, r19
     d5e:	df cf       	rjmp	.-66     	; 0xd1e <er_buf+0x6a>
     d60:	09 c0       	rjmp	.+18     	; 0xd74 <er_buf+0xc0>

	samples = SamplesGyroBuf();
	if (samples != 0)
	{
		ReadGyroBuf(bufor, &samples);
		sum[0] = 0;
     d62:	c1 2c       	mov	r12, r1
     d64:	d1 2c       	mov	r13, r1
     d66:	76 01       	movw	r14, r12
		sum[1] = 0;
     d68:	40 e0       	ldi	r20, 0x00	; 0
     d6a:	50 e0       	ldi	r21, 0x00	; 0
     d6c:	ba 01       	movw	r22, r20
		sum[2] = 0;
     d6e:	81 2c       	mov	r8, r1
     d70:	91 2c       	mov	r9, r1
     d72:	54 01       	movw	r10, r8
			sum[X_AXIS] += bufor[X_AXIS][i];
			sum[Y_AXIS] += bufor[Y_AXIS][i];
			sum[Z_AXIS] += bufor[Z_AXIS][i];
		}

		sum[X_AXIS] /= (int32_t) samples;
     d74:	43 2e       	mov	r4, r19
     d76:	51 2c       	mov	r5, r1
     d78:	61 2c       	mov	r6, r1
     d7a:	71 2c       	mov	r7, r1
		sum[Y_AXIS] /= (int32_t) samples;
     d7c:	cb 01       	movw	r24, r22
     d7e:	ba 01       	movw	r22, r20
     d80:	a3 01       	movw	r20, r6
     d82:	92 01       	movw	r18, r4
     d84:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__divmodsi4>
     d88:	28 a3       	std	Y+32, r18	; 0x20
     d8a:	39 a3       	std	Y+33, r19	; 0x21
     d8c:	4a a3       	std	Y+34, r20	; 0x22
     d8e:	5b a3       	std	Y+35, r21	; 0x23
		sum[Z_AXIS] /= (int32_t) samples;
     d90:	c5 01       	movw	r24, r10
     d92:	b4 01       	movw	r22, r8
     d94:	a3 01       	movw	r20, r6
     d96:	92 01       	movw	r18, r4
     d98:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__divmodsi4>
     d9c:	49 01       	movw	r8, r18
     d9e:	5a 01       	movw	r10, r20

 	 	SendStringInt("G X ", sum[0]);
     da0:	c7 01       	movw	r24, r14
     da2:	b6 01       	movw	r22, r12
     da4:	a3 01       	movw	r20, r6
     da6:	92 01       	movw	r18, r4
     da8:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__divmodsi4>
     dac:	ba 01       	movw	r22, r20
     dae:	a9 01       	movw	r20, r18
     db0:	8c e1       	ldi	r24, 0x1C	; 28
     db2:	91 e0       	ldi	r25, 0x01	; 1
     db4:	0e 94 96 0b 	call	0x172c	; 0x172c <SendStringInt>
 	 	SendStringInt("G Y ", sum[1]);
     db8:	48 a1       	ldd	r20, Y+32	; 0x20
     dba:	59 a1       	ldd	r21, Y+33	; 0x21
     dbc:	6a a1       	ldd	r22, Y+34	; 0x22
     dbe:	7b a1       	ldd	r23, Y+35	; 0x23
     dc0:	81 e2       	ldi	r24, 0x21	; 33
     dc2:	91 e0       	ldi	r25, 0x01	; 1
     dc4:	0e 94 96 0b 	call	0x172c	; 0x172c <SendStringInt>
 	 	SendStringInt("G Z ", sum[2]);
     dc8:	b5 01       	movw	r22, r10
     dca:	a4 01       	movw	r20, r8
     dcc:	86 e2       	ldi	r24, 0x26	; 38
     dce:	91 e0       	ldi	r25, 0x01	; 1
     dd0:	0e 94 96 0b 	call	0x172c	; 0x172c <SendStringInt>
	}

 	samples = SamplesAccBuf();
     dd4:	0e 94 70 01 	call	0x2e0	; 0x2e0 <SamplesAccBuf>
     dd8:	8f 8f       	std	Y+31, r24	; 0x1f
 	if (samples != 0)
     dda:	88 23       	and	r24, r24
     ddc:	09 f4       	brne	.+2      	; 0xde0 <er_buf+0x12c>
     dde:	a6 c0       	rjmp	.+332    	; 0xf2c <er_buf+0x278>
 	{
		ReadAccBuf(bufor, &samples);
     de0:	be 01       	movw	r22, r28
     de2:	61 5e       	subi	r22, 0xE1	; 225
     de4:	7f 4f       	sbci	r23, 0xFF	; 255
     de6:	ce 01       	movw	r24, r28
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	0e 94 b7 01 	call	0x36e	; 0x36e <ReadAccBuf>
		sum[0] = 0;
		sum[1] = 0;
		sum[2] = 0;
		uint8_t average = 0;
 
		for(i = 0; i < samples; i++)
     dee:	3f 8c       	ldd	r3, Y+31	; 0x1f
     df0:	33 20       	and	r3, r3
     df2:	09 f4       	brne	.+2      	; 0xdf6 <er_buf+0x142>
     df4:	62 c0       	rjmp	.+196    	; 0xeba <er_buf+0x206>
     df6:	8e 01       	movw	r16, r28
     df8:	0f 5f       	subi	r16, 0xFF	; 255
     dfa:	1f 4f       	sbci	r17, 0xFF	; 255
     dfc:	c1 2c       	mov	r12, r1
     dfe:	d1 2c       	mov	r13, r1
     e00:	76 01       	movw	r14, r12
     e02:	c3 94       	inc	r12
     e04:	18 a2       	std	Y+32, r1	; 0x20
     e06:	19 a2       	std	Y+33, r1	; 0x21
     e08:	1a a2       	std	Y+34, r1	; 0x22
     e0a:	1b a2       	std	Y+35, r1	; 0x23
     e0c:	41 2c       	mov	r4, r1
     e0e:	51 2c       	mov	r5, r1
     e10:	32 01       	movw	r6, r4
     e12:	81 2c       	mov	r8, r1
     e14:	91 2c       	mov	r9, r1
     e16:	54 01       	movw	r10, r8
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	e0 e0       	ldi	r30, 0x00	; 0
		{
			average += (i+1)*(i+1);
     e1c:	cc 9c       	mul	r12, r12
     e1e:	f0 0d       	add	r31, r0
     e20:	11 24       	eor	r1, r1
			sum[X_AXIS] += ((int32_t)bufor[X_AXIS][i] * (i+1)*(i+1));
     e22:	d8 01       	movw	r26, r16
     e24:	8d 91       	ld	r24, X+
     e26:	9d 91       	ld	r25, X+
     e28:	8d 01       	movw	r16, r26
     e2a:	dc 01       	movw	r26, r24
     e2c:	a7 01       	movw	r20, r14
     e2e:	96 01       	movw	r18, r12
     e30:	0e 94 99 0c 	call	0x1932	; 0x1932 <__mulshisi3>
     e34:	9b 01       	movw	r18, r22
     e36:	ac 01       	movw	r20, r24
     e38:	c7 01       	movw	r24, r14
     e3a:	b6 01       	movw	r22, r12
     e3c:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__mulsi3>
     e40:	28 a1       	ldd	r18, Y+32	; 0x20
     e42:	39 a1       	ldd	r19, Y+33	; 0x21
     e44:	4a a1       	ldd	r20, Y+34	; 0x22
     e46:	5b a1       	ldd	r21, Y+35	; 0x23
     e48:	26 0f       	add	r18, r22
     e4a:	37 1f       	adc	r19, r23
     e4c:	48 1f       	adc	r20, r24
     e4e:	59 1f       	adc	r21, r25
     e50:	28 a3       	std	Y+32, r18	; 0x20
     e52:	39 a3       	std	Y+33, r19	; 0x21
     e54:	4a a3       	std	Y+34, r20	; 0x22
     e56:	5b a3       	std	Y+35, r21	; 0x23
			sum[Y_AXIS] += ((int32_t)bufor[Y_AXIS][i] * (i+1)*(i+1));
     e58:	d8 01       	movw	r26, r16
     e5a:	18 96       	adiw	r26, 0x08	; 8
     e5c:	8d 91       	ld	r24, X+
     e5e:	9c 91       	ld	r25, X
     e60:	19 97       	sbiw	r26, 0x09	; 9
     e62:	dc 01       	movw	r26, r24
     e64:	a7 01       	movw	r20, r14
     e66:	96 01       	movw	r18, r12
     e68:	0e 94 99 0c 	call	0x1932	; 0x1932 <__mulshisi3>
     e6c:	9b 01       	movw	r18, r22
     e6e:	ac 01       	movw	r20, r24
     e70:	c7 01       	movw	r24, r14
     e72:	b6 01       	movw	r22, r12
     e74:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__mulsi3>
     e78:	46 0e       	add	r4, r22
     e7a:	57 1e       	adc	r5, r23
     e7c:	68 1e       	adc	r6, r24
     e7e:	79 1e       	adc	r7, r25
			sum[Z_AXIS] += ((int32_t)bufor[Z_AXIS][i] * (i+1)*(i+1));
     e80:	d8 01       	movw	r26, r16
     e82:	52 96       	adiw	r26, 0x12	; 18
     e84:	8d 91       	ld	r24, X+
     e86:	9c 91       	ld	r25, X
     e88:	53 97       	sbiw	r26, 0x13	; 19
     e8a:	dc 01       	movw	r26, r24
     e8c:	a7 01       	movw	r20, r14
     e8e:	96 01       	movw	r18, r12
     e90:	0e 94 99 0c 	call	0x1932	; 0x1932 <__mulshisi3>
     e94:	9b 01       	movw	r18, r22
     e96:	ac 01       	movw	r20, r24
     e98:	c7 01       	movw	r24, r14
     e9a:	b6 01       	movw	r22, r12
     e9c:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__mulsi3>
     ea0:	86 0e       	add	r8, r22
     ea2:	97 1e       	adc	r9, r23
     ea4:	a8 1e       	adc	r10, r24
     ea6:	b9 1e       	adc	r11, r25
		sum[0] = 0;
		sum[1] = 0;
		sum[2] = 0;
		uint8_t average = 0;
 
		for(i = 0; i < samples; i++)
     ea8:	ef 5f       	subi	r30, 0xFF	; 255
     eaa:	bf ef       	ldi	r27, 0xFF	; 255
     eac:	cb 1a       	sub	r12, r27
     eae:	db 0a       	sbc	r13, r27
     eb0:	eb 0a       	sbc	r14, r27
     eb2:	fb 0a       	sbc	r15, r27
     eb4:	e3 11       	cpse	r30, r3
     eb6:	b2 cf       	rjmp	.-156    	; 0xe1c <er_buf+0x168>
     eb8:	0b c0       	rjmp	.+22     	; 0xed0 <er_buf+0x21c>

 	samples = SamplesAccBuf();
 	if (samples != 0)
 	{
		ReadAccBuf(bufor, &samples);
		sum[0] = 0;
     eba:	18 a2       	std	Y+32, r1	; 0x20
     ebc:	19 a2       	std	Y+33, r1	; 0x21
     ebe:	1a a2       	std	Y+34, r1	; 0x22
     ec0:	1b a2       	std	Y+35, r1	; 0x23
		sum[1] = 0;
     ec2:	41 2c       	mov	r4, r1
     ec4:	51 2c       	mov	r5, r1
     ec6:	32 01       	movw	r6, r4
		sum[2] = 0;
     ec8:	81 2c       	mov	r8, r1
     eca:	91 2c       	mov	r9, r1
     ecc:	54 01       	movw	r10, r8
		uint8_t average = 0;
     ece:	f0 e0       	ldi	r31, 0x00	; 0
			sum[X_AXIS] += ((int32_t)bufor[X_AXIS][i] * (i+1)*(i+1));
			sum[Y_AXIS] += ((int32_t)bufor[Y_AXIS][i] * (i+1)*(i+1));
			sum[Z_AXIS] += ((int32_t)bufor[Z_AXIS][i] * (i+1)*(i+1));
		}

		sum[X_AXIS] /= (int32_t) average;
     ed0:	cf 2e       	mov	r12, r31
     ed2:	d1 2c       	mov	r13, r1
     ed4:	e1 2c       	mov	r14, r1
     ed6:	f1 2c       	mov	r15, r1
		sum[Y_AXIS] /= (int32_t) average;
     ed8:	c3 01       	movw	r24, r6
     eda:	b2 01       	movw	r22, r4
     edc:	a7 01       	movw	r20, r14
     ede:	96 01       	movw	r18, r12
     ee0:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__divmodsi4>
     ee4:	29 01       	movw	r4, r18
     ee6:	3a 01       	movw	r6, r20
		sum[Z_AXIS] /= (int32_t) average;
     ee8:	c5 01       	movw	r24, r10
     eea:	b4 01       	movw	r22, r8
     eec:	a7 01       	movw	r20, r14
     eee:	96 01       	movw	r18, r12
     ef0:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__divmodsi4>
     ef4:	49 01       	movw	r8, r18
     ef6:	5a 01       	movw	r10, r20
		SendStringInt("A X ", sum[0]);
     ef8:	68 a1       	ldd	r22, Y+32	; 0x20
     efa:	79 a1       	ldd	r23, Y+33	; 0x21
     efc:	8a a1       	ldd	r24, Y+34	; 0x22
     efe:	9b a1       	ldd	r25, Y+35	; 0x23
     f00:	a7 01       	movw	r20, r14
     f02:	96 01       	movw	r18, r12
     f04:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__divmodsi4>
     f08:	ba 01       	movw	r22, r20
     f0a:	a9 01       	movw	r20, r18
     f0c:	8b e2       	ldi	r24, 0x2B	; 43
     f0e:	91 e0       	ldi	r25, 0x01	; 1
     f10:	0e 94 96 0b 	call	0x172c	; 0x172c <SendStringInt>
		SendStringInt("A Y ", sum[1]);
     f14:	b3 01       	movw	r22, r6
     f16:	a2 01       	movw	r20, r4
     f18:	80 e3       	ldi	r24, 0x30	; 48
     f1a:	91 e0       	ldi	r25, 0x01	; 1
     f1c:	0e 94 96 0b 	call	0x172c	; 0x172c <SendStringInt>
		SendStringInt("A Z ", sum[2]);
     f20:	b5 01       	movw	r22, r10
     f22:	a4 01       	movw	r20, r8
     f24:	85 e3       	ldi	r24, 0x35	; 53
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	0e 94 96 0b 	call	0x172c	; 0x172c <SendStringInt>
 	}

	SendStringInt("S ", samples);
     f2c:	4f 8d       	ldd	r20, Y+31	; 0x1f
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	60 e0       	ldi	r22, 0x00	; 0
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	8a e3       	ldi	r24, 0x3A	; 58
     f36:	91 e0       	ldi	r25, 0x01	; 1
     f38:	0e 94 96 0b 	call	0x172c	; 0x172c <SendStringInt>
	return 0;
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	a3 96       	adiw	r28, 0x23	; 35
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	cd bf       	out	0x3d, r28	; 61
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	1f 91       	pop	r17
     f50:	0f 91       	pop	r16
     f52:	ff 90       	pop	r15
     f54:	ef 90       	pop	r14
     f56:	df 90       	pop	r13
     f58:	cf 90       	pop	r12
     f5a:	bf 90       	pop	r11
     f5c:	af 90       	pop	r10
     f5e:	9f 90       	pop	r9
     f60:	8f 90       	pop	r8
     f62:	7f 90       	pop	r7
     f64:	6f 90       	pop	r6
     f66:	5f 90       	pop	r5
     f68:	4f 90       	pop	r4
     f6a:	3f 90       	pop	r3
     f6c:	08 95       	ret

00000f6e <ProcessString>:
	{"ER_BUF", er_buf},
};


void ProcessString(uint8_t start, uint8_t stop)
{
     f6e:	4f 92       	push	r4
     f70:	5f 92       	push	r5
     f72:	6f 92       	push	r6
     f74:	8f 92       	push	r8
     f76:	9f 92       	push	r9
     f78:	af 92       	push	r10
     f7a:	bf 92       	push	r11
     f7c:	cf 92       	push	r12
     f7e:	df 92       	push	r13
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	a2 97       	sbiw	r28, 0x22	; 34
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	f8 94       	cli
     f96:	de bf       	out	0x3e, r29	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	cd bf       	out	0x3d, r28	; 61
     f9c:	fe 01       	movw	r30, r28
     f9e:	31 96       	adiw	r30, 0x01	; 1
     fa0:	9e 01       	movw	r18, r28
     fa2:	2f 5d       	subi	r18, 0xDF	; 223
     fa4:	3f 4f       	sbci	r19, 0xFF	; 255
	char string[RX_SIZE];
	uint8_t i;	//counter value

	for (i=0; i<RX_SIZE; i++)
	{
		string[i] = 0;
     fa6:	11 92       	st	Z+, r1
	
	//	stop = (stop +1) & RX_SIZE_BIN;
	char string[RX_SIZE];
	uint8_t i;	//counter value

	for (i=0; i<RX_SIZE; i++)
     fa8:	2e 17       	cp	r18, r30
     faa:	3f 07       	cpc	r19, r31
     fac:	e1 f7       	brne	.-8      	; 0xfa6 <ProcessString+0x38>
	}

	i=0;

	// Assign rX string to command
	while (start!=stop)
     fae:	86 17       	cp	r24, r22
     fb0:	99 f0       	breq	.+38     	; 0xfd8 <ProcessString+0x6a>
     fb2:	10 e0       	ldi	r17, 0x00	; 0
	{
		string[i] = RxBuffor[start];
     fb4:	a1 e0       	ldi	r26, 0x01	; 1
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	ac 0f       	add	r26, r28
     fba:	bd 1f       	adc	r27, r29
     fbc:	a1 0f       	add	r26, r17
     fbe:	b1 1d       	adc	r27, r1
     fc0:	e8 2f       	mov	r30, r24
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	e2 5b       	subi	r30, 0xB2	; 178
     fc6:	fd 4f       	sbci	r31, 0xFD	; 253
     fc8:	90 81       	ld	r25, Z
     fca:	9c 93       	st	X, r25
		start = (start + 1) & RX_SIZE_BIN;
     fcc:	8f 5f       	subi	r24, 0xFF	; 255
     fce:	8f 71       	andi	r24, 0x1F	; 31
		i++;
     fd0:	1f 5f       	subi	r17, 0xFF	; 255
	}

	i=0;

	// Assign rX string to command
	while (start!=stop)
     fd2:	68 13       	cpse	r22, r24
     fd4:	ef cf       	rjmp	.-34     	; 0xfb4 <ProcessString+0x46>
     fd6:	01 c0       	rjmp	.+2      	; 0xfda <ProcessString+0x6c>
     fd8:	10 e0       	ldi	r17, 0x00	; 0
	}

	char * rest;
	char * begining;

	begining = strtok_r(string, " ", &rest);
     fda:	ae 01       	movw	r20, r28
     fdc:	4f 5d       	subi	r20, 0xDF	; 223
     fde:	5f 4f       	sbci	r21, 0xFF	; 255
     fe0:	6b e4       	ldi	r22, 0x4B	; 75
     fe2:	71 e0       	ldi	r23, 0x01	; 1
     fe4:	ce 01       	movw	r24, r28
     fe6:	01 96       	adiw	r24, 0x01	; 1
     fe8:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <strtok_r>
     fec:	5c 01       	movw	r10, r24

	uint8_t j;
	uint8_t command_length;
	uint8_t string_length = strlen(begining);
     fee:	fc 01       	movw	r30, r24
     ff0:	01 90       	ld	r0, Z+
     ff2:	00 20       	and	r0, r0
     ff4:	e9 f7       	brne	.-6      	; 0xff0 <ProcessString+0x82>
     ff6:	31 97       	sbiw	r30, 0x01	; 1
     ff8:	6e 2e       	mov	r6, r30
     ffa:	68 1a       	sub	r6, r24
     ffc:	0f 2e       	mov	r0, r31
     ffe:	f6 ec       	ldi	r31, 0xC6	; 198
    1000:	ef 2e       	mov	r14, r31
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	ff 2e       	mov	r15, r31
    1006:	f0 2d       	mov	r31, r0
    1008:	c1 2c       	mov	r12, r1
    100a:	d1 2c       	mov	r13, r1
	for (j=0; j < RX_COMMANDS; j++)
    100c:	00 e0       	ldi	r16, 0x00	; 0
	{
		command_length = strlen_P(ER_commands[j].command);
		
		if (command_length == string_length)
		{
			if (0 == strncasecmp_P(begining, ER_commands[j].command, i))
    100e:	81 2e       	mov	r8, r17
    1010:	91 2c       	mov	r9, r1
#else
extern size_t __strlen_P(const char *) __ATTR_CONST__;  /* internal helper function */
__attribute__((__always_inline__)) static __inline__ size_t strlen_P(const char * s);
static __inline__ size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
    1012:	c7 01       	movw	r24, r14
    1014:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__strlen_P>
	uint8_t string_length = strlen(begining);
	for (j=0; j < RX_COMMANDS; j++)
	{
		command_length = strlen_P(ER_commands[j].command);
		
		if (command_length == string_length)
    1018:	68 12       	cpse	r6, r24
    101a:	18 c0       	rjmp	.+48     	; 0x104c <ProcessString+0xde>
		{
			if (0 == strncasecmp_P(begining, ER_commands[j].command, i))
    101c:	a4 01       	movw	r20, r8
    101e:	b7 01       	movw	r22, r14
    1020:	c5 01       	movw	r24, r10
    1022:	0e 94 cc 0c 	call	0x1998	; 0x1998 <strncasecmp_P>
    1026:	89 2b       	or	r24, r25
    1028:	89 f4       	brne	.+34     	; 0x104c <ProcessString+0xde>
			{
				_er_srv = (void *)pgm_read_word(&ER_commands[j].ER_service);
    102a:	86 e1       	ldi	r24, 0x16	; 22
    102c:	8c 9d       	mul	r24, r12
    102e:	f0 01       	movw	r30, r0
    1030:	8d 9d       	mul	r24, r13
    1032:	f0 0d       	add	r31, r0
    1034:	11 24       	eor	r1, r1
    1036:	e6 52       	subi	r30, 0x26	; 38
    1038:	ff 4f       	sbci	r31, 0xFF	; 255
    103a:	25 91       	lpm	r18, Z+
    103c:	34 91       	lpm	r19, Z
				_er_srv(rest);
    103e:	89 a1       	ldd	r24, Y+33	; 0x21
    1040:	9a a1       	ldd	r25, Y+34	; 0x22
    1042:	f9 01       	movw	r30, r18
    1044:	09 95       	icall
				break;
			}
		}
	}
	if (j==RX_COMMANDS)
    1046:	03 30       	cpi	r16, 0x03	; 3
    1048:	a1 f4       	brne	.+40     	; 0x1072 <ProcessString+0x104>
    104a:	09 c0       	rjmp	.+18     	; 0x105e <ProcessString+0xf0>
	begining = strtok_r(string, " ", &rest);

	uint8_t j;
	uint8_t command_length;
	uint8_t string_length = strlen(begining);
	for (j=0; j < RX_COMMANDS; j++)
    104c:	0f 5f       	subi	r16, 0xFF	; 255
    104e:	ff ef       	ldi	r31, 0xFF	; 255
    1050:	cf 1a       	sub	r12, r31
    1052:	df 0a       	sbc	r13, r31
    1054:	86 e1       	ldi	r24, 0x16	; 22
    1056:	e8 0e       	add	r14, r24
    1058:	f1 1c       	adc	r15, r1
    105a:	03 30       	cpi	r16, 0x03	; 3
    105c:	d1 f6       	brne	.-76     	; 0x1012 <ProcessString+0xa4>
			}
		}
	}
	if (j==RX_COMMANDS)
	{
		SendString("Wrong command: ");
    105e:	8d e3       	ldi	r24, 0x3D	; 61
    1060:	91 e0       	ldi	r25, 0x01	; 1
    1062:	0e 94 83 0a 	call	0x1506	; 0x1506 <SendString>
		SendString(string);
    1066:	ce 01       	movw	r24, r28
    1068:	01 96       	adiw	r24, 0x01	; 1
    106a:	0e 94 83 0a 	call	0x1506	; 0x1506 <SendString>
		SendEnter();
    106e:	0e 94 99 0a 	call	0x1532	; 0x1532 <SendEnter>
	}
		
}
    1072:	a2 96       	adiw	r28, 0x22	; 34
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	0f 91       	pop	r16
    1086:	ff 90       	pop	r15
    1088:	ef 90       	pop	r14
    108a:	df 90       	pop	r13
    108c:	cf 90       	pop	r12
    108e:	bf 90       	pop	r11
    1090:	af 90       	pop	r10
    1092:	9f 90       	pop	r9
    1094:	8f 90       	pop	r8
    1096:	6f 90       	pop	r6
    1098:	5f 90       	pop	r5
    109a:	4f 90       	pop	r4
    109c:	08 95       	ret

0000109e <__vector_24>:
void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
}

ISR (TWI0_vect)	//TWI finished vector
{	//TWI interrupt
    109e:	1f 92       	push	r1
    10a0:	0f 92       	push	r0
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	0f 92       	push	r0
    10a6:	11 24       	eor	r1, r1
    10a8:	2f 93       	push	r18
    10aa:	3f 93       	push	r19
    10ac:	4f 93       	push	r20
    10ae:	5f 93       	push	r21
    10b0:	8f 93       	push	r24
    10b2:	9f 93       	push	r25
    10b4:	af 93       	push	r26
    10b6:	bf 93       	push	r27
    10b8:	ef 93       	push	r30
    10ba:	ff 93       	push	r31

	uint8_t SLA = ((uint8_t)twi_bufor[twi_buf_pos.tail].sla << 1);
    10bc:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    10c0:	e6 95       	lsr	r30
    10c2:	e6 95       	lsr	r30
    10c4:	e6 95       	lsr	r30
    10c6:	e7 70       	andi	r30, 0x07	; 7
    10c8:	4e 2f       	mov	r20, r30
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	84 e1       	ldi	r24, 0x14	; 20
    10ce:	e8 9f       	mul	r30, r24
    10d0:	f0 01       	movw	r30, r0
    10d2:	11 24       	eor	r1, r1
    10d4:	e2 55       	subi	r30, 0x52	; 82
    10d6:	fe 4f       	sbci	r31, 0xFE	; 254
    10d8:	80 81       	ld	r24, Z
    10da:	28 2f       	mov	r18, r24
    10dc:	2e 7f       	andi	r18, 0xFE	; 254
	uint8_t REG = twi_bufor[twi_buf_pos.tail].reg;
	
	switch (twi_bufor[twi_buf_pos.tail].status){
    10de:	e3 89       	ldd	r30, Z+19	; 0x13
    10e0:	8e 2f       	mov	r24, r30
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	fc 01       	movw	r30, r24
    10e6:	34 97       	sbiw	r30, 0x04	; 4
    10e8:	e9 30       	cpi	r30, 0x09	; 9
    10ea:	f1 05       	cpc	r31, r1
    10ec:	08 f0       	brcs	.+2      	; 0x10f0 <__vector_24+0x52>
    10ee:	e4 c1       	rjmp	.+968    	; 0x14b8 <__vector_24+0x41a>
    10f0:	e6 5a       	subi	r30, 0xA6	; 166
    10f2:	ff 4f       	sbci	r31, 0xFF	; 255
    10f4:	0c 94 79 0c 	jmp	0x18f2	; 0x18f2 <__tablejump2__>
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    10f8:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    10fc:	85 e8       	ldi	r24, 0x85	; 133
    10fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	uint8_t REG = twi_bufor[twi_buf_pos.tail].reg;
	
	switch (twi_bufor[twi_buf_pos.tail].status){
		case start:
			TWI_write(SLA);
			twi_bufor[twi_buf_pos.tail].status = write_adress;
    1102:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    1106:	e6 95       	lsr	r30
    1108:	e6 95       	lsr	r30
    110a:	e6 95       	lsr	r30
    110c:	e7 70       	andi	r30, 0x07	; 7
    110e:	84 e1       	ldi	r24, 0x14	; 20
    1110:	e8 9f       	mul	r30, r24
    1112:	f0 01       	movw	r30, r0
    1114:	11 24       	eor	r1, r1
    1116:	e2 55       	subi	r30, 0x52	; 82
    1118:	fe 4f       	sbci	r31, 0xFE	; 254
    111a:	85 e0       	ldi	r24, 0x05	; 5
    111c:	83 8b       	std	Z+19, r24	; 0x13
			break;
    111e:	cc c1       	rjmp	.+920    	; 0x14b8 <__vector_24+0x41a>

ISR (TWI0_vect)	//TWI finished vector
{	//TWI interrupt

	uint8_t SLA = ((uint8_t)twi_bufor[twi_buf_pos.tail].sla << 1);
	uint8_t REG = twi_bufor[twi_buf_pos.tail].reg;
    1120:	84 e1       	ldi	r24, 0x14	; 20
    1122:	84 9f       	mul	r24, r20
    1124:	f0 01       	movw	r30, r0
    1126:	85 9f       	mul	r24, r21
    1128:	f0 0d       	add	r31, r0
    112a:	11 24       	eor	r1, r1
    112c:	e2 55       	subi	r30, 0x52	; 82
    112e:	fe 4f       	sbci	r31, 0xFE	; 254
    1130:	91 81       	ldd	r25, Z+1	; 0x01
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    1132:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    1136:	95 e8       	ldi	r25, 0x85	; 133
    1138:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			twi_bufor[twi_buf_pos.tail].status = write_adress;
			break;

		case write_adress:
			TWI_write(REG);
			twi_bufor[twi_buf_pos.tail].status = write_register;
    113c:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    1140:	e6 95       	lsr	r30
    1142:	e6 95       	lsr	r30
    1144:	e6 95       	lsr	r30
    1146:	e7 70       	andi	r30, 0x07	; 7
    1148:	8e 9f       	mul	r24, r30
    114a:	f0 01       	movw	r30, r0
    114c:	11 24       	eor	r1, r1
    114e:	e2 55       	subi	r30, 0x52	; 82
    1150:	fe 4f       	sbci	r31, 0xFE	; 254
    1152:	86 e0       	ldi	r24, 0x06	; 6
    1154:	83 8b       	std	Z+19, r24	; 0x13
			break;
    1156:	b0 c1       	rjmp	.+864    	; 0x14b8 <__vector_24+0x41a>

		case write_register:
			if (twi_bufor[twi_buf_pos.tail].read)	//check if reading is required
    1158:	84 e1       	ldi	r24, 0x14	; 20
    115a:	84 9f       	mul	r24, r20
    115c:	f0 01       	movw	r30, r0
    115e:	85 9f       	mul	r24, r21
    1160:	f0 0d       	add	r31, r0
    1162:	11 24       	eor	r1, r1
    1164:	e2 55       	subi	r30, 0x52	; 82
    1166:	fe 4f       	sbci	r31, 0xFE	; 254
    1168:	80 81       	ld	r24, Z
    116a:	80 ff       	sbrs	r24, 0
    116c:	12 c0       	rjmp	.+36     	; 0x1192 <__vector_24+0xf4>
}

//low level functions

void TWI_start(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA)|(1<<TWIE);
    116e:	85 ea       	ldi	r24, 0xA5	; 165
    1170:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

		case write_register:
			if (twi_bufor[twi_buf_pos.tail].read)	//check if reading is required
			{
				TWI_start();
				twi_bufor[twi_buf_pos.tail].status = restart;
    1174:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    1178:	e6 95       	lsr	r30
    117a:	e6 95       	lsr	r30
    117c:	e6 95       	lsr	r30
    117e:	e7 70       	andi	r30, 0x07	; 7
    1180:	84 e1       	ldi	r24, 0x14	; 20
    1182:	e8 9f       	mul	r30, r24
    1184:	f0 01       	movw	r30, r0
    1186:	11 24       	eor	r1, r1
    1188:	e2 55       	subi	r30, 0x52	; 82
    118a:	fe 4f       	sbci	r31, 0xFE	; 254
    118c:	87 e0       	ldi	r24, 0x07	; 7
    118e:	83 8b       	std	Z+19, r24	; 0x13
    1190:	93 c1       	rjmp	.+806    	; 0x14b8 <__vector_24+0x41a>
			}
			else	//process writing
			{
				if (twi_bufor[twi_buf_pos.tail].lenght > 1){	//if more than 1 char to write
    1192:	84 e1       	ldi	r24, 0x14	; 20
    1194:	84 9f       	mul	r24, r20
    1196:	f0 01       	movw	r30, r0
    1198:	85 9f       	mul	r24, r21
    119a:	f0 0d       	add	r31, r0
    119c:	11 24       	eor	r1, r1
    119e:	e2 55       	subi	r30, 0x52	; 82
    11a0:	fe 4f       	sbci	r31, 0xFE	; 254
    11a2:	87 85       	ldd	r24, Z+15	; 0x0f
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	e8 f0       	brcs	.+58     	; 0x11e2 <__vector_24+0x144>
					TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
    11a8:	84 e1       	ldi	r24, 0x14	; 20
    11aa:	84 9f       	mul	r24, r20
    11ac:	f0 01       	movw	r30, r0
    11ae:	85 9f       	mul	r24, r21
    11b0:	f0 0d       	add	r31, r0
    11b2:	11 24       	eor	r1, r1
    11b4:	e2 55       	subi	r30, 0x52	; 82
    11b6:	fe 4f       	sbci	r31, 0xFE	; 254
    11b8:	92 81       	ldd	r25, Z+2	; 0x02
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    11ba:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    11be:	95 e8       	ldi	r25, 0x85	; 133
    11c0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			}
			else	//process writing
			{
				if (twi_bufor[twi_buf_pos.tail].lenght > 1){	//if more than 1 char to write
					TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
					twi_bufor[twi_buf_pos.tail].status = write;
    11c4:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    11c8:	e6 95       	lsr	r30
    11ca:	e6 95       	lsr	r30
    11cc:	e6 95       	lsr	r30
    11ce:	e7 70       	andi	r30, 0x07	; 7
    11d0:	8e 9f       	mul	r24, r30
    11d2:	f0 01       	movw	r30, r0
    11d4:	11 24       	eor	r1, r1
    11d6:	e2 55       	subi	r30, 0x52	; 82
    11d8:	fe 4f       	sbci	r31, 0xFE	; 254
    11da:	8b e0       	ldi	r24, 0x0B	; 11
    11dc:	83 8b       	std	Z+19, r24	; 0x13
					twi_bufor[twi_buf_pos.tail].buf_pos = 0;
    11de:	14 86       	std	Z+12, r1	; 0x0c
    11e0:	1b c0       	rjmp	.+54     	; 0x1218 <__vector_24+0x17a>
				}

				else {	//only 1 byte to send
					TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
    11e2:	84 e1       	ldi	r24, 0x14	; 20
    11e4:	84 9f       	mul	r24, r20
    11e6:	f0 01       	movw	r30, r0
    11e8:	85 9f       	mul	r24, r21
    11ea:	f0 0d       	add	r31, r0
    11ec:	11 24       	eor	r1, r1
    11ee:	e2 55       	subi	r30, 0x52	; 82
    11f0:	fe 4f       	sbci	r31, 0xFE	; 254
    11f2:	92 81       	ldd	r25, Z+2	; 0x02
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    11f4:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    11f8:	95 e8       	ldi	r25, 0x85	; 133
    11fa:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
					twi_bufor[twi_buf_pos.tail].buf_pos = 0;
				}

				else {	//only 1 byte to send
					TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
					twi_bufor[twi_buf_pos.tail].status = last_byte_write;
    11fe:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    1202:	e6 95       	lsr	r30
    1204:	e6 95       	lsr	r30
    1206:	e6 95       	lsr	r30
    1208:	e7 70       	andi	r30, 0x07	; 7
    120a:	8e 9f       	mul	r24, r30
    120c:	f0 01       	movw	r30, r0
    120e:	11 24       	eor	r1, r1
    1210:	e2 55       	subi	r30, 0x52	; 82
    1212:	fe 4f       	sbci	r31, 0xFE	; 254
    1214:	8c e0       	ldi	r24, 0x0C	; 12
    1216:	83 8b       	std	Z+19, r24	; 0x13
				}
				twi_bufor[twi_buf_pos.tail].lenght --;
    1218:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    121c:	e6 95       	lsr	r30
    121e:	e6 95       	lsr	r30
    1220:	e6 95       	lsr	r30
    1222:	e7 70       	andi	r30, 0x07	; 7
    1224:	84 e1       	ldi	r24, 0x14	; 20
    1226:	e8 9f       	mul	r30, r24
    1228:	f0 01       	movw	r30, r0
    122a:	11 24       	eor	r1, r1
    122c:	e2 55       	subi	r30, 0x52	; 82
    122e:	fe 4f       	sbci	r31, 0xFE	; 254
    1230:	87 85       	ldd	r24, Z+15	; 0x0f
    1232:	81 50       	subi	r24, 0x01	; 1
    1234:	87 87       	std	Z+15, r24	; 0x0f
    1236:	40 c1       	rjmp	.+640    	; 0x14b8 <__vector_24+0x41a>
			}
			break;

		case restart:
			SLA++;
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	82 0f       	add	r24, r18
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    123c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    1240:	85 e8       	ldi	r24, 0x85	; 133
    1242:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;

		case restart:
			SLA++;
			TWI_write(SLA);
			twi_bufor[twi_buf_pos.tail].status = set_to_read;
    1246:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    124a:	e6 95       	lsr	r30
    124c:	e6 95       	lsr	r30
    124e:	e6 95       	lsr	r30
    1250:	e7 70       	andi	r30, 0x07	; 7
    1252:	84 e1       	ldi	r24, 0x14	; 20
    1254:	e8 9f       	mul	r30, r24
    1256:	f0 01       	movw	r30, r0
    1258:	11 24       	eor	r1, r1
    125a:	e2 55       	subi	r30, 0x52	; 82
    125c:	fe 4f       	sbci	r31, 0xFE	; 254
    125e:	88 e0       	ldi	r24, 0x08	; 8
    1260:	83 8b       	std	Z+19, r24	; 0x13
			break;
    1262:	2a c1       	rjmp	.+596    	; 0x14b8 <__vector_24+0x41a>

		case set_to_read:
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){
    1264:	84 e1       	ldi	r24, 0x14	; 20
    1266:	84 9f       	mul	r24, r20
    1268:	f0 01       	movw	r30, r0
    126a:	85 9f       	mul	r24, r21
    126c:	f0 0d       	add	r31, r0
    126e:	11 24       	eor	r1, r1
    1270:	e2 55       	subi	r30, 0x52	; 82
    1272:	fe 4f       	sbci	r31, 0xFE	; 254
    1274:	87 85       	ldd	r24, Z+15	; 0x0f
    1276:	82 30       	cpi	r24, 0x02	; 2
    1278:	90 f0       	brcs	.+36     	; 0x129e <__vector_24+0x200>
	TWDR0 = bajt;
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
}

void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
    127a:	85 ec       	ldi	r24, 0xC5	; 197
    127c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;

		case set_to_read:
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){
				TWI_read(ACK);
				twi_bufor[twi_buf_pos.tail].status = read;
    1280:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    1284:	e6 95       	lsr	r30
    1286:	e6 95       	lsr	r30
    1288:	e6 95       	lsr	r30
    128a:	e7 70       	andi	r30, 0x07	; 7
    128c:	84 e1       	ldi	r24, 0x14	; 20
    128e:	e8 9f       	mul	r30, r24
    1290:	f0 01       	movw	r30, r0
    1292:	11 24       	eor	r1, r1
    1294:	e2 55       	subi	r30, 0x52	; 82
    1296:	fe 4f       	sbci	r31, 0xFE	; 254
    1298:	89 e0       	ldi	r24, 0x09	; 9
    129a:	83 8b       	std	Z+19, r24	; 0x13
    129c:	11 c0       	rjmp	.+34     	; 0x12c0 <__vector_24+0x222>
	TWDR0 = bajt;
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
}

void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
    129e:	85 e8       	ldi	r24, 0x85	; 133
    12a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

			}
			
			else{
				TWI_read(NACK);
				twi_bufor[twi_buf_pos.tail].status = stop_reading;
    12a4:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    12a8:	e6 95       	lsr	r30
    12aa:	e6 95       	lsr	r30
    12ac:	e6 95       	lsr	r30
    12ae:	e7 70       	andi	r30, 0x07	; 7
    12b0:	84 e1       	ldi	r24, 0x14	; 20
    12b2:	e8 9f       	mul	r30, r24
    12b4:	f0 01       	movw	r30, r0
    12b6:	11 24       	eor	r1, r1
    12b8:	e2 55       	subi	r30, 0x52	; 82
    12ba:	fe 4f       	sbci	r31, 0xFE	; 254
    12bc:	8a e0       	ldi	r24, 0x0A	; 10
    12be:	83 8b       	std	Z+19, r24	; 0x13
			}

			twi_bufor[twi_buf_pos.tail].lenght --;
    12c0:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    12c4:	e6 95       	lsr	r30
    12c6:	e6 95       	lsr	r30
    12c8:	e6 95       	lsr	r30
    12ca:	e7 70       	andi	r30, 0x07	; 7
    12cc:	84 e1       	ldi	r24, 0x14	; 20
    12ce:	e8 9f       	mul	r30, r24
    12d0:	f0 01       	movw	r30, r0
    12d2:	11 24       	eor	r1, r1
    12d4:	e2 55       	subi	r30, 0x52	; 82
    12d6:	fe 4f       	sbci	r31, 0xFE	; 254
    12d8:	87 85       	ldd	r24, Z+15	; 0x0f
    12da:	81 50       	subi	r24, 0x01	; 1
    12dc:	87 87       	std	Z+15, r24	; 0x0f
			break;
    12de:	ec c0       	rjmp	.+472    	; 0x14b8 <__vector_24+0x41a>

		case read:
			*twi_bufor[twi_buf_pos.tail].bufor_ref++ = TWDR0;	//read received byte
    12e0:	84 e1       	ldi	r24, 0x14	; 20
    12e2:	84 9f       	mul	r24, r20
    12e4:	f0 01       	movw	r30, r0
    12e6:	85 9f       	mul	r24, r21
    12e8:	f0 0d       	add	r31, r0
    12ea:	11 24       	eor	r1, r1
    12ec:	e2 55       	subi	r30, 0x52	; 82
    12ee:	fe 4f       	sbci	r31, 0xFE	; 254
    12f0:	a5 85       	ldd	r26, Z+13	; 0x0d
    12f2:	b6 85       	ldd	r27, Z+14	; 0x0e
    12f4:	9d 01       	movw	r18, r26
    12f6:	2f 5f       	subi	r18, 0xFF	; 255
    12f8:	3f 4f       	sbci	r19, 0xFF	; 255
    12fa:	36 87       	std	Z+14, r19	; 0x0e
    12fc:	25 87       	std	Z+13, r18	; 0x0d
    12fe:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1302:	9c 93       	st	X, r25
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){
    1304:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    1308:	e6 95       	lsr	r30
    130a:	e6 95       	lsr	r30
    130c:	e6 95       	lsr	r30
    130e:	e7 70       	andi	r30, 0x07	; 7
    1310:	8e 9f       	mul	r24, r30
    1312:	f0 01       	movw	r30, r0
    1314:	11 24       	eor	r1, r1
    1316:	e2 55       	subi	r30, 0x52	; 82
    1318:	fe 4f       	sbci	r31, 0xFE	; 254
    131a:	87 85       	ldd	r24, Z+15	; 0x0f
    131c:	82 30       	cpi	r24, 0x02	; 2
    131e:	90 f0       	brcs	.+36     	; 0x1344 <__vector_24+0x2a6>
	TWDR0 = bajt;
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
}

void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
    1320:	85 ec       	ldi	r24, 0xC5	; 197
    1322:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

		case read:
			*twi_bufor[twi_buf_pos.tail].bufor_ref++ = TWDR0;	//read received byte
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){
				TWI_read(ACK);	//going to read more
				twi_bufor[twi_buf_pos.tail].status = read;
    1326:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    132a:	e6 95       	lsr	r30
    132c:	e6 95       	lsr	r30
    132e:	e6 95       	lsr	r30
    1330:	e7 70       	andi	r30, 0x07	; 7
    1332:	84 e1       	ldi	r24, 0x14	; 20
    1334:	e8 9f       	mul	r30, r24
    1336:	f0 01       	movw	r30, r0
    1338:	11 24       	eor	r1, r1
    133a:	e2 55       	subi	r30, 0x52	; 82
    133c:	fe 4f       	sbci	r31, 0xFE	; 254
    133e:	89 e0       	ldi	r24, 0x09	; 9
    1340:	83 8b       	std	Z+19, r24	; 0x13
    1342:	11 c0       	rjmp	.+34     	; 0x1366 <__vector_24+0x2c8>
	TWDR0 = bajt;
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
}

void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
    1344:	85 e8       	ldi	r24, 0x85	; 133
    1346:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				TWI_read(ACK);	//going to read more
				twi_bufor[twi_buf_pos.tail].status = read;
			}
			else{
				TWI_read(NACK);	//finishing reading
				twi_bufor[twi_buf_pos.tail].status = stop_reading;
    134a:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    134e:	e6 95       	lsr	r30
    1350:	e6 95       	lsr	r30
    1352:	e6 95       	lsr	r30
    1354:	e7 70       	andi	r30, 0x07	; 7
    1356:	84 e1       	ldi	r24, 0x14	; 20
    1358:	e8 9f       	mul	r30, r24
    135a:	f0 01       	movw	r30, r0
    135c:	11 24       	eor	r1, r1
    135e:	e2 55       	subi	r30, 0x52	; 82
    1360:	fe 4f       	sbci	r31, 0xFE	; 254
    1362:	8a e0       	ldi	r24, 0x0A	; 10
    1364:	83 8b       	std	Z+19, r24	; 0x13
			}
			twi_bufor[twi_buf_pos.tail].lenght --;
    1366:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    136a:	e6 95       	lsr	r30
    136c:	e6 95       	lsr	r30
    136e:	e6 95       	lsr	r30
    1370:	e7 70       	andi	r30, 0x07	; 7
    1372:	84 e1       	ldi	r24, 0x14	; 20
    1374:	e8 9f       	mul	r30, r24
    1376:	f0 01       	movw	r30, r0
    1378:	11 24       	eor	r1, r1
    137a:	e2 55       	subi	r30, 0x52	; 82
    137c:	fe 4f       	sbci	r31, 0xFE	; 254
    137e:	87 85       	ldd	r24, Z+15	; 0x0f
    1380:	81 50       	subi	r24, 0x01	; 1
    1382:	87 87       	std	Z+15, r24	; 0x0f
			break;
    1384:	99 c0       	rjmp	.+306    	; 0x14b8 <__vector_24+0x41a>

		case stop_reading:
			*twi_bufor[twi_buf_pos.tail].bufor_ref++ = TWDR0;	//read last received byte
    1386:	84 e1       	ldi	r24, 0x14	; 20
    1388:	84 9f       	mul	r24, r20
    138a:	f0 01       	movw	r30, r0
    138c:	85 9f       	mul	r24, r21
    138e:	f0 0d       	add	r31, r0
    1390:	11 24       	eor	r1, r1
    1392:	e2 55       	subi	r30, 0x52	; 82
    1394:	fe 4f       	sbci	r31, 0xFE	; 254
    1396:	a5 85       	ldd	r26, Z+13	; 0x0d
    1398:	b6 85       	ldd	r27, Z+14	; 0x0e
    139a:	9d 01       	movw	r18, r26
    139c:	2f 5f       	subi	r18, 0xFF	; 255
    139e:	3f 4f       	sbci	r19, 0xFF	; 255
    13a0:	36 87       	std	Z+14, r19	; 0x0e
    13a2:	25 87       	std	Z+13, r18	; 0x0d
    13a4:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    13a8:	9c 93       	st	X, r25
			*twi_bufor[twi_buf_pos.tail].flag_register = twi_bufor[twi_buf_pos.tail].flag_mask;	//set read done flag
    13aa:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    13ae:	e6 95       	lsr	r30
    13b0:	e6 95       	lsr	r30
    13b2:	e6 95       	lsr	r30
    13b4:	e7 70       	andi	r30, 0x07	; 7
    13b6:	8e 9f       	mul	r24, r30
    13b8:	f0 01       	movw	r30, r0
    13ba:	11 24       	eor	r1, r1
    13bc:	e2 55       	subi	r30, 0x52	; 82
    13be:	fe 4f       	sbci	r31, 0xFE	; 254
    13c0:	a0 89       	ldd	r26, Z+16	; 0x10
    13c2:	b1 89       	ldd	r27, Z+17	; 0x11
    13c4:	92 89       	ldd	r25, Z+18	; 0x12
    13c6:	9c 93       	st	X, r25
void TWI_start(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA)|(1<<TWIE);
}

void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
    13c8:	95 e9       	ldi	r25, 0x95	; 149
    13ca:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

		case stop_reading:
			*twi_bufor[twi_buf_pos.tail].bufor_ref++ = TWDR0;	//read last received byte
			*twi_bufor[twi_buf_pos.tail].flag_register = twi_bufor[twi_buf_pos.tail].flag_mask;	//set read done flag
			TWI_stop();
			twi_bufor[twi_buf_pos.tail].status = done;
    13ce:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    13d2:	e6 95       	lsr	r30
    13d4:	e6 95       	lsr	r30
    13d6:	e6 95       	lsr	r30
    13d8:	e7 70       	andi	r30, 0x07	; 7
    13da:	8e 9f       	mul	r24, r30
    13dc:	f0 01       	movw	r30, r0
    13de:	11 24       	eor	r1, r1
    13e0:	e2 55       	subi	r30, 0x52	; 82
    13e2:	fe 4f       	sbci	r31, 0xFE	; 254
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	83 8b       	std	Z+19, r24	; 0x13
			break;
    13e8:	67 c0       	rjmp	.+206    	; 0x14b8 <__vector_24+0x41a>

		case write:
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){	//if more than 1 char to write
    13ea:	84 e1       	ldi	r24, 0x14	; 20
    13ec:	84 9f       	mul	r24, r20
    13ee:	f0 01       	movw	r30, r0
    13f0:	85 9f       	mul	r24, r21
    13f2:	f0 0d       	add	r31, r0
    13f4:	11 24       	eor	r1, r1
    13f6:	e2 55       	subi	r30, 0x52	; 82
    13f8:	fe 4f       	sbci	r31, 0xFE	; 254
    13fa:	87 85       	ldd	r24, Z+15	; 0x0f
    13fc:	82 30       	cpi	r24, 0x02	; 2
    13fe:	e8 f0       	brcs	.+58     	; 0x143a <__vector_24+0x39c>
				TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
    1400:	84 e1       	ldi	r24, 0x14	; 20
    1402:	84 9f       	mul	r24, r20
    1404:	f0 01       	movw	r30, r0
    1406:	85 9f       	mul	r24, r21
    1408:	f0 0d       	add	r31, r0
    140a:	11 24       	eor	r1, r1
    140c:	e2 55       	subi	r30, 0x52	; 82
    140e:	fe 4f       	sbci	r31, 0xFE	; 254
    1410:	92 81       	ldd	r25, Z+2	; 0x02
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    1412:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    1416:	95 e8       	ldi	r25, 0x85	; 133
    1418:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;

		case write:
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){	//if more than 1 char to write
				TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
				twi_bufor[twi_buf_pos.tail].status = write;
    141c:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    1420:	e6 95       	lsr	r30
    1422:	e6 95       	lsr	r30
    1424:	e6 95       	lsr	r30
    1426:	e7 70       	andi	r30, 0x07	; 7
    1428:	8e 9f       	mul	r24, r30
    142a:	f0 01       	movw	r30, r0
    142c:	11 24       	eor	r1, r1
    142e:	e2 55       	subi	r30, 0x52	; 82
    1430:	fe 4f       	sbci	r31, 0xFE	; 254
    1432:	8b e0       	ldi	r24, 0x0B	; 11
    1434:	83 8b       	std	Z+19, r24	; 0x13
				twi_bufor[twi_buf_pos.tail].buf_pos = 0;
    1436:	14 86       	std	Z+12, r1	; 0x0c
    1438:	1b c0       	rjmp	.+54     	; 0x1470 <__vector_24+0x3d2>
			}

			else {	//only 1 byte to send
				TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
    143a:	84 e1       	ldi	r24, 0x14	; 20
    143c:	84 9f       	mul	r24, r20
    143e:	f0 01       	movw	r30, r0
    1440:	85 9f       	mul	r24, r21
    1442:	f0 0d       	add	r31, r0
    1444:	11 24       	eor	r1, r1
    1446:	e2 55       	subi	r30, 0x52	; 82
    1448:	fe 4f       	sbci	r31, 0xFE	; 254
    144a:	92 81       	ldd	r25, Z+2	; 0x02
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    144c:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    1450:	95 e8       	ldi	r25, 0x85	; 133
    1452:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				twi_bufor[twi_buf_pos.tail].buf_pos = 0;
			}

			else {	//only 1 byte to send
				TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
				twi_bufor[twi_buf_pos.tail].status = last_byte_write;
    1456:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    145a:	e6 95       	lsr	r30
    145c:	e6 95       	lsr	r30
    145e:	e6 95       	lsr	r30
    1460:	e7 70       	andi	r30, 0x07	; 7
    1462:	8e 9f       	mul	r24, r30
    1464:	f0 01       	movw	r30, r0
    1466:	11 24       	eor	r1, r1
    1468:	e2 55       	subi	r30, 0x52	; 82
    146a:	fe 4f       	sbci	r31, 0xFE	; 254
    146c:	8c e0       	ldi	r24, 0x0C	; 12
    146e:	83 8b       	std	Z+19, r24	; 0x13
			}
			twi_bufor[twi_buf_pos.tail].lenght --;
    1470:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    1474:	e6 95       	lsr	r30
    1476:	e6 95       	lsr	r30
    1478:	e6 95       	lsr	r30
    147a:	e7 70       	andi	r30, 0x07	; 7
    147c:	84 e1       	ldi	r24, 0x14	; 20
    147e:	e8 9f       	mul	r30, r24
    1480:	f0 01       	movw	r30, r0
    1482:	11 24       	eor	r1, r1
    1484:	e2 55       	subi	r30, 0x52	; 82
    1486:	fe 4f       	sbci	r31, 0xFE	; 254
    1488:	87 85       	ldd	r24, Z+15	; 0x0f
    148a:	81 50       	subi	r24, 0x01	; 1
    148c:	87 87       	std	Z+15, r24	; 0x0f
			break;
    148e:	14 c0       	rjmp	.+40     	; 0x14b8 <__vector_24+0x41a>
void TWI_start(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA)|(1<<TWIE);
}

void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
    1490:	85 e9       	ldi	r24, 0x95	; 149
    1492:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			twi_bufor[twi_buf_pos.tail].lenght --;
			break;

		case last_byte_write:
			TWI_stop();
			twi_bufor[twi_buf_pos.tail].status = done;
    1496:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    149a:	e6 95       	lsr	r30
    149c:	e6 95       	lsr	r30
    149e:	e6 95       	lsr	r30
    14a0:	e7 70       	andi	r30, 0x07	; 7
    14a2:	84 e1       	ldi	r24, 0x14	; 20
    14a4:	e8 9f       	mul	r30, r24
    14a6:	f0 01       	movw	r30, r0
    14a8:	11 24       	eor	r1, r1
    14aa:	e2 55       	subi	r30, 0x52	; 82
    14ac:	fe 4f       	sbci	r31, 0xFE	; 254
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	83 8b       	std	Z+19, r24	; 0x13
			twi_reset_counter = 0xFF;	//turn of timer, sending procedure finished correctly
    14b2:	8f ef       	ldi	r24, 0xFF	; 255
    14b4:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <twi_reset_counter>

		default:

			break;
	}
    14b8:	ff 91       	pop	r31
    14ba:	ef 91       	pop	r30
    14bc:	bf 91       	pop	r27
    14be:	af 91       	pop	r26
    14c0:	9f 91       	pop	r25
    14c2:	8f 91       	pop	r24
    14c4:	5f 91       	pop	r21
    14c6:	4f 91       	pop	r20
    14c8:	3f 91       	pop	r19
    14ca:	2f 91       	pop	r18
    14cc:	0f 90       	pop	r0
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	0f 90       	pop	r0
    14d2:	1f 90       	pop	r1
    14d4:	18 95       	reti

000014d6 <InitUartCOM>:
void SendStringUint(char string[], uint16_t number)
{
	SendString(string);
	SendUint(number);
	SendEnter();
}
    14d6:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <InitUartCOM_HW>
    14da:	08 95       	ret

000014dc <ReceiveChar>:
    14dc:	88 23       	and	r24, r24
    14de:	91 f0       	breq	.+36     	; 0x1504 <ReceiveChar+0x28>
    14e0:	8a 30       	cpi	r24, 0x0A	; 10
    14e2:	81 f0       	breq	.+32     	; 0x1504 <ReceiveChar+0x28>
    14e4:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <RxHead>
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	e2 5b       	subi	r30, 0xB2	; 178
    14ec:	fd 4f       	sbci	r31, 0xFD	; 253
    14ee:	80 83       	st	Z, r24
    14f0:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <RxHead>
    14f4:	8f 5f       	subi	r24, 0xFF	; 255
    14f6:	8f 71       	andi	r24, 0x1F	; 31
    14f8:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <RxHead>
    14fc:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <RxHead>
    1500:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <RxTail>
    1504:	08 95       	ret

00001506 <SendString>:
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	cf 93       	push	r28
    150c:	fc 01       	movw	r30, r24
    150e:	80 81       	ld	r24, Z
    1510:	88 23       	and	r24, r24
    1512:	59 f0       	breq	.+22     	; 0x152a <SendString+0x24>
    1514:	8f 01       	movw	r16, r30
    1516:	c0 e0       	ldi	r28, 0x00	; 0
    1518:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <PutCharToBuffor>
    151c:	cf 5f       	subi	r28, 0xFF	; 255
    151e:	f8 01       	movw	r30, r16
    1520:	ec 0f       	add	r30, r28
    1522:	f1 1d       	adc	r31, r1
    1524:	80 81       	ld	r24, Z
    1526:	81 11       	cpse	r24, r1
    1528:	f7 cf       	rjmp	.-18     	; 0x1518 <SendString+0x12>
    152a:	cf 91       	pop	r28
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	08 95       	ret

00001532 <SendEnter>:
    1532:	8d e0       	ldi	r24, 0x0D	; 13
    1534:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <PutCharToBuffor>
    1538:	8a e0       	ldi	r24, 0x0A	; 10
    153a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <PutCharToBuffor>
    153e:	08 95       	ret

00001540 <SendLine>:
    1540:	0e 94 83 0a 	call	0x1506	; 0x1506 <SendString>
    1544:	0e 94 99 0a 	call	0x1532	; 0x1532 <SendEnter>
    1548:	08 95       	ret

0000154a <SendInt>:
    154a:	4f 92       	push	r4
    154c:	5f 92       	push	r5
    154e:	6f 92       	push	r6
    1550:	7f 92       	push	r7
    1552:	8f 92       	push	r8
    1554:	9f 92       	push	r9
    1556:	af 92       	push	r10
    1558:	bf 92       	push	r11
    155a:	cf 92       	push	r12
    155c:	df 92       	push	r13
    155e:	ef 92       	push	r14
    1560:	ff 92       	push	r15
    1562:	0f 93       	push	r16
    1564:	1f 93       	push	r17
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
    156e:	a8 97       	sbiw	r28, 0x28	; 40
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	de bf       	out	0x3e, r29	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	cd bf       	out	0x3d, r28	; 61
    157a:	6b 01       	movw	r12, r22
    157c:	7c 01       	movw	r14, r24
    157e:	fe 01       	movw	r30, r28
    1580:	75 96       	adiw	r30, 0x15	; 21
    1582:	8e 01       	movw	r16, r28
    1584:	0f 5f       	subi	r16, 0xFF	; 255
    1586:	1f 4f       	sbci	r17, 0xFF	; 255
    1588:	ce 01       	movw	r24, r28
    158a:	4d 96       	adiw	r24, 0x1d	; 29
    158c:	d8 01       	movw	r26, r16
    158e:	11 92       	st	Z+, r1
    1590:	1d 92       	st	X+, r1
    1592:	e8 17       	cp	r30, r24
    1594:	f9 07       	cpc	r31, r25
    1596:	d9 f7       	brne	.-10     	; 0x158e <SendInt+0x44>
    1598:	ff 20       	and	r15, r15
    159a:	0c f0       	brlt	.+2      	; 0x159e <SendInt+0x54>
    159c:	5d c0       	rjmp	.+186    	; 0x1658 <SendInt+0x10e>
    159e:	81 c0       	rjmp	.+258    	; 0x16a2 <SendInt+0x158>
    15a0:	5e 01       	movw	r10, r28
    15a2:	26 e1       	ldi	r18, 0x16	; 22
    15a4:	a2 0e       	add	r10, r18
    15a6:	b1 1c       	adc	r11, r1
    15a8:	99 24       	eor	r9, r9
    15aa:	93 94       	inc	r9
    15ac:	0f 2e       	mov	r0, r31
    15ae:	fa e0       	ldi	r31, 0x0A	; 10
    15b0:	4f 2e       	mov	r4, r31
    15b2:	51 2c       	mov	r5, r1
    15b4:	61 2c       	mov	r6, r1
    15b6:	71 2c       	mov	r7, r1
    15b8:	f0 2d       	mov	r31, r0
    15ba:	01 c0       	rjmp	.+2      	; 0x15be <SendInt+0x74>
    15bc:	98 2e       	mov	r9, r24
    15be:	c7 01       	movw	r24, r14
    15c0:	b6 01       	movw	r22, r12
    15c2:	a3 01       	movw	r20, r6
    15c4:	92 01       	movw	r18, r4
    15c6:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__divmodsi4>
    15ca:	20 e3       	ldi	r18, 0x30	; 48
    15cc:	26 0f       	add	r18, r22
    15ce:	d5 01       	movw	r26, r10
    15d0:	2d 93       	st	X+, r18
    15d2:	5d 01       	movw	r10, r26
    15d4:	a7 01       	movw	r20, r14
    15d6:	96 01       	movw	r18, r12
    15d8:	26 1b       	sub	r18, r22
    15da:	37 0b       	sbc	r19, r23
    15dc:	48 0b       	sbc	r20, r24
    15de:	59 0b       	sbc	r21, r25
    15e0:	ca 01       	movw	r24, r20
    15e2:	b9 01       	movw	r22, r18
    15e4:	a3 01       	movw	r20, r6
    15e6:	92 01       	movw	r18, r4
    15e8:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__divmodsi4>
    15ec:	69 01       	movw	r12, r18
    15ee:	7a 01       	movw	r14, r20
    15f0:	23 2b       	or	r18, r19
    15f2:	24 2b       	or	r18, r20
    15f4:	25 2b       	or	r18, r21
    15f6:	21 f0       	breq	.+8      	; 0x1600 <SendInt+0xb6>
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	89 0d       	add	r24, r9
    15fc:	84 31       	cpi	r24, 0x14	; 20
    15fe:	f1 f6       	brne	.-68     	; 0x15bc <SendInt+0x72>
    1600:	21 e0       	ldi	r18, 0x01	; 1
    1602:	29 0d       	add	r18, r9
    1604:	88 20       	and	r8, r8
    1606:	54 f4       	brge	.+20     	; 0x161c <SendInt+0xd2>
    1608:	02 c0       	rjmp	.+4      	; 0x160e <SendInt+0xc4>
    160a:	21 e0       	ldi	r18, 0x01	; 1
    160c:	91 2c       	mov	r9, r1
    160e:	fe 01       	movw	r30, r28
    1610:	e2 0f       	add	r30, r18
    1612:	f1 1d       	adc	r31, r1
    1614:	8d e2       	ldi	r24, 0x2D	; 45
    1616:	85 8b       	std	Z+21, r24	; 0x15
    1618:	22 e0       	ldi	r18, 0x02	; 2
    161a:	29 0d       	add	r18, r9
    161c:	21 11       	cpse	r18, r1
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <SendInt+0xda>
    1620:	0f c0       	rjmp	.+30     	; 0x1640 <SendInt+0xf6>
    1622:	21 e0       	ldi	r18, 0x01	; 1
    1624:	e5 e1       	ldi	r30, 0x15	; 21
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	ec 0f       	add	r30, r28
    162a:	fd 1f       	adc	r31, r29
    162c:	e2 0f       	add	r30, r18
    162e:	f1 1d       	adc	r31, r1
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	92 91       	ld	r25, -Z
    1634:	d8 01       	movw	r26, r16
    1636:	9d 93       	st	X+, r25
    1638:	8d 01       	movw	r16, r26
    163a:	8f 5f       	subi	r24, 0xFF	; 255
    163c:	82 17       	cp	r24, r18
    163e:	c8 f3       	brcs	.-14     	; 0x1632 <SendInt+0xe8>
    1640:	e1 e0       	ldi	r30, 0x01	; 1
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	ec 0f       	add	r30, r28
    1646:	fd 1f       	adc	r31, r29
    1648:	e2 0f       	add	r30, r18
    164a:	f1 1d       	adc	r31, r1
    164c:	10 82       	st	Z, r1
    164e:	ce 01       	movw	r24, r28
    1650:	01 96       	adiw	r24, 0x01	; 1
    1652:	0e 94 83 0a 	call	0x1506	; 0x1506 <SendString>
    1656:	53 c0       	rjmp	.+166    	; 0x16fe <SendInt+0x1b4>
    1658:	0f 2e       	mov	r0, r31
    165a:	fa e0       	ldi	r31, 0x0A	; 10
    165c:	8f 2e       	mov	r8, r31
    165e:	91 2c       	mov	r9, r1
    1660:	a1 2c       	mov	r10, r1
    1662:	b1 2c       	mov	r11, r1
    1664:	f0 2d       	mov	r31, r0
    1666:	c7 01       	movw	r24, r14
    1668:	b6 01       	movw	r22, r12
    166a:	a5 01       	movw	r20, r10
    166c:	94 01       	movw	r18, r8
    166e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__divmodsi4>
    1672:	20 e3       	ldi	r18, 0x30	; 48
    1674:	26 0f       	add	r18, r22
    1676:	2d 8b       	std	Y+21, r18	; 0x15
    1678:	a7 01       	movw	r20, r14
    167a:	96 01       	movw	r18, r12
    167c:	26 1b       	sub	r18, r22
    167e:	37 0b       	sbc	r19, r23
    1680:	48 0b       	sbc	r20, r24
    1682:	59 0b       	sbc	r21, r25
    1684:	ca 01       	movw	r24, r20
    1686:	b9 01       	movw	r22, r18
    1688:	a5 01       	movw	r20, r10
    168a:	94 01       	movw	r18, r8
    168c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__divmodsi4>
    1690:	69 01       	movw	r12, r18
    1692:	7a 01       	movw	r14, r20
    1694:	23 2b       	or	r18, r19
    1696:	24 2b       	or	r18, r20
    1698:	25 2b       	or	r18, r21
    169a:	19 f2       	breq	.-122    	; 0x1622 <SendInt+0xd8>
    169c:	88 24       	eor	r8, r8
    169e:	83 94       	inc	r8
    16a0:	7f cf       	rjmp	.-258    	; 0x15a0 <SendInt+0x56>
    16a2:	f0 94       	com	r15
    16a4:	e0 94       	com	r14
    16a6:	d0 94       	com	r13
    16a8:	c0 94       	com	r12
    16aa:	c1 1c       	adc	r12, r1
    16ac:	d1 1c       	adc	r13, r1
    16ae:	e1 1c       	adc	r14, r1
    16b0:	f1 1c       	adc	r15, r1
    16b2:	0f 2e       	mov	r0, r31
    16b4:	fa e0       	ldi	r31, 0x0A	; 10
    16b6:	8f 2e       	mov	r8, r31
    16b8:	91 2c       	mov	r9, r1
    16ba:	a1 2c       	mov	r10, r1
    16bc:	b1 2c       	mov	r11, r1
    16be:	f0 2d       	mov	r31, r0
    16c0:	c7 01       	movw	r24, r14
    16c2:	b6 01       	movw	r22, r12
    16c4:	a5 01       	movw	r20, r10
    16c6:	94 01       	movw	r18, r8
    16c8:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__divmodsi4>
    16cc:	20 e3       	ldi	r18, 0x30	; 48
    16ce:	26 0f       	add	r18, r22
    16d0:	2d 8b       	std	Y+21, r18	; 0x15
    16d2:	a7 01       	movw	r20, r14
    16d4:	96 01       	movw	r18, r12
    16d6:	26 1b       	sub	r18, r22
    16d8:	37 0b       	sbc	r19, r23
    16da:	48 0b       	sbc	r20, r24
    16dc:	59 0b       	sbc	r21, r25
    16de:	ca 01       	movw	r24, r20
    16e0:	b9 01       	movw	r22, r18
    16e2:	a5 01       	movw	r20, r10
    16e4:	94 01       	movw	r18, r8
    16e6:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__divmodsi4>
    16ea:	69 01       	movw	r12, r18
    16ec:	7a 01       	movw	r14, r20
    16ee:	23 2b       	or	r18, r19
    16f0:	24 2b       	or	r18, r20
    16f2:	25 2b       	or	r18, r21
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <SendInt+0x1ae>
    16f6:	89 cf       	rjmp	.-238    	; 0x160a <SendInt+0xc0>
    16f8:	88 24       	eor	r8, r8
    16fa:	8a 94       	dec	r8
    16fc:	51 cf       	rjmp	.-350    	; 0x15a0 <SendInt+0x56>
    16fe:	a8 96       	adiw	r28, 0x28	; 40
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	f8 94       	cli
    1704:	de bf       	out	0x3e, r29	; 62
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	cd bf       	out	0x3d, r28	; 61
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	1f 91       	pop	r17
    1710:	0f 91       	pop	r16
    1712:	ff 90       	pop	r15
    1714:	ef 90       	pop	r14
    1716:	df 90       	pop	r13
    1718:	cf 90       	pop	r12
    171a:	bf 90       	pop	r11
    171c:	af 90       	pop	r10
    171e:	9f 90       	pop	r9
    1720:	8f 90       	pop	r8
    1722:	7f 90       	pop	r7
    1724:	6f 90       	pop	r6
    1726:	5f 90       	pop	r5
    1728:	4f 90       	pop	r4
    172a:	08 95       	ret

0000172c <SendStringInt>:
    172c:	cf 92       	push	r12
    172e:	df 92       	push	r13
    1730:	ef 92       	push	r14
    1732:	ff 92       	push	r15
    1734:	6a 01       	movw	r12, r20
    1736:	7b 01       	movw	r14, r22
    1738:	0e 94 83 0a 	call	0x1506	; 0x1506 <SendString>
    173c:	c7 01       	movw	r24, r14
    173e:	b6 01       	movw	r22, r12
    1740:	0e 94 a5 0a 	call	0x154a	; 0x154a <SendInt>
    1744:	0e 94 99 0a 	call	0x1532	; 0x1532 <SendEnter>
    1748:	ff 90       	pop	r15
    174a:	ef 90       	pop	r14
    174c:	df 90       	pop	r13
    174e:	cf 90       	pop	r12
    1750:	08 95       	ret

00001752 <CheckRxBuffor>:
		string[pozycja] = 0;
		SendString(string);
}

void CheckRxBuffor(void)
{
    1752:	cf 93       	push	r28
	if (RxHead != RxTail)	//Check if buffer is not empty
    1754:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <RxHead>
    1758:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <RxTail>
    175c:	98 17       	cp	r25, r24
    175e:	29 f1       	breq	.+74     	; 0x17aa <CheckRxBuffor+0x58>
	{
		uint8_t i = RxTail;
    1760:	c0 91 55 01 	lds	r28, 0x0155	; 0x800155 <RxTail>

		while(i != RxHead)	//search for end of line
    1764:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <RxHead>
    1768:	c8 17       	cp	r28, r24
    176a:	f9 f0       	breq	.+62     	; 0x17aa <CheckRxBuffor+0x58>
		{
			//If end of line process Command
			
			if (RxBuffor[i] == 13)
    176c:	ec 2f       	mov	r30, r28
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	e2 5b       	subi	r30, 0xB2	; 178
    1772:	fd 4f       	sbci	r31, 0xFD	; 253
    1774:	80 81       	ld	r24, Z
    1776:	8d 30       	cpi	r24, 0x0D	; 13
    1778:	91 f4       	brne	.+36     	; 0x179e <CheckRxBuffor+0x4c>
    177a:	07 c0       	rjmp	.+14     	; 0x178a <CheckRxBuffor+0x38>
    177c:	ec 2f       	mov	r30, r28
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	e2 5b       	subi	r30, 0xB2	; 178
    1782:	fd 4f       	sbci	r31, 0xFD	; 253
    1784:	80 81       	ld	r24, Z
    1786:	8d 30       	cpi	r24, 0x0D	; 13
    1788:	51 f4       	brne	.+20     	; 0x179e <CheckRxBuffor+0x4c>
			{
				ProcessString(RxTail, i);
    178a:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <RxTail>
    178e:	6c 2f       	mov	r22, r28
    1790:	0e 94 b7 07 	call	0xf6e	; 0xf6e <ProcessString>
				i = (i+1) & RX_SIZE_BIN;
    1794:	cf 5f       	subi	r28, 0xFF	; 255
    1796:	cf 71       	andi	r28, 0x1F	; 31
				RxTail = i;
    1798:	c0 93 55 01 	sts	0x0155, r28	; 0x800155 <RxTail>
				break;
    179c:	06 c0       	rjmp	.+12     	; 0x17aa <CheckRxBuffor+0x58>
			}

			i = (i+1) & RX_SIZE_BIN;
    179e:	cf 5f       	subi	r28, 0xFF	; 255
    17a0:	cf 71       	andi	r28, 0x1F	; 31
{
	if (RxHead != RxTail)	//Check if buffer is not empty
	{
		uint8_t i = RxTail;

		while(i != RxHead)	//search for end of line
    17a2:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <RxHead>
    17a6:	8c 13       	cpse	r24, r28
    17a8:	e9 cf       	rjmp	.-46     	; 0x177c <CheckRxBuffor+0x2a>
			}

			i = (i+1) & RX_SIZE_BIN;
		}
	}
    17aa:	cf 91       	pop	r28
    17ac:	08 95       	ret

000017ae <InitUartCOM_HW>:


	UBRR0 = 9;	//100k at 16MHz clock

	//Init COM Uart
	UCSR0B = (1<<RXEN0) | (1<<RXCIE0) |
    17ae:	83 e0       	ldi	r24, 0x03	; 3
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    17b6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    17ba:	88 ed       	ldi	r24, 0xD8	; 216
    17bc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    17c0:	08 95       	ret

000017c2 <PutCharToBuffor>:
}


void PutCharToBuffor(uint8_t x)
{
	if ((UCSR0A & (1<<UDRE0)) && (TxHead == TxTail))	//check if can put next char
    17c2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    17c6:	95 ff       	sbrs	r25, 5
    17c8:	09 c0       	rjmp	.+18     	; 0x17dc <PutCharToBuffor+0x1a>
    17ca:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <TxHead>
    17ce:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <TxTail>
    17d2:	29 13       	cpse	r18, r25
    17d4:	03 c0       	rjmp	.+6      	; 0x17dc <PutCharToBuffor+0x1a>
	{
		UDR0 = x;		
    17d6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    17da:	08 95       	ret
	}
	else	//if not ready put char to sending queue
	{
		TxBuffor[TxHead] = x;
    17dc:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <TxHead>
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	e2 59       	subi	r30, 0x92	; 146
    17e4:	fd 4f       	sbci	r31, 0xFD	; 253
    17e6:	80 83       	st	Z, r24
		TxHead = (TxHead+1) & TX_SIZE_BIN;
    17e8:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <TxHead>
    17ec:	8f 5f       	subi	r24, 0xFF	; 255
    17ee:	8f 77       	andi	r24, 0x7F	; 127
    17f0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <TxHead>
    17f4:	08 95       	ret

000017f6 <__vector_20>:
	}
}


ISR (USART0_TX_vect)
{
    17f6:	1f 92       	push	r1
    17f8:	0f 92       	push	r0
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	0f 92       	push	r0
    17fe:	11 24       	eor	r1, r1
    1800:	8f 93       	push	r24
    1802:	9f 93       	push	r25
    1804:	ef 93       	push	r30
    1806:	ff 93       	push	r31
	if (TxTail == TxHead)
    1808:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <TxTail>
    180c:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <TxHead>
    1810:	98 13       	cpse	r25, r24
    1812:	03 c0       	rjmp	.+6      	; 0x181a <__vector_20+0x24>
	{
		uint8_t x = UDR0;
    1814:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1818:	0e c0       	rjmp	.+28     	; 0x1836 <__vector_20+0x40>
	}

	else
	{
		UDR0 = TxBuffor[TxTail];
    181a:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <TxTail>
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	e2 59       	subi	r30, 0x92	; 146
    1822:	fd 4f       	sbci	r31, 0xFD	; 253
    1824:	80 81       	ld	r24, Z
    1826:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		TxTail = (TxTail+1) & TX_SIZE_BIN;
    182a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <TxTail>
    182e:	8f 5f       	subi	r24, 0xFF	; 255
    1830:	8f 77       	andi	r24, 0x7F	; 127
    1832:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <TxTail>
	}
}
    1836:	ff 91       	pop	r31
    1838:	ef 91       	pop	r30
    183a:	9f 91       	pop	r25
    183c:	8f 91       	pop	r24
    183e:	0f 90       	pop	r0
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	0f 90       	pop	r0
    1844:	1f 90       	pop	r1
    1846:	18 95       	reti

00001848 <__vector_18>:

ISR (USART0_RX_vect)	//COM Rx
{
    1848:	1f 92       	push	r1
    184a:	0f 92       	push	r0
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	0f 92       	push	r0
    1850:	11 24       	eor	r1, r1
    1852:	2f 93       	push	r18
    1854:	3f 93       	push	r19
    1856:	4f 93       	push	r20
    1858:	5f 93       	push	r21
    185a:	6f 93       	push	r22
    185c:	7f 93       	push	r23
    185e:	8f 93       	push	r24
    1860:	9f 93       	push	r25
    1862:	af 93       	push	r26
    1864:	bf 93       	push	r27
    1866:	ef 93       	push	r30
    1868:	ff 93       	push	r31
// 	uint8_t x = UDR0;
// 	ReceiveChar(x);
// 	PutCharToBuffor(x);
	ReceiveChar(UDR0);
    186a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    186e:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <ReceiveChar>
    1872:	ff 91       	pop	r31
    1874:	ef 91       	pop	r30
    1876:	bf 91       	pop	r27
    1878:	af 91       	pop	r26
    187a:	9f 91       	pop	r25
    187c:	8f 91       	pop	r24
    187e:	7f 91       	pop	r23
    1880:	6f 91       	pop	r22
    1882:	5f 91       	pop	r21
    1884:	4f 91       	pop	r20
    1886:	3f 91       	pop	r19
    1888:	2f 91       	pop	r18
    188a:	0f 90       	pop	r0
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	0f 90       	pop	r0
    1890:	1f 90       	pop	r1
    1892:	18 95       	reti

00001894 <__mulsi3>:
    1894:	db 01       	movw	r26, r22
    1896:	8f 93       	push	r24
    1898:	9f 93       	push	r25
    189a:	0e 94 8e 0c 	call	0x191c	; 0x191c <__muluhisi3>
    189e:	bf 91       	pop	r27
    18a0:	af 91       	pop	r26
    18a2:	a2 9f       	mul	r26, r18
    18a4:	80 0d       	add	r24, r0
    18a6:	91 1d       	adc	r25, r1
    18a8:	a3 9f       	mul	r26, r19
    18aa:	90 0d       	add	r25, r0
    18ac:	b2 9f       	mul	r27, r18
    18ae:	90 0d       	add	r25, r0
    18b0:	11 24       	eor	r1, r1
    18b2:	08 95       	ret

000018b4 <__divmodsi4>:
    18b4:	05 2e       	mov	r0, r21
    18b6:	97 fb       	bst	r25, 7
    18b8:	1e f4       	brtc	.+6      	; 0x18c0 <__divmodsi4+0xc>
    18ba:	00 94       	com	r0
    18bc:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__negsi2>
    18c0:	57 fd       	sbrc	r21, 7
    18c2:	07 d0       	rcall	.+14     	; 0x18d2 <__divmodsi4_neg2>
    18c4:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__udivmodsi4>
    18c8:	07 fc       	sbrc	r0, 7
    18ca:	03 d0       	rcall	.+6      	; 0x18d2 <__divmodsi4_neg2>
    18cc:	4e f4       	brtc	.+18     	; 0x18e0 <__divmodsi4_exit>
    18ce:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <__negsi2>

000018d2 <__divmodsi4_neg2>:
    18d2:	50 95       	com	r21
    18d4:	40 95       	com	r20
    18d6:	30 95       	com	r19
    18d8:	21 95       	neg	r18
    18da:	3f 4f       	sbci	r19, 0xFF	; 255
    18dc:	4f 4f       	sbci	r20, 0xFF	; 255
    18de:	5f 4f       	sbci	r21, 0xFF	; 255

000018e0 <__divmodsi4_exit>:
    18e0:	08 95       	ret

000018e2 <__negsi2>:
    18e2:	90 95       	com	r25
    18e4:	80 95       	com	r24
    18e6:	70 95       	com	r23
    18e8:	61 95       	neg	r22
    18ea:	7f 4f       	sbci	r23, 0xFF	; 255
    18ec:	8f 4f       	sbci	r24, 0xFF	; 255
    18ee:	9f 4f       	sbci	r25, 0xFF	; 255
    18f0:	08 95       	ret

000018f2 <__tablejump2__>:
    18f2:	ee 0f       	add	r30, r30
    18f4:	ff 1f       	adc	r31, r31
    18f6:	05 90       	lpm	r0, Z+
    18f8:	f4 91       	lpm	r31, Z
    18fa:	e0 2d       	mov	r30, r0
    18fc:	09 94       	ijmp

000018fe <__umulhisi3>:
    18fe:	a2 9f       	mul	r26, r18
    1900:	b0 01       	movw	r22, r0
    1902:	b3 9f       	mul	r27, r19
    1904:	c0 01       	movw	r24, r0
    1906:	a3 9f       	mul	r26, r19
    1908:	70 0d       	add	r23, r0
    190a:	81 1d       	adc	r24, r1
    190c:	11 24       	eor	r1, r1
    190e:	91 1d       	adc	r25, r1
    1910:	b2 9f       	mul	r27, r18
    1912:	70 0d       	add	r23, r0
    1914:	81 1d       	adc	r24, r1
    1916:	11 24       	eor	r1, r1
    1918:	91 1d       	adc	r25, r1
    191a:	08 95       	ret

0000191c <__muluhisi3>:
    191c:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__umulhisi3>
    1920:	a5 9f       	mul	r26, r21
    1922:	90 0d       	add	r25, r0
    1924:	b4 9f       	mul	r27, r20
    1926:	90 0d       	add	r25, r0
    1928:	a4 9f       	mul	r26, r20
    192a:	80 0d       	add	r24, r0
    192c:	91 1d       	adc	r25, r1
    192e:	11 24       	eor	r1, r1
    1930:	08 95       	ret

00001932 <__mulshisi3>:
    1932:	b7 ff       	sbrs	r27, 7
    1934:	0c 94 8e 0c 	jmp	0x191c	; 0x191c <__muluhisi3>

00001938 <__mulohisi3>:
    1938:	0e 94 8e 0c 	call	0x191c	; 0x191c <__muluhisi3>
    193c:	82 1b       	sub	r24, r18
    193e:	93 0b       	sbc	r25, r19
    1940:	08 95       	ret

00001942 <__udivmodsi4>:
    1942:	a1 e2       	ldi	r26, 0x21	; 33
    1944:	1a 2e       	mov	r1, r26
    1946:	aa 1b       	sub	r26, r26
    1948:	bb 1b       	sub	r27, r27
    194a:	fd 01       	movw	r30, r26
    194c:	0d c0       	rjmp	.+26     	; 0x1968 <__udivmodsi4_ep>

0000194e <__udivmodsi4_loop>:
    194e:	aa 1f       	adc	r26, r26
    1950:	bb 1f       	adc	r27, r27
    1952:	ee 1f       	adc	r30, r30
    1954:	ff 1f       	adc	r31, r31
    1956:	a2 17       	cp	r26, r18
    1958:	b3 07       	cpc	r27, r19
    195a:	e4 07       	cpc	r30, r20
    195c:	f5 07       	cpc	r31, r21
    195e:	20 f0       	brcs	.+8      	; 0x1968 <__udivmodsi4_ep>
    1960:	a2 1b       	sub	r26, r18
    1962:	b3 0b       	sbc	r27, r19
    1964:	e4 0b       	sbc	r30, r20
    1966:	f5 0b       	sbc	r31, r21

00001968 <__udivmodsi4_ep>:
    1968:	66 1f       	adc	r22, r22
    196a:	77 1f       	adc	r23, r23
    196c:	88 1f       	adc	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	1a 94       	dec	r1
    1972:	69 f7       	brne	.-38     	; 0x194e <__udivmodsi4_loop>
    1974:	60 95       	com	r22
    1976:	70 95       	com	r23
    1978:	80 95       	com	r24
    197a:	90 95       	com	r25
    197c:	9b 01       	movw	r18, r22
    197e:	ac 01       	movw	r20, r24
    1980:	bd 01       	movw	r22, r26
    1982:	cf 01       	movw	r24, r30
    1984:	08 95       	ret

00001986 <__strlen_P>:
    1986:	fc 01       	movw	r30, r24
    1988:	05 90       	lpm	r0, Z+
    198a:	00 20       	and	r0, r0
    198c:	e9 f7       	brne	.-6      	; 0x1988 <__strlen_P+0x2>
    198e:	80 95       	com	r24
    1990:	90 95       	com	r25
    1992:	8e 0f       	add	r24, r30
    1994:	9f 1f       	adc	r25, r31
    1996:	08 95       	ret

00001998 <strncasecmp_P>:
    1998:	fb 01       	movw	r30, r22
    199a:	dc 01       	movw	r26, r24
    199c:	41 50       	subi	r20, 0x01	; 1
    199e:	50 40       	sbci	r21, 0x00	; 0
    19a0:	88 f0       	brcs	.+34     	; 0x19c4 <strncasecmp_P+0x2c>
    19a2:	8d 91       	ld	r24, X+
    19a4:	81 34       	cpi	r24, 0x41	; 65
    19a6:	1c f0       	brlt	.+6      	; 0x19ae <strncasecmp_P+0x16>
    19a8:	8b 35       	cpi	r24, 0x5B	; 91
    19aa:	0c f4       	brge	.+2      	; 0x19ae <strncasecmp_P+0x16>
    19ac:	80 5e       	subi	r24, 0xE0	; 224
    19ae:	65 91       	lpm	r22, Z+
    19b0:	61 34       	cpi	r22, 0x41	; 65
    19b2:	1c f0       	brlt	.+6      	; 0x19ba <strncasecmp_P+0x22>
    19b4:	6b 35       	cpi	r22, 0x5B	; 91
    19b6:	0c f4       	brge	.+2      	; 0x19ba <strncasecmp_P+0x22>
    19b8:	60 5e       	subi	r22, 0xE0	; 224
    19ba:	86 1b       	sub	r24, r22
    19bc:	61 11       	cpse	r22, r1
    19be:	71 f3       	breq	.-36     	; 0x199c <strncasecmp_P+0x4>
    19c0:	99 0b       	sbc	r25, r25
    19c2:	08 95       	ret
    19c4:	88 1b       	sub	r24, r24
    19c6:	fc cf       	rjmp	.-8      	; 0x19c0 <strncasecmp_P+0x28>

000019c8 <strtok_r>:
    19c8:	fa 01       	movw	r30, r20
    19ca:	a1 91       	ld	r26, Z+
    19cc:	b0 81       	ld	r27, Z
    19ce:	00 97       	sbiw	r24, 0x00	; 0
    19d0:	19 f4       	brne	.+6      	; 0x19d8 <strtok_r+0x10>
    19d2:	10 97       	sbiw	r26, 0x00	; 0
    19d4:	e1 f0       	breq	.+56     	; 0x1a0e <strtok_r+0x46>
    19d6:	cd 01       	movw	r24, r26
    19d8:	dc 01       	movw	r26, r24
    19da:	cd 01       	movw	r24, r26
    19dc:	0d 90       	ld	r0, X+
    19de:	00 20       	and	r0, r0
    19e0:	11 f4       	brne	.+4      	; 0x19e6 <strtok_r+0x1e>
    19e2:	c0 01       	movw	r24, r0
    19e4:	13 c0       	rjmp	.+38     	; 0x1a0c <strtok_r+0x44>
    19e6:	fb 01       	movw	r30, r22
    19e8:	21 91       	ld	r18, Z+
    19ea:	22 23       	and	r18, r18
    19ec:	19 f0       	breq	.+6      	; 0x19f4 <strtok_r+0x2c>
    19ee:	20 15       	cp	r18, r0
    19f0:	d9 f7       	brne	.-10     	; 0x19e8 <strtok_r+0x20>
    19f2:	f3 cf       	rjmp	.-26     	; 0x19da <strtok_r+0x12>
    19f4:	fb 01       	movw	r30, r22
    19f6:	21 91       	ld	r18, Z+
    19f8:	20 15       	cp	r18, r0
    19fa:	19 f4       	brne	.+6      	; 0x1a02 <strtok_r+0x3a>
    19fc:	1e 92       	st	-X, r1
    19fe:	11 96       	adiw	r26, 0x01	; 1
    1a00:	06 c0       	rjmp	.+12     	; 0x1a0e <strtok_r+0x46>
    1a02:	22 23       	and	r18, r18
    1a04:	c1 f7       	brne	.-16     	; 0x19f6 <strtok_r+0x2e>
    1a06:	0d 90       	ld	r0, X+
    1a08:	00 20       	and	r0, r0
    1a0a:	a1 f7       	brne	.-24     	; 0x19f4 <strtok_r+0x2c>
    1a0c:	d0 01       	movw	r26, r0
    1a0e:	fa 01       	movw	r30, r20
    1a10:	a1 93       	st	Z+, r26
    1a12:	b0 83       	st	Z, r27
    1a14:	08 95       	ret

00001a16 <_exit>:
    1a16:	f8 94       	cli

00001a18 <__stop_program>:
    1a18:	ff cf       	rjmp	.-2      	; 0x1a18 <__stop_program>
