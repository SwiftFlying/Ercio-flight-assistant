
Flight assistant.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  00001b4e  00001be2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a0  0080014e  0080014e  00001c30  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000034f2  00000000  00000000  00001f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014d2  00000000  00000000  0000541a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000194f  00000000  00000000  000068ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000840  00000000  00000000  0000823c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b7e  00000000  00000000  00008a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d06  00000000  00000000  000095fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  0000c300  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 84 00 	jmp	0x108	; 0x108 <__ctors_end>
       4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
       8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
       c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      10:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      14:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      18:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      1c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      20:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      24:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      28:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      2c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      30:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      34:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      38:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      3c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      40:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      44:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      48:	0c 94 be 0c 	jmp	0x197c	; 0x197c <__vector_18>
      4c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      50:	0c 94 95 0c 	jmp	0x192a	; 0x192a <__vector_20>
      54:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      58:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      5c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      60:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <__vector_24>
      64:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      68:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      6c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      70:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      74:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      78:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      7c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      80:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      84:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      88:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      8c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      90:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      94:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      98:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      9c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      a0:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      a4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      a8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      ac:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      b0:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      b4:	16 09       	sbc	r17, r6
      b6:	2a 09       	sbc	r18, r10
      b8:	46 09       	sbc	r20, r6
      ba:	b6 09       	sbc	r27, r6
      bc:	cc 09       	sbc	r28, r12
      be:	0a 0a       	sbc	r0, r26
      c0:	5d 0a       	sbc	r5, r29
      c2:	8f 0a       	sbc	r8, r31
      c4:	e2 0a       	sbc	r14, r18

000000c6 <ER_commands>:
      c6:	45 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ER..............
      d6:	00 00 00 00 8c 07 45 52 5f 52 45 41 44 00 00 00     ......ER_READ...
	...
      ee:	00 00 92 07 45 52 5f 42 55 46 00 00 00 00 00 00     ....ER_BUF......
	...
     106:	ea 07                                               ..

00000108 <__ctors_end>:
     108:	11 24       	eor	r1, r1
     10a:	1f be       	out	0x3f, r1	; 63
     10c:	cf ef       	ldi	r28, 0xFF	; 255
     10e:	d8 e0       	ldi	r29, 0x08	; 8
     110:	de bf       	out	0x3e, r29	; 62
     112:	cd bf       	out	0x3d, r28	; 61

00000114 <__do_copy_data>:
     114:	11 e0       	ldi	r17, 0x01	; 1
     116:	a0 e0       	ldi	r26, 0x00	; 0
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	ee e4       	ldi	r30, 0x4E	; 78
     11c:	fb e1       	ldi	r31, 0x1B	; 27
     11e:	02 c0       	rjmp	.+4      	; 0x124 <__do_copy_data+0x10>
     120:	05 90       	lpm	r0, Z+
     122:	0d 92       	st	X+, r0
     124:	ae 34       	cpi	r26, 0x4E	; 78
     126:	b1 07       	cpc	r27, r17
     128:	d9 f7       	brne	.-10     	; 0x120 <__do_copy_data+0xc>

0000012a <__do_clear_bss>:
     12a:	22 e0       	ldi	r18, 0x02	; 2
     12c:	ae e4       	ldi	r26, 0x4E	; 78
     12e:	b1 e0       	ldi	r27, 0x01	; 1
     130:	01 c0       	rjmp	.+2      	; 0x134 <.do_clear_bss_start>

00000132 <.do_clear_bss_loop>:
     132:	1d 92       	st	X+, r1

00000134 <.do_clear_bss_start>:
     134:	ae 3e       	cpi	r26, 0xEE	; 238
     136:	b2 07       	cpc	r27, r18
     138:	e1 f7       	brne	.-8      	; 0x132 <.do_clear_bss_loop>
     13a:	0e 94 01 04 	call	0x802	; 0x802 <main>
     13e:	0c 94 a5 0d 	jmp	0x1b4a	; 0x1b4a <_exit>

00000142 <__bad_interrupt>:
     142:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000146 <PlaceInGyroBuffor>:

uint8_t counter_testing = 0;


void PlaceInGyroBuffor(int16_t gyro_samples[])
{
     146:	fc 01       	movw	r30, r24
	X_gyro_buff[gyro_head] = gyro_samples[0];
     148:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <gyro_head>
     14c:	29 2f       	mov	r18, r25
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	40 81       	ld	r20, Z
     152:	51 81       	ldd	r21, Z+1	; 0x01
     154:	22 0f       	add	r18, r18
     156:	33 1f       	adc	r19, r19
     158:	d9 01       	movw	r26, r18
     15a:	aa 5a       	subi	r26, 0xAA	; 170
     15c:	be 4f       	sbci	r27, 0xFE	; 254
     15e:	4d 93       	st	X+, r20
     160:	5c 93       	st	X, r21
	Y_gyro_buff[gyro_head] = gyro_samples[1];
     162:	42 81       	ldd	r20, Z+2	; 0x02
     164:	53 81       	ldd	r21, Z+3	; 0x03
     166:	d9 01       	movw	r26, r18
     168:	ae 59       	subi	r26, 0x9E	; 158
     16a:	be 4f       	sbci	r27, 0xFE	; 254
     16c:	4d 93       	st	X+, r20
     16e:	5c 93       	st	X, r21
	Z_gyro_buff[gyro_head] = gyro_samples[2];
     170:	44 81       	ldd	r20, Z+4	; 0x04
     172:	55 81       	ldd	r21, Z+5	; 0x05
     174:	f9 01       	movw	r30, r18
     176:	e2 56       	subi	r30, 0x62	; 98
     178:	fe 4f       	sbci	r31, 0xFE	; 254
     17a:	51 83       	std	Z+1, r21	; 0x01
     17c:	40 83       	st	Z, r20

	gyro_head++;
     17e:	9f 5f       	subi	r25, 0xFF	; 255
	if (gyro_head == SAMPLES)
     180:	96 30       	cpi	r25, 0x06	; 6
     182:	19 f0       	breq	.+6      	; 0x18a <PlaceInGyroBuffor+0x44>
{
	X_gyro_buff[gyro_head] = gyro_samples[0];
	Y_gyro_buff[gyro_head] = gyro_samples[1];
	Z_gyro_buff[gyro_head] = gyro_samples[2];

	gyro_head++;
     184:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <gyro_head>
     188:	02 c0       	rjmp	.+4      	; 0x18e <PlaceInGyroBuffor+0x48>
	if (gyro_head == SAMPLES)
	gyro_head = 0;
     18a:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <gyro_head>

	if (gyro_head == gyro_tail)
     18e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <gyro_head>
     192:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <gyro_tail>
     196:	89 13       	cpse	r24, r25
     198:	03 c0       	rjmp	.+6      	; 0x1a0 <PlaceInGyroBuffor+0x5a>
		gyro_tail++;
     19a:	8f 5f       	subi	r24, 0xFF	; 255
     19c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <gyro_tail>

	if (gyro_tail == SAMPLES)
     1a0:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <gyro_tail>
     1a4:	86 30       	cpi	r24, 0x06	; 6
     1a6:	11 f4       	brne	.+4      	; 0x1ac <PlaceInGyroBuffor+0x66>
		gyro_tail = 0;
     1a8:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <gyro_tail>
     1ac:	08 95       	ret

000001ae <PlaceInAccBuffor>:
}

void PlaceInAccBuffor(int16_t acc_samples[])
{
     1ae:	fc 01       	movw	r30, r24
	X_acc_buff[acc_head] = acc_samples[0];
     1b0:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <acc_head>
     1b4:	29 2f       	mov	r18, r25
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	40 81       	ld	r20, Z
     1ba:	51 81       	ldd	r21, Z+1	; 0x01
     1bc:	22 0f       	add	r18, r18
     1be:	33 1f       	adc	r19, r19
     1c0:	d9 01       	movw	r26, r18
     1c2:	a6 58       	subi	r26, 0x86	; 134
     1c4:	be 4f       	sbci	r27, 0xFE	; 254
     1c6:	4d 93       	st	X+, r20
     1c8:	5c 93       	st	X, r21
	Y_acc_buff[acc_head] = acc_samples[1];
     1ca:	42 81       	ldd	r20, Z+2	; 0x02
     1cc:	53 81       	ldd	r21, Z+3	; 0x03
     1ce:	d9 01       	movw	r26, r18
     1d0:	ae 56       	subi	r26, 0x6E	; 110
     1d2:	be 4f       	sbci	r27, 0xFE	; 254
     1d4:	4d 93       	st	X+, r20
     1d6:	5c 93       	st	X, r21
	Z_acc_buff[acc_head] = acc_samples[2];
     1d8:	44 81       	ldd	r20, Z+4	; 0x04
     1da:	55 81       	ldd	r21, Z+5	; 0x05
     1dc:	f9 01       	movw	r30, r18
     1de:	e2 59       	subi	r30, 0x92	; 146
     1e0:	fe 4f       	sbci	r31, 0xFE	; 254
     1e2:	51 83       	std	Z+1, r21	; 0x01
     1e4:	40 83       	st	Z, r20

	acc_head++;
     1e6:	9f 5f       	subi	r25, 0xFF	; 255
	if (acc_head == SAMPLES)
     1e8:	96 30       	cpi	r25, 0x06	; 6
     1ea:	19 f0       	breq	.+6      	; 0x1f2 <PlaceInAccBuffor+0x44>
{
	X_acc_buff[acc_head] = acc_samples[0];
	Y_acc_buff[acc_head] = acc_samples[1];
	Z_acc_buff[acc_head] = acc_samples[2];

	acc_head++;
     1ec:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <acc_head>
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <PlaceInAccBuffor+0x48>
	if (acc_head == SAMPLES)
		acc_head = 0;
     1f2:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <acc_head>

	if (acc_head == acc_tail)
     1f6:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <acc_head>
     1fa:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <__data_end>
     1fe:	89 13       	cpse	r24, r25
     200:	03 c0       	rjmp	.+6      	; 0x208 <PlaceInAccBuffor+0x5a>
		acc_tail++;
     202:	8f 5f       	subi	r24, 0xFF	; 255
     204:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__data_end>

	if (acc_tail == SAMPLES)
     208:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__data_end>
     20c:	86 30       	cpi	r24, 0x06	; 6
     20e:	11 f4       	brne	.+4      	; 0x214 <PlaceInAccBuffor+0x66>
		acc_tail = 0;
     210:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__data_end>
     214:	08 95       	ret

00000216 <ReadGyroSample>:
}

void ReadGyroSample(int16_t reading_buf[])
{
     216:	dc 01       	movw	r26, r24
	reading_buf[0] = X_gyro_buff[gyro_tail];
     218:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <gyro_tail>
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	ee 0f       	add	r30, r30
     220:	ff 1f       	adc	r31, r31
     222:	ea 5a       	subi	r30, 0xAA	; 170
     224:	fe 4f       	sbci	r31, 0xFE	; 254
     226:	80 81       	ld	r24, Z
     228:	91 81       	ldd	r25, Z+1	; 0x01
     22a:	11 96       	adiw	r26, 0x01	; 1
     22c:	9c 93       	st	X, r25
     22e:	8e 93       	st	-X, r24
	reading_buf[1] = Y_gyro_buff[gyro_tail];
     230:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <gyro_tail>
     234:	29 2f       	mov	r18, r25
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	22 0f       	add	r18, r18
     23a:	33 1f       	adc	r19, r19
     23c:	f9 01       	movw	r30, r18
     23e:	ee 59       	subi	r30, 0x9E	; 158
     240:	fe 4f       	sbci	r31, 0xFE	; 254
     242:	40 81       	ld	r20, Z
     244:	51 81       	ldd	r21, Z+1	; 0x01
     246:	13 96       	adiw	r26, 0x03	; 3
     248:	5c 93       	st	X, r21
     24a:	4e 93       	st	-X, r20
     24c:	12 97       	sbiw	r26, 0x02	; 2
	reading_buf[2] = Z_gyro_buff[gyro_tail];
     24e:	f9 01       	movw	r30, r18
     250:	e2 56       	subi	r30, 0x62	; 98
     252:	fe 4f       	sbci	r31, 0xFE	; 254
     254:	20 81       	ld	r18, Z
     256:	31 81       	ldd	r19, Z+1	; 0x01
     258:	15 96       	adiw	r26, 0x05	; 5
     25a:	3c 93       	st	X, r19
     25c:	2e 93       	st	-X, r18
     25e:	14 97       	sbiw	r26, 0x04	; 4

	gyro_tail++;
     260:	9f 5f       	subi	r25, 0xFF	; 255

	if (gyro_tail == SAMPLES)
     262:	96 30       	cpi	r25, 0x06	; 6
     264:	19 f0       	breq	.+6      	; 0x26c <ReadGyroSample+0x56>
{
	reading_buf[0] = X_gyro_buff[gyro_tail];
	reading_buf[1] = Y_gyro_buff[gyro_tail];
	reading_buf[2] = Z_gyro_buff[gyro_tail];

	gyro_tail++;
     266:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <gyro_tail>
     26a:	08 95       	ret

	if (gyro_tail == SAMPLES)
		gyro_tail = 0;
     26c:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <gyro_tail>
     270:	08 95       	ret

00000272 <ReadAccSample>:
}

void ReadAccSample(int16_t reading_buf[])
{
     272:	dc 01       	movw	r26, r24
	reading_buf[0] = X_acc_buff[acc_tail];
     274:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <__data_end>
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	ee 0f       	add	r30, r30
     27c:	ff 1f       	adc	r31, r31
     27e:	e6 58       	subi	r30, 0x86	; 134
     280:	fe 4f       	sbci	r31, 0xFE	; 254
     282:	80 81       	ld	r24, Z
     284:	91 81       	ldd	r25, Z+1	; 0x01
     286:	11 96       	adiw	r26, 0x01	; 1
     288:	9c 93       	st	X, r25
     28a:	8e 93       	st	-X, r24
	reading_buf[1] = Y_acc_buff[acc_tail];
     28c:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <__data_end>
     290:	29 2f       	mov	r18, r25
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	22 0f       	add	r18, r18
     296:	33 1f       	adc	r19, r19
     298:	f9 01       	movw	r30, r18
     29a:	ee 56       	subi	r30, 0x6E	; 110
     29c:	fe 4f       	sbci	r31, 0xFE	; 254
     29e:	40 81       	ld	r20, Z
     2a0:	51 81       	ldd	r21, Z+1	; 0x01
     2a2:	13 96       	adiw	r26, 0x03	; 3
     2a4:	5c 93       	st	X, r21
     2a6:	4e 93       	st	-X, r20
     2a8:	12 97       	sbiw	r26, 0x02	; 2
	reading_buf[2] = Z_acc_buff[acc_tail];
     2aa:	f9 01       	movw	r30, r18
     2ac:	e2 59       	subi	r30, 0x92	; 146
     2ae:	fe 4f       	sbci	r31, 0xFE	; 254
     2b0:	20 81       	ld	r18, Z
     2b2:	31 81       	ldd	r19, Z+1	; 0x01
     2b4:	15 96       	adiw	r26, 0x05	; 5
     2b6:	3c 93       	st	X, r19
     2b8:	2e 93       	st	-X, r18
     2ba:	14 97       	sbiw	r26, 0x04	; 4

	acc_tail++;
     2bc:	9f 5f       	subi	r25, 0xFF	; 255

	if (acc_tail == SAMPLES)
     2be:	96 30       	cpi	r25, 0x06	; 6
     2c0:	19 f0       	breq	.+6      	; 0x2c8 <ReadAccSample+0x56>
{
	reading_buf[0] = X_acc_buff[acc_tail];
	reading_buf[1] = Y_acc_buff[acc_tail];
	reading_buf[2] = Z_acc_buff[acc_tail];

	acc_tail++;
     2c2:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <__data_end>
     2c6:	08 95       	ret

	if (acc_tail == SAMPLES)
		acc_tail = 0;
     2c8:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__data_end>
     2cc:	08 95       	ret

000002ce <SamplesGyroBuf>:
}

uint8_t SamplesGyroBuf()
{
	uint8_t gyro_samples;
	gyro_samples = gyro_head - gyro_tail;
     2ce:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <gyro_head>
     2d2:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <gyro_tail>
     2d6:	89 1b       	sub	r24, r25
	if (gyro_samples > SAMPLES_BUFF_SIZE)
     2d8:	86 30       	cpi	r24, 0x06	; 6
     2da:	08 f0       	brcs	.+2      	; 0x2de <SamplesGyroBuf+0x10>
	{
		gyro_samples -= (255 - SAMPLES_BUFF_SIZE);
     2dc:	8a 5f       	subi	r24, 0xFA	; 250
	}
	return gyro_samples;
}
     2de:	08 95       	ret

000002e0 <SamplesAccBuf>:

uint8_t SamplesAccBuf()
{
	uint8_t acc_samples;
	acc_samples = acc_head - acc_tail;
     2e0:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <acc_head>
     2e4:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <__data_end>
     2e8:	89 1b       	sub	r24, r25
	if (acc_samples > SAMPLES_BUFF_SIZE)
     2ea:	86 30       	cpi	r24, 0x06	; 6
     2ec:	08 f0       	brcs	.+2      	; 0x2f0 <SamplesAccBuf+0x10>
	{
		acc_samples -= (255 - SAMPLES_BUFF_SIZE);
     2ee:	8a 5f       	subi	r24, 0xFA	; 250
	}
	return acc_samples;
}
     2f0:	08 95       	ret

000002f2 <ReadGyroBuf>:

void ReadGyroBuf(int16_t  reading_buf[3][SAMPLES_BUFF_SIZE], uint8_t sam_nr)
{
     2f2:	ef 92       	push	r14
     2f4:	ff 92       	push	r15
     2f6:	0f 93       	push	r16
     2f8:	1f 93       	push	r17
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	00 d0       	rcall	.+0      	; 0x300 <ReadGyroBuf+0xe>
     300:	00 d0       	rcall	.+0      	; 0x302 <ReadGyroBuf+0x10>
     302:	00 d0       	rcall	.+0      	; 0x304 <ReadGyroBuf+0x12>
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
	int16_t bufor[3];
	uint8_t i;
	for(i = 0; i < sam_nr; i++)	//read all new samples from buffor
     308:	66 23       	and	r22, r22
     30a:	01 f1       	breq	.+64     	; 0x34c <ReadGyroBuf+0x5a>
     30c:	8c 01       	movw	r16, r24
     30e:	61 50       	subi	r22, 0x01	; 1
     310:	e6 2e       	mov	r14, r22
     312:	f1 2c       	mov	r15, r1
     314:	2f ef       	ldi	r18, 0xFF	; 255
     316:	e2 1a       	sub	r14, r18
     318:	f2 0a       	sbc	r15, r18
     31a:	ee 0c       	add	r14, r14
     31c:	ff 1c       	adc	r15, r15
     31e:	e8 0e       	add	r14, r24
     320:	f9 1e       	adc	r15, r25
	{
 		ReadGyroSample(bufor);
     322:	ce 01       	movw	r24, r28
     324:	01 96       	adiw	r24, 0x01	; 1
     326:	0e 94 0b 01 	call	0x216	; 0x216 <ReadGyroSample>
 		reading_buf[X_AXIS][i] = bufor[X_AXIS];
     32a:	89 81       	ldd	r24, Y+1	; 0x01
     32c:	9a 81       	ldd	r25, Y+2	; 0x02
     32e:	f8 01       	movw	r30, r16
     330:	81 93       	st	Z+, r24
     332:	91 93       	st	Z+, r25
     334:	8f 01       	movw	r16, r30
 		reading_buf[Y_AXIS][i] = bufor[Y_AXIS];
     336:	8b 81       	ldd	r24, Y+3	; 0x03
     338:	9c 81       	ldd	r25, Y+4	; 0x04
     33a:	91 87       	std	Z+9, r25	; 0x09
     33c:	80 87       	std	Z+8, r24	; 0x08
 		reading_buf[Z_AXIS][i] = bufor[Z_AXIS];
     33e:	8d 81       	ldd	r24, Y+5	; 0x05
     340:	9e 81       	ldd	r25, Y+6	; 0x06
     342:	93 8b       	std	Z+19, r25	; 0x13
     344:	82 8b       	std	Z+18, r24	; 0x12

void ReadGyroBuf(int16_t  reading_buf[3][SAMPLES_BUFF_SIZE], uint8_t sam_nr)
{
	int16_t bufor[3];
	uint8_t i;
	for(i = 0; i < sam_nr; i++)	//read all new samples from buffor
     346:	ee 15       	cp	r30, r14
     348:	ff 05       	cpc	r31, r15
     34a:	59 f7       	brne	.-42     	; 0x322 <ReadGyroBuf+0x30>
 		ReadGyroSample(bufor);
 		reading_buf[X_AXIS][i] = bufor[X_AXIS];
 		reading_buf[Y_AXIS][i] = bufor[Y_AXIS];
 		reading_buf[Z_AXIS][i] = bufor[Z_AXIS];
	}
}
     34c:	26 96       	adiw	r28, 0x06	; 6
     34e:	0f b6       	in	r0, 0x3f	; 63
     350:	f8 94       	cli
     352:	de bf       	out	0x3e, r29	; 62
     354:	0f be       	out	0x3f, r0	; 63
     356:	cd bf       	out	0x3d, r28	; 61
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	1f 91       	pop	r17
     35e:	0f 91       	pop	r16
     360:	ff 90       	pop	r15
     362:	ef 90       	pop	r14
     364:	08 95       	ret

00000366 <ReadAccBuf>:

void ReadAccBuf(int16_t  reading_buf[3][SAMPLES_BUFF_SIZE], uint8_t sam_nr)
{
     366:	ef 92       	push	r14
     368:	ff 92       	push	r15
     36a:	0f 93       	push	r16
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	00 d0       	rcall	.+0      	; 0x374 <ReadAccBuf+0xe>
     374:	00 d0       	rcall	.+0      	; 0x376 <ReadAccBuf+0x10>
     376:	00 d0       	rcall	.+0      	; 0x378 <ReadAccBuf+0x12>
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
	int16_t bufor[3];
	uint8_t i;
	for(i = 0; i < sam_nr; i++)	//read all new samples from buffor
     37c:	66 23       	and	r22, r22
     37e:	01 f1       	breq	.+64     	; 0x3c0 <ReadAccBuf+0x5a>
     380:	8c 01       	movw	r16, r24
     382:	61 50       	subi	r22, 0x01	; 1
     384:	e6 2e       	mov	r14, r22
     386:	f1 2c       	mov	r15, r1
     388:	2f ef       	ldi	r18, 0xFF	; 255
     38a:	e2 1a       	sub	r14, r18
     38c:	f2 0a       	sbc	r15, r18
     38e:	ee 0c       	add	r14, r14
     390:	ff 1c       	adc	r15, r15
     392:	e8 0e       	add	r14, r24
     394:	f9 1e       	adc	r15, r25
	{
		ReadAccSample(bufor);
     396:	ce 01       	movw	r24, r28
     398:	01 96       	adiw	r24, 0x01	; 1
     39a:	0e 94 39 01 	call	0x272	; 0x272 <ReadAccSample>
 		reading_buf[X_AXIS][i] = bufor[X_AXIS];
     39e:	89 81       	ldd	r24, Y+1	; 0x01
     3a0:	9a 81       	ldd	r25, Y+2	; 0x02
     3a2:	f8 01       	movw	r30, r16
     3a4:	81 93       	st	Z+, r24
     3a6:	91 93       	st	Z+, r25
     3a8:	8f 01       	movw	r16, r30
 		reading_buf[Y_AXIS][i] = bufor[Y_AXIS];
     3aa:	8b 81       	ldd	r24, Y+3	; 0x03
     3ac:	9c 81       	ldd	r25, Y+4	; 0x04
     3ae:	91 87       	std	Z+9, r25	; 0x09
     3b0:	80 87       	std	Z+8, r24	; 0x08
 		reading_buf[Z_AXIS][i] = bufor[Z_AXIS];
     3b2:	8d 81       	ldd	r24, Y+5	; 0x05
     3b4:	9e 81       	ldd	r25, Y+6	; 0x06
     3b6:	93 8b       	std	Z+19, r25	; 0x13
     3b8:	82 8b       	std	Z+18, r24	; 0x12

void ReadAccBuf(int16_t  reading_buf[3][SAMPLES_BUFF_SIZE], uint8_t sam_nr)
{
	int16_t bufor[3];
	uint8_t i;
	for(i = 0; i < sam_nr; i++)	//read all new samples from buffor
     3ba:	ee 15       	cp	r30, r14
     3bc:	ff 05       	cpc	r31, r15
     3be:	59 f7       	brne	.-42     	; 0x396 <ReadAccBuf+0x30>
		ReadAccSample(bufor);
 		reading_buf[X_AXIS][i] = bufor[X_AXIS];
 		reading_buf[Y_AXIS][i] = bufor[Y_AXIS];
 		reading_buf[Z_AXIS][i] = bufor[Z_AXIS];
	}
}
     3c0:	26 96       	adiw	r28, 0x06	; 6
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	de bf       	out	0x3e, r29	; 62
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	cd bf       	out	0x3d, r28	; 61
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	ff 90       	pop	r15
     3d6:	ef 90       	pop	r14
     3d8:	08 95       	ret

000003da <AveragingLinearMPU6050>:
	ReadAccBuf(temp_buf, samples);
	AveragingWeightingMPU6050(temp_buf, samples, acc);
}

void AveragingLinearMPU6050(int16_t data[3][SAMPLES_BUFF_SIZE], uint8_t samples, int16_t results[3])
{
     3da:	4f 92       	push	r4
     3dc:	5f 92       	push	r5
     3de:	6f 92       	push	r6
     3e0:	7f 92       	push	r7
     3e2:	8f 92       	push	r8
     3e4:	9f 92       	push	r9
     3e6:	af 92       	push	r10
     3e8:	bf 92       	push	r11
     3ea:	cf 92       	push	r12
     3ec:	df 92       	push	r13
     3ee:	ef 92       	push	r14
     3f0:	ff 92       	push	r15
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	a6 2f       	mov	r26, r22
     3f8:	ea 01       	movw	r28, r20
	int32_t sum[3];
	sum[0] = 0;
	sum[1] = 0;
	sum[2] = 0;

	for(uint8_t i = 0; i < samples; i++)
     3fa:	66 23       	and	r22, r22
     3fc:	a9 f1       	breq	.+106    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     3fe:	fc 01       	movw	r30, r24
     400:	2f ef       	ldi	r18, 0xFF	; 255
     402:	26 0f       	add	r18, r22
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	2f 5f       	subi	r18, 0xFF	; 255
     408:	3f 4f       	sbci	r19, 0xFF	; 255
     40a:	22 0f       	add	r18, r18
     40c:	33 1f       	adc	r19, r19
     40e:	28 0f       	add	r18, r24
     410:	39 1f       	adc	r19, r25
     412:	60 e0       	ldi	r22, 0x00	; 0
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	cb 01       	movw	r24, r22
     418:	81 2c       	mov	r8, r1
     41a:	91 2c       	mov	r9, r1
     41c:	54 01       	movw	r10, r8
     41e:	c1 2c       	mov	r12, r1
     420:	d1 2c       	mov	r13, r1
     422:	76 01       	movw	r14, r12
	{
		sum[X_AXIS] += data[X_AXIS][i];
     424:	41 91       	ld	r20, Z+
     426:	51 91       	ld	r21, Z+
     428:	2a 01       	movw	r4, r20
     42a:	55 0f       	add	r21, r21
     42c:	66 08       	sbc	r6, r6
     42e:	77 08       	sbc	r7, r7
     430:	64 0d       	add	r22, r4
     432:	75 1d       	adc	r23, r5
     434:	86 1d       	adc	r24, r6
     436:	97 1d       	adc	r25, r7
		sum[Y_AXIS] += data[Y_AXIS][i];
     438:	40 85       	ldd	r20, Z+8	; 0x08
     43a:	51 85       	ldd	r21, Z+9	; 0x09
     43c:	2a 01       	movw	r4, r20
     43e:	55 0f       	add	r21, r21
     440:	66 08       	sbc	r6, r6
     442:	77 08       	sbc	r7, r7
     444:	84 0c       	add	r8, r4
     446:	95 1c       	adc	r9, r5
     448:	a6 1c       	adc	r10, r6
     44a:	b7 1c       	adc	r11, r7
		sum[Z_AXIS] += data[Z_AXIS][i];
     44c:	42 89       	ldd	r20, Z+18	; 0x12
     44e:	53 89       	ldd	r21, Z+19	; 0x13
     450:	2a 01       	movw	r4, r20
     452:	55 0f       	add	r21, r21
     454:	66 08       	sbc	r6, r6
     456:	77 08       	sbc	r7, r7
     458:	c4 0c       	add	r12, r4
     45a:	d5 1c       	adc	r13, r5
     45c:	e6 1c       	adc	r14, r6
     45e:	f7 1c       	adc	r15, r7
	int32_t sum[3];
	sum[0] = 0;
	sum[1] = 0;
	sum[2] = 0;

	for(uint8_t i = 0; i < samples; i++)
     460:	e2 17       	cp	r30, r18
     462:	f3 07       	cpc	r31, r19
     464:	f9 f6       	brne	.-66     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     466:	09 c0       	rjmp	.+18     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
}

void AveragingLinearMPU6050(int16_t data[3][SAMPLES_BUFF_SIZE], uint8_t samples, int16_t results[3])
{
	int32_t sum[3];
	sum[0] = 0;
     468:	60 e0       	ldi	r22, 0x00	; 0
     46a:	70 e0       	ldi	r23, 0x00	; 0
     46c:	cb 01       	movw	r24, r22
	sum[1] = 0;
     46e:	81 2c       	mov	r8, r1
     470:	91 2c       	mov	r9, r1
     472:	54 01       	movw	r10, r8
	sum[2] = 0;
     474:	c1 2c       	mov	r12, r1
     476:	d1 2c       	mov	r13, r1
     478:	76 01       	movw	r14, r12
		sum[X_AXIS] += data[X_AXIS][i];
		sum[Y_AXIS] += data[Y_AXIS][i];
		sum[Z_AXIS] += data[Z_AXIS][i];
	}

	sum[X_AXIS] /= (int32_t) samples;
     47a:	4a 2e       	mov	r4, r26
     47c:	51 2c       	mov	r5, r1
     47e:	61 2c       	mov	r6, r1
     480:	71 2c       	mov	r7, r1
	sum[Y_AXIS] /= (int32_t) samples;
	sum[Z_AXIS] /= (int32_t) samples;

	results[X_AXIS] = (int16_t) sum[X_AXIS];
     482:	a3 01       	movw	r20, r6
     484:	92 01       	movw	r18, r4
     486:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <__divmodsi4>
     48a:	39 83       	std	Y+1, r19	; 0x01
     48c:	28 83       	st	Y, r18
	results[Y_AXIS] = (int16_t) sum[Y_AXIS];
     48e:	c5 01       	movw	r24, r10
     490:	b4 01       	movw	r22, r8
     492:	a3 01       	movw	r20, r6
     494:	92 01       	movw	r18, r4
     496:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <__divmodsi4>
     49a:	3b 83       	std	Y+3, r19	; 0x03
     49c:	2a 83       	std	Y+2, r18	; 0x02
	results[Z_AXIS] = (int16_t) sum[Z_AXIS];
     49e:	c7 01       	movw	r24, r14
     4a0:	b6 01       	movw	r22, r12
     4a2:	a3 01       	movw	r20, r6
     4a4:	92 01       	movw	r18, r4
     4a6:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <__divmodsi4>
     4aa:	3d 83       	std	Y+5, r19	; 0x05
     4ac:	2c 83       	std	Y+4, r18	; 0x04
}
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	ff 90       	pop	r15
     4b4:	ef 90       	pop	r14
     4b6:	df 90       	pop	r13
     4b8:	cf 90       	pop	r12
     4ba:	bf 90       	pop	r11
     4bc:	af 90       	pop	r10
     4be:	9f 90       	pop	r9
     4c0:	8f 90       	pop	r8
     4c2:	7f 90       	pop	r7
     4c4:	6f 90       	pop	r6
     4c6:	5f 90       	pop	r5
     4c8:	4f 90       	pop	r4
     4ca:	08 95       	ret

000004cc <ReadGyroBufAveraged>:
	}
}

/*** Before calling this function, make sure there are samples in bufor ***/
void ReadGyroBufAveraged(int16_t gyro[3])
{
     4cc:	ef 92       	push	r14
     4ce:	ff 92       	push	r15
     4d0:	1f 93       	push	r17
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	cd b7       	in	r28, 0x3d	; 61
     4d8:	de b7       	in	r29, 0x3e	; 62
     4da:	6e 97       	sbiw	r28, 0x1e	; 30
     4dc:	0f b6       	in	r0, 0x3f	; 63
     4de:	f8 94       	cli
     4e0:	de bf       	out	0x3e, r29	; 62
     4e2:	0f be       	out	0x3f, r0	; 63
     4e4:	cd bf       	out	0x3d, r28	; 61
     4e6:	7c 01       	movw	r14, r24
	int16_t temp_buf[3][SAMPLES_BUFF_SIZE];	//bufor to store samples
	uint8_t samples;		//number of samples in bufor

	samples = SamplesGyroBuf();
     4e8:	0e 94 67 01 	call	0x2ce	; 0x2ce <SamplesGyroBuf>
     4ec:	18 2f       	mov	r17, r24

	ReadGyroBuf(temp_buf, samples);
     4ee:	68 2f       	mov	r22, r24
     4f0:	ce 01       	movw	r24, r28
     4f2:	01 96       	adiw	r24, 0x01	; 1
     4f4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <ReadGyroBuf>
	AveragingLinearMPU6050(temp_buf, samples, gyro);
     4f8:	a7 01       	movw	r20, r14
     4fa:	61 2f       	mov	r22, r17
     4fc:	ce 01       	movw	r24, r28
     4fe:	01 96       	adiw	r24, 0x01	; 1
     500:	0e 94 ed 01 	call	0x3da	; 0x3da <AveragingLinearMPU6050>
}
     504:	6e 96       	adiw	r28, 0x1e	; 30
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	cd bf       	out	0x3d, r28	; 61
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	1f 91       	pop	r17
     516:	ff 90       	pop	r15
     518:	ef 90       	pop	r14
     51a:	08 95       	ret

0000051c <AveragingWeightingMPU6050>:
	results[Y_AXIS] = (int16_t) sum[Y_AXIS];
	results[Z_AXIS] = (int16_t) sum[Z_AXIS];
}

void AveragingWeightingMPU6050(int16_t data[3][SAMPLES_BUFF_SIZE], uint8_t samples, int16_t results[3])
{
     51c:	4f 92       	push	r4
     51e:	5f 92       	push	r5
     520:	6f 92       	push	r6
     522:	7f 92       	push	r7
     524:	8f 92       	push	r8
     526:	9f 92       	push	r9
     528:	af 92       	push	r10
     52a:	bf 92       	push	r11
     52c:	cf 92       	push	r12
     52e:	df 92       	push	r13
     530:	ef 92       	push	r14
     532:	ff 92       	push	r15
     534:	0f 93       	push	r16
     536:	1f 93       	push	r17
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	cd b7       	in	r28, 0x3d	; 61
     53e:	de b7       	in	r29, 0x3e	; 62
     540:	29 97       	sbiw	r28, 0x09	; 9
     542:	0f b6       	in	r0, 0x3f	; 63
     544:	f8 94       	cli
     546:	de bf       	out	0x3e, r29	; 62
     548:	0f be       	out	0x3f, r0	; 63
     54a:	cd bf       	out	0x3d, r28	; 61
     54c:	8a 01       	movw	r16, r20
	sum[0] = 0;
	sum[1] = 0;
	sum[2] = 0;
	uint8_t average = 0;

	for(uint8_t i = 0; i < samples; i++)
     54e:	66 23       	and	r22, r22
     550:	09 f4       	brne	.+2      	; 0x554 <AveragingWeightingMPU6050+0x38>
     552:	6d c0       	rjmp	.+218    	; 0x62e <AveragingWeightingMPU6050+0x112>
     554:	e8 2f       	mov	r30, r24
     556:	f9 2f       	mov	r31, r25
     558:	8f ef       	ldi	r24, 0xFF	; 255
     55a:	86 0f       	add	r24, r22
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	a0 e0       	ldi	r26, 0x00	; 0
     560:	b0 e0       	ldi	r27, 0x00	; 0
     562:	9c 01       	movw	r18, r24
     564:	ad 01       	movw	r20, r26
     566:	2e 5f       	subi	r18, 0xFE	; 254
     568:	3f 4f       	sbci	r19, 0xFF	; 255
     56a:	4f 4f       	sbci	r20, 0xFF	; 255
     56c:	5f 4f       	sbci	r21, 0xFF	; 255
     56e:	2d 83       	std	Y+5, r18	; 0x05
     570:	3e 83       	std	Y+6, r19	; 0x06
     572:	4f 83       	std	Y+7, r20	; 0x07
     574:	58 87       	std	Y+8, r21	; 0x08
     576:	c1 2c       	mov	r12, r1
     578:	d1 2c       	mov	r13, r1
     57a:	76 01       	movw	r14, r12
     57c:	c3 94       	inc	r12
     57e:	19 82       	std	Y+1, r1	; 0x01
     580:	1a 82       	std	Y+2, r1	; 0x02
     582:	1b 82       	std	Y+3, r1	; 0x03
     584:	1c 82       	std	Y+4, r1	; 0x04
     586:	41 2c       	mov	r4, r1
     588:	51 2c       	mov	r5, r1
     58a:	32 01       	movw	r6, r4
     58c:	81 2c       	mov	r8, r1
     58e:	91 2c       	mov	r9, r1
     590:	54 01       	movw	r10, r8
     592:	19 86       	std	Y+9, r1	; 0x09
	{
		average += (i+1)*(i+1);
     594:	49 85       	ldd	r20, Y+9	; 0x09
     596:	cc 9c       	mul	r12, r12
     598:	40 0d       	add	r20, r0
     59a:	11 24       	eor	r1, r1
     59c:	49 87       	std	Y+9, r20	; 0x09
		sum[X_AXIS] += ((int32_t)data[X_AXIS][i] * (i+1)*(i+1));
     59e:	a1 91       	ld	r26, Z+
     5a0:	b1 91       	ld	r27, Z+
     5a2:	a7 01       	movw	r20, r14
     5a4:	96 01       	movw	r18, r12
     5a6:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__mulshisi3>
     5aa:	9b 01       	movw	r18, r22
     5ac:	ac 01       	movw	r20, r24
     5ae:	c7 01       	movw	r24, r14
     5b0:	b6 01       	movw	r22, r12
     5b2:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__mulsi3>
     5b6:	29 81       	ldd	r18, Y+1	; 0x01
     5b8:	3a 81       	ldd	r19, Y+2	; 0x02
     5ba:	4b 81       	ldd	r20, Y+3	; 0x03
     5bc:	5c 81       	ldd	r21, Y+4	; 0x04
     5be:	26 0f       	add	r18, r22
     5c0:	37 1f       	adc	r19, r23
     5c2:	48 1f       	adc	r20, r24
     5c4:	59 1f       	adc	r21, r25
     5c6:	29 83       	std	Y+1, r18	; 0x01
     5c8:	3a 83       	std	Y+2, r19	; 0x02
     5ca:	4b 83       	std	Y+3, r20	; 0x03
     5cc:	5c 83       	std	Y+4, r21	; 0x04
		sum[Y_AXIS] += ((int32_t)data[Y_AXIS][i] * (i+1)*(i+1));
     5ce:	a0 85       	ldd	r26, Z+8	; 0x08
     5d0:	b1 85       	ldd	r27, Z+9	; 0x09
     5d2:	a7 01       	movw	r20, r14
     5d4:	96 01       	movw	r18, r12
     5d6:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__mulshisi3>
     5da:	9b 01       	movw	r18, r22
     5dc:	ac 01       	movw	r20, r24
     5de:	c7 01       	movw	r24, r14
     5e0:	b6 01       	movw	r22, r12
     5e2:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__mulsi3>
     5e6:	46 0e       	add	r4, r22
     5e8:	57 1e       	adc	r5, r23
     5ea:	68 1e       	adc	r6, r24
     5ec:	79 1e       	adc	r7, r25
		sum[Z_AXIS] += ((int32_t)data[Z_AXIS][i] * (i+1)*(i+1));
     5ee:	a2 89       	ldd	r26, Z+18	; 0x12
     5f0:	b3 89       	ldd	r27, Z+19	; 0x13
     5f2:	a7 01       	movw	r20, r14
     5f4:	96 01       	movw	r18, r12
     5f6:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__mulshisi3>
     5fa:	9b 01       	movw	r18, r22
     5fc:	ac 01       	movw	r20, r24
     5fe:	c7 01       	movw	r24, r14
     600:	b6 01       	movw	r22, r12
     602:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__mulsi3>
     606:	86 0e       	add	r8, r22
     608:	97 1e       	adc	r9, r23
     60a:	a8 1e       	adc	r10, r24
     60c:	b9 1e       	adc	r11, r25
     60e:	3f ef       	ldi	r19, 0xFF	; 255
     610:	c3 1a       	sub	r12, r19
     612:	d3 0a       	sbc	r13, r19
     614:	e3 0a       	sbc	r14, r19
     616:	f3 0a       	sbc	r15, r19
	sum[0] = 0;
	sum[1] = 0;
	sum[2] = 0;
	uint8_t average = 0;

	for(uint8_t i = 0; i < samples; i++)
     618:	8d 81       	ldd	r24, Y+5	; 0x05
     61a:	9e 81       	ldd	r25, Y+6	; 0x06
     61c:	af 81       	ldd	r26, Y+7	; 0x07
     61e:	b8 85       	ldd	r27, Y+8	; 0x08
     620:	c8 16       	cp	r12, r24
     622:	d9 06       	cpc	r13, r25
     624:	ea 06       	cpc	r14, r26
     626:	fb 06       	cpc	r15, r27
     628:	09 f0       	breq	.+2      	; 0x62c <AveragingWeightingMPU6050+0x110>
     62a:	b4 cf       	rjmp	.-152    	; 0x594 <AveragingWeightingMPU6050+0x78>
     62c:	0b c0       	rjmp	.+22     	; 0x644 <AveragingWeightingMPU6050+0x128>
}

void AveragingWeightingMPU6050(int16_t data[3][SAMPLES_BUFF_SIZE], uint8_t samples, int16_t results[3])
{
	int32_t sum[3];
	sum[0] = 0;
     62e:	19 82       	std	Y+1, r1	; 0x01
     630:	1a 82       	std	Y+2, r1	; 0x02
     632:	1b 82       	std	Y+3, r1	; 0x03
     634:	1c 82       	std	Y+4, r1	; 0x04
	sum[1] = 0;
     636:	41 2c       	mov	r4, r1
     638:	51 2c       	mov	r5, r1
     63a:	32 01       	movw	r6, r4
	sum[2] = 0;
     63c:	81 2c       	mov	r8, r1
     63e:	91 2c       	mov	r9, r1
     640:	54 01       	movw	r10, r8
	uint8_t average = 0;
     642:	19 86       	std	Y+9, r1	; 0x09
		sum[X_AXIS] += ((int32_t)data[X_AXIS][i] * (i+1)*(i+1));
		sum[Y_AXIS] += ((int32_t)data[Y_AXIS][i] * (i+1)*(i+1));
		sum[Z_AXIS] += ((int32_t)data[Z_AXIS][i] * (i+1)*(i+1));
	}

	sum[X_AXIS] /= (int32_t) average;
     644:	f9 85       	ldd	r31, Y+9	; 0x09
     646:	cf 2e       	mov	r12, r31
     648:	d1 2c       	mov	r13, r1
     64a:	e1 2c       	mov	r14, r1
     64c:	f1 2c       	mov	r15, r1
	sum[Y_AXIS] /= (int32_t) average;
	sum[Z_AXIS] /= (int32_t) average;

	results[X_AXIS] = (int16_t) sum[X_AXIS];
     64e:	69 81       	ldd	r22, Y+1	; 0x01
     650:	7a 81       	ldd	r23, Y+2	; 0x02
     652:	8b 81       	ldd	r24, Y+3	; 0x03
     654:	9c 81       	ldd	r25, Y+4	; 0x04
     656:	a7 01       	movw	r20, r14
     658:	96 01       	movw	r18, r12
     65a:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <__divmodsi4>
     65e:	d8 01       	movw	r26, r16
     660:	2d 93       	st	X+, r18
     662:	3c 93       	st	X, r19
	results[Y_AXIS] = (int16_t) sum[Y_AXIS];
     664:	c3 01       	movw	r24, r6
     666:	b2 01       	movw	r22, r4
     668:	a7 01       	movw	r20, r14
     66a:	96 01       	movw	r18, r12
     66c:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <__divmodsi4>
     670:	f8 01       	movw	r30, r16
     672:	33 83       	std	Z+3, r19	; 0x03
     674:	22 83       	std	Z+2, r18	; 0x02
	results[Z_AXIS] = (int16_t) sum[Z_AXIS];
     676:	c5 01       	movw	r24, r10
     678:	b4 01       	movw	r22, r8
     67a:	a7 01       	movw	r20, r14
     67c:	96 01       	movw	r18, r12
     67e:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <__divmodsi4>
     682:	d8 01       	movw	r26, r16
     684:	15 96       	adiw	r26, 0x05	; 5
     686:	3c 93       	st	X, r19
     688:	2e 93       	st	-X, r18
     68a:	14 97       	sbiw	r26, 0x04	; 4
     68c:	29 96       	adiw	r28, 0x09	; 9
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	f8 94       	cli
     692:	de bf       	out	0x3e, r29	; 62
     694:	0f be       	out	0x3f, r0	; 63
     696:	cd bf       	out	0x3d, r28	; 61
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	1f 91       	pop	r17
     69e:	0f 91       	pop	r16
     6a0:	ff 90       	pop	r15
     6a2:	ef 90       	pop	r14
     6a4:	df 90       	pop	r13
     6a6:	cf 90       	pop	r12
     6a8:	bf 90       	pop	r11
     6aa:	af 90       	pop	r10
     6ac:	9f 90       	pop	r9
     6ae:	8f 90       	pop	r8
     6b0:	7f 90       	pop	r7
     6b2:	6f 90       	pop	r6
     6b4:	5f 90       	pop	r5
     6b6:	4f 90       	pop	r4
     6b8:	08 95       	ret

000006ba <ReadAccBufAveraged>:
	AveragingLinearMPU6050(temp_buf, samples, gyro);
}

/*** Before calling this function, make sure there are samples in bufor ***/
void ReadAccBufAveraged(int16_t acc[3])
{
     6ba:	ef 92       	push	r14
     6bc:	ff 92       	push	r15
     6be:	1f 93       	push	r17
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	cd b7       	in	r28, 0x3d	; 61
     6c6:	de b7       	in	r29, 0x3e	; 62
     6c8:	6e 97       	sbiw	r28, 0x1e	; 30
     6ca:	0f b6       	in	r0, 0x3f	; 63
     6cc:	f8 94       	cli
     6ce:	de bf       	out	0x3e, r29	; 62
     6d0:	0f be       	out	0x3f, r0	; 63
     6d2:	cd bf       	out	0x3d, r28	; 61
     6d4:	7c 01       	movw	r14, r24
	int16_t temp_buf[3][SAMPLES_BUFF_SIZE];	//bufor to store samples
	uint8_t samples;	//number of samples in bufor

	samples = SamplesAccBuf();
     6d6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <SamplesAccBuf>
     6da:	18 2f       	mov	r17, r24

	ReadAccBuf(temp_buf, samples);
     6dc:	68 2f       	mov	r22, r24
     6de:	ce 01       	movw	r24, r28
     6e0:	01 96       	adiw	r24, 0x01	; 1
     6e2:	0e 94 b3 01 	call	0x366	; 0x366 <ReadAccBuf>
	AveragingWeightingMPU6050(temp_buf, samples, acc);
     6e6:	a7 01       	movw	r20, r14
     6e8:	61 2f       	mov	r22, r17
     6ea:	ce 01       	movw	r24, r28
     6ec:	01 96       	adiw	r24, 0x01	; 1
     6ee:	0e 94 8e 02 	call	0x51c	; 0x51c <AveragingWeightingMPU6050>
}
     6f2:	6e 96       	adiw	r28, 0x1e	; 30
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	f8 94       	cli
     6f8:	de bf       	out	0x3e, r29	; 62
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	cd bf       	out	0x3d, r28	; 61
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	1f 91       	pop	r17
     704:	ff 90       	pop	r15
     706:	ef 90       	pop	r14
     708:	08 95       	ret

0000070a <I2C_start>:
	I2C_start();
	I2C_write(SLA + 1);
	byte = I2C_read(NACK);
	I2C_stop();
	return byte;
}
     70a:	84 ea       	ldi	r24, 0xA4	; 164
     70c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     710:	ec eb       	ldi	r30, 0xBC	; 188
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	80 81       	ld	r24, Z
     716:	88 23       	and	r24, r24
     718:	ec f7       	brge	.-6      	; 0x714 <I2C_start+0xa>
     71a:	08 95       	ret

0000071c <I2C_stop>:
     71c:	84 e9       	ldi	r24, 0x94	; 148
     71e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     722:	ec eb       	ldi	r30, 0xBC	; 188
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	80 81       	ld	r24, Z
     728:	84 fd       	sbrc	r24, 4
     72a:	fd cf       	rjmp	.-6      	; 0x726 <I2C_stop+0xa>
     72c:	08 95       	ret

0000072e <I2C_write>:
     72e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     732:	84 e8       	ldi	r24, 0x84	; 132
     734:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     738:	ec eb       	ldi	r30, 0xBC	; 188
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	80 81       	ld	r24, Z
     73e:	88 23       	and	r24, r24
     740:	ec f7       	brge	.-6      	; 0x73c <I2C_write+0xe>
     742:	08 95       	ret

00000744 <I2C_read>:
     744:	20 e4       	ldi	r18, 0x40	; 64
     746:	82 9f       	mul	r24, r18
     748:	c0 01       	movw	r24, r0
     74a:	11 24       	eor	r1, r1
     74c:	84 68       	ori	r24, 0x84	; 132
     74e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     752:	ec eb       	ldi	r30, 0xBC	; 188
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	80 81       	ld	r24, Z
     758:	88 23       	and	r24, r24
     75a:	ec f7       	brge	.-6      	; 0x756 <I2C_read+0x12>
     75c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     760:	08 95       	ret

00000762 <I2C_write_byte>:
     762:	1f 93       	push	r17
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	18 2f       	mov	r17, r24
     76a:	d6 2f       	mov	r29, r22
     76c:	c4 2f       	mov	r28, r20
     76e:	0e 94 85 03 	call	0x70a	; 0x70a <I2C_start>
     772:	81 2f       	mov	r24, r17
     774:	88 0f       	add	r24, r24
     776:	0e 94 97 03 	call	0x72e	; 0x72e <I2C_write>
     77a:	8d 2f       	mov	r24, r29
     77c:	0e 94 97 03 	call	0x72e	; 0x72e <I2C_write>
     780:	8c 2f       	mov	r24, r28
     782:	0e 94 97 03 	call	0x72e	; 0x72e <I2C_write>
     786:	0e 94 8e 03 	call	0x71c	; 0x71c <I2C_stop>
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	08 95       	ret

00000792 <I2C_read_buf>:


void I2C_read_buf(uint8_t SLA, uint8_t adr, uint8_t len, uint8_t *buf) {
     792:	ef 92       	push	r14
     794:	ff 92       	push	r15
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	16 2f       	mov	r17, r22
     7a0:	d4 2f       	mov	r29, r20
     7a2:	e2 2e       	mov	r14, r18
     7a4:	f3 2e       	mov	r15, r19
	SLA = (SLA<<1);
     7a6:	c8 2f       	mov	r28, r24
     7a8:	cc 0f       	add	r28, r28
	I2C_start();
     7aa:	0e 94 85 03 	call	0x70a	; 0x70a <I2C_start>
	I2C_write(SLA);
     7ae:	8c 2f       	mov	r24, r28
     7b0:	0e 94 97 03 	call	0x72e	; 0x72e <I2C_write>
	I2C_write(adr);
     7b4:	81 2f       	mov	r24, r17
     7b6:	0e 94 97 03 	call	0x72e	; 0x72e <I2C_write>
	I2C_start();
     7ba:	0e 94 85 03 	call	0x70a	; 0x70a <I2C_start>
	I2C_write(SLA + 1);
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	8c 0f       	add	r24, r28
     7c2:	0e 94 97 03 	call	0x72e	; 0x72e <I2C_write>
	while (len--) *buf++ = I2C_read( len ? ACK : NACK );
     7c6:	cf ef       	ldi	r28, 0xFF	; 255
     7c8:	cd 0f       	add	r28, r29
     7ca:	dd 23       	and	r29, r29
     7cc:	89 f0       	breq	.+34     	; 0x7f0 <I2C_read_buf+0x5e>
     7ce:	0e 2d       	mov	r16, r14
     7d0:	1f 2d       	mov	r17, r15
     7d2:	d1 e0       	ldi	r29, 0x01	; 1
     7d4:	f1 2c       	mov	r15, r1
     7d6:	8d 2f       	mov	r24, r29
     7d8:	c1 11       	cpse	r28, r1
     7da:	01 c0       	rjmp	.+2      	; 0x7de <I2C_read_buf+0x4c>
     7dc:	8f 2d       	mov	r24, r15
     7de:	0e 94 a2 03 	call	0x744	; 0x744 <I2C_read>
     7e2:	f8 01       	movw	r30, r16
     7e4:	81 93       	st	Z+, r24
     7e6:	8f 01       	movw	r16, r30
     7e8:	8c 2f       	mov	r24, r28
     7ea:	c1 50       	subi	r28, 0x01	; 1
     7ec:	81 11       	cpse	r24, r1
     7ee:	f3 cf       	rjmp	.-26     	; 0x7d6 <I2C_read_buf+0x44>
	I2C_stop();
     7f0:	0e 94 8e 03 	call	0x71c	; 0x71c <I2C_stop>
}
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	ff 90       	pop	r15
     7fe:	ef 90       	pop	r14
     800:	08 95       	ret

00000802 <main>:


int main(void)
{
//	InitTWI();
	DDRB = (1<<PB5);
     802:	80 e2       	ldi	r24, 0x20	; 32
     804:	84 b9       	out	0x04, r24	; 4
	TWSR0 = 0x00;
     806:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR0 = 0x0C;
     80a:	8c e0       	ldi	r24, 0x0C	; 12
     80c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWCR0 = (1<<TWEN);	//enable TWI
     810:	84 e0       	ldi	r24, 0x04	; 4
     812:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

// 	test = I2C_read_byte(0x68, 0x75);
// 	test = test & 0b01111110;

	InitUartCOM();
     816:	0e 94 05 0b 	call	0x160a	; 0x160a <InitUartCOM>
	sei();
     81a:	78 94       	sei
	SendLine("Uart dziala");
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	0e 94 3a 0b 	call	0x1674	; 0x1674 <SendLine>

	CalibrateMPU6050(gyro_offset, acc_offset);
     824:	66 e8       	ldi	r22, 0x86	; 134
     826:	71 e0       	ldi	r23, 0x01	; 1
     828:	8c e8       	ldi	r24, 0x8C	; 140
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	0e 94 1f 04 	call	0x83e	; 0x83e <CalibrateMPU6050>
	InitMPU6050();
     830:	0e 94 51 06 	call	0xca2	; 0xca2 <InitMPU6050>

    while (1) 
    {
		CheckRxBuffor();
     834:	0e 94 43 0c 	call	0x1886	; 0x1886 <CheckRxBuffor>
		ReadMPU6050();
     838:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <ReadMPU6050>
     83c:	fb cf       	rjmp	.-10     	; 0x834 <main+0x32>

0000083e <CalibrateMPU6050>:
#include "MPU6050_registers.h"
#include "Uart.h"
#include "Common.h"

void CalibrateMPU6050(int16_t gyro_offset[], int16_t acc_offset[])
{
     83e:	2f 92       	push	r2
     840:	3f 92       	push	r3
     842:	4f 92       	push	r4
     844:	5f 92       	push	r5
     846:	6f 92       	push	r6
     848:	7f 92       	push	r7
     84a:	8f 92       	push	r8
     84c:	9f 92       	push	r9
     84e:	af 92       	push	r10
     850:	bf 92       	push	r11
     852:	cf 92       	push	r12
     854:	df 92       	push	r13
     856:	ef 92       	push	r14
     858:	ff 92       	push	r15
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	cd b7       	in	r28, 0x3d	; 61
     864:	de b7       	in	r29, 0x3e	; 62
     866:	a4 97       	sbiw	r28, 0x24	; 36
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	f8 94       	cli
     86c:	de bf       	out	0x3e, r29	; 62
     86e:	0f be       	out	0x3f, r0	; 63
     870:	cd bf       	out	0x3d, r28	; 61
     872:	9a a3       	std	Y+34, r25	; 0x22
     874:	89 a3       	std	Y+33, r24	; 0x21
     876:	7c a3       	std	Y+36, r23	; 0x24
     878:	6b a3       	std	Y+35, r22	; 0x23
	int32_t gyro_bias[3] = {0, 0, 0};
	int32_t accel_bias[3] = {0, 0, 0};
	packet_total = 0;

	// reset device, reset all registers, clear gyro and accelerometer bias registers
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
     87a:	40 e8       	ldi	r20, 0x80	; 128
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	6b e6       	ldi	r22, 0x6B	; 107
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	88 e6       	ldi	r24, 0x68	; 104
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     88a:	2f ef       	ldi	r18, 0xFF	; 255
     88c:	31 ee       	ldi	r19, 0xE1	; 225
     88e:	44 e0       	ldi	r20, 0x04	; 4
     890:	21 50       	subi	r18, 0x01	; 1
     892:	30 40       	sbci	r19, 0x00	; 0
     894:	40 40       	sbci	r20, 0x00	; 0
     896:	e1 f7       	brne	.-8      	; 0x890 <CalibrateMPU6050+0x52>
     898:	00 c0       	rjmp	.+0      	; 0x89a <CalibrateMPU6050+0x5c>
     89a:	00 00       	nop
	_delay_ms(100);

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x01);
     89c:	41 e0       	ldi	r20, 0x01	; 1
     89e:	50 e0       	ldi	r21, 0x00	; 0
     8a0:	6b e6       	ldi	r22, 0x6B	; 107
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	88 e6       	ldi	r24, 0x68	; 104
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_2, 0x00);
     8ac:	40 e0       	ldi	r20, 0x00	; 0
     8ae:	50 e0       	ldi	r21, 0x00	; 0
     8b0:	6c e6       	ldi	r22, 0x6C	; 108
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	88 e6       	ldi	r24, 0x68	; 104
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
     8bc:	5f ef       	ldi	r21, 0xFF	; 255
     8be:	63 ec       	ldi	r22, 0xC3	; 195
     8c0:	79 e0       	ldi	r23, 0x09	; 9
     8c2:	51 50       	subi	r21, 0x01	; 1
     8c4:	60 40       	sbci	r22, 0x00	; 0
     8c6:	70 40       	sbci	r23, 0x00	; 0
     8c8:	e1 f7       	brne	.-8      	; 0x8c2 <CalibrateMPU6050+0x84>
     8ca:	00 c0       	rjmp	.+0      	; 0x8cc <CalibrateMPU6050+0x8e>
     8cc:	00 00       	nop
	_delay_ms(200);

	// Configure device for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	68 e3       	ldi	r22, 0x38	; 56
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
     8de:	40 e0       	ldi	r20, 0x00	; 0
     8e0:	50 e0       	ldi	r21, 0x00	; 0
     8e2:	63 e2       	ldi	r22, 0x23	; 35
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	88 e6       	ldi	r24, 0x68	; 104
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
     8ee:	40 e0       	ldi	r20, 0x00	; 0
     8f0:	50 e0       	ldi	r21, 0x00	; 0
     8f2:	6b e6       	ldi	r22, 0x6B	; 107
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	88 e6       	ldi	r24, 0x68	; 104
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
     8fe:	40 e0       	ldi	r20, 0x00	; 0
     900:	50 e0       	ldi	r21, 0x00	; 0
     902:	64 e2       	ldi	r22, 0x24	; 36
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	88 e6       	ldi	r24, 0x68	; 104
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	6a e6       	ldi	r22, 0x6A	; 106
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	88 e6       	ldi	r24, 0x68	; 104
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
     91e:	4c e0       	ldi	r20, 0x0C	; 12
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	6a e6       	ldi	r22, 0x6A	; 106
     924:	70 e0       	ldi	r23, 0x00	; 0
     926:	88 e6       	ldi	r24, 0x68	; 104
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
     92e:	8f e5       	ldi	r24, 0x5F	; 95
     930:	9a ee       	ldi	r25, 0xEA	; 234
     932:	01 97       	sbiw	r24, 0x01	; 1
     934:	f1 f7       	brne	.-4      	; 0x932 <__stack+0x33>
     936:	00 c0       	rjmp	.+0      	; 0x938 <__stack+0x39>
     938:	00 00       	nop
	_delay_ms(15);

	// Configure MPU6050 gyro and accelerometer for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
     93a:	41 e0       	ldi	r20, 0x01	; 1
     93c:	50 e0       	ldi	r21, 0x00	; 0
     93e:	6a e1       	ldi	r22, 0x1A	; 26
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	88 e6       	ldi	r24, 0x68	; 104
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
     94a:	40 e0       	ldi	r20, 0x00	; 0
     94c:	50 e0       	ldi	r21, 0x00	; 0
     94e:	69 e1       	ldi	r22, 0x19	; 25
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	88 e6       	ldi	r24, 0x68	; 104
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
     95a:	40 e0       	ldi	r20, 0x00	; 0
     95c:	50 e0       	ldi	r21, 0x00	; 0
     95e:	6b e1       	ldi	r22, 0x1B	; 27
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	88 e6       	ldi	r24, 0x68	; 104
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
     96a:	40 e0       	ldi	r20, 0x00	; 0
     96c:	50 e0       	ldi	r21, 0x00	; 0
     96e:	6c e1       	ldi	r22, 0x1C	; 28
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	88 e6       	ldi	r24, 0x68	; 104
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
     97a:	40 e4       	ldi	r20, 0x40	; 64
     97c:	50 e0       	ldi	r21, 0x00	; 0
     97e:	6a e6       	ldi	r22, 0x6A	; 106
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	88 e6       	ldi	r24, 0x68	; 104
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 1024 bytes in MPU-6050)
     98a:	48 e7       	ldi	r20, 0x78	; 120
     98c:	50 e0       	ldi	r21, 0x00	; 0
     98e:	63 e2       	ldi	r22, 0x23	; 35
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	88 e6       	ldi	r24, 0x68	; 104
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
     99a:	af e1       	ldi	r26, 0x1F	; 31
     99c:	be e4       	ldi	r27, 0x4E	; 78
     99e:	11 97       	sbiw	r26, 0x01	; 1
     9a0:	f1 f7       	brne	.-4      	; 0x99e <__stack+0x9f>
     9a2:	00 c0       	rjmp	.+0      	; 0x9a4 <__stack+0xa5>
     9a4:	00 00       	nop
     9a6:	bf ef       	ldi	r27, 0xFF	; 255
     9a8:	ef e8       	ldi	r30, 0x8F	; 143
     9aa:	f1 e0       	ldi	r31, 0x01	; 1
     9ac:	b1 50       	subi	r27, 0x01	; 1
     9ae:	e0 40       	sbci	r30, 0x00	; 0
     9b0:	f0 40       	sbci	r31, 0x00	; 0
     9b2:	e1 f7       	brne	.-8      	; 0x9ac <__stack+0xad>
     9b4:	00 c0       	rjmp	.+0      	; 0x9b6 <__stack+0xb7>
     9b6:	00 00       	nop

void CalibrateMPU6050(int16_t gyro_offset[], int16_t acc_offset[])
{
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, jj, packet_count, packet_total, fifo_count;
	int32_t gyro_bias[3] = {0, 0, 0};
     9b8:	19 8e       	std	Y+25, r1	; 0x19
     9ba:	1a 8e       	std	Y+26, r1	; 0x1a
     9bc:	1b 8e       	std	Y+27, r1	; 0x1b
     9be:	1c 8e       	std	Y+28, r1	; 0x1c
     9c0:	41 2c       	mov	r4, r1
     9c2:	51 2c       	mov	r5, r1
     9c4:	32 01       	movw	r6, r4
     9c6:	81 2c       	mov	r8, r1
     9c8:	91 2c       	mov	r9, r1
     9ca:	54 01       	movw	r10, r8
	int32_t accel_bias[3] = {0, 0, 0};
     9cc:	1d 8a       	std	Y+21, r1	; 0x15
     9ce:	1e 8a       	std	Y+22, r1	; 0x16
     9d0:	1f 8a       	std	Y+23, r1	; 0x17
     9d2:	18 8e       	std	Y+24, r1	; 0x18
     9d4:	19 8a       	std	Y+17, r1	; 0x11
     9d6:	1a 8a       	std	Y+18, r1	; 0x12
     9d8:	1b 8a       	std	Y+19, r1	; 0x13
     9da:	1c 8a       	std	Y+20, r1	; 0x14
     9dc:	1d 86       	std	Y+13, r1	; 0x0d
     9de:	1e 86       	std	Y+14, r1	; 0x0e
     9e0:	1f 86       	std	Y+15, r1	; 0x0f
     9e2:	18 8a       	std	Y+16, r1	; 0x10
	packet_total = 0;
     9e4:	c1 2c       	mov	r12, r1
     9e6:	d1 2c       	mov	r13, r1
	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 1024 bytes in MPU-6050)
	_delay_ms(5);

	for (jj = 0; jj < 20; jj++)	//read samples for 1 second
     9e8:	21 2c       	mov	r2, r1
     9ea:	31 2c       	mov	r3, r1
     9ec:	15 c0       	rjmp	.+42     	; 0xa18 <__stack+0x119>
     9ee:	2f ef       	ldi	r18, 0xFF	; 255
     9f0:	3f e8       	ldi	r19, 0x8F	; 143
     9f2:	41 e0       	ldi	r20, 0x01	; 1
     9f4:	21 50       	subi	r18, 0x01	; 1
     9f6:	30 40       	sbci	r19, 0x00	; 0
     9f8:	40 40       	sbci	r20, 0x00	; 0
     9fa:	e1 f7       	brne	.-8      	; 0x9f4 <__stack+0xf5>
     9fc:	00 c0       	rjmp	.+0      	; 0x9fe <__stack+0xff>
     9fe:	00 00       	nop
	{
		_delay_ms(32); // accumulate 50 samples in 50 milliseconds = 600 bytes
		// At end of sample accumulation, turn off FIFO sensor read
		if (jj == 19)	// Disable gyro and accelerometer sensors for FIFO
     a00:	53 e1       	ldi	r21, 0x13	; 19
     a02:	25 16       	cp	r2, r21
     a04:	31 04       	cpc	r3, r1
     a06:	41 f4       	brne	.+16     	; 0xa18 <__stack+0x119>
			I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x00);
     a08:	40 e0       	ldi	r20, 0x00	; 0
     a0a:	50 e0       	ldi	r21, 0x00	; 0
     a0c:	63 e2       	ldi	r22, 0x23	; 35
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	88 e6       	ldi	r24, 0x68	; 104
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
		I2C_read_buf(MPU6050_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
     a18:	9e 01       	movw	r18, r28
     a1a:	2f 5f       	subi	r18, 0xFF	; 255
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255
     a1e:	42 e0       	ldi	r20, 0x02	; 2
     a20:	50 e0       	ldi	r21, 0x00	; 0
     a22:	62 e7       	ldi	r22, 0x72	; 114
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	88 e6       	ldi	r24, 0x68	; 104
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	0e 94 c9 03 	call	0x792	; 0x792 <I2C_read_buf>
		fifo_count = ((uint16_t)data[0] << 8) | data[1];

		packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
     a2e:	29 81       	ldd	r18, Y+1	; 0x01
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	32 2f       	mov	r19, r18
     a34:	22 27       	eor	r18, r18
     a36:	8a 81       	ldd	r24, Y+2	; 0x02
     a38:	28 2b       	or	r18, r24
     a3a:	ab ea       	ldi	r26, 0xAB	; 171
     a3c:	ba ea       	ldi	r27, 0xAA	; 170
     a3e:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__umulhisi3>
     a42:	7c 01       	movw	r14, r24
     a44:	f6 94       	lsr	r15
     a46:	e7 94       	ror	r14
     a48:	f6 94       	lsr	r15
     a4a:	e7 94       	ror	r14
     a4c:	f6 94       	lsr	r15
     a4e:	e7 94       	ror	r14

		for (ii = 0; ii < packet_count; ii++) 
     a50:	e1 14       	cp	r14, r1
     a52:	f1 04       	cpc	r15, r1
     a54:	09 f4       	brne	.+2      	; 0xa58 <__stack+0x159>
     a56:	8f c0       	rjmp	.+286    	; 0xb76 <__stack+0x277>
     a58:	00 e0       	ldi	r16, 0x00	; 0
     a5a:	10 e0       	ldi	r17, 0x00	; 0
		{
			int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
			I2C_read_buf(MPU6050_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
     a5c:	9e 01       	movw	r18, r28
     a5e:	2f 5f       	subi	r18, 0xFF	; 255
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	4c e0       	ldi	r20, 0x0C	; 12
     a64:	50 e0       	ldi	r21, 0x00	; 0
     a66:	64 e7       	ldi	r22, 0x74	; 116
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	88 e6       	ldi	r24, 0x68	; 104
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 c9 03 	call	0x792	; 0x792 <I2C_read_buf>
			if (packet_total < 1024)
     a72:	c1 14       	cp	r12, r1
     a74:	64 e0       	ldi	r22, 0x04	; 4
     a76:	d6 06       	cpc	r13, r22
     a78:	08 f0       	brcs	.+2      	; 0xa7c <__stack+0x17d>
     a7a:	77 c0       	rjmp	.+238    	; 0xb6a <__stack+0x26b>
			{
				packet_total++;
     a7c:	7f ef       	ldi	r23, 0xFF	; 255
     a7e:	c7 1a       	sub	r12, r23
     a80:	d7 0a       	sbc	r13, r23
				accel_temp[2] = (int16_t) (((int16_t)data[4] << 8)  | data[5] ) ;
				gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8)  | data[7] ) ;
				gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8)  | data[9] ) ;
				gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
		
				accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
     a82:	89 81       	ldd	r24, Y+1	; 0x01
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	98 2f       	mov	r25, r24
     a88:	88 27       	eor	r24, r24
     a8a:	2a 81       	ldd	r18, Y+2	; 0x02
     a8c:	82 2b       	or	r24, r18
     a8e:	09 2e       	mov	r0, r25
     a90:	00 0c       	add	r0, r0
     a92:	aa 0b       	sbc	r26, r26
     a94:	bb 0b       	sbc	r27, r27
     a96:	2d 89       	ldd	r18, Y+21	; 0x15
     a98:	3e 89       	ldd	r19, Y+22	; 0x16
     a9a:	4f 89       	ldd	r20, Y+23	; 0x17
     a9c:	58 8d       	ldd	r21, Y+24	; 0x18
     a9e:	28 0f       	add	r18, r24
     aa0:	39 1f       	adc	r19, r25
     aa2:	4a 1f       	adc	r20, r26
     aa4:	5b 1f       	adc	r21, r27
     aa6:	2d 8b       	std	Y+21, r18	; 0x15
     aa8:	3e 8b       	std	Y+22, r19	; 0x16
     aaa:	4f 8b       	std	Y+23, r20	; 0x17
     aac:	58 8f       	std	Y+24, r21	; 0x18
				accel_bias[1] += (int32_t) accel_temp[1];
     aae:	8b 81       	ldd	r24, Y+3	; 0x03
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	98 2f       	mov	r25, r24
     ab4:	88 27       	eor	r24, r24
     ab6:	2c 81       	ldd	r18, Y+4	; 0x04
     ab8:	82 2b       	or	r24, r18
     aba:	09 2e       	mov	r0, r25
     abc:	00 0c       	add	r0, r0
     abe:	aa 0b       	sbc	r26, r26
     ac0:	bb 0b       	sbc	r27, r27
     ac2:	49 89       	ldd	r20, Y+17	; 0x11
     ac4:	5a 89       	ldd	r21, Y+18	; 0x12
     ac6:	6b 89       	ldd	r22, Y+19	; 0x13
     ac8:	7c 89       	ldd	r23, Y+20	; 0x14
     aca:	48 0f       	add	r20, r24
     acc:	59 1f       	adc	r21, r25
     ace:	6a 1f       	adc	r22, r26
     ad0:	7b 1f       	adc	r23, r27
     ad2:	49 8b       	std	Y+17, r20	; 0x11
     ad4:	5a 8b       	std	Y+18, r21	; 0x12
     ad6:	6b 8b       	std	Y+19, r22	; 0x13
     ad8:	7c 8b       	std	Y+20, r23	; 0x14
				accel_bias[2] += (int32_t) accel_temp[2];
     ada:	8d 81       	ldd	r24, Y+5	; 0x05
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	98 2f       	mov	r25, r24
     ae0:	88 27       	eor	r24, r24
     ae2:	2e 81       	ldd	r18, Y+6	; 0x06
     ae4:	82 2b       	or	r24, r18
     ae6:	09 2e       	mov	r0, r25
     ae8:	00 0c       	add	r0, r0
     aea:	aa 0b       	sbc	r26, r26
     aec:	bb 0b       	sbc	r27, r27
     aee:	2d 85       	ldd	r18, Y+13	; 0x0d
     af0:	3e 85       	ldd	r19, Y+14	; 0x0e
     af2:	4f 85       	ldd	r20, Y+15	; 0x0f
     af4:	58 89       	ldd	r21, Y+16	; 0x10
     af6:	28 0f       	add	r18, r24
     af8:	39 1f       	adc	r19, r25
     afa:	4a 1f       	adc	r20, r26
     afc:	5b 1f       	adc	r21, r27
     afe:	2d 87       	std	Y+13, r18	; 0x0d
     b00:	3e 87       	std	Y+14, r19	; 0x0e
     b02:	4f 87       	std	Y+15, r20	; 0x0f
     b04:	58 8b       	std	Y+16, r21	; 0x10
				gyro_bias[0]  += (int32_t) gyro_temp[0];
     b06:	8f 81       	ldd	r24, Y+7	; 0x07
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	98 2f       	mov	r25, r24
     b0c:	88 27       	eor	r24, r24
     b0e:	28 85       	ldd	r18, Y+8	; 0x08
     b10:	82 2b       	or	r24, r18
     b12:	09 2e       	mov	r0, r25
     b14:	00 0c       	add	r0, r0
     b16:	aa 0b       	sbc	r26, r26
     b18:	bb 0b       	sbc	r27, r27
     b1a:	49 8d       	ldd	r20, Y+25	; 0x19
     b1c:	5a 8d       	ldd	r21, Y+26	; 0x1a
     b1e:	6b 8d       	ldd	r22, Y+27	; 0x1b
     b20:	7c 8d       	ldd	r23, Y+28	; 0x1c
     b22:	48 0f       	add	r20, r24
     b24:	59 1f       	adc	r21, r25
     b26:	6a 1f       	adc	r22, r26
     b28:	7b 1f       	adc	r23, r27
     b2a:	49 8f       	std	Y+25, r20	; 0x19
     b2c:	5a 8f       	std	Y+26, r21	; 0x1a
     b2e:	6b 8f       	std	Y+27, r22	; 0x1b
     b30:	7c 8f       	std	Y+28, r23	; 0x1c
				gyro_bias[1]  += (int32_t) gyro_temp[1];
     b32:	89 85       	ldd	r24, Y+9	; 0x09
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	98 2f       	mov	r25, r24
     b38:	88 27       	eor	r24, r24
     b3a:	2a 85       	ldd	r18, Y+10	; 0x0a
     b3c:	82 2b       	or	r24, r18
     b3e:	09 2e       	mov	r0, r25
     b40:	00 0c       	add	r0, r0
     b42:	aa 0b       	sbc	r26, r26
     b44:	bb 0b       	sbc	r27, r27
     b46:	48 0e       	add	r4, r24
     b48:	59 1e       	adc	r5, r25
     b4a:	6a 1e       	adc	r6, r26
     b4c:	7b 1e       	adc	r7, r27
				gyro_bias[2]  += (int32_t) gyro_temp[2];
     b4e:	8b 85       	ldd	r24, Y+11	; 0x0b
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	98 2f       	mov	r25, r24
     b54:	88 27       	eor	r24, r24
     b56:	2c 85       	ldd	r18, Y+12	; 0x0c
     b58:	82 2b       	or	r24, r18
     b5a:	09 2e       	mov	r0, r25
     b5c:	00 0c       	add	r0, r0
     b5e:	aa 0b       	sbc	r26, r26
     b60:	bb 0b       	sbc	r27, r27
     b62:	88 0e       	add	r8, r24
     b64:	99 1e       	adc	r9, r25
     b66:	aa 1e       	adc	r10, r26
     b68:	bb 1e       	adc	r11, r27
		I2C_read_buf(MPU6050_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
		fifo_count = ((uint16_t)data[0] << 8) | data[1];

		packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging

		for (ii = 0; ii < packet_count; ii++) 
     b6a:	0f 5f       	subi	r16, 0xFF	; 255
     b6c:	1f 4f       	sbci	r17, 0xFF	; 255
     b6e:	e0 16       	cp	r14, r16
     b70:	f1 06       	cpc	r15, r17
     b72:	09 f0       	breq	.+2      	; 0xb76 <__stack+0x277>
     b74:	73 cf       	rjmp	.-282    	; 0xa5c <__stack+0x15d>
	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 1024 bytes in MPU-6050)
	_delay_ms(5);

	for (jj = 0; jj < 20; jj++)	//read samples for 1 second
     b76:	5f ef       	ldi	r21, 0xFF	; 255
     b78:	25 1a       	sub	r2, r21
     b7a:	35 0a       	sbc	r3, r21
     b7c:	64 e1       	ldi	r22, 0x14	; 20
     b7e:	26 16       	cp	r2, r22
     b80:	31 04       	cpc	r3, r1
     b82:	09 f0       	breq	.+2      	; 0xb86 <__stack+0x287>
     b84:	34 cf       	rjmp	.-408    	; 0x9ee <__stack+0xef>
				gyro_bias[2]  += (int32_t) gyro_temp[2];
			}
		}
	}

	accel_bias[0] /= (int32_t) packet_total; // Normalize sums to get average count biases
     b86:	c6 01       	movw	r24, r12
     b88:	a0 e0       	ldi	r26, 0x00	; 0
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	8d 8f       	std	Y+29, r24	; 0x1d
     b8e:	9e 8f       	std	Y+30, r25	; 0x1e
     b90:	af 8f       	std	Y+31, r26	; 0x1f
     b92:	b8 a3       	std	Y+32, r27	; 0x20
     b94:	6d 89       	ldd	r22, Y+21	; 0x15
     b96:	7e 89       	ldd	r23, Y+22	; 0x16
     b98:	8f 89       	ldd	r24, Y+23	; 0x17
     b9a:	98 8d       	ldd	r25, Y+24	; 0x18
     b9c:	2d 8d       	ldd	r18, Y+29	; 0x1d
     b9e:	3e 8d       	ldd	r19, Y+30	; 0x1e
     ba0:	4f 8d       	ldd	r20, Y+31	; 0x1f
     ba2:	58 a1       	ldd	r21, Y+32	; 0x20
     ba4:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <__divmodsi4>
     ba8:	2d 8b       	std	Y+21, r18	; 0x15
     baa:	3e 8b       	std	Y+22, r19	; 0x16
     bac:	4f 8b       	std	Y+23, r20	; 0x17
     bae:	58 8f       	std	Y+24, r21	; 0x18
	accel_bias[1] /= (int32_t) packet_total;
     bb0:	69 89       	ldd	r22, Y+17	; 0x11
     bb2:	7a 89       	ldd	r23, Y+18	; 0x12
     bb4:	8b 89       	ldd	r24, Y+19	; 0x13
     bb6:	9c 89       	ldd	r25, Y+20	; 0x14
     bb8:	2d 8d       	ldd	r18, Y+29	; 0x1d
     bba:	3e 8d       	ldd	r19, Y+30	; 0x1e
     bbc:	4f 8d       	ldd	r20, Y+31	; 0x1f
     bbe:	58 a1       	ldd	r21, Y+32	; 0x20
     bc0:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <__divmodsi4>
     bc4:	29 8b       	std	Y+17, r18	; 0x11
     bc6:	3a 8b       	std	Y+18, r19	; 0x12
     bc8:	4b 8b       	std	Y+19, r20	; 0x13
     bca:	5c 8b       	std	Y+20, r21	; 0x14
	accel_bias[2] /= (int32_t) packet_total;
     bcc:	6d 85       	ldd	r22, Y+13	; 0x0d
     bce:	7e 85       	ldd	r23, Y+14	; 0x0e
     bd0:	8f 85       	ldd	r24, Y+15	; 0x0f
     bd2:	98 89       	ldd	r25, Y+16	; 0x10
     bd4:	2d 8d       	ldd	r18, Y+29	; 0x1d
     bd6:	3e 8d       	ldd	r19, Y+30	; 0x1e
     bd8:	4f 8d       	ldd	r20, Y+31	; 0x1f
     bda:	58 a1       	ldd	r21, Y+32	; 0x20
     bdc:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <__divmodsi4>
     be0:	69 01       	movw	r12, r18
     be2:	7a 01       	movw	r14, r20
	gyro_bias[0]  /= (int32_t) packet_total;
     be4:	69 8d       	ldd	r22, Y+25	; 0x19
     be6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     be8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bea:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bec:	2d 8d       	ldd	r18, Y+29	; 0x1d
     bee:	3e 8d       	ldd	r19, Y+30	; 0x1e
     bf0:	4f 8d       	ldd	r20, Y+31	; 0x1f
     bf2:	58 a1       	ldd	r21, Y+32	; 0x20
     bf4:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <__divmodsi4>
     bf8:	2d 87       	std	Y+13, r18	; 0x0d
     bfa:	3e 87       	std	Y+14, r19	; 0x0e
     bfc:	4f 87       	std	Y+15, r20	; 0x0f
     bfe:	58 8b       	std	Y+16, r21	; 0x10
	gyro_bias[1]  /= (int32_t) packet_total;
     c00:	c3 01       	movw	r24, r6
     c02:	b2 01       	movw	r22, r4
     c04:	2d 8d       	ldd	r18, Y+29	; 0x1d
     c06:	3e 8d       	ldd	r19, Y+30	; 0x1e
     c08:	4f 8d       	ldd	r20, Y+31	; 0x1f
     c0a:	58 a1       	ldd	r21, Y+32	; 0x20
     c0c:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <__divmodsi4>
     c10:	29 01       	movw	r4, r18
     c12:	3a 01       	movw	r6, r20
	gyro_bias[2]  /= (int32_t) packet_total;
     c14:	c5 01       	movw	r24, r10
     c16:	b4 01       	movw	r22, r8
     c18:	2d 8d       	ldd	r18, Y+29	; 0x1d
     c1a:	3e 8d       	ldd	r19, Y+30	; 0x1e
     c1c:	4f 8d       	ldd	r20, Y+31	; 0x1f
     c1e:	58 a1       	ldd	r21, Y+32	; 0x20
     c20:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <__divmodsi4>

	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
     c24:	1c 14       	cp	r1, r12
     c26:	1d 04       	cpc	r1, r13
     c28:	1e 04       	cpc	r1, r14
     c2a:	1f 04       	cpc	r1, r15
     c2c:	34 f4       	brge	.+12     	; 0xc3a <__stack+0x33b>
     c2e:	d7 01       	movw	r26, r14
     c30:	c6 01       	movw	r24, r12
     c32:	90 54       	subi	r25, 0x40	; 64
     c34:	a1 09       	sbc	r26, r1
     c36:	b1 09       	sbc	r27, r1
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__stack+0x345>
	else {accel_bias[2] += (int32_t) accelsensitivity;}
     c3a:	d7 01       	movw	r26, r14
     c3c:	c6 01       	movw	r24, r12
     c3e:	90 5c       	subi	r25, 0xC0	; 192
     c40:	af 4f       	sbci	r26, 0xFF	; 255
     c42:	bf 4f       	sbci	r27, 0xFF	; 255
	
	gyro_offset[0] = (int16_t) gyro_bias[0];
     c44:	6d 85       	ldd	r22, Y+13	; 0x0d
     c46:	7e 85       	ldd	r23, Y+14	; 0x0e
     c48:	e9 a1       	ldd	r30, Y+33	; 0x21
     c4a:	fa a1       	ldd	r31, Y+34	; 0x22
     c4c:	71 83       	std	Z+1, r23	; 0x01
     c4e:	60 83       	st	Z, r22
	gyro_offset[1] = (int16_t) gyro_bias[1];
     c50:	53 82       	std	Z+3, r5	; 0x03
     c52:	42 82       	std	Z+2, r4	; 0x02
	gyro_offset[2] = (int16_t) gyro_bias[2];
     c54:	35 83       	std	Z+5, r19	; 0x05
     c56:	24 83       	std	Z+4, r18	; 0x04

	acc_offset[0]  = (int16_t) accel_bias[0];
     c58:	2d 89       	ldd	r18, Y+21	; 0x15
     c5a:	3e 89       	ldd	r19, Y+22	; 0x16
     c5c:	eb a1       	ldd	r30, Y+35	; 0x23
     c5e:	fc a1       	ldd	r31, Y+36	; 0x24
     c60:	31 83       	std	Z+1, r19	; 0x01
     c62:	20 83       	st	Z, r18
	acc_offset[1]  = (int16_t) accel_bias[1];
     c64:	49 89       	ldd	r20, Y+17	; 0x11
     c66:	5a 89       	ldd	r21, Y+18	; 0x12
     c68:	53 83       	std	Z+3, r21	; 0x03
     c6a:	42 83       	std	Z+2, r20	; 0x02
	acc_offset[2]  = (int16_t) accel_bias[2];
     c6c:	95 83       	std	Z+5, r25	; 0x05
     c6e:	84 83       	std	Z+4, r24	; 0x04
}
     c70:	a4 96       	adiw	r28, 0x24	; 36
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	cf 90       	pop	r12
     c8c:	bf 90       	pop	r11
     c8e:	af 90       	pop	r10
     c90:	9f 90       	pop	r9
     c92:	8f 90       	pop	r8
     c94:	7f 90       	pop	r7
     c96:	6f 90       	pop	r6
     c98:	5f 90       	pop	r5
     c9a:	4f 90       	pop	r4
     c9c:	3f 90       	pop	r3
     c9e:	2f 90       	pop	r2
     ca0:	08 95       	ret

00000ca2 <InitMPU6050>:


void InitMPU6050(void)
{
	// reset device, reset all registers, clear gyro and accelerometer bias registers
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
     ca2:	40 e8       	ldi	r20, 0x80	; 128
     ca4:	50 e0       	ldi	r21, 0x00	; 0
     ca6:	6b e6       	ldi	r22, 0x6B	; 107
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	88 e6       	ldi	r24, 0x68	; 104
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
     cb2:	2f ef       	ldi	r18, 0xFF	; 255
     cb4:	81 ee       	ldi	r24, 0xE1	; 225
     cb6:	94 e0       	ldi	r25, 0x04	; 4
     cb8:	21 50       	subi	r18, 0x01	; 1
     cba:	80 40       	sbci	r24, 0x00	; 0
     cbc:	90 40       	sbci	r25, 0x00	; 0
     cbe:	e1 f7       	brne	.-8      	; 0xcb8 <InitMPU6050+0x16>
     cc0:	00 c0       	rjmp	.+0      	; 0xcc2 <InitMPU6050+0x20>
     cc2:	00 00       	nop
	_delay_ms(100);

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x01);
     cc4:	41 e0       	ldi	r20, 0x01	; 1
     cc6:	50 e0       	ldi	r21, 0x00	; 0
     cc8:	6b e6       	ldi	r22, 0x6B	; 107
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	88 e6       	ldi	r24, 0x68	; 104
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_2, 0x00);
     cd4:	40 e0       	ldi	r20, 0x00	; 0
     cd6:	50 e0       	ldi	r21, 0x00	; 0
     cd8:	6c e6       	ldi	r22, 0x6C	; 108
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	88 e6       	ldi	r24, 0x68	; 104
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
     ce4:	2f ef       	ldi	r18, 0xFF	; 255
     ce6:	83 ec       	ldi	r24, 0xC3	; 195
     ce8:	99 e0       	ldi	r25, 0x09	; 9
     cea:	21 50       	subi	r18, 0x01	; 1
     cec:	80 40       	sbci	r24, 0x00	; 0
     cee:	90 40       	sbci	r25, 0x00	; 0
     cf0:	e1 f7       	brne	.-8      	; 0xcea <InitMPU6050+0x48>
     cf2:	00 c0       	rjmp	.+0      	; 0xcf4 <InitMPU6050+0x52>
     cf4:	00 00       	nop
	_delay_ms(200);

	// Configure device for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
     cf6:	40 e0       	ldi	r20, 0x00	; 0
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	68 e3       	ldi	r22, 0x38	; 56
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	88 e6       	ldi	r24, 0x68	; 104
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
     d06:	40 e0       	ldi	r20, 0x00	; 0
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	63 e2       	ldi	r22, 0x23	; 35
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	88 e6       	ldi	r24, 0x68	; 104
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
     d16:	40 e0       	ldi	r20, 0x00	; 0
     d18:	50 e0       	ldi	r21, 0x00	; 0
     d1a:	6b e6       	ldi	r22, 0x6B	; 107
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	88 e6       	ldi	r24, 0x68	; 104
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
     d26:	40 e0       	ldi	r20, 0x00	; 0
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	64 e2       	ldi	r22, 0x24	; 36
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	88 e6       	ldi	r24, 0x68	; 104
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
     d36:	40 e0       	ldi	r20, 0x00	; 0
     d38:	50 e0       	ldi	r21, 0x00	; 0
     d3a:	6a e6       	ldi	r22, 0x6A	; 106
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	88 e6       	ldi	r24, 0x68	; 104
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
     d46:	4c e0       	ldi	r20, 0x0C	; 12
     d48:	50 e0       	ldi	r21, 0x00	; 0
     d4a:	6a e6       	ldi	r22, 0x6A	; 106
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	88 e6       	ldi	r24, 0x68	; 104
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
     d56:	8f e5       	ldi	r24, 0x5F	; 95
     d58:	9a ee       	ldi	r25, 0xEA	; 234
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	f1 f7       	brne	.-4      	; 0xd5a <InitMPU6050+0xb8>
     d5e:	00 c0       	rjmp	.+0      	; 0xd60 <InitMPU6050+0xbe>
     d60:	00 00       	nop
	_delay_ms(15);

	// Configure MPU6050 gyro and accelerometer for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, CONFIG, 0x03);      // Set low-pass filter to 44 Hz
     d62:	43 e0       	ldi	r20, 0x03	; 3
     d64:	50 e0       	ldi	r21, 0x00	; 0
     d66:	6a e1       	ldi	r22, 0x1A	; 26
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	88 e6       	ldi	r24, 0x68	; 104
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, SMPLRT_DIV, 4);  // Set sample rate to 1000 Hz
     d72:	44 e0       	ldi	r20, 0x04	; 4
     d74:	50 e0       	ldi	r21, 0x00	; 0
     d76:	69 e1       	ldi	r22, 0x19	; 25
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	88 e6       	ldi	r24, 0x68	; 104
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
     d82:	40 e0       	ldi	r20, 0x00	; 0
     d84:	50 e0       	ldi	r21, 0x00	; 0
     d86:	6b e1       	ldi	r22, 0x1B	; 27
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	88 e6       	ldi	r24, 0x68	; 104
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
     d92:	40 e0       	ldi	r20, 0x00	; 0
     d94:	50 e0       	ldi	r21, 0x00	; 0
     d96:	6c e1       	ldi	r22, 0x1C	; 28
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	88 e6       	ldi	r24, 0x68	; 104
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>

	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
     da2:	40 e4       	ldi	r20, 0x40	; 64
     da4:	50 e0       	ldi	r21, 0x00	; 0
     da6:	6a e6       	ldi	r22, 0x6A	; 106
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	88 e6       	ldi	r24, 0x68	; 104
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 1024 bytes in MPU-6050)
     db2:	48 e7       	ldi	r20, 0x78	; 120
     db4:	50 e0       	ldi	r21, 0x00	; 0
     db6:	63 e2       	ldi	r22, 0x23	; 35
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	88 e6       	ldi	r24, 0x68	; 104
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 b1 03 	call	0x762	; 0x762 <I2C_write_byte>
     dc2:	08 95       	ret

00000dc4 <ReadMPU6050>:
}

void ReadMPU6050(void)
{
     dc4:	8f 92       	push	r8
     dc6:	9f 92       	push	r9
     dc8:	af 92       	push	r10
     dca:	bf 92       	push	r11
     dcc:	cf 92       	push	r12
     dce:	df 92       	push	r13
     dd0:	ef 92       	push	r14
     dd2:	ff 92       	push	r15
     dd4:	0f 93       	push	r16
     dd6:	1f 93       	push	r17
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
     de0:	68 97       	sbiw	r28, 0x18	; 24
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	f8 94       	cli
     de6:	de bf       	out	0x3e, r29	; 62
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, fifo_count, packet_count;
	uint8_t data[12];
	int16_t gyro[3];
	int16_t acc[3];

	I2C_read_buf(MPU6050_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
     dec:	9e 01       	movw	r18, r28
     dee:	2f 5f       	subi	r18, 0xFF	; 255
     df0:	3f 4f       	sbci	r19, 0xFF	; 255
     df2:	42 e0       	ldi	r20, 0x02	; 2
     df4:	50 e0       	ldi	r21, 0x00	; 0
     df6:	62 e7       	ldi	r22, 0x72	; 114
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	88 e6       	ldi	r24, 0x68	; 104
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	0e 94 c9 03 	call	0x792	; 0x792 <I2C_read_buf>
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	9b ea       	ldi	r25, 0xAB	; 171
     e06:	89 9f       	mul	r24, r25
     e08:	c1 2c       	mov	r12, r1
     e0a:	11 24       	eor	r1, r1
     e0c:	c6 94       	lsr	r12
     e0e:	c6 94       	lsr	r12
     e10:	c6 94       	lsr	r12

	for (i = 0; i < packet_count; i++)
     e12:	09 f4       	brne	.+2      	; 0xe16 <ReadMPU6050+0x52>
     e14:	6e c0       	rjmp	.+220    	; 0xef2 <ReadMPU6050+0x12e>
     e16:	d1 2c       	mov	r13, r1
		acc[2] = (int16_t) (((int16_t)data[4] << 8)  | data[5] ) ;
		gyro[0]  = (int16_t) (((int16_t)data[6] << 8)  | data[7] ) ;
		gyro[1]  = (int16_t) (((int16_t)data[8] << 8)  | data[9] ) ;
		gyro[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
			
		acc[0] -= acc_offset[0];
     e18:	0f 2e       	mov	r0, r31
     e1a:	f6 e8       	ldi	r31, 0x86	; 134
     e1c:	ef 2e       	mov	r14, r31
     e1e:	f1 e0       	ldi	r31, 0x01	; 1
     e20:	ff 2e       	mov	r15, r31
     e22:	f0 2d       	mov	r31, r0
		acc[1] -= acc_offset[1];
		acc[2] -= acc_offset[2];
		gyro[0] -= gyro_offset[0];
     e24:	0c e8       	ldi	r16, 0x8C	; 140
     e26:	11 e0       	ldi	r17, 0x01	; 1
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging

	for (i = 0; i < packet_count; i++)
	{
		I2C_read_buf(MPU6050_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
     e28:	9e 01       	movw	r18, r28
     e2a:	2f 5f       	subi	r18, 0xFF	; 255
     e2c:	3f 4f       	sbci	r19, 0xFF	; 255
     e2e:	4c e0       	ldi	r20, 0x0C	; 12
     e30:	50 e0       	ldi	r21, 0x00	; 0
     e32:	64 e7       	ldi	r22, 0x74	; 116
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	88 e6       	ldi	r24, 0x68	; 104
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 c9 03 	call	0x792	; 0x792 <I2C_read_buf>
		acc[0] = (int16_t) (((int16_t)data[0] << 8)  | data[1] ) ;  // Form signed 16-bit integer for each sample in FIFO
		acc[1] = (int16_t) (((int16_t)data[2] << 8)  | data[3] ) ;
     e3e:	eb 81       	ldd	r30, Y+3	; 0x03
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	fe 2f       	mov	r31, r30
     e44:	ee 27       	eor	r30, r30
     e46:	8c 81       	ldd	r24, Y+4	; 0x04
     e48:	4f 01       	movw	r8, r30
     e4a:	88 2a       	or	r8, r24
		acc[2] = (int16_t) (((int16_t)data[4] << 8)  | data[5] ) ;
     e4c:	6d 81       	ldd	r22, Y+5	; 0x05
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	76 2f       	mov	r23, r22
     e52:	66 27       	eor	r22, r22
     e54:	8e 81       	ldd	r24, Y+6	; 0x06
     e56:	68 2b       	or	r22, r24
		gyro[0]  = (int16_t) (((int16_t)data[6] << 8)  | data[7] ) ;
     e58:	4f 81       	ldd	r20, Y+7	; 0x07
     e5a:	50 e0       	ldi	r21, 0x00	; 0
     e5c:	54 2f       	mov	r21, r20
     e5e:	44 27       	eor	r20, r20
     e60:	88 85       	ldd	r24, Y+8	; 0x08
     e62:	48 2b       	or	r20, r24
		gyro[1]  = (int16_t) (((int16_t)data[8] << 8)  | data[9] ) ;
     e64:	29 85       	ldd	r18, Y+9	; 0x09
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	32 2f       	mov	r19, r18
     e6a:	22 27       	eor	r18, r18
     e6c:	8a 85       	ldd	r24, Y+10	; 0x0a
     e6e:	28 2b       	or	r18, r24
		gyro[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
     e70:	8b 85       	ldd	r24, Y+11	; 0x0b
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	98 2f       	mov	r25, r24
     e76:	88 27       	eor	r24, r24
     e78:	ac 85       	ldd	r26, Y+12	; 0x0c
     e7a:	8a 2b       	or	r24, r26
			
		acc[0] -= acc_offset[0];
     e7c:	a9 81       	ldd	r26, Y+1	; 0x01
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	ba 2f       	mov	r27, r26
     e82:	aa 27       	eor	r26, r26
     e84:	ba 80       	ldd	r11, Y+2	; 0x02
     e86:	ab 29       	or	r26, r11
     e88:	f7 01       	movw	r30, r14
     e8a:	a0 80       	ld	r10, Z
     e8c:	b1 80       	ldd	r11, Z+1	; 0x01
     e8e:	aa 19       	sub	r26, r10
     e90:	bb 09       	sbc	r27, r11
     e92:	bc 8b       	std	Y+20, r27	; 0x14
     e94:	ab 8b       	std	Y+19, r26	; 0x13
		acc[1] -= acc_offset[1];
     e96:	a2 81       	ldd	r26, Z+2	; 0x02
     e98:	b3 81       	ldd	r27, Z+3	; 0x03
     e9a:	f4 01       	movw	r30, r8
     e9c:	ea 1b       	sub	r30, r26
     e9e:	fb 0b       	sbc	r31, r27
     ea0:	fe 8b       	std	Y+22, r31	; 0x16
     ea2:	ed 8b       	std	Y+21, r30	; 0x15
		acc[2] -= acc_offset[2];
     ea4:	d7 01       	movw	r26, r14
     ea6:	14 96       	adiw	r26, 0x04	; 4
     ea8:	ed 91       	ld	r30, X+
     eaa:	fc 91       	ld	r31, X
     eac:	15 97       	sbiw	r26, 0x05	; 5
     eae:	6e 1b       	sub	r22, r30
     eb0:	7f 0b       	sbc	r23, r31
     eb2:	78 8f       	std	Y+24, r23	; 0x18
     eb4:	6f 8b       	std	Y+23, r22	; 0x17
		gyro[0] -= gyro_offset[0];
     eb6:	f8 01       	movw	r30, r16
     eb8:	60 81       	ld	r22, Z
     eba:	71 81       	ldd	r23, Z+1	; 0x01
     ebc:	46 1b       	sub	r20, r22
     ebe:	57 0b       	sbc	r21, r23
     ec0:	5e 87       	std	Y+14, r21	; 0x0e
     ec2:	4d 87       	std	Y+13, r20	; 0x0d
		gyro[1] -= gyro_offset[1];
     ec4:	42 81       	ldd	r20, Z+2	; 0x02
     ec6:	53 81       	ldd	r21, Z+3	; 0x03
     ec8:	24 1b       	sub	r18, r20
     eca:	35 0b       	sbc	r19, r21
     ecc:	38 8b       	std	Y+16, r19	; 0x10
     ece:	2f 87       	std	Y+15, r18	; 0x0f
		gyro[2] -= gyro_offset[2];
     ed0:	24 81       	ldd	r18, Z+4	; 0x04
     ed2:	35 81       	ldd	r19, Z+5	; 0x05
     ed4:	82 1b       	sub	r24, r18
     ed6:	93 0b       	sbc	r25, r19
     ed8:	9a 8b       	std	Y+18, r25	; 0x12
     eda:	89 8b       	std	Y+17, r24	; 0x11

		PlaceInGyroBuffor(gyro);
     edc:	ce 01       	movw	r24, r28
     ede:	0d 96       	adiw	r24, 0x0d	; 13
     ee0:	0e 94 a3 00 	call	0x146	; 0x146 <PlaceInGyroBuffor>
		PlaceInAccBuffor(acc);
     ee4:	ce 01       	movw	r24, r28
     ee6:	43 96       	adiw	r24, 0x13	; 19
     ee8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <PlaceInAccBuffor>

	I2C_read_buf(MPU6050_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging

	for (i = 0; i < packet_count; i++)
     eec:	d3 94       	inc	r13
     eee:	cd 10       	cpse	r12, r13
     ef0:	9b cf       	rjmp	.-202    	; 0xe28 <ReadMPU6050+0x64>
		gyro[2] -= gyro_offset[2];

		PlaceInGyroBuffor(gyro);
		PlaceInAccBuffor(acc);
	}
     ef2:	68 96       	adiw	r28, 0x18	; 24
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	1f 91       	pop	r17
     f04:	0f 91       	pop	r16
     f06:	ff 90       	pop	r15
     f08:	ef 90       	pop	r14
     f0a:	df 90       	pop	r13
     f0c:	cf 90       	pop	r12
     f0e:	bf 90       	pop	r11
     f10:	af 90       	pop	r10
     f12:	9f 90       	pop	r9
     f14:	8f 90       	pop	r8
     f16:	08 95       	ret

00000f18 <er_service>:
		
}

int8_t er_service(char * params)
{
	SendLine("Uart is working");
     f18:	8c e0       	ldi	r24, 0x0C	; 12
     f1a:	91 e0       	ldi	r25, 0x01	; 1
     f1c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <SendLine>
	return 0;
}
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	08 95       	ret

00000f24 <er_read>:

int8_t er_read(char * params)
{
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	2c 97       	sbiw	r28, 0x0c	; 12
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
	int16_t gyro[3];
	int16_t acc[3];
	
	ReadGyroSample(gyro);
     f38:	ce 01       	movw	r24, r28
     f3a:	01 96       	adiw	r24, 0x01	; 1
     f3c:	0e 94 0b 01 	call	0x216	; 0x216 <ReadGyroSample>
	ReadAccSample(acc);
     f40:	ce 01       	movw	r24, r28
     f42:	07 96       	adiw	r24, 0x07	; 7
     f44:	0e 94 39 01 	call	0x272	; 0x272 <ReadAccSample>

	SendStringInt("G X ", gyro[0]);
     f48:	49 81       	ldd	r20, Y+1	; 0x01
     f4a:	5a 81       	ldd	r21, Y+2	; 0x02
     f4c:	05 2e       	mov	r0, r21
     f4e:	00 0c       	add	r0, r0
     f50:	66 0b       	sbc	r22, r22
     f52:	77 0b       	sbc	r23, r23
     f54:	8c e1       	ldi	r24, 0x1C	; 28
     f56:	91 e0       	ldi	r25, 0x01	; 1
     f58:	0e 94 30 0c 	call	0x1860	; 0x1860 <SendStringInt>
	SendStringInt("G Y ", gyro[1]);
     f5c:	4b 81       	ldd	r20, Y+3	; 0x03
     f5e:	5c 81       	ldd	r21, Y+4	; 0x04
     f60:	05 2e       	mov	r0, r21
     f62:	00 0c       	add	r0, r0
     f64:	66 0b       	sbc	r22, r22
     f66:	77 0b       	sbc	r23, r23
     f68:	81 e2       	ldi	r24, 0x21	; 33
     f6a:	91 e0       	ldi	r25, 0x01	; 1
     f6c:	0e 94 30 0c 	call	0x1860	; 0x1860 <SendStringInt>
	SendStringInt("G Z ", gyro[2]);
     f70:	4d 81       	ldd	r20, Y+5	; 0x05
     f72:	5e 81       	ldd	r21, Y+6	; 0x06
     f74:	05 2e       	mov	r0, r21
     f76:	00 0c       	add	r0, r0
     f78:	66 0b       	sbc	r22, r22
     f7a:	77 0b       	sbc	r23, r23
     f7c:	86 e2       	ldi	r24, 0x26	; 38
     f7e:	91 e0       	ldi	r25, 0x01	; 1
     f80:	0e 94 30 0c 	call	0x1860	; 0x1860 <SendStringInt>
	SendStringInt("A X ", acc[0]);
     f84:	4f 81       	ldd	r20, Y+7	; 0x07
     f86:	58 85       	ldd	r21, Y+8	; 0x08
     f88:	05 2e       	mov	r0, r21
     f8a:	00 0c       	add	r0, r0
     f8c:	66 0b       	sbc	r22, r22
     f8e:	77 0b       	sbc	r23, r23
     f90:	8b e2       	ldi	r24, 0x2B	; 43
     f92:	91 e0       	ldi	r25, 0x01	; 1
     f94:	0e 94 30 0c 	call	0x1860	; 0x1860 <SendStringInt>
	SendStringInt("A Y ", acc[1]);
     f98:	49 85       	ldd	r20, Y+9	; 0x09
     f9a:	5a 85       	ldd	r21, Y+10	; 0x0a
     f9c:	05 2e       	mov	r0, r21
     f9e:	00 0c       	add	r0, r0
     fa0:	66 0b       	sbc	r22, r22
     fa2:	77 0b       	sbc	r23, r23
     fa4:	80 e3       	ldi	r24, 0x30	; 48
     fa6:	91 e0       	ldi	r25, 0x01	; 1
     fa8:	0e 94 30 0c 	call	0x1860	; 0x1860 <SendStringInt>
	SendStringInt("A Z ", acc[2]);
     fac:	4b 85       	ldd	r20, Y+11	; 0x0b
     fae:	5c 85       	ldd	r21, Y+12	; 0x0c
     fb0:	05 2e       	mov	r0, r21
     fb2:	00 0c       	add	r0, r0
     fb4:	66 0b       	sbc	r22, r22
     fb6:	77 0b       	sbc	r23, r23
     fb8:	85 e3       	ldi	r24, 0x35	; 53
     fba:	91 e0       	ldi	r25, 0x01	; 1
     fbc:	0e 94 30 0c 	call	0x1860	; 0x1860 <SendStringInt>

	return 0;
}
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	2c 96       	adiw	r28, 0x0c	; 12
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	08 95       	ret

00000fd4 <er_buf>:

int8_t er_buf(char * params)
{
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	00 d0       	rcall	.+0      	; 0xfda <er_buf+0x6>
     fda:	00 d0       	rcall	.+0      	; 0xfdc <er_buf+0x8>
     fdc:	00 d0       	rcall	.+0      	; 0xfde <er_buf+0xa>
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
	int16_t data[3];

	if (SamplesGyroBuf())
     fe2:	0e 94 67 01 	call	0x2ce	; 0x2ce <SamplesGyroBuf>
     fe6:	88 23       	and	r24, r24
     fe8:	11 f1       	breq	.+68     	; 0x102e <er_buf+0x5a>
	{
		ReadGyroBufAveraged(data);
     fea:	ce 01       	movw	r24, r28
     fec:	01 96       	adiw	r24, 0x01	; 1
     fee:	0e 94 66 02 	call	0x4cc	; 0x4cc <ReadGyroBufAveraged>

 	 	SendStringInt("G X ", data[0]);
     ff2:	49 81       	ldd	r20, Y+1	; 0x01
     ff4:	5a 81       	ldd	r21, Y+2	; 0x02
     ff6:	05 2e       	mov	r0, r21
     ff8:	00 0c       	add	r0, r0
     ffa:	66 0b       	sbc	r22, r22
     ffc:	77 0b       	sbc	r23, r23
     ffe:	8c e1       	ldi	r24, 0x1C	; 28
    1000:	91 e0       	ldi	r25, 0x01	; 1
    1002:	0e 94 30 0c 	call	0x1860	; 0x1860 <SendStringInt>
 	 	SendStringInt("G Y ", data[1]);
    1006:	4b 81       	ldd	r20, Y+3	; 0x03
    1008:	5c 81       	ldd	r21, Y+4	; 0x04
    100a:	05 2e       	mov	r0, r21
    100c:	00 0c       	add	r0, r0
    100e:	66 0b       	sbc	r22, r22
    1010:	77 0b       	sbc	r23, r23
    1012:	81 e2       	ldi	r24, 0x21	; 33
    1014:	91 e0       	ldi	r25, 0x01	; 1
    1016:	0e 94 30 0c 	call	0x1860	; 0x1860 <SendStringInt>
 	 	SendStringInt("G Z ", data[2]);
    101a:	4d 81       	ldd	r20, Y+5	; 0x05
    101c:	5e 81       	ldd	r21, Y+6	; 0x06
    101e:	05 2e       	mov	r0, r21
    1020:	00 0c       	add	r0, r0
    1022:	66 0b       	sbc	r22, r22
    1024:	77 0b       	sbc	r23, r23
    1026:	86 e2       	ldi	r24, 0x26	; 38
    1028:	91 e0       	ldi	r25, 0x01	; 1
    102a:	0e 94 30 0c 	call	0x1860	; 0x1860 <SendStringInt>
	}

 	if (SamplesAccBuf())
    102e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <SamplesAccBuf>
    1032:	88 23       	and	r24, r24
    1034:	11 f1       	breq	.+68     	; 0x107a <er_buf+0xa6>
 	{
		ReadAccBufAveraged(data);
    1036:	ce 01       	movw	r24, r28
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <ReadAccBufAveraged>

		SendStringInt("A X ", data[0]);
    103e:	49 81       	ldd	r20, Y+1	; 0x01
    1040:	5a 81       	ldd	r21, Y+2	; 0x02
    1042:	05 2e       	mov	r0, r21
    1044:	00 0c       	add	r0, r0
    1046:	66 0b       	sbc	r22, r22
    1048:	77 0b       	sbc	r23, r23
    104a:	8b e2       	ldi	r24, 0x2B	; 43
    104c:	91 e0       	ldi	r25, 0x01	; 1
    104e:	0e 94 30 0c 	call	0x1860	; 0x1860 <SendStringInt>
		SendStringInt("A Y ", data[1]);
    1052:	4b 81       	ldd	r20, Y+3	; 0x03
    1054:	5c 81       	ldd	r21, Y+4	; 0x04
    1056:	05 2e       	mov	r0, r21
    1058:	00 0c       	add	r0, r0
    105a:	66 0b       	sbc	r22, r22
    105c:	77 0b       	sbc	r23, r23
    105e:	80 e3       	ldi	r24, 0x30	; 48
    1060:	91 e0       	ldi	r25, 0x01	; 1
    1062:	0e 94 30 0c 	call	0x1860	; 0x1860 <SendStringInt>
		SendStringInt("A Z ", data[2]);
    1066:	4d 81       	ldd	r20, Y+5	; 0x05
    1068:	5e 81       	ldd	r21, Y+6	; 0x06
    106a:	05 2e       	mov	r0, r21
    106c:	00 0c       	add	r0, r0
    106e:	66 0b       	sbc	r22, r22
    1070:	77 0b       	sbc	r23, r23
    1072:	85 e3       	ldi	r24, 0x35	; 53
    1074:	91 e0       	ldi	r25, 0x01	; 1
    1076:	0e 94 30 0c 	call	0x1860	; 0x1860 <SendStringInt>
 	}

	SendStringInt("S ", SamplesAccBuf());
    107a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <SamplesAccBuf>
    107e:	48 2f       	mov	r20, r24
    1080:	50 e0       	ldi	r21, 0x00	; 0
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	8a e3       	ldi	r24, 0x3A	; 58
    1088:	91 e0       	ldi	r25, 0x01	; 1
    108a:	0e 94 30 0c 	call	0x1860	; 0x1860 <SendStringInt>
	return 0;
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	26 96       	adiw	r28, 0x06	; 6
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	08 95       	ret

000010a2 <ProcessString>:
	{"ER_BUF", er_buf},
};


void ProcessString(uint8_t start, uint8_t stop)
{
    10a2:	4f 92       	push	r4
    10a4:	5f 92       	push	r5
    10a6:	6f 92       	push	r6
    10a8:	8f 92       	push	r8
    10aa:	9f 92       	push	r9
    10ac:	af 92       	push	r10
    10ae:	bf 92       	push	r11
    10b0:	cf 92       	push	r12
    10b2:	df 92       	push	r13
    10b4:	ef 92       	push	r14
    10b6:	ff 92       	push	r15
    10b8:	0f 93       	push	r16
    10ba:	1f 93       	push	r17
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	a2 97       	sbiw	r28, 0x22	; 34
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	fe 01       	movw	r30, r28
    10d2:	31 96       	adiw	r30, 0x01	; 1
    10d4:	9e 01       	movw	r18, r28
    10d6:	2f 5d       	subi	r18, 0xDF	; 223
    10d8:	3f 4f       	sbci	r19, 0xFF	; 255
	char string[RX_SIZE];
	uint8_t i;	//counter value

	for (i=0; i<RX_SIZE; i++)
	{
		string[i] = 0;
    10da:	11 92       	st	Z+, r1
	
	//	stop = (stop +1) & RX_SIZE_BIN;
	char string[RX_SIZE];
	uint8_t i;	//counter value

	for (i=0; i<RX_SIZE; i++)
    10dc:	2e 17       	cp	r18, r30
    10de:	3f 07       	cpc	r19, r31
    10e0:	e1 f7       	brne	.-8      	; 0x10da <ProcessString+0x38>
	}

	i=0;

	// Assign rX string to command
	while (start!=stop)
    10e2:	86 17       	cp	r24, r22
    10e4:	99 f0       	breq	.+38     	; 0x110c <ProcessString+0x6a>
    10e6:	10 e0       	ldi	r17, 0x00	; 0
	{
		string[i] = RxBuffor[start];
    10e8:	a1 e0       	ldi	r26, 0x01	; 1
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	ac 0f       	add	r26, r28
    10ee:	bd 1f       	adc	r27, r29
    10f0:	a1 0f       	add	r26, r17
    10f2:	b1 1d       	adc	r27, r1
    10f4:	e8 2f       	mov	r30, r24
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	e2 5b       	subi	r30, 0xB2	; 178
    10fa:	fd 4f       	sbci	r31, 0xFD	; 253
    10fc:	90 81       	ld	r25, Z
    10fe:	9c 93       	st	X, r25
		start = (start + 1) & RX_SIZE_BIN;
    1100:	8f 5f       	subi	r24, 0xFF	; 255
    1102:	8f 71       	andi	r24, 0x1F	; 31
		i++;
    1104:	1f 5f       	subi	r17, 0xFF	; 255
	}

	i=0;

	// Assign rX string to command
	while (start!=stop)
    1106:	68 13       	cpse	r22, r24
    1108:	ef cf       	rjmp	.-34     	; 0x10e8 <ProcessString+0x46>
    110a:	01 c0       	rjmp	.+2      	; 0x110e <ProcessString+0x6c>
    110c:	10 e0       	ldi	r17, 0x00	; 0
	}

	char * rest;
	char * begining;

	begining = strtok_r(string, " ", &rest);
    110e:	ae 01       	movw	r20, r28
    1110:	4f 5d       	subi	r20, 0xDF	; 223
    1112:	5f 4f       	sbci	r21, 0xFF	; 255
    1114:	6b e4       	ldi	r22, 0x4B	; 75
    1116:	71 e0       	ldi	r23, 0x01	; 1
    1118:	ce 01       	movw	r24, r28
    111a:	01 96       	adiw	r24, 0x01	; 1
    111c:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <strtok_r>
    1120:	5c 01       	movw	r10, r24

	uint8_t j;
	uint8_t command_length;
	uint8_t string_length = strlen(begining);
    1122:	fc 01       	movw	r30, r24
    1124:	01 90       	ld	r0, Z+
    1126:	00 20       	and	r0, r0
    1128:	e9 f7       	brne	.-6      	; 0x1124 <ProcessString+0x82>
    112a:	31 97       	sbiw	r30, 0x01	; 1
    112c:	6e 2e       	mov	r6, r30
    112e:	68 1a       	sub	r6, r24
    1130:	0f 2e       	mov	r0, r31
    1132:	f6 ec       	ldi	r31, 0xC6	; 198
    1134:	ef 2e       	mov	r14, r31
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	ff 2e       	mov	r15, r31
    113a:	f0 2d       	mov	r31, r0
    113c:	c1 2c       	mov	r12, r1
    113e:	d1 2c       	mov	r13, r1
	for (j=0; j < RX_COMMANDS; j++)
    1140:	00 e0       	ldi	r16, 0x00	; 0
	{
		command_length = strlen_P(ER_commands[j].command);
		
		if (command_length == string_length)
		{
			if (0 == strncasecmp_P(begining, ER_commands[j].command, i))
    1142:	81 2e       	mov	r8, r17
    1144:	91 2c       	mov	r9, r1
#else
extern size_t __strlen_P(const char *) __ATTR_CONST__;  /* internal helper function */
__attribute__((__always_inline__)) static __inline__ size_t strlen_P(const char * s);
static __inline__ size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
    1146:	c7 01       	movw	r24, r14
    1148:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__strlen_P>
	uint8_t string_length = strlen(begining);
	for (j=0; j < RX_COMMANDS; j++)
	{
		command_length = strlen_P(ER_commands[j].command);
		
		if (command_length == string_length)
    114c:	68 12       	cpse	r6, r24
    114e:	18 c0       	rjmp	.+48     	; 0x1180 <ProcessString+0xde>
		{
			if (0 == strncasecmp_P(begining, ER_commands[j].command, i))
    1150:	a4 01       	movw	r20, r8
    1152:	b7 01       	movw	r22, r14
    1154:	c5 01       	movw	r24, r10
    1156:	0e 94 66 0d 	call	0x1acc	; 0x1acc <strncasecmp_P>
    115a:	89 2b       	or	r24, r25
    115c:	89 f4       	brne	.+34     	; 0x1180 <ProcessString+0xde>
			{
				_er_srv = (void *)pgm_read_word(&ER_commands[j].ER_service);
    115e:	86 e1       	ldi	r24, 0x16	; 22
    1160:	8c 9d       	mul	r24, r12
    1162:	f0 01       	movw	r30, r0
    1164:	8d 9d       	mul	r24, r13
    1166:	f0 0d       	add	r31, r0
    1168:	11 24       	eor	r1, r1
    116a:	e6 52       	subi	r30, 0x26	; 38
    116c:	ff 4f       	sbci	r31, 0xFF	; 255
    116e:	25 91       	lpm	r18, Z+
    1170:	34 91       	lpm	r19, Z
				_er_srv(rest);
    1172:	89 a1       	ldd	r24, Y+33	; 0x21
    1174:	9a a1       	ldd	r25, Y+34	; 0x22
    1176:	f9 01       	movw	r30, r18
    1178:	09 95       	icall
				break;
			}
		}
	}
	if (j==RX_COMMANDS)
    117a:	03 30       	cpi	r16, 0x03	; 3
    117c:	a1 f4       	brne	.+40     	; 0x11a6 <ProcessString+0x104>
    117e:	09 c0       	rjmp	.+18     	; 0x1192 <ProcessString+0xf0>
	begining = strtok_r(string, " ", &rest);

	uint8_t j;
	uint8_t command_length;
	uint8_t string_length = strlen(begining);
	for (j=0; j < RX_COMMANDS; j++)
    1180:	0f 5f       	subi	r16, 0xFF	; 255
    1182:	ff ef       	ldi	r31, 0xFF	; 255
    1184:	cf 1a       	sub	r12, r31
    1186:	df 0a       	sbc	r13, r31
    1188:	86 e1       	ldi	r24, 0x16	; 22
    118a:	e8 0e       	add	r14, r24
    118c:	f1 1c       	adc	r15, r1
    118e:	03 30       	cpi	r16, 0x03	; 3
    1190:	d1 f6       	brne	.-76     	; 0x1146 <ProcessString+0xa4>
			}
		}
	}
	if (j==RX_COMMANDS)
	{
		SendString("Wrong command: ");
    1192:	8d e3       	ldi	r24, 0x3D	; 61
    1194:	91 e0       	ldi	r25, 0x01	; 1
    1196:	0e 94 1d 0b 	call	0x163a	; 0x163a <SendString>
		SendString(string);
    119a:	ce 01       	movw	r24, r28
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	0e 94 1d 0b 	call	0x163a	; 0x163a <SendString>
		SendEnter();
    11a2:	0e 94 33 0b 	call	0x1666	; 0x1666 <SendEnter>
	}
		
}
    11a6:	a2 96       	adiw	r28, 0x22	; 34
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	1f 91       	pop	r17
    11b8:	0f 91       	pop	r16
    11ba:	ff 90       	pop	r15
    11bc:	ef 90       	pop	r14
    11be:	df 90       	pop	r13
    11c0:	cf 90       	pop	r12
    11c2:	bf 90       	pop	r11
    11c4:	af 90       	pop	r10
    11c6:	9f 90       	pop	r9
    11c8:	8f 90       	pop	r8
    11ca:	6f 90       	pop	r6
    11cc:	5f 90       	pop	r5
    11ce:	4f 90       	pop	r4
    11d0:	08 95       	ret

000011d2 <__vector_24>:
void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
}

ISR (TWI0_vect)	//TWI finished vector
{	//TWI interrupt
    11d2:	1f 92       	push	r1
    11d4:	0f 92       	push	r0
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	0f 92       	push	r0
    11da:	11 24       	eor	r1, r1
    11dc:	2f 93       	push	r18
    11de:	3f 93       	push	r19
    11e0:	4f 93       	push	r20
    11e2:	5f 93       	push	r21
    11e4:	8f 93       	push	r24
    11e6:	9f 93       	push	r25
    11e8:	af 93       	push	r26
    11ea:	bf 93       	push	r27
    11ec:	ef 93       	push	r30
    11ee:	ff 93       	push	r31

	uint8_t SLA = ((uint8_t)twi_bufor[twi_buf_pos.tail].sla << 1);
    11f0:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    11f4:	e6 95       	lsr	r30
    11f6:	e6 95       	lsr	r30
    11f8:	e6 95       	lsr	r30
    11fa:	e7 70       	andi	r30, 0x07	; 7
    11fc:	4e 2f       	mov	r20, r30
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	84 e1       	ldi	r24, 0x14	; 20
    1202:	e8 9f       	mul	r30, r24
    1204:	f0 01       	movw	r30, r0
    1206:	11 24       	eor	r1, r1
    1208:	e2 55       	subi	r30, 0x52	; 82
    120a:	fe 4f       	sbci	r31, 0xFE	; 254
    120c:	80 81       	ld	r24, Z
    120e:	28 2f       	mov	r18, r24
    1210:	2e 7f       	andi	r18, 0xFE	; 254
	uint8_t REG = twi_bufor[twi_buf_pos.tail].reg;
	
	switch (twi_bufor[twi_buf_pos.tail].status){
    1212:	e3 89       	ldd	r30, Z+19	; 0x13
    1214:	8e 2f       	mov	r24, r30
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	fc 01       	movw	r30, r24
    121a:	34 97       	sbiw	r30, 0x04	; 4
    121c:	e9 30       	cpi	r30, 0x09	; 9
    121e:	f1 05       	cpc	r31, r1
    1220:	08 f0       	brcs	.+2      	; 0x1224 <__vector_24+0x52>
    1222:	e4 c1       	rjmp	.+968    	; 0x15ec <__vector_24+0x41a>
    1224:	e6 5a       	subi	r30, 0xA6	; 166
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <__tablejump2__>
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    122c:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    1230:	85 e8       	ldi	r24, 0x85	; 133
    1232:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	uint8_t REG = twi_bufor[twi_buf_pos.tail].reg;
	
	switch (twi_bufor[twi_buf_pos.tail].status){
		case start:
			TWI_write(SLA);
			twi_bufor[twi_buf_pos.tail].status = write_adress;
    1236:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    123a:	e6 95       	lsr	r30
    123c:	e6 95       	lsr	r30
    123e:	e6 95       	lsr	r30
    1240:	e7 70       	andi	r30, 0x07	; 7
    1242:	84 e1       	ldi	r24, 0x14	; 20
    1244:	e8 9f       	mul	r30, r24
    1246:	f0 01       	movw	r30, r0
    1248:	11 24       	eor	r1, r1
    124a:	e2 55       	subi	r30, 0x52	; 82
    124c:	fe 4f       	sbci	r31, 0xFE	; 254
    124e:	85 e0       	ldi	r24, 0x05	; 5
    1250:	83 8b       	std	Z+19, r24	; 0x13
			break;
    1252:	cc c1       	rjmp	.+920    	; 0x15ec <__vector_24+0x41a>

ISR (TWI0_vect)	//TWI finished vector
{	//TWI interrupt

	uint8_t SLA = ((uint8_t)twi_bufor[twi_buf_pos.tail].sla << 1);
	uint8_t REG = twi_bufor[twi_buf_pos.tail].reg;
    1254:	84 e1       	ldi	r24, 0x14	; 20
    1256:	84 9f       	mul	r24, r20
    1258:	f0 01       	movw	r30, r0
    125a:	85 9f       	mul	r24, r21
    125c:	f0 0d       	add	r31, r0
    125e:	11 24       	eor	r1, r1
    1260:	e2 55       	subi	r30, 0x52	; 82
    1262:	fe 4f       	sbci	r31, 0xFE	; 254
    1264:	91 81       	ldd	r25, Z+1	; 0x01
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    1266:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    126a:	95 e8       	ldi	r25, 0x85	; 133
    126c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			twi_bufor[twi_buf_pos.tail].status = write_adress;
			break;

		case write_adress:
			TWI_write(REG);
			twi_bufor[twi_buf_pos.tail].status = write_register;
    1270:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    1274:	e6 95       	lsr	r30
    1276:	e6 95       	lsr	r30
    1278:	e6 95       	lsr	r30
    127a:	e7 70       	andi	r30, 0x07	; 7
    127c:	8e 9f       	mul	r24, r30
    127e:	f0 01       	movw	r30, r0
    1280:	11 24       	eor	r1, r1
    1282:	e2 55       	subi	r30, 0x52	; 82
    1284:	fe 4f       	sbci	r31, 0xFE	; 254
    1286:	86 e0       	ldi	r24, 0x06	; 6
    1288:	83 8b       	std	Z+19, r24	; 0x13
			break;
    128a:	b0 c1       	rjmp	.+864    	; 0x15ec <__vector_24+0x41a>

		case write_register:
			if (twi_bufor[twi_buf_pos.tail].read)	//check if reading is required
    128c:	84 e1       	ldi	r24, 0x14	; 20
    128e:	84 9f       	mul	r24, r20
    1290:	f0 01       	movw	r30, r0
    1292:	85 9f       	mul	r24, r21
    1294:	f0 0d       	add	r31, r0
    1296:	11 24       	eor	r1, r1
    1298:	e2 55       	subi	r30, 0x52	; 82
    129a:	fe 4f       	sbci	r31, 0xFE	; 254
    129c:	80 81       	ld	r24, Z
    129e:	80 ff       	sbrs	r24, 0
    12a0:	12 c0       	rjmp	.+36     	; 0x12c6 <__vector_24+0xf4>
}

//low level functions

void TWI_start(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA)|(1<<TWIE);
    12a2:	85 ea       	ldi	r24, 0xA5	; 165
    12a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

		case write_register:
			if (twi_bufor[twi_buf_pos.tail].read)	//check if reading is required
			{
				TWI_start();
				twi_bufor[twi_buf_pos.tail].status = restart;
    12a8:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    12ac:	e6 95       	lsr	r30
    12ae:	e6 95       	lsr	r30
    12b0:	e6 95       	lsr	r30
    12b2:	e7 70       	andi	r30, 0x07	; 7
    12b4:	84 e1       	ldi	r24, 0x14	; 20
    12b6:	e8 9f       	mul	r30, r24
    12b8:	f0 01       	movw	r30, r0
    12ba:	11 24       	eor	r1, r1
    12bc:	e2 55       	subi	r30, 0x52	; 82
    12be:	fe 4f       	sbci	r31, 0xFE	; 254
    12c0:	87 e0       	ldi	r24, 0x07	; 7
    12c2:	83 8b       	std	Z+19, r24	; 0x13
    12c4:	93 c1       	rjmp	.+806    	; 0x15ec <__vector_24+0x41a>
			}
			else	//process writing
			{
				if (twi_bufor[twi_buf_pos.tail].lenght > 1){	//if more than 1 char to write
    12c6:	84 e1       	ldi	r24, 0x14	; 20
    12c8:	84 9f       	mul	r24, r20
    12ca:	f0 01       	movw	r30, r0
    12cc:	85 9f       	mul	r24, r21
    12ce:	f0 0d       	add	r31, r0
    12d0:	11 24       	eor	r1, r1
    12d2:	e2 55       	subi	r30, 0x52	; 82
    12d4:	fe 4f       	sbci	r31, 0xFE	; 254
    12d6:	87 85       	ldd	r24, Z+15	; 0x0f
    12d8:	82 30       	cpi	r24, 0x02	; 2
    12da:	e8 f0       	brcs	.+58     	; 0x1316 <__vector_24+0x144>
					TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
    12dc:	84 e1       	ldi	r24, 0x14	; 20
    12de:	84 9f       	mul	r24, r20
    12e0:	f0 01       	movw	r30, r0
    12e2:	85 9f       	mul	r24, r21
    12e4:	f0 0d       	add	r31, r0
    12e6:	11 24       	eor	r1, r1
    12e8:	e2 55       	subi	r30, 0x52	; 82
    12ea:	fe 4f       	sbci	r31, 0xFE	; 254
    12ec:	92 81       	ldd	r25, Z+2	; 0x02
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    12ee:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    12f2:	95 e8       	ldi	r25, 0x85	; 133
    12f4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			}
			else	//process writing
			{
				if (twi_bufor[twi_buf_pos.tail].lenght > 1){	//if more than 1 char to write
					TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
					twi_bufor[twi_buf_pos.tail].status = write;
    12f8:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    12fc:	e6 95       	lsr	r30
    12fe:	e6 95       	lsr	r30
    1300:	e6 95       	lsr	r30
    1302:	e7 70       	andi	r30, 0x07	; 7
    1304:	8e 9f       	mul	r24, r30
    1306:	f0 01       	movw	r30, r0
    1308:	11 24       	eor	r1, r1
    130a:	e2 55       	subi	r30, 0x52	; 82
    130c:	fe 4f       	sbci	r31, 0xFE	; 254
    130e:	8b e0       	ldi	r24, 0x0B	; 11
    1310:	83 8b       	std	Z+19, r24	; 0x13
					twi_bufor[twi_buf_pos.tail].buf_pos = 0;
    1312:	14 86       	std	Z+12, r1	; 0x0c
    1314:	1b c0       	rjmp	.+54     	; 0x134c <__vector_24+0x17a>
				}

				else {	//only 1 byte to send
					TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
    1316:	84 e1       	ldi	r24, 0x14	; 20
    1318:	84 9f       	mul	r24, r20
    131a:	f0 01       	movw	r30, r0
    131c:	85 9f       	mul	r24, r21
    131e:	f0 0d       	add	r31, r0
    1320:	11 24       	eor	r1, r1
    1322:	e2 55       	subi	r30, 0x52	; 82
    1324:	fe 4f       	sbci	r31, 0xFE	; 254
    1326:	92 81       	ldd	r25, Z+2	; 0x02
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    1328:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    132c:	95 e8       	ldi	r25, 0x85	; 133
    132e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
					twi_bufor[twi_buf_pos.tail].buf_pos = 0;
				}

				else {	//only 1 byte to send
					TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
					twi_bufor[twi_buf_pos.tail].status = last_byte_write;
    1332:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    1336:	e6 95       	lsr	r30
    1338:	e6 95       	lsr	r30
    133a:	e6 95       	lsr	r30
    133c:	e7 70       	andi	r30, 0x07	; 7
    133e:	8e 9f       	mul	r24, r30
    1340:	f0 01       	movw	r30, r0
    1342:	11 24       	eor	r1, r1
    1344:	e2 55       	subi	r30, 0x52	; 82
    1346:	fe 4f       	sbci	r31, 0xFE	; 254
    1348:	8c e0       	ldi	r24, 0x0C	; 12
    134a:	83 8b       	std	Z+19, r24	; 0x13
				}
				twi_bufor[twi_buf_pos.tail].lenght --;
    134c:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    1350:	e6 95       	lsr	r30
    1352:	e6 95       	lsr	r30
    1354:	e6 95       	lsr	r30
    1356:	e7 70       	andi	r30, 0x07	; 7
    1358:	84 e1       	ldi	r24, 0x14	; 20
    135a:	e8 9f       	mul	r30, r24
    135c:	f0 01       	movw	r30, r0
    135e:	11 24       	eor	r1, r1
    1360:	e2 55       	subi	r30, 0x52	; 82
    1362:	fe 4f       	sbci	r31, 0xFE	; 254
    1364:	87 85       	ldd	r24, Z+15	; 0x0f
    1366:	81 50       	subi	r24, 0x01	; 1
    1368:	87 87       	std	Z+15, r24	; 0x0f
    136a:	40 c1       	rjmp	.+640    	; 0x15ec <__vector_24+0x41a>
			}
			break;

		case restart:
			SLA++;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	82 0f       	add	r24, r18
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    1370:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    1374:	85 e8       	ldi	r24, 0x85	; 133
    1376:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;

		case restart:
			SLA++;
			TWI_write(SLA);
			twi_bufor[twi_buf_pos.tail].status = set_to_read;
    137a:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    137e:	e6 95       	lsr	r30
    1380:	e6 95       	lsr	r30
    1382:	e6 95       	lsr	r30
    1384:	e7 70       	andi	r30, 0x07	; 7
    1386:	84 e1       	ldi	r24, 0x14	; 20
    1388:	e8 9f       	mul	r30, r24
    138a:	f0 01       	movw	r30, r0
    138c:	11 24       	eor	r1, r1
    138e:	e2 55       	subi	r30, 0x52	; 82
    1390:	fe 4f       	sbci	r31, 0xFE	; 254
    1392:	88 e0       	ldi	r24, 0x08	; 8
    1394:	83 8b       	std	Z+19, r24	; 0x13
			break;
    1396:	2a c1       	rjmp	.+596    	; 0x15ec <__vector_24+0x41a>

		case set_to_read:
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){
    1398:	84 e1       	ldi	r24, 0x14	; 20
    139a:	84 9f       	mul	r24, r20
    139c:	f0 01       	movw	r30, r0
    139e:	85 9f       	mul	r24, r21
    13a0:	f0 0d       	add	r31, r0
    13a2:	11 24       	eor	r1, r1
    13a4:	e2 55       	subi	r30, 0x52	; 82
    13a6:	fe 4f       	sbci	r31, 0xFE	; 254
    13a8:	87 85       	ldd	r24, Z+15	; 0x0f
    13aa:	82 30       	cpi	r24, 0x02	; 2
    13ac:	90 f0       	brcs	.+36     	; 0x13d2 <__vector_24+0x200>
	TWDR0 = bajt;
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
}

void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
    13ae:	85 ec       	ldi	r24, 0xC5	; 197
    13b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;

		case set_to_read:
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){
				TWI_read(ACK);
				twi_bufor[twi_buf_pos.tail].status = read;
    13b4:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    13b8:	e6 95       	lsr	r30
    13ba:	e6 95       	lsr	r30
    13bc:	e6 95       	lsr	r30
    13be:	e7 70       	andi	r30, 0x07	; 7
    13c0:	84 e1       	ldi	r24, 0x14	; 20
    13c2:	e8 9f       	mul	r30, r24
    13c4:	f0 01       	movw	r30, r0
    13c6:	11 24       	eor	r1, r1
    13c8:	e2 55       	subi	r30, 0x52	; 82
    13ca:	fe 4f       	sbci	r31, 0xFE	; 254
    13cc:	89 e0       	ldi	r24, 0x09	; 9
    13ce:	83 8b       	std	Z+19, r24	; 0x13
    13d0:	11 c0       	rjmp	.+34     	; 0x13f4 <__vector_24+0x222>
	TWDR0 = bajt;
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
}

void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
    13d2:	85 e8       	ldi	r24, 0x85	; 133
    13d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

			}
			
			else{
				TWI_read(NACK);
				twi_bufor[twi_buf_pos.tail].status = stop_reading;
    13d8:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    13dc:	e6 95       	lsr	r30
    13de:	e6 95       	lsr	r30
    13e0:	e6 95       	lsr	r30
    13e2:	e7 70       	andi	r30, 0x07	; 7
    13e4:	84 e1       	ldi	r24, 0x14	; 20
    13e6:	e8 9f       	mul	r30, r24
    13e8:	f0 01       	movw	r30, r0
    13ea:	11 24       	eor	r1, r1
    13ec:	e2 55       	subi	r30, 0x52	; 82
    13ee:	fe 4f       	sbci	r31, 0xFE	; 254
    13f0:	8a e0       	ldi	r24, 0x0A	; 10
    13f2:	83 8b       	std	Z+19, r24	; 0x13
			}

			twi_bufor[twi_buf_pos.tail].lenght --;
    13f4:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    13f8:	e6 95       	lsr	r30
    13fa:	e6 95       	lsr	r30
    13fc:	e6 95       	lsr	r30
    13fe:	e7 70       	andi	r30, 0x07	; 7
    1400:	84 e1       	ldi	r24, 0x14	; 20
    1402:	e8 9f       	mul	r30, r24
    1404:	f0 01       	movw	r30, r0
    1406:	11 24       	eor	r1, r1
    1408:	e2 55       	subi	r30, 0x52	; 82
    140a:	fe 4f       	sbci	r31, 0xFE	; 254
    140c:	87 85       	ldd	r24, Z+15	; 0x0f
    140e:	81 50       	subi	r24, 0x01	; 1
    1410:	87 87       	std	Z+15, r24	; 0x0f
			break;
    1412:	ec c0       	rjmp	.+472    	; 0x15ec <__vector_24+0x41a>

		case read:
			*twi_bufor[twi_buf_pos.tail].bufor_ref++ = TWDR0;	//read received byte
    1414:	84 e1       	ldi	r24, 0x14	; 20
    1416:	84 9f       	mul	r24, r20
    1418:	f0 01       	movw	r30, r0
    141a:	85 9f       	mul	r24, r21
    141c:	f0 0d       	add	r31, r0
    141e:	11 24       	eor	r1, r1
    1420:	e2 55       	subi	r30, 0x52	; 82
    1422:	fe 4f       	sbci	r31, 0xFE	; 254
    1424:	a5 85       	ldd	r26, Z+13	; 0x0d
    1426:	b6 85       	ldd	r27, Z+14	; 0x0e
    1428:	9d 01       	movw	r18, r26
    142a:	2f 5f       	subi	r18, 0xFF	; 255
    142c:	3f 4f       	sbci	r19, 0xFF	; 255
    142e:	36 87       	std	Z+14, r19	; 0x0e
    1430:	25 87       	std	Z+13, r18	; 0x0d
    1432:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1436:	9c 93       	st	X, r25
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){
    1438:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    143c:	e6 95       	lsr	r30
    143e:	e6 95       	lsr	r30
    1440:	e6 95       	lsr	r30
    1442:	e7 70       	andi	r30, 0x07	; 7
    1444:	8e 9f       	mul	r24, r30
    1446:	f0 01       	movw	r30, r0
    1448:	11 24       	eor	r1, r1
    144a:	e2 55       	subi	r30, 0x52	; 82
    144c:	fe 4f       	sbci	r31, 0xFE	; 254
    144e:	87 85       	ldd	r24, Z+15	; 0x0f
    1450:	82 30       	cpi	r24, 0x02	; 2
    1452:	90 f0       	brcs	.+36     	; 0x1478 <__vector_24+0x2a6>
	TWDR0 = bajt;
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
}

void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
    1454:	85 ec       	ldi	r24, 0xC5	; 197
    1456:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

		case read:
			*twi_bufor[twi_buf_pos.tail].bufor_ref++ = TWDR0;	//read received byte
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){
				TWI_read(ACK);	//going to read more
				twi_bufor[twi_buf_pos.tail].status = read;
    145a:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    145e:	e6 95       	lsr	r30
    1460:	e6 95       	lsr	r30
    1462:	e6 95       	lsr	r30
    1464:	e7 70       	andi	r30, 0x07	; 7
    1466:	84 e1       	ldi	r24, 0x14	; 20
    1468:	e8 9f       	mul	r30, r24
    146a:	f0 01       	movw	r30, r0
    146c:	11 24       	eor	r1, r1
    146e:	e2 55       	subi	r30, 0x52	; 82
    1470:	fe 4f       	sbci	r31, 0xFE	; 254
    1472:	89 e0       	ldi	r24, 0x09	; 9
    1474:	83 8b       	std	Z+19, r24	; 0x13
    1476:	11 c0       	rjmp	.+34     	; 0x149a <__vector_24+0x2c8>
	TWDR0 = bajt;
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
}

void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
    1478:	85 e8       	ldi	r24, 0x85	; 133
    147a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				TWI_read(ACK);	//going to read more
				twi_bufor[twi_buf_pos.tail].status = read;
			}
			else{
				TWI_read(NACK);	//finishing reading
				twi_bufor[twi_buf_pos.tail].status = stop_reading;
    147e:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    1482:	e6 95       	lsr	r30
    1484:	e6 95       	lsr	r30
    1486:	e6 95       	lsr	r30
    1488:	e7 70       	andi	r30, 0x07	; 7
    148a:	84 e1       	ldi	r24, 0x14	; 20
    148c:	e8 9f       	mul	r30, r24
    148e:	f0 01       	movw	r30, r0
    1490:	11 24       	eor	r1, r1
    1492:	e2 55       	subi	r30, 0x52	; 82
    1494:	fe 4f       	sbci	r31, 0xFE	; 254
    1496:	8a e0       	ldi	r24, 0x0A	; 10
    1498:	83 8b       	std	Z+19, r24	; 0x13
			}
			twi_bufor[twi_buf_pos.tail].lenght --;
    149a:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    149e:	e6 95       	lsr	r30
    14a0:	e6 95       	lsr	r30
    14a2:	e6 95       	lsr	r30
    14a4:	e7 70       	andi	r30, 0x07	; 7
    14a6:	84 e1       	ldi	r24, 0x14	; 20
    14a8:	e8 9f       	mul	r30, r24
    14aa:	f0 01       	movw	r30, r0
    14ac:	11 24       	eor	r1, r1
    14ae:	e2 55       	subi	r30, 0x52	; 82
    14b0:	fe 4f       	sbci	r31, 0xFE	; 254
    14b2:	87 85       	ldd	r24, Z+15	; 0x0f
    14b4:	81 50       	subi	r24, 0x01	; 1
    14b6:	87 87       	std	Z+15, r24	; 0x0f
			break;
    14b8:	99 c0       	rjmp	.+306    	; 0x15ec <__vector_24+0x41a>

		case stop_reading:
			*twi_bufor[twi_buf_pos.tail].bufor_ref++ = TWDR0;	//read last received byte
    14ba:	84 e1       	ldi	r24, 0x14	; 20
    14bc:	84 9f       	mul	r24, r20
    14be:	f0 01       	movw	r30, r0
    14c0:	85 9f       	mul	r24, r21
    14c2:	f0 0d       	add	r31, r0
    14c4:	11 24       	eor	r1, r1
    14c6:	e2 55       	subi	r30, 0x52	; 82
    14c8:	fe 4f       	sbci	r31, 0xFE	; 254
    14ca:	a5 85       	ldd	r26, Z+13	; 0x0d
    14cc:	b6 85       	ldd	r27, Z+14	; 0x0e
    14ce:	9d 01       	movw	r18, r26
    14d0:	2f 5f       	subi	r18, 0xFF	; 255
    14d2:	3f 4f       	sbci	r19, 0xFF	; 255
    14d4:	36 87       	std	Z+14, r19	; 0x0e
    14d6:	25 87       	std	Z+13, r18	; 0x0d
    14d8:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    14dc:	9c 93       	st	X, r25
			*twi_bufor[twi_buf_pos.tail].flag_register = twi_bufor[twi_buf_pos.tail].flag_mask;	//set read done flag
    14de:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    14e2:	e6 95       	lsr	r30
    14e4:	e6 95       	lsr	r30
    14e6:	e6 95       	lsr	r30
    14e8:	e7 70       	andi	r30, 0x07	; 7
    14ea:	8e 9f       	mul	r24, r30
    14ec:	f0 01       	movw	r30, r0
    14ee:	11 24       	eor	r1, r1
    14f0:	e2 55       	subi	r30, 0x52	; 82
    14f2:	fe 4f       	sbci	r31, 0xFE	; 254
    14f4:	a0 89       	ldd	r26, Z+16	; 0x10
    14f6:	b1 89       	ldd	r27, Z+17	; 0x11
    14f8:	92 89       	ldd	r25, Z+18	; 0x12
    14fa:	9c 93       	st	X, r25
void TWI_start(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA)|(1<<TWIE);
}

void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
    14fc:	95 e9       	ldi	r25, 0x95	; 149
    14fe:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

		case stop_reading:
			*twi_bufor[twi_buf_pos.tail].bufor_ref++ = TWDR0;	//read last received byte
			*twi_bufor[twi_buf_pos.tail].flag_register = twi_bufor[twi_buf_pos.tail].flag_mask;	//set read done flag
			TWI_stop();
			twi_bufor[twi_buf_pos.tail].status = done;
    1502:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    1506:	e6 95       	lsr	r30
    1508:	e6 95       	lsr	r30
    150a:	e6 95       	lsr	r30
    150c:	e7 70       	andi	r30, 0x07	; 7
    150e:	8e 9f       	mul	r24, r30
    1510:	f0 01       	movw	r30, r0
    1512:	11 24       	eor	r1, r1
    1514:	e2 55       	subi	r30, 0x52	; 82
    1516:	fe 4f       	sbci	r31, 0xFE	; 254
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	83 8b       	std	Z+19, r24	; 0x13
			break;
    151c:	67 c0       	rjmp	.+206    	; 0x15ec <__vector_24+0x41a>

		case write:
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){	//if more than 1 char to write
    151e:	84 e1       	ldi	r24, 0x14	; 20
    1520:	84 9f       	mul	r24, r20
    1522:	f0 01       	movw	r30, r0
    1524:	85 9f       	mul	r24, r21
    1526:	f0 0d       	add	r31, r0
    1528:	11 24       	eor	r1, r1
    152a:	e2 55       	subi	r30, 0x52	; 82
    152c:	fe 4f       	sbci	r31, 0xFE	; 254
    152e:	87 85       	ldd	r24, Z+15	; 0x0f
    1530:	82 30       	cpi	r24, 0x02	; 2
    1532:	e8 f0       	brcs	.+58     	; 0x156e <__vector_24+0x39c>
				TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
    1534:	84 e1       	ldi	r24, 0x14	; 20
    1536:	84 9f       	mul	r24, r20
    1538:	f0 01       	movw	r30, r0
    153a:	85 9f       	mul	r24, r21
    153c:	f0 0d       	add	r31, r0
    153e:	11 24       	eor	r1, r1
    1540:	e2 55       	subi	r30, 0x52	; 82
    1542:	fe 4f       	sbci	r31, 0xFE	; 254
    1544:	92 81       	ldd	r25, Z+2	; 0x02
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    1546:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    154a:	95 e8       	ldi	r25, 0x85	; 133
    154c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;

		case write:
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){	//if more than 1 char to write
				TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
				twi_bufor[twi_buf_pos.tail].status = write;
    1550:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    1554:	e6 95       	lsr	r30
    1556:	e6 95       	lsr	r30
    1558:	e6 95       	lsr	r30
    155a:	e7 70       	andi	r30, 0x07	; 7
    155c:	8e 9f       	mul	r24, r30
    155e:	f0 01       	movw	r30, r0
    1560:	11 24       	eor	r1, r1
    1562:	e2 55       	subi	r30, 0x52	; 82
    1564:	fe 4f       	sbci	r31, 0xFE	; 254
    1566:	8b e0       	ldi	r24, 0x0B	; 11
    1568:	83 8b       	std	Z+19, r24	; 0x13
				twi_bufor[twi_buf_pos.tail].buf_pos = 0;
    156a:	14 86       	std	Z+12, r1	; 0x0c
    156c:	1b c0       	rjmp	.+54     	; 0x15a4 <__vector_24+0x3d2>
			}

			else {	//only 1 byte to send
				TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
    156e:	84 e1       	ldi	r24, 0x14	; 20
    1570:	84 9f       	mul	r24, r20
    1572:	f0 01       	movw	r30, r0
    1574:	85 9f       	mul	r24, r21
    1576:	f0 0d       	add	r31, r0
    1578:	11 24       	eor	r1, r1
    157a:	e2 55       	subi	r30, 0x52	; 82
    157c:	fe 4f       	sbci	r31, 0xFE	; 254
    157e:	92 81       	ldd	r25, Z+2	; 0x02
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    1580:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    1584:	95 e8       	ldi	r25, 0x85	; 133
    1586:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				twi_bufor[twi_buf_pos.tail].buf_pos = 0;
			}

			else {	//only 1 byte to send
				TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
				twi_bufor[twi_buf_pos.tail].status = last_byte_write;
    158a:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    158e:	e6 95       	lsr	r30
    1590:	e6 95       	lsr	r30
    1592:	e6 95       	lsr	r30
    1594:	e7 70       	andi	r30, 0x07	; 7
    1596:	8e 9f       	mul	r24, r30
    1598:	f0 01       	movw	r30, r0
    159a:	11 24       	eor	r1, r1
    159c:	e2 55       	subi	r30, 0x52	; 82
    159e:	fe 4f       	sbci	r31, 0xFE	; 254
    15a0:	8c e0       	ldi	r24, 0x0C	; 12
    15a2:	83 8b       	std	Z+19, r24	; 0x13
			}
			twi_bufor[twi_buf_pos.tail].lenght --;
    15a4:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    15a8:	e6 95       	lsr	r30
    15aa:	e6 95       	lsr	r30
    15ac:	e6 95       	lsr	r30
    15ae:	e7 70       	andi	r30, 0x07	; 7
    15b0:	84 e1       	ldi	r24, 0x14	; 20
    15b2:	e8 9f       	mul	r30, r24
    15b4:	f0 01       	movw	r30, r0
    15b6:	11 24       	eor	r1, r1
    15b8:	e2 55       	subi	r30, 0x52	; 82
    15ba:	fe 4f       	sbci	r31, 0xFE	; 254
    15bc:	87 85       	ldd	r24, Z+15	; 0x0f
    15be:	81 50       	subi	r24, 0x01	; 1
    15c0:	87 87       	std	Z+15, r24	; 0x0f
			break;
    15c2:	14 c0       	rjmp	.+40     	; 0x15ec <__vector_24+0x41a>
void TWI_start(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA)|(1<<TWIE);
}

void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
    15c4:	85 e9       	ldi	r24, 0x95	; 149
    15c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			twi_bufor[twi_buf_pos.tail].lenght --;
			break;

		case last_byte_write:
			TWI_stop();
			twi_bufor[twi_buf_pos.tail].status = done;
    15ca:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_buf_pos>
    15ce:	e6 95       	lsr	r30
    15d0:	e6 95       	lsr	r30
    15d2:	e6 95       	lsr	r30
    15d4:	e7 70       	andi	r30, 0x07	; 7
    15d6:	84 e1       	ldi	r24, 0x14	; 20
    15d8:	e8 9f       	mul	r30, r24
    15da:	f0 01       	movw	r30, r0
    15dc:	11 24       	eor	r1, r1
    15de:	e2 55       	subi	r30, 0x52	; 82
    15e0:	fe 4f       	sbci	r31, 0xFE	; 254
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	83 8b       	std	Z+19, r24	; 0x13
			twi_reset_counter = 0xFF;	//turn of timer, sending procedure finished correctly
    15e6:	8f ef       	ldi	r24, 0xFF	; 255
    15e8:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <twi_reset_counter>

		default:

			break;
	}
    15ec:	ff 91       	pop	r31
    15ee:	ef 91       	pop	r30
    15f0:	bf 91       	pop	r27
    15f2:	af 91       	pop	r26
    15f4:	9f 91       	pop	r25
    15f6:	8f 91       	pop	r24
    15f8:	5f 91       	pop	r21
    15fa:	4f 91       	pop	r20
    15fc:	3f 91       	pop	r19
    15fe:	2f 91       	pop	r18
    1600:	0f 90       	pop	r0
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	0f 90       	pop	r0
    1606:	1f 90       	pop	r1
    1608:	18 95       	reti

0000160a <InitUartCOM>:
void SendStringUint(char string[], uint16_t number)
{
	SendString(string);
	SendUint(number);
	SendEnter();
}
    160a:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <InitUartCOM_HW>
    160e:	08 95       	ret

00001610 <ReceiveChar>:
    1610:	88 23       	and	r24, r24
    1612:	91 f0       	breq	.+36     	; 0x1638 <ReceiveChar+0x28>
    1614:	8a 30       	cpi	r24, 0x0A	; 10
    1616:	81 f0       	breq	.+32     	; 0x1638 <ReceiveChar+0x28>
    1618:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <RxHead>
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	e2 5b       	subi	r30, 0xB2	; 178
    1620:	fd 4f       	sbci	r31, 0xFD	; 253
    1622:	80 83       	st	Z, r24
    1624:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <RxHead>
    1628:	8f 5f       	subi	r24, 0xFF	; 255
    162a:	8f 71       	andi	r24, 0x1F	; 31
    162c:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <RxHead>
    1630:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <RxHead>
    1634:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <RxTail>
    1638:	08 95       	ret

0000163a <SendString>:
    163a:	0f 93       	push	r16
    163c:	1f 93       	push	r17
    163e:	cf 93       	push	r28
    1640:	fc 01       	movw	r30, r24
    1642:	80 81       	ld	r24, Z
    1644:	88 23       	and	r24, r24
    1646:	59 f0       	breq	.+22     	; 0x165e <SendString+0x24>
    1648:	8f 01       	movw	r16, r30
    164a:	c0 e0       	ldi	r28, 0x00	; 0
    164c:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <PutCharToBuffor>
    1650:	cf 5f       	subi	r28, 0xFF	; 255
    1652:	f8 01       	movw	r30, r16
    1654:	ec 0f       	add	r30, r28
    1656:	f1 1d       	adc	r31, r1
    1658:	80 81       	ld	r24, Z
    165a:	81 11       	cpse	r24, r1
    165c:	f7 cf       	rjmp	.-18     	; 0x164c <SendString+0x12>
    165e:	cf 91       	pop	r28
    1660:	1f 91       	pop	r17
    1662:	0f 91       	pop	r16
    1664:	08 95       	ret

00001666 <SendEnter>:
    1666:	8d e0       	ldi	r24, 0x0D	; 13
    1668:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <PutCharToBuffor>
    166c:	8a e0       	ldi	r24, 0x0A	; 10
    166e:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <PutCharToBuffor>
    1672:	08 95       	ret

00001674 <SendLine>:
    1674:	0e 94 1d 0b 	call	0x163a	; 0x163a <SendString>
    1678:	0e 94 33 0b 	call	0x1666	; 0x1666 <SendEnter>
    167c:	08 95       	ret

0000167e <SendInt>:
    167e:	4f 92       	push	r4
    1680:	5f 92       	push	r5
    1682:	6f 92       	push	r6
    1684:	7f 92       	push	r7
    1686:	8f 92       	push	r8
    1688:	9f 92       	push	r9
    168a:	af 92       	push	r10
    168c:	bf 92       	push	r11
    168e:	cf 92       	push	r12
    1690:	df 92       	push	r13
    1692:	ef 92       	push	r14
    1694:	ff 92       	push	r15
    1696:	0f 93       	push	r16
    1698:	1f 93       	push	r17
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	a8 97       	sbiw	r28, 0x28	; 40
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	de bf       	out	0x3e, r29	; 62
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	cd bf       	out	0x3d, r28	; 61
    16ae:	6b 01       	movw	r12, r22
    16b0:	7c 01       	movw	r14, r24
    16b2:	fe 01       	movw	r30, r28
    16b4:	75 96       	adiw	r30, 0x15	; 21
    16b6:	8e 01       	movw	r16, r28
    16b8:	0f 5f       	subi	r16, 0xFF	; 255
    16ba:	1f 4f       	sbci	r17, 0xFF	; 255
    16bc:	ce 01       	movw	r24, r28
    16be:	4d 96       	adiw	r24, 0x1d	; 29
    16c0:	d8 01       	movw	r26, r16
    16c2:	11 92       	st	Z+, r1
    16c4:	1d 92       	st	X+, r1
    16c6:	e8 17       	cp	r30, r24
    16c8:	f9 07       	cpc	r31, r25
    16ca:	d9 f7       	brne	.-10     	; 0x16c2 <SendInt+0x44>
    16cc:	ff 20       	and	r15, r15
    16ce:	0c f0       	brlt	.+2      	; 0x16d2 <SendInt+0x54>
    16d0:	5d c0       	rjmp	.+186    	; 0x178c <SendInt+0x10e>
    16d2:	81 c0       	rjmp	.+258    	; 0x17d6 <SendInt+0x158>
    16d4:	5e 01       	movw	r10, r28
    16d6:	26 e1       	ldi	r18, 0x16	; 22
    16d8:	a2 0e       	add	r10, r18
    16da:	b1 1c       	adc	r11, r1
    16dc:	99 24       	eor	r9, r9
    16de:	93 94       	inc	r9
    16e0:	0f 2e       	mov	r0, r31
    16e2:	fa e0       	ldi	r31, 0x0A	; 10
    16e4:	4f 2e       	mov	r4, r31
    16e6:	51 2c       	mov	r5, r1
    16e8:	61 2c       	mov	r6, r1
    16ea:	71 2c       	mov	r7, r1
    16ec:	f0 2d       	mov	r31, r0
    16ee:	01 c0       	rjmp	.+2      	; 0x16f2 <SendInt+0x74>
    16f0:	98 2e       	mov	r9, r24
    16f2:	c7 01       	movw	r24, r14
    16f4:	b6 01       	movw	r22, r12
    16f6:	a3 01       	movw	r20, r6
    16f8:	92 01       	movw	r18, r4
    16fa:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <__divmodsi4>
    16fe:	20 e3       	ldi	r18, 0x30	; 48
    1700:	26 0f       	add	r18, r22
    1702:	d5 01       	movw	r26, r10
    1704:	2d 93       	st	X+, r18
    1706:	5d 01       	movw	r10, r26
    1708:	a7 01       	movw	r20, r14
    170a:	96 01       	movw	r18, r12
    170c:	26 1b       	sub	r18, r22
    170e:	37 0b       	sbc	r19, r23
    1710:	48 0b       	sbc	r20, r24
    1712:	59 0b       	sbc	r21, r25
    1714:	ca 01       	movw	r24, r20
    1716:	b9 01       	movw	r22, r18
    1718:	a3 01       	movw	r20, r6
    171a:	92 01       	movw	r18, r4
    171c:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <__divmodsi4>
    1720:	69 01       	movw	r12, r18
    1722:	7a 01       	movw	r14, r20
    1724:	23 2b       	or	r18, r19
    1726:	24 2b       	or	r18, r20
    1728:	25 2b       	or	r18, r21
    172a:	21 f0       	breq	.+8      	; 0x1734 <SendInt+0xb6>
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	89 0d       	add	r24, r9
    1730:	84 31       	cpi	r24, 0x14	; 20
    1732:	f1 f6       	brne	.-68     	; 0x16f0 <SendInt+0x72>
    1734:	21 e0       	ldi	r18, 0x01	; 1
    1736:	29 0d       	add	r18, r9
    1738:	88 20       	and	r8, r8
    173a:	54 f4       	brge	.+20     	; 0x1750 <SendInt+0xd2>
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <SendInt+0xc4>
    173e:	21 e0       	ldi	r18, 0x01	; 1
    1740:	91 2c       	mov	r9, r1
    1742:	fe 01       	movw	r30, r28
    1744:	e2 0f       	add	r30, r18
    1746:	f1 1d       	adc	r31, r1
    1748:	8d e2       	ldi	r24, 0x2D	; 45
    174a:	85 8b       	std	Z+21, r24	; 0x15
    174c:	22 e0       	ldi	r18, 0x02	; 2
    174e:	29 0d       	add	r18, r9
    1750:	21 11       	cpse	r18, r1
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <SendInt+0xda>
    1754:	0f c0       	rjmp	.+30     	; 0x1774 <SendInt+0xf6>
    1756:	21 e0       	ldi	r18, 0x01	; 1
    1758:	e5 e1       	ldi	r30, 0x15	; 21
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	ec 0f       	add	r30, r28
    175e:	fd 1f       	adc	r31, r29
    1760:	e2 0f       	add	r30, r18
    1762:	f1 1d       	adc	r31, r1
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	92 91       	ld	r25, -Z
    1768:	d8 01       	movw	r26, r16
    176a:	9d 93       	st	X+, r25
    176c:	8d 01       	movw	r16, r26
    176e:	8f 5f       	subi	r24, 0xFF	; 255
    1770:	82 17       	cp	r24, r18
    1772:	c8 f3       	brcs	.-14     	; 0x1766 <SendInt+0xe8>
    1774:	e1 e0       	ldi	r30, 0x01	; 1
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	ec 0f       	add	r30, r28
    177a:	fd 1f       	adc	r31, r29
    177c:	e2 0f       	add	r30, r18
    177e:	f1 1d       	adc	r31, r1
    1780:	10 82       	st	Z, r1
    1782:	ce 01       	movw	r24, r28
    1784:	01 96       	adiw	r24, 0x01	; 1
    1786:	0e 94 1d 0b 	call	0x163a	; 0x163a <SendString>
    178a:	53 c0       	rjmp	.+166    	; 0x1832 <SendInt+0x1b4>
    178c:	0f 2e       	mov	r0, r31
    178e:	fa e0       	ldi	r31, 0x0A	; 10
    1790:	8f 2e       	mov	r8, r31
    1792:	91 2c       	mov	r9, r1
    1794:	a1 2c       	mov	r10, r1
    1796:	b1 2c       	mov	r11, r1
    1798:	f0 2d       	mov	r31, r0
    179a:	c7 01       	movw	r24, r14
    179c:	b6 01       	movw	r22, r12
    179e:	a5 01       	movw	r20, r10
    17a0:	94 01       	movw	r18, r8
    17a2:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <__divmodsi4>
    17a6:	20 e3       	ldi	r18, 0x30	; 48
    17a8:	26 0f       	add	r18, r22
    17aa:	2d 8b       	std	Y+21, r18	; 0x15
    17ac:	a7 01       	movw	r20, r14
    17ae:	96 01       	movw	r18, r12
    17b0:	26 1b       	sub	r18, r22
    17b2:	37 0b       	sbc	r19, r23
    17b4:	48 0b       	sbc	r20, r24
    17b6:	59 0b       	sbc	r21, r25
    17b8:	ca 01       	movw	r24, r20
    17ba:	b9 01       	movw	r22, r18
    17bc:	a5 01       	movw	r20, r10
    17be:	94 01       	movw	r18, r8
    17c0:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <__divmodsi4>
    17c4:	69 01       	movw	r12, r18
    17c6:	7a 01       	movw	r14, r20
    17c8:	23 2b       	or	r18, r19
    17ca:	24 2b       	or	r18, r20
    17cc:	25 2b       	or	r18, r21
    17ce:	19 f2       	breq	.-122    	; 0x1756 <SendInt+0xd8>
    17d0:	88 24       	eor	r8, r8
    17d2:	83 94       	inc	r8
    17d4:	7f cf       	rjmp	.-258    	; 0x16d4 <SendInt+0x56>
    17d6:	f0 94       	com	r15
    17d8:	e0 94       	com	r14
    17da:	d0 94       	com	r13
    17dc:	c0 94       	com	r12
    17de:	c1 1c       	adc	r12, r1
    17e0:	d1 1c       	adc	r13, r1
    17e2:	e1 1c       	adc	r14, r1
    17e4:	f1 1c       	adc	r15, r1
    17e6:	0f 2e       	mov	r0, r31
    17e8:	fa e0       	ldi	r31, 0x0A	; 10
    17ea:	8f 2e       	mov	r8, r31
    17ec:	91 2c       	mov	r9, r1
    17ee:	a1 2c       	mov	r10, r1
    17f0:	b1 2c       	mov	r11, r1
    17f2:	f0 2d       	mov	r31, r0
    17f4:	c7 01       	movw	r24, r14
    17f6:	b6 01       	movw	r22, r12
    17f8:	a5 01       	movw	r20, r10
    17fa:	94 01       	movw	r18, r8
    17fc:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <__divmodsi4>
    1800:	20 e3       	ldi	r18, 0x30	; 48
    1802:	26 0f       	add	r18, r22
    1804:	2d 8b       	std	Y+21, r18	; 0x15
    1806:	a7 01       	movw	r20, r14
    1808:	96 01       	movw	r18, r12
    180a:	26 1b       	sub	r18, r22
    180c:	37 0b       	sbc	r19, r23
    180e:	48 0b       	sbc	r20, r24
    1810:	59 0b       	sbc	r21, r25
    1812:	ca 01       	movw	r24, r20
    1814:	b9 01       	movw	r22, r18
    1816:	a5 01       	movw	r20, r10
    1818:	94 01       	movw	r18, r8
    181a:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <__divmodsi4>
    181e:	69 01       	movw	r12, r18
    1820:	7a 01       	movw	r14, r20
    1822:	23 2b       	or	r18, r19
    1824:	24 2b       	or	r18, r20
    1826:	25 2b       	or	r18, r21
    1828:	09 f4       	brne	.+2      	; 0x182c <SendInt+0x1ae>
    182a:	89 cf       	rjmp	.-238    	; 0x173e <SendInt+0xc0>
    182c:	88 24       	eor	r8, r8
    182e:	8a 94       	dec	r8
    1830:	51 cf       	rjmp	.-350    	; 0x16d4 <SendInt+0x56>
    1832:	a8 96       	adiw	r28, 0x28	; 40
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	f8 94       	cli
    1838:	de bf       	out	0x3e, r29	; 62
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	df 91       	pop	r29
    1840:	cf 91       	pop	r28
    1842:	1f 91       	pop	r17
    1844:	0f 91       	pop	r16
    1846:	ff 90       	pop	r15
    1848:	ef 90       	pop	r14
    184a:	df 90       	pop	r13
    184c:	cf 90       	pop	r12
    184e:	bf 90       	pop	r11
    1850:	af 90       	pop	r10
    1852:	9f 90       	pop	r9
    1854:	8f 90       	pop	r8
    1856:	7f 90       	pop	r7
    1858:	6f 90       	pop	r6
    185a:	5f 90       	pop	r5
    185c:	4f 90       	pop	r4
    185e:	08 95       	ret

00001860 <SendStringInt>:
    1860:	cf 92       	push	r12
    1862:	df 92       	push	r13
    1864:	ef 92       	push	r14
    1866:	ff 92       	push	r15
    1868:	6a 01       	movw	r12, r20
    186a:	7b 01       	movw	r14, r22
    186c:	0e 94 1d 0b 	call	0x163a	; 0x163a <SendString>
    1870:	c7 01       	movw	r24, r14
    1872:	b6 01       	movw	r22, r12
    1874:	0e 94 3f 0b 	call	0x167e	; 0x167e <SendInt>
    1878:	0e 94 33 0b 	call	0x1666	; 0x1666 <SendEnter>
    187c:	ff 90       	pop	r15
    187e:	ef 90       	pop	r14
    1880:	df 90       	pop	r13
    1882:	cf 90       	pop	r12
    1884:	08 95       	ret

00001886 <CheckRxBuffor>:
		string[pozycja] = 0;
		SendString(string);
}

void CheckRxBuffor(void)
{
    1886:	cf 93       	push	r28
	if (RxHead != RxTail)	//Check if buffer is not empty
    1888:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <RxHead>
    188c:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <RxTail>
    1890:	98 17       	cp	r25, r24
    1892:	29 f1       	breq	.+74     	; 0x18de <CheckRxBuffor+0x58>
	{
		uint8_t i = RxTail;
    1894:	c0 91 55 01 	lds	r28, 0x0155	; 0x800155 <RxTail>

		while(i != RxHead)	//search for end of line
    1898:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <RxHead>
    189c:	c8 17       	cp	r28, r24
    189e:	f9 f0       	breq	.+62     	; 0x18de <CheckRxBuffor+0x58>
		{
			//If end of line process Command
			
			if (RxBuffor[i] == 13)
    18a0:	ec 2f       	mov	r30, r28
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	e2 5b       	subi	r30, 0xB2	; 178
    18a6:	fd 4f       	sbci	r31, 0xFD	; 253
    18a8:	80 81       	ld	r24, Z
    18aa:	8d 30       	cpi	r24, 0x0D	; 13
    18ac:	91 f4       	brne	.+36     	; 0x18d2 <CheckRxBuffor+0x4c>
    18ae:	07 c0       	rjmp	.+14     	; 0x18be <CheckRxBuffor+0x38>
    18b0:	ec 2f       	mov	r30, r28
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	e2 5b       	subi	r30, 0xB2	; 178
    18b6:	fd 4f       	sbci	r31, 0xFD	; 253
    18b8:	80 81       	ld	r24, Z
    18ba:	8d 30       	cpi	r24, 0x0D	; 13
    18bc:	51 f4       	brne	.+20     	; 0x18d2 <CheckRxBuffor+0x4c>
			{
				ProcessString(RxTail, i);
    18be:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <RxTail>
    18c2:	6c 2f       	mov	r22, r28
    18c4:	0e 94 51 08 	call	0x10a2	; 0x10a2 <ProcessString>
				i = (i+1) & RX_SIZE_BIN;
    18c8:	cf 5f       	subi	r28, 0xFF	; 255
    18ca:	cf 71       	andi	r28, 0x1F	; 31
				RxTail = i;
    18cc:	c0 93 55 01 	sts	0x0155, r28	; 0x800155 <RxTail>
				break;
    18d0:	06 c0       	rjmp	.+12     	; 0x18de <CheckRxBuffor+0x58>
			}

			i = (i+1) & RX_SIZE_BIN;
    18d2:	cf 5f       	subi	r28, 0xFF	; 255
    18d4:	cf 71       	andi	r28, 0x1F	; 31
{
	if (RxHead != RxTail)	//Check if buffer is not empty
	{
		uint8_t i = RxTail;

		while(i != RxHead)	//search for end of line
    18d6:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <RxHead>
    18da:	8c 13       	cpse	r24, r28
    18dc:	e9 cf       	rjmp	.-46     	; 0x18b0 <CheckRxBuffor+0x2a>
			}

			i = (i+1) & RX_SIZE_BIN;
		}
	}
    18de:	cf 91       	pop	r28
    18e0:	08 95       	ret

000018e2 <InitUartCOM_HW>:


	UBRR0 = 9;	//100k at 16MHz clock

	//Init COM Uart
	UCSR0B = (1<<RXEN0) | (1<<RXCIE0) |
    18e2:	83 e0       	ldi	r24, 0x03	; 3
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    18ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    18ee:	88 ed       	ldi	r24, 0xD8	; 216
    18f0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    18f4:	08 95       	ret

000018f6 <PutCharToBuffor>:
}


void PutCharToBuffor(uint8_t x)
{
	if ((UCSR0A & (1<<UDRE0)) && (TxHead == TxTail))	//check if can put next char
    18f6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    18fa:	95 ff       	sbrs	r25, 5
    18fc:	09 c0       	rjmp	.+18     	; 0x1910 <PutCharToBuffor+0x1a>
    18fe:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <TxHead>
    1902:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <TxTail>
    1906:	29 13       	cpse	r18, r25
    1908:	03 c0       	rjmp	.+6      	; 0x1910 <PutCharToBuffor+0x1a>
	{
		UDR0 = x;		
    190a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    190e:	08 95       	ret
	}
	else	//if not ready put char to sending queue
	{
		TxBuffor[TxHead] = x;
    1910:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <TxHead>
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	e2 59       	subi	r30, 0x92	; 146
    1918:	fd 4f       	sbci	r31, 0xFD	; 253
    191a:	80 83       	st	Z, r24
		TxHead = (TxHead+1) & TX_SIZE_BIN;
    191c:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <TxHead>
    1920:	8f 5f       	subi	r24, 0xFF	; 255
    1922:	8f 77       	andi	r24, 0x7F	; 127
    1924:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <TxHead>
    1928:	08 95       	ret

0000192a <__vector_20>:
	}
}


ISR (USART0_TX_vect)
{
    192a:	1f 92       	push	r1
    192c:	0f 92       	push	r0
    192e:	0f b6       	in	r0, 0x3f	; 63
    1930:	0f 92       	push	r0
    1932:	11 24       	eor	r1, r1
    1934:	8f 93       	push	r24
    1936:	9f 93       	push	r25
    1938:	ef 93       	push	r30
    193a:	ff 93       	push	r31
	if (TxTail == TxHead)
    193c:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <TxTail>
    1940:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <TxHead>
    1944:	98 13       	cpse	r25, r24
    1946:	03 c0       	rjmp	.+6      	; 0x194e <__vector_20+0x24>
	{
		uint8_t x = UDR0;
    1948:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    194c:	0e c0       	rjmp	.+28     	; 0x196a <__vector_20+0x40>
	}

	else
	{
		UDR0 = TxBuffor[TxTail];
    194e:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <TxTail>
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	e2 59       	subi	r30, 0x92	; 146
    1956:	fd 4f       	sbci	r31, 0xFD	; 253
    1958:	80 81       	ld	r24, Z
    195a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		TxTail = (TxTail+1) & TX_SIZE_BIN;
    195e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <TxTail>
    1962:	8f 5f       	subi	r24, 0xFF	; 255
    1964:	8f 77       	andi	r24, 0x7F	; 127
    1966:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <TxTail>
	}
}
    196a:	ff 91       	pop	r31
    196c:	ef 91       	pop	r30
    196e:	9f 91       	pop	r25
    1970:	8f 91       	pop	r24
    1972:	0f 90       	pop	r0
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	0f 90       	pop	r0
    1978:	1f 90       	pop	r1
    197a:	18 95       	reti

0000197c <__vector_18>:

ISR (USART0_RX_vect)	//COM Rx
{
    197c:	1f 92       	push	r1
    197e:	0f 92       	push	r0
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	0f 92       	push	r0
    1984:	11 24       	eor	r1, r1
    1986:	2f 93       	push	r18
    1988:	3f 93       	push	r19
    198a:	4f 93       	push	r20
    198c:	5f 93       	push	r21
    198e:	6f 93       	push	r22
    1990:	7f 93       	push	r23
    1992:	8f 93       	push	r24
    1994:	9f 93       	push	r25
    1996:	af 93       	push	r26
    1998:	bf 93       	push	r27
    199a:	ef 93       	push	r30
    199c:	ff 93       	push	r31
// 	uint8_t x = UDR0;
// 	ReceiveChar(x);
// 	PutCharToBuffor(x);
	ReceiveChar(UDR0);
    199e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    19a2:	0e 94 08 0b 	call	0x1610	; 0x1610 <ReceiveChar>
    19a6:	ff 91       	pop	r31
    19a8:	ef 91       	pop	r30
    19aa:	bf 91       	pop	r27
    19ac:	af 91       	pop	r26
    19ae:	9f 91       	pop	r25
    19b0:	8f 91       	pop	r24
    19b2:	7f 91       	pop	r23
    19b4:	6f 91       	pop	r22
    19b6:	5f 91       	pop	r21
    19b8:	4f 91       	pop	r20
    19ba:	3f 91       	pop	r19
    19bc:	2f 91       	pop	r18
    19be:	0f 90       	pop	r0
    19c0:	0f be       	out	0x3f, r0	; 63
    19c2:	0f 90       	pop	r0
    19c4:	1f 90       	pop	r1
    19c6:	18 95       	reti

000019c8 <__mulsi3>:
    19c8:	db 01       	movw	r26, r22
    19ca:	8f 93       	push	r24
    19cc:	9f 93       	push	r25
    19ce:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__muluhisi3>
    19d2:	bf 91       	pop	r27
    19d4:	af 91       	pop	r26
    19d6:	a2 9f       	mul	r26, r18
    19d8:	80 0d       	add	r24, r0
    19da:	91 1d       	adc	r25, r1
    19dc:	a3 9f       	mul	r26, r19
    19de:	90 0d       	add	r25, r0
    19e0:	b2 9f       	mul	r27, r18
    19e2:	90 0d       	add	r25, r0
    19e4:	11 24       	eor	r1, r1
    19e6:	08 95       	ret

000019e8 <__divmodsi4>:
    19e8:	05 2e       	mov	r0, r21
    19ea:	97 fb       	bst	r25, 7
    19ec:	1e f4       	brtc	.+6      	; 0x19f4 <__divmodsi4+0xc>
    19ee:	00 94       	com	r0
    19f0:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__negsi2>
    19f4:	57 fd       	sbrc	r21, 7
    19f6:	07 d0       	rcall	.+14     	; 0x1a06 <__divmodsi4_neg2>
    19f8:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__udivmodsi4>
    19fc:	07 fc       	sbrc	r0, 7
    19fe:	03 d0       	rcall	.+6      	; 0x1a06 <__divmodsi4_neg2>
    1a00:	4e f4       	brtc	.+18     	; 0x1a14 <__divmodsi4_exit>
    1a02:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__negsi2>

00001a06 <__divmodsi4_neg2>:
    1a06:	50 95       	com	r21
    1a08:	40 95       	com	r20
    1a0a:	30 95       	com	r19
    1a0c:	21 95       	neg	r18
    1a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a10:	4f 4f       	sbci	r20, 0xFF	; 255
    1a12:	5f 4f       	sbci	r21, 0xFF	; 255

00001a14 <__divmodsi4_exit>:
    1a14:	08 95       	ret

00001a16 <__negsi2>:
    1a16:	90 95       	com	r25
    1a18:	80 95       	com	r24
    1a1a:	70 95       	com	r23
    1a1c:	61 95       	neg	r22
    1a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a20:	8f 4f       	sbci	r24, 0xFF	; 255
    1a22:	9f 4f       	sbci	r25, 0xFF	; 255
    1a24:	08 95       	ret

00001a26 <__tablejump2__>:
    1a26:	ee 0f       	add	r30, r30
    1a28:	ff 1f       	adc	r31, r31
    1a2a:	05 90       	lpm	r0, Z+
    1a2c:	f4 91       	lpm	r31, Z
    1a2e:	e0 2d       	mov	r30, r0
    1a30:	09 94       	ijmp

00001a32 <__umulhisi3>:
    1a32:	a2 9f       	mul	r26, r18
    1a34:	b0 01       	movw	r22, r0
    1a36:	b3 9f       	mul	r27, r19
    1a38:	c0 01       	movw	r24, r0
    1a3a:	a3 9f       	mul	r26, r19
    1a3c:	70 0d       	add	r23, r0
    1a3e:	81 1d       	adc	r24, r1
    1a40:	11 24       	eor	r1, r1
    1a42:	91 1d       	adc	r25, r1
    1a44:	b2 9f       	mul	r27, r18
    1a46:	70 0d       	add	r23, r0
    1a48:	81 1d       	adc	r24, r1
    1a4a:	11 24       	eor	r1, r1
    1a4c:	91 1d       	adc	r25, r1
    1a4e:	08 95       	ret

00001a50 <__muluhisi3>:
    1a50:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__umulhisi3>
    1a54:	a5 9f       	mul	r26, r21
    1a56:	90 0d       	add	r25, r0
    1a58:	b4 9f       	mul	r27, r20
    1a5a:	90 0d       	add	r25, r0
    1a5c:	a4 9f       	mul	r26, r20
    1a5e:	80 0d       	add	r24, r0
    1a60:	91 1d       	adc	r25, r1
    1a62:	11 24       	eor	r1, r1
    1a64:	08 95       	ret

00001a66 <__mulshisi3>:
    1a66:	b7 ff       	sbrs	r27, 7
    1a68:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__muluhisi3>

00001a6c <__mulohisi3>:
    1a6c:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__muluhisi3>
    1a70:	82 1b       	sub	r24, r18
    1a72:	93 0b       	sbc	r25, r19
    1a74:	08 95       	ret

00001a76 <__udivmodsi4>:
    1a76:	a1 e2       	ldi	r26, 0x21	; 33
    1a78:	1a 2e       	mov	r1, r26
    1a7a:	aa 1b       	sub	r26, r26
    1a7c:	bb 1b       	sub	r27, r27
    1a7e:	fd 01       	movw	r30, r26
    1a80:	0d c0       	rjmp	.+26     	; 0x1a9c <__udivmodsi4_ep>

00001a82 <__udivmodsi4_loop>:
    1a82:	aa 1f       	adc	r26, r26
    1a84:	bb 1f       	adc	r27, r27
    1a86:	ee 1f       	adc	r30, r30
    1a88:	ff 1f       	adc	r31, r31
    1a8a:	a2 17       	cp	r26, r18
    1a8c:	b3 07       	cpc	r27, r19
    1a8e:	e4 07       	cpc	r30, r20
    1a90:	f5 07       	cpc	r31, r21
    1a92:	20 f0       	brcs	.+8      	; 0x1a9c <__udivmodsi4_ep>
    1a94:	a2 1b       	sub	r26, r18
    1a96:	b3 0b       	sbc	r27, r19
    1a98:	e4 0b       	sbc	r30, r20
    1a9a:	f5 0b       	sbc	r31, r21

00001a9c <__udivmodsi4_ep>:
    1a9c:	66 1f       	adc	r22, r22
    1a9e:	77 1f       	adc	r23, r23
    1aa0:	88 1f       	adc	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	1a 94       	dec	r1
    1aa6:	69 f7       	brne	.-38     	; 0x1a82 <__udivmodsi4_loop>
    1aa8:	60 95       	com	r22
    1aaa:	70 95       	com	r23
    1aac:	80 95       	com	r24
    1aae:	90 95       	com	r25
    1ab0:	9b 01       	movw	r18, r22
    1ab2:	ac 01       	movw	r20, r24
    1ab4:	bd 01       	movw	r22, r26
    1ab6:	cf 01       	movw	r24, r30
    1ab8:	08 95       	ret

00001aba <__strlen_P>:
    1aba:	fc 01       	movw	r30, r24
    1abc:	05 90       	lpm	r0, Z+
    1abe:	00 20       	and	r0, r0
    1ac0:	e9 f7       	brne	.-6      	; 0x1abc <__strlen_P+0x2>
    1ac2:	80 95       	com	r24
    1ac4:	90 95       	com	r25
    1ac6:	8e 0f       	add	r24, r30
    1ac8:	9f 1f       	adc	r25, r31
    1aca:	08 95       	ret

00001acc <strncasecmp_P>:
    1acc:	fb 01       	movw	r30, r22
    1ace:	dc 01       	movw	r26, r24
    1ad0:	41 50       	subi	r20, 0x01	; 1
    1ad2:	50 40       	sbci	r21, 0x00	; 0
    1ad4:	88 f0       	brcs	.+34     	; 0x1af8 <strncasecmp_P+0x2c>
    1ad6:	8d 91       	ld	r24, X+
    1ad8:	81 34       	cpi	r24, 0x41	; 65
    1ada:	1c f0       	brlt	.+6      	; 0x1ae2 <strncasecmp_P+0x16>
    1adc:	8b 35       	cpi	r24, 0x5B	; 91
    1ade:	0c f4       	brge	.+2      	; 0x1ae2 <strncasecmp_P+0x16>
    1ae0:	80 5e       	subi	r24, 0xE0	; 224
    1ae2:	65 91       	lpm	r22, Z+
    1ae4:	61 34       	cpi	r22, 0x41	; 65
    1ae6:	1c f0       	brlt	.+6      	; 0x1aee <strncasecmp_P+0x22>
    1ae8:	6b 35       	cpi	r22, 0x5B	; 91
    1aea:	0c f4       	brge	.+2      	; 0x1aee <strncasecmp_P+0x22>
    1aec:	60 5e       	subi	r22, 0xE0	; 224
    1aee:	86 1b       	sub	r24, r22
    1af0:	61 11       	cpse	r22, r1
    1af2:	71 f3       	breq	.-36     	; 0x1ad0 <strncasecmp_P+0x4>
    1af4:	99 0b       	sbc	r25, r25
    1af6:	08 95       	ret
    1af8:	88 1b       	sub	r24, r24
    1afa:	fc cf       	rjmp	.-8      	; 0x1af4 <strncasecmp_P+0x28>

00001afc <strtok_r>:
    1afc:	fa 01       	movw	r30, r20
    1afe:	a1 91       	ld	r26, Z+
    1b00:	b0 81       	ld	r27, Z
    1b02:	00 97       	sbiw	r24, 0x00	; 0
    1b04:	19 f4       	brne	.+6      	; 0x1b0c <strtok_r+0x10>
    1b06:	10 97       	sbiw	r26, 0x00	; 0
    1b08:	e1 f0       	breq	.+56     	; 0x1b42 <strtok_r+0x46>
    1b0a:	cd 01       	movw	r24, r26
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	0d 90       	ld	r0, X+
    1b12:	00 20       	and	r0, r0
    1b14:	11 f4       	brne	.+4      	; 0x1b1a <strtok_r+0x1e>
    1b16:	c0 01       	movw	r24, r0
    1b18:	13 c0       	rjmp	.+38     	; 0x1b40 <strtok_r+0x44>
    1b1a:	fb 01       	movw	r30, r22
    1b1c:	21 91       	ld	r18, Z+
    1b1e:	22 23       	and	r18, r18
    1b20:	19 f0       	breq	.+6      	; 0x1b28 <strtok_r+0x2c>
    1b22:	20 15       	cp	r18, r0
    1b24:	d9 f7       	brne	.-10     	; 0x1b1c <strtok_r+0x20>
    1b26:	f3 cf       	rjmp	.-26     	; 0x1b0e <strtok_r+0x12>
    1b28:	fb 01       	movw	r30, r22
    1b2a:	21 91       	ld	r18, Z+
    1b2c:	20 15       	cp	r18, r0
    1b2e:	19 f4       	brne	.+6      	; 0x1b36 <strtok_r+0x3a>
    1b30:	1e 92       	st	-X, r1
    1b32:	11 96       	adiw	r26, 0x01	; 1
    1b34:	06 c0       	rjmp	.+12     	; 0x1b42 <strtok_r+0x46>
    1b36:	22 23       	and	r18, r18
    1b38:	c1 f7       	brne	.-16     	; 0x1b2a <strtok_r+0x2e>
    1b3a:	0d 90       	ld	r0, X+
    1b3c:	00 20       	and	r0, r0
    1b3e:	a1 f7       	brne	.-24     	; 0x1b28 <strtok_r+0x2c>
    1b40:	d0 01       	movw	r26, r0
    1b42:	fa 01       	movw	r30, r20
    1b44:	a1 93       	st	Z+, r26
    1b46:	b0 83       	st	Z, r27
    1b48:	08 95       	ret

00001b4a <_exit>:
    1b4a:	f8 94       	cli

00001b4c <__stop_program>:
    1b4c:	ff cf       	rjmp	.-2      	; 0x1b4c <__stop_program>
