
Flight assistant.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  0000290e  000029a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000290e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025e  0080015c  0080015c  000029fe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000029fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002a5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00002a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000393a  00000000  00000000  00002d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001735  00000000  00000000  000066c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cb6  00000000  00000000  00007dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000990  00000000  00000000  00009ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c34  00000000  00000000  0000a444  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000033a9  00000000  00000000  0000b078  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0000e421  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9b 00 	jmp	0x136	; 0x136 <__ctors_end>
       4:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
       8:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
       c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      10:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      14:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      18:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      1c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      20:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      24:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      28:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      2c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      30:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      34:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      38:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      3c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      40:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__vector_16>
      44:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      48:	0c 94 5d 0e 	jmp	0x1cba	; 0x1cba <__vector_18>
      4c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      50:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__vector_20>
      54:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      58:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      5c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      60:	0c 94 88 0a 	jmp	0x1510	; 0x1510 <__vector_24>
      64:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      68:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      6c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      70:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      74:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      78:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      7c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      80:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      84:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      88:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      8c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      90:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      94:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      98:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      9c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      a0:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      a4:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      a8:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      ac:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      b0:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      b4:	b5 0a       	sbc	r11, r21
      b6:	c9 0a       	sbc	r12, r25
      b8:	e5 0a       	sbc	r14, r21
      ba:	55 0b       	sbc	r21, r21
      bc:	6b 0b       	sbc	r22, r27
      be:	a9 0b       	sbc	r26, r25
      c0:	fc 0b       	sbc	r31, r28
      c2:	2e 0c       	add	r2, r14
      c4:	81 0c       	add	r8, r1
      c6:	08 4a       	sbci	r16, 0xA8	; 168
      c8:	d7 3b       	cpi	r29, 0xB7	; 183
      ca:	3b ce       	rjmp	.-906    	; 0xfffffd42 <__eeprom_end+0xff7efd42>
      cc:	01 6e       	ori	r16, 0xE1	; 225
      ce:	84 bc       	out	0x24, r8	; 36
      d0:	bf fd       	.word	0xfdbf	; ????
      d2:	c1 2f       	mov	r28, r17
      d4:	3d 6c       	ori	r19, 0xCD	; 205
      d6:	74 31       	cpi	r23, 0x14	; 20
      d8:	9a bd       	out	0x2a, r25	; 42
      da:	56 83       	std	Z+6, r21	; 0x06
      dc:	3d da       	rcall	.-2950   	; 0xfffff558 <__eeprom_end+0xff7ef558>
      de:	3d 00       	.word	0x003d	; ????
      e0:	c7 7f       	andi	r28, 0xF7	; 247
      e2:	11 be       	out	0x31, r1	; 49
      e4:	d9 e4       	ldi	r29, 0x49	; 73
      e6:	bb 4c       	sbci	r27, 0xCB	; 203
      e8:	3e 91       	ld	r19, -X
      ea:	6b aa       	std	Y+51, r6	; 0x33
      ec:	aa be       	out	0x3a, r10	; 58
      ee:	00 00       	nop
      f0:	00 80       	ld	r0, Z
      f2:	3f 00       	.word	0x003f	; ????

000000f4 <ER_commands>:
      f4:	45 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ER..............
     104:	00 00 00 00 1a 08 45 52 5f 52 45 41 44 00 00 00     ......ER_READ...
	...
     11c:	00 00 20 08 45 52 5f 42 55 46 00 00 00 00 00 00     .. .ER_BUF......
	...
     134:	78 08                                               x.

00000136 <__ctors_end>:
     136:	11 24       	eor	r1, r1
     138:	1f be       	out	0x3f, r1	; 63
     13a:	cf ef       	ldi	r28, 0xFF	; 255
     13c:	d8 e0       	ldi	r29, 0x08	; 8
     13e:	de bf       	out	0x3e, r29	; 62
     140:	cd bf       	out	0x3d, r28	; 61

00000142 <__do_copy_data>:
     142:	11 e0       	ldi	r17, 0x01	; 1
     144:	a0 e0       	ldi	r26, 0x00	; 0
     146:	b1 e0       	ldi	r27, 0x01	; 1
     148:	ee e0       	ldi	r30, 0x0E	; 14
     14a:	f9 e2       	ldi	r31, 0x29	; 41
     14c:	02 c0       	rjmp	.+4      	; 0x152 <__do_copy_data+0x10>
     14e:	05 90       	lpm	r0, Z+
     150:	0d 92       	st	X+, r0
     152:	ac 35       	cpi	r26, 0x5C	; 92
     154:	b1 07       	cpc	r27, r17
     156:	d9 f7       	brne	.-10     	; 0x14e <__do_copy_data+0xc>

00000158 <__do_clear_bss>:
     158:	23 e0       	ldi	r18, 0x03	; 3
     15a:	ac e5       	ldi	r26, 0x5C	; 92
     15c:	b1 e0       	ldi	r27, 0x01	; 1
     15e:	01 c0       	rjmp	.+2      	; 0x162 <.do_clear_bss_start>

00000160 <.do_clear_bss_loop>:
     160:	1d 92       	st	X+, r1

00000162 <.do_clear_bss_start>:
     162:	aa 3b       	cpi	r26, 0xBA	; 186
     164:	b2 07       	cpc	r27, r18
     166:	e1 f7       	brne	.-8      	; 0x160 <.do_clear_bss_loop>
     168:	0e 94 ce 04 	call	0x99c	; 0x99c <main>
     16c:	0c 94 85 14 	jmp	0x290a	; 0x290a <_exit>

00000170 <__bad_interrupt>:
     170:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000174 <PlaceInGyroBuffor>:

uint8_t counter_testing = 0;


void PlaceInGyroBuffor(int16_t gyro_samples[])
{
     174:	fc 01       	movw	r30, r24
	X_gyro_buff[gyro_head] = gyro_samples[0];
     176:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <gyro_head>
     17a:	29 2f       	mov	r18, r25
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	40 81       	ld	r20, Z
     180:	51 81       	ldd	r21, Z+1	; 0x01
     182:	22 0f       	add	r18, r18
     184:	33 1f       	adc	r19, r19
     186:	d9 01       	movw	r26, r18
     188:	ac 59       	subi	r26, 0x9C	; 156
     18a:	be 4f       	sbci	r27, 0xFE	; 254
     18c:	4d 93       	st	X+, r20
     18e:	5c 93       	st	X, r21
	Y_gyro_buff[gyro_head] = gyro_samples[1];
     190:	42 81       	ldd	r20, Z+2	; 0x02
     192:	53 81       	ldd	r21, Z+3	; 0x03
     194:	d9 01       	movw	r26, r18
     196:	a2 57       	subi	r26, 0x72	; 114
     198:	be 4f       	sbci	r27, 0xFE	; 254
     19a:	4d 93       	st	X+, r20
     19c:	5c 93       	st	X, r21
	Z_gyro_buff[gyro_head] = gyro_samples[2];
     19e:	44 81       	ldd	r20, Z+4	; 0x04
     1a0:	55 81       	ldd	r21, Z+5	; 0x05
     1a2:	f9 01       	movw	r30, r18
     1a4:	e4 5b       	subi	r30, 0xB4	; 180
     1a6:	fd 4f       	sbci	r31, 0xFD	; 253
     1a8:	51 83       	std	Z+1, r21	; 0x01
     1aa:	40 83       	st	Z, r20

	gyro_head++;
     1ac:	9f 5f       	subi	r25, 0xFF	; 255
	if (gyro_head == SAMPLES)
     1ae:	95 31       	cpi	r25, 0x15	; 21
     1b0:	19 f0       	breq	.+6      	; 0x1b8 <PlaceInGyroBuffor+0x44>
{
	X_gyro_buff[gyro_head] = gyro_samples[0];
	Y_gyro_buff[gyro_head] = gyro_samples[1];
	Z_gyro_buff[gyro_head] = gyro_samples[2];

	gyro_head++;
     1b2:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <gyro_head>
     1b6:	02 c0       	rjmp	.+4      	; 0x1bc <PlaceInGyroBuffor+0x48>
	if (gyro_head == SAMPLES)
	gyro_head = 0;
     1b8:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <gyro_head>

	if (gyro_head == gyro_tail)
     1bc:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <gyro_head>
     1c0:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <gyro_tail>
     1c4:	89 13       	cpse	r24, r25
     1c6:	03 c0       	rjmp	.+6      	; 0x1ce <PlaceInGyroBuffor+0x5a>
		gyro_tail++;
     1c8:	8f 5f       	subi	r24, 0xFF	; 255
     1ca:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <gyro_tail>

	if (gyro_tail == SAMPLES)
     1ce:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <gyro_tail>
     1d2:	85 31       	cpi	r24, 0x15	; 21
     1d4:	11 f4       	brne	.+4      	; 0x1da <PlaceInGyroBuffor+0x66>
		gyro_tail = 0;
     1d6:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <gyro_tail>
     1da:	08 95       	ret

000001dc <PlaceInAccBuffor>:
}

void PlaceInAccBuffor(int16_t acc_samples[])
{
     1dc:	fc 01       	movw	r30, r24
	X_acc_buff[acc_head] = acc_samples[0];
     1de:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <acc_head>
     1e2:	29 2f       	mov	r18, r25
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	40 81       	ld	r20, Z
     1e8:	51 81       	ldd	r21, Z+1	; 0x01
     1ea:	22 0f       	add	r18, r18
     1ec:	33 1f       	adc	r19, r19
     1ee:	d9 01       	movw	r26, r18
     1f0:	ae 51       	subi	r26, 0x1E	; 30
     1f2:	be 4f       	sbci	r27, 0xFE	; 254
     1f4:	4d 93       	st	X+, r20
     1f6:	5c 93       	st	X, r21
	Y_acc_buff[acc_head] = acc_samples[1];
     1f8:	42 81       	ldd	r20, Z+2	; 0x02
     1fa:	53 81       	ldd	r21, Z+3	; 0x03
     1fc:	d9 01       	movw	r26, r18
     1fe:	ae 5d       	subi	r26, 0xDE	; 222
     200:	bd 4f       	sbci	r27, 0xFD	; 253
     202:	4d 93       	st	X+, r20
     204:	5c 93       	st	X, r21
	Z_acc_buff[acc_head] = acc_samples[2];
     206:	44 81       	ldd	r20, Z+4	; 0x04
     208:	55 81       	ldd	r21, Z+5	; 0x05
     20a:	f9 01       	movw	r30, r18
     20c:	e8 54       	subi	r30, 0x48	; 72
     20e:	fe 4f       	sbci	r31, 0xFE	; 254
     210:	51 83       	std	Z+1, r21	; 0x01
     212:	40 83       	st	Z, r20

	acc_head++;
     214:	9f 5f       	subi	r25, 0xFF	; 255
	if (acc_head == SAMPLES)
     216:	95 31       	cpi	r25, 0x15	; 21
     218:	19 f0       	breq	.+6      	; 0x220 <PlaceInAccBuffor+0x44>
{
	X_acc_buff[acc_head] = acc_samples[0];
	Y_acc_buff[acc_head] = acc_samples[1];
	Z_acc_buff[acc_head] = acc_samples[2];

	acc_head++;
     21a:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <acc_head>
     21e:	02 c0       	rjmp	.+4      	; 0x224 <PlaceInAccBuffor+0x48>
	if (acc_head == SAMPLES)
		acc_head = 0;
     220:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <acc_head>

	if (acc_head == acc_tail)
     224:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <acc_head>
     228:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <__data_end>
     22c:	89 13       	cpse	r24, r25
     22e:	03 c0       	rjmp	.+6      	; 0x236 <PlaceInAccBuffor+0x5a>
		acc_tail++;
     230:	8f 5f       	subi	r24, 0xFF	; 255
     232:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>

	if (acc_tail == SAMPLES)
     236:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
     23a:	85 31       	cpi	r24, 0x15	; 21
     23c:	11 f4       	brne	.+4      	; 0x242 <PlaceInAccBuffor+0x66>
		acc_tail = 0;
     23e:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <__data_end>
     242:	08 95       	ret

00000244 <ReadGyroSample>:
}

void ReadGyroSample(int16_t reading_buf[])
{
     244:	dc 01       	movw	r26, r24
	reading_buf[0] = X_gyro_buff[gyro_tail];
     246:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <gyro_tail>
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	ee 0f       	add	r30, r30
     24e:	ff 1f       	adc	r31, r31
     250:	ec 59       	subi	r30, 0x9C	; 156
     252:	fe 4f       	sbci	r31, 0xFE	; 254
     254:	80 81       	ld	r24, Z
     256:	91 81       	ldd	r25, Z+1	; 0x01
     258:	11 96       	adiw	r26, 0x01	; 1
     25a:	9c 93       	st	X, r25
     25c:	8e 93       	st	-X, r24
	reading_buf[1] = Y_gyro_buff[gyro_tail];
     25e:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <gyro_tail>
     262:	29 2f       	mov	r18, r25
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	22 0f       	add	r18, r18
     268:	33 1f       	adc	r19, r19
     26a:	f9 01       	movw	r30, r18
     26c:	e2 57       	subi	r30, 0x72	; 114
     26e:	fe 4f       	sbci	r31, 0xFE	; 254
     270:	40 81       	ld	r20, Z
     272:	51 81       	ldd	r21, Z+1	; 0x01
     274:	13 96       	adiw	r26, 0x03	; 3
     276:	5c 93       	st	X, r21
     278:	4e 93       	st	-X, r20
     27a:	12 97       	sbiw	r26, 0x02	; 2
	reading_buf[2] = Z_gyro_buff[gyro_tail];
     27c:	f9 01       	movw	r30, r18
     27e:	e4 5b       	subi	r30, 0xB4	; 180
     280:	fd 4f       	sbci	r31, 0xFD	; 253
     282:	20 81       	ld	r18, Z
     284:	31 81       	ldd	r19, Z+1	; 0x01
     286:	15 96       	adiw	r26, 0x05	; 5
     288:	3c 93       	st	X, r19
     28a:	2e 93       	st	-X, r18
     28c:	14 97       	sbiw	r26, 0x04	; 4

	gyro_tail++;
     28e:	9f 5f       	subi	r25, 0xFF	; 255

	if (gyro_tail == SAMPLES)
     290:	95 31       	cpi	r25, 0x15	; 21
     292:	19 f0       	breq	.+6      	; 0x29a <ReadGyroSample+0x56>
{
	reading_buf[0] = X_gyro_buff[gyro_tail];
	reading_buf[1] = Y_gyro_buff[gyro_tail];
	reading_buf[2] = Z_gyro_buff[gyro_tail];

	gyro_tail++;
     294:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <gyro_tail>
     298:	08 95       	ret

	if (gyro_tail == SAMPLES)
		gyro_tail = 0;
     29a:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <gyro_tail>
     29e:	08 95       	ret

000002a0 <ReadAccSample>:
}

void ReadAccSample(int16_t reading_buf[])
{
     2a0:	dc 01       	movw	r26, r24
	reading_buf[0] = X_acc_buff[acc_tail];
     2a2:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <__data_end>
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	ee 0f       	add	r30, r30
     2aa:	ff 1f       	adc	r31, r31
     2ac:	ee 51       	subi	r30, 0x1E	; 30
     2ae:	fe 4f       	sbci	r31, 0xFE	; 254
     2b0:	80 81       	ld	r24, Z
     2b2:	91 81       	ldd	r25, Z+1	; 0x01
     2b4:	11 96       	adiw	r26, 0x01	; 1
     2b6:	9c 93       	st	X, r25
     2b8:	8e 93       	st	-X, r24
	reading_buf[1] = Y_acc_buff[acc_tail];
     2ba:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <__data_end>
     2be:	29 2f       	mov	r18, r25
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	f9 01       	movw	r30, r18
     2c8:	ee 5d       	subi	r30, 0xDE	; 222
     2ca:	fd 4f       	sbci	r31, 0xFD	; 253
     2cc:	40 81       	ld	r20, Z
     2ce:	51 81       	ldd	r21, Z+1	; 0x01
     2d0:	13 96       	adiw	r26, 0x03	; 3
     2d2:	5c 93       	st	X, r21
     2d4:	4e 93       	st	-X, r20
     2d6:	12 97       	sbiw	r26, 0x02	; 2
	reading_buf[2] = Z_acc_buff[acc_tail];
     2d8:	f9 01       	movw	r30, r18
     2da:	e8 54       	subi	r30, 0x48	; 72
     2dc:	fe 4f       	sbci	r31, 0xFE	; 254
     2de:	20 81       	ld	r18, Z
     2e0:	31 81       	ldd	r19, Z+1	; 0x01
     2e2:	15 96       	adiw	r26, 0x05	; 5
     2e4:	3c 93       	st	X, r19
     2e6:	2e 93       	st	-X, r18
     2e8:	14 97       	sbiw	r26, 0x04	; 4

	acc_tail++;
     2ea:	9f 5f       	subi	r25, 0xFF	; 255

	if (acc_tail == SAMPLES)
     2ec:	95 31       	cpi	r25, 0x15	; 21
     2ee:	19 f0       	breq	.+6      	; 0x2f6 <ReadAccSample+0x56>
{
	reading_buf[0] = X_acc_buff[acc_tail];
	reading_buf[1] = Y_acc_buff[acc_tail];
	reading_buf[2] = Z_acc_buff[acc_tail];

	acc_tail++;
     2f0:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <__data_end>
     2f4:	08 95       	ret

	if (acc_tail == SAMPLES)
		acc_tail = 0;
     2f6:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <__data_end>
     2fa:	08 95       	ret

000002fc <ReadGyroSample_ViewOnly>:
}

void ReadGyroSample_ViewOnly(int16_t reading_buf[])
{
     2fc:	dc 01       	movw	r26, r24
	reading_buf[0] = X_gyro_buff[(gyro_head - 1)];
     2fe:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <gyro_head>
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	ee 0f       	add	r30, r30
     306:	ff 1f       	adc	r31, r31
     308:	ee 59       	subi	r30, 0x9E	; 158
     30a:	fe 4f       	sbci	r31, 0xFE	; 254
     30c:	80 81       	ld	r24, Z
     30e:	91 81       	ldd	r25, Z+1	; 0x01
     310:	11 96       	adiw	r26, 0x01	; 1
     312:	9c 93       	st	X, r25
     314:	8e 93       	st	-X, r24
	reading_buf[1] = Y_gyro_buff[(gyro_head - 1)];
     316:	20 91 5f 01 	lds	r18, 0x015F	; 0x80015f <gyro_head>
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	21 50       	subi	r18, 0x01	; 1
     31e:	31 09       	sbc	r19, r1
     320:	22 0f       	add	r18, r18
     322:	33 1f       	adc	r19, r19
     324:	f9 01       	movw	r30, r18
     326:	e2 57       	subi	r30, 0x72	; 114
     328:	fe 4f       	sbci	r31, 0xFE	; 254
     32a:	80 81       	ld	r24, Z
     32c:	91 81       	ldd	r25, Z+1	; 0x01
     32e:	13 96       	adiw	r26, 0x03	; 3
     330:	9c 93       	st	X, r25
     332:	8e 93       	st	-X, r24
     334:	12 97       	sbiw	r26, 0x02	; 2
	reading_buf[2] = Z_gyro_buff[(gyro_head - 1)];
     336:	f9 01       	movw	r30, r18
     338:	e4 5b       	subi	r30, 0xB4	; 180
     33a:	fd 4f       	sbci	r31, 0xFD	; 253
     33c:	80 81       	ld	r24, Z
     33e:	91 81       	ldd	r25, Z+1	; 0x01
     340:	15 96       	adiw	r26, 0x05	; 5
     342:	9c 93       	st	X, r25
     344:	8e 93       	st	-X, r24
     346:	14 97       	sbiw	r26, 0x04	; 4
     348:	08 95       	ret

0000034a <ReadAccSample_ViewOnly>:
}

void ReadAccSample_ViewOnly(int16_t reading_buf[])
{
     34a:	dc 01       	movw	r26, r24
	reading_buf[0] = X_acc_buff[(acc_head - 1)];
     34c:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <acc_head>
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	ee 0f       	add	r30, r30
     354:	ff 1f       	adc	r31, r31
     356:	e0 52       	subi	r30, 0x20	; 32
     358:	fe 4f       	sbci	r31, 0xFE	; 254
     35a:	80 81       	ld	r24, Z
     35c:	91 81       	ldd	r25, Z+1	; 0x01
     35e:	11 96       	adiw	r26, 0x01	; 1
     360:	9c 93       	st	X, r25
     362:	8e 93       	st	-X, r24
	reading_buf[1] = Y_acc_buff[(acc_head - 1)];
     364:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <acc_head>
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	21 50       	subi	r18, 0x01	; 1
     36c:	31 09       	sbc	r19, r1
     36e:	22 0f       	add	r18, r18
     370:	33 1f       	adc	r19, r19
     372:	f9 01       	movw	r30, r18
     374:	ee 5d       	subi	r30, 0xDE	; 222
     376:	fd 4f       	sbci	r31, 0xFD	; 253
     378:	80 81       	ld	r24, Z
     37a:	91 81       	ldd	r25, Z+1	; 0x01
     37c:	13 96       	adiw	r26, 0x03	; 3
     37e:	9c 93       	st	X, r25
     380:	8e 93       	st	-X, r24
     382:	12 97       	sbiw	r26, 0x02	; 2
	reading_buf[2] = Z_acc_buff[(acc_head - 1)];
     384:	f9 01       	movw	r30, r18
     386:	e8 54       	subi	r30, 0x48	; 72
     388:	fe 4f       	sbci	r31, 0xFE	; 254
     38a:	80 81       	ld	r24, Z
     38c:	91 81       	ldd	r25, Z+1	; 0x01
     38e:	15 96       	adiw	r26, 0x05	; 5
     390:	9c 93       	st	X, r25
     392:	8e 93       	st	-X, r24
     394:	14 97       	sbiw	r26, 0x04	; 4
     396:	08 95       	ret

00000398 <SamplesGyroBuf>:
}

uint8_t SamplesGyroBuf()
{
	uint8_t gyro_samples;
	gyro_samples = gyro_head - gyro_tail;
     398:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <gyro_head>
     39c:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <gyro_tail>
     3a0:	89 1b       	sub	r24, r25
	if (gyro_samples > SAMPLES_BUFF_SIZE)
     3a2:	85 31       	cpi	r24, 0x15	; 21
     3a4:	08 f0       	brcs	.+2      	; 0x3a8 <SamplesGyroBuf+0x10>
	{
		gyro_samples -= (255 - SAMPLES_BUFF_SIZE);
     3a6:	8b 5e       	subi	r24, 0xEB	; 235
	}
	return gyro_samples;
}
     3a8:	08 95       	ret

000003aa <SamplesAccBuf>:

uint8_t SamplesAccBuf()
{
	uint8_t acc_samples;
	acc_samples = acc_head - acc_tail;
     3aa:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <acc_head>
     3ae:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <__data_end>
     3b2:	89 1b       	sub	r24, r25
	if (acc_samples > SAMPLES_BUFF_SIZE)
     3b4:	85 31       	cpi	r24, 0x15	; 21
     3b6:	08 f0       	brcs	.+2      	; 0x3ba <SamplesAccBuf+0x10>
	{
		acc_samples -= (255 - SAMPLES_BUFF_SIZE);
     3b8:	8b 5e       	subi	r24, 0xEB	; 235
	}
	return acc_samples;
}
     3ba:	08 95       	ret

000003bc <ReadGyroBuf>:

void ReadGyroBuf(int16_t  reading_buf[3][SAMPLES_BUFF_SIZE], uint8_t sam_nr)
{
     3bc:	cf 92       	push	r12
     3be:	df 92       	push	r13
     3c0:	ef 92       	push	r14
     3c2:	ff 92       	push	r15
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	00 d0       	rcall	.+0      	; 0x3ce <ReadGyroBuf+0x12>
     3ce:	00 d0       	rcall	.+0      	; 0x3d0 <ReadGyroBuf+0x14>
     3d0:	00 d0       	rcall	.+0      	; 0x3d2 <ReadGyroBuf+0x16>
     3d2:	cd b7       	in	r28, 0x3d	; 61
     3d4:	de b7       	in	r29, 0x3e	; 62
	int16_t bufor[3];
	uint8_t i;
	for(i = 0; i < sam_nr; i++)	//read all new samples from buffor
     3d6:	66 23       	and	r22, r22
     3d8:	29 f1       	breq	.+74     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     3da:	6c 01       	movw	r12, r24
     3dc:	7c 01       	movw	r14, r24
     3de:	8c 01       	movw	r16, r24
     3e0:	08 5d       	subi	r16, 0xD8	; 216
     3e2:	1f 4f       	sbci	r17, 0xFF	; 255
     3e4:	61 50       	subi	r22, 0x01	; 1
     3e6:	26 2f       	mov	r18, r22
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	2f 5f       	subi	r18, 0xFF	; 255
     3ec:	3f 4f       	sbci	r19, 0xFF	; 255
     3ee:	22 0f       	add	r18, r18
     3f0:	33 1f       	adc	r19, r19
     3f2:	c2 0e       	add	r12, r18
     3f4:	d3 1e       	adc	r13, r19
	{
 		ReadGyroSample(bufor);
     3f6:	ce 01       	movw	r24, r28
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	0e 94 22 01 	call	0x244	; 0x244 <ReadGyroSample>
 		reading_buf[X_AXIS][i] = bufor[X_AXIS];
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	9a 81       	ldd	r25, Y+2	; 0x02
     402:	f7 01       	movw	r30, r14
     404:	81 93       	st	Z+, r24
     406:	91 93       	st	Z+, r25
     408:	7f 01       	movw	r14, r30
 		reading_buf[Y_AXIS][i] = bufor[Y_AXIS];
     40a:	2b 81       	ldd	r18, Y+3	; 0x03
     40c:	3c 81       	ldd	r19, Y+4	; 0x04
     40e:	f8 01       	movw	r30, r16
     410:	21 93       	st	Z+, r18
     412:	31 93       	st	Z+, r19
     414:	8f 01       	movw	r16, r30
 		reading_buf[Z_AXIS][i] = bufor[Z_AXIS];
     416:	2d 81       	ldd	r18, Y+5	; 0x05
     418:	3e 81       	ldd	r19, Y+6	; 0x06
     41a:	37 a3       	std	Z+39, r19	; 0x27
     41c:	26 a3       	std	Z+38, r18	; 0x26

void ReadGyroBuf(int16_t  reading_buf[3][SAMPLES_BUFF_SIZE], uint8_t sam_nr)
{
	int16_t bufor[3];
	uint8_t i;
	for(i = 0; i < sam_nr; i++)	//read all new samples from buffor
     41e:	ec 14       	cp	r14, r12
     420:	fd 04       	cpc	r15, r13
     422:	49 f7       	brne	.-46     	; 0x3f6 <ReadGyroBuf+0x3a>
 		ReadGyroSample(bufor);
 		reading_buf[X_AXIS][i] = bufor[X_AXIS];
 		reading_buf[Y_AXIS][i] = bufor[Y_AXIS];
 		reading_buf[Z_AXIS][i] = bufor[Z_AXIS];
	}
}
     424:	26 96       	adiw	r28, 0x06	; 6
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	cd bf       	out	0x3d, r28	; 61
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	ff 90       	pop	r15
     43a:	ef 90       	pop	r14
     43c:	df 90       	pop	r13
     43e:	cf 90       	pop	r12
     440:	08 95       	ret

00000442 <ReadAccBuf>:

void ReadAccBuf(int16_t  reading_buf[3][SAMPLES_BUFF_SIZE], uint8_t sam_nr)
{
     442:	cf 92       	push	r12
     444:	df 92       	push	r13
     446:	ef 92       	push	r14
     448:	ff 92       	push	r15
     44a:	0f 93       	push	r16
     44c:	1f 93       	push	r17
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	00 d0       	rcall	.+0      	; 0x454 <ReadAccBuf+0x12>
     454:	00 d0       	rcall	.+0      	; 0x456 <ReadAccBuf+0x14>
     456:	00 d0       	rcall	.+0      	; 0x458 <ReadAccBuf+0x16>
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
	int16_t bufor[3];
	uint8_t i;
	for(i = 0; i < sam_nr; i++)	//read all new samples from buffor
     45c:	66 23       	and	r22, r22
     45e:	29 f1       	breq	.+74     	; 0x4aa <ReadAccBuf+0x68>
     460:	6c 01       	movw	r12, r24
     462:	7c 01       	movw	r14, r24
     464:	8c 01       	movw	r16, r24
     466:	08 5d       	subi	r16, 0xD8	; 216
     468:	1f 4f       	sbci	r17, 0xFF	; 255
     46a:	61 50       	subi	r22, 0x01	; 1
     46c:	26 2f       	mov	r18, r22
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	2f 5f       	subi	r18, 0xFF	; 255
     472:	3f 4f       	sbci	r19, 0xFF	; 255
     474:	22 0f       	add	r18, r18
     476:	33 1f       	adc	r19, r19
     478:	c2 0e       	add	r12, r18
     47a:	d3 1e       	adc	r13, r19
	{
		ReadAccSample(bufor);
     47c:	ce 01       	movw	r24, r28
     47e:	01 96       	adiw	r24, 0x01	; 1
     480:	0e 94 50 01 	call	0x2a0	; 0x2a0 <ReadAccSample>
 		reading_buf[X_AXIS][i] = bufor[X_AXIS];
     484:	89 81       	ldd	r24, Y+1	; 0x01
     486:	9a 81       	ldd	r25, Y+2	; 0x02
     488:	f7 01       	movw	r30, r14
     48a:	81 93       	st	Z+, r24
     48c:	91 93       	st	Z+, r25
     48e:	7f 01       	movw	r14, r30
 		reading_buf[Y_AXIS][i] = bufor[Y_AXIS];
     490:	2b 81       	ldd	r18, Y+3	; 0x03
     492:	3c 81       	ldd	r19, Y+4	; 0x04
     494:	f8 01       	movw	r30, r16
     496:	21 93       	st	Z+, r18
     498:	31 93       	st	Z+, r19
     49a:	8f 01       	movw	r16, r30
 		reading_buf[Z_AXIS][i] = bufor[Z_AXIS];
     49c:	2d 81       	ldd	r18, Y+5	; 0x05
     49e:	3e 81       	ldd	r19, Y+6	; 0x06
     4a0:	37 a3       	std	Z+39, r19	; 0x27
     4a2:	26 a3       	std	Z+38, r18	; 0x26

void ReadAccBuf(int16_t  reading_buf[3][SAMPLES_BUFF_SIZE], uint8_t sam_nr)
{
	int16_t bufor[3];
	uint8_t i;
	for(i = 0; i < sam_nr; i++)	//read all new samples from buffor
     4a4:	ec 14       	cp	r14, r12
     4a6:	fd 04       	cpc	r15, r13
     4a8:	49 f7       	brne	.-46     	; 0x47c <ReadAccBuf+0x3a>
		ReadAccSample(bufor);
 		reading_buf[X_AXIS][i] = bufor[X_AXIS];
 		reading_buf[Y_AXIS][i] = bufor[Y_AXIS];
 		reading_buf[Z_AXIS][i] = bufor[Z_AXIS];
	}
}
     4aa:	26 96       	adiw	r28, 0x06	; 6
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	f8 94       	cli
     4b0:	de bf       	out	0x3e, r29	; 62
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	cd bf       	out	0x3d, r28	; 61
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	ff 90       	pop	r15
     4c0:	ef 90       	pop	r14
     4c2:	df 90       	pop	r13
     4c4:	cf 90       	pop	r12
     4c6:	08 95       	ret

000004c8 <AveragingLinearMPU6050>:
	ReadAccBuf(temp_buf, samples);
	AveragingWeightingMPU6050(temp_buf, samples, acc);
}

void AveragingLinearMPU6050(int16_t data[3][SAMPLES_BUFF_SIZE], uint8_t samples, int16_t results[3])
{
     4c8:	4f 92       	push	r4
     4ca:	5f 92       	push	r5
     4cc:	6f 92       	push	r6
     4ce:	7f 92       	push	r7
     4d0:	8f 92       	push	r8
     4d2:	9f 92       	push	r9
     4d4:	af 92       	push	r10
     4d6:	bf 92       	push	r11
     4d8:	cf 92       	push	r12
     4da:	df 92       	push	r13
     4dc:	ef 92       	push	r14
     4de:	ff 92       	push	r15
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	ea 01       	movw	r28, r20
	int32_t sum[3];
	sum[0] = 0;
	sum[1] = 0;
	sum[2] = 0;

	for(uint8_t i = 0; i < samples; i++)
     4ea:	66 23       	and	r22, r22
     4ec:	b9 f1       	breq	.+110    	; 0x55c <AveragingLinearMPU6050+0x94>
     4ee:	dc 01       	movw	r26, r24
     4f0:	fc 01       	movw	r30, r24
     4f2:	b8 96       	adiw	r30, 0x28	; 40
     4f4:	2f ef       	ldi	r18, 0xFF	; 255
     4f6:	26 0f       	add	r18, r22
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	2f 5f       	subi	r18, 0xFF	; 255
     4fc:	3f 4f       	sbci	r19, 0xFF	; 255
     4fe:	22 0f       	add	r18, r18
     500:	33 1f       	adc	r19, r19
     502:	82 0f       	add	r24, r18
     504:	93 1f       	adc	r25, r19
     506:	00 e0       	ldi	r16, 0x00	; 0
     508:	10 e0       	ldi	r17, 0x00	; 0
     50a:	98 01       	movw	r18, r16
     50c:	81 2c       	mov	r8, r1
     50e:	91 2c       	mov	r9, r1
     510:	54 01       	movw	r10, r8
     512:	c1 2c       	mov	r12, r1
     514:	d1 2c       	mov	r13, r1
     516:	76 01       	movw	r14, r12
	{
		sum[X_AXIS] += data[X_AXIS][i];
     518:	4d 91       	ld	r20, X+
     51a:	5d 91       	ld	r21, X+
     51c:	2a 01       	movw	r4, r20
     51e:	55 0f       	add	r21, r21
     520:	66 08       	sbc	r6, r6
     522:	77 08       	sbc	r7, r7
     524:	04 0d       	add	r16, r4
     526:	15 1d       	adc	r17, r5
     528:	26 1d       	adc	r18, r6
     52a:	37 1d       	adc	r19, r7
		sum[Y_AXIS] += data[Y_AXIS][i];
     52c:	41 91       	ld	r20, Z+
     52e:	51 91       	ld	r21, Z+
     530:	2a 01       	movw	r4, r20
     532:	55 0f       	add	r21, r21
     534:	66 08       	sbc	r6, r6
     536:	77 08       	sbc	r7, r7
     538:	84 0c       	add	r8, r4
     53a:	95 1c       	adc	r9, r5
     53c:	a6 1c       	adc	r10, r6
     53e:	b7 1c       	adc	r11, r7
		sum[Z_AXIS] += data[Z_AXIS][i];
     540:	46 a1       	ldd	r20, Z+38	; 0x26
     542:	57 a1       	ldd	r21, Z+39	; 0x27
     544:	2a 01       	movw	r4, r20
     546:	55 0f       	add	r21, r21
     548:	66 08       	sbc	r6, r6
     54a:	77 08       	sbc	r7, r7
     54c:	c4 0c       	add	r12, r4
     54e:	d5 1c       	adc	r13, r5
     550:	e6 1c       	adc	r14, r6
     552:	f7 1c       	adc	r15, r7
	int32_t sum[3];
	sum[0] = 0;
	sum[1] = 0;
	sum[2] = 0;

	for(uint8_t i = 0; i < samples; i++)
     554:	a8 17       	cp	r26, r24
     556:	b9 07       	cpc	r27, r25
     558:	f9 f6       	brne	.-66     	; 0x518 <AveragingLinearMPU6050+0x50>
     55a:	09 c0       	rjmp	.+18     	; 0x56e <AveragingLinearMPU6050+0xa6>
}

void AveragingLinearMPU6050(int16_t data[3][SAMPLES_BUFF_SIZE], uint8_t samples, int16_t results[3])
{
	int32_t sum[3];
	sum[0] = 0;
     55c:	00 e0       	ldi	r16, 0x00	; 0
     55e:	10 e0       	ldi	r17, 0x00	; 0
     560:	98 01       	movw	r18, r16
	sum[1] = 0;
     562:	81 2c       	mov	r8, r1
     564:	91 2c       	mov	r9, r1
     566:	54 01       	movw	r10, r8
	sum[2] = 0;
     568:	c1 2c       	mov	r12, r1
     56a:	d1 2c       	mov	r13, r1
     56c:	76 01       	movw	r14, r12
		sum[X_AXIS] += data[X_AXIS][i];
		sum[Y_AXIS] += data[Y_AXIS][i];
		sum[Z_AXIS] += data[Z_AXIS][i];
	}

	sum[X_AXIS] /= (int32_t) samples;
     56e:	46 2e       	mov	r4, r22
     570:	51 2c       	mov	r5, r1
     572:	61 2c       	mov	r6, r1
     574:	71 2c       	mov	r7, r1
	sum[Y_AXIS] /= (int32_t) samples;
	sum[Z_AXIS] /= (int32_t) samples;

	results[X_AXIS] = (int16_t) sum[X_AXIS];
     576:	c9 01       	movw	r24, r18
     578:	b8 01       	movw	r22, r16
     57a:	a3 01       	movw	r20, r6
     57c:	92 01       	movw	r18, r4
     57e:	0e 94 05 11 	call	0x220a	; 0x220a <__divmodsi4>
     582:	39 83       	std	Y+1, r19	; 0x01
     584:	28 83       	st	Y, r18
	results[Y_AXIS] = (int16_t) sum[Y_AXIS];
     586:	c5 01       	movw	r24, r10
     588:	b4 01       	movw	r22, r8
     58a:	a3 01       	movw	r20, r6
     58c:	92 01       	movw	r18, r4
     58e:	0e 94 05 11 	call	0x220a	; 0x220a <__divmodsi4>
     592:	3b 83       	std	Y+3, r19	; 0x03
     594:	2a 83       	std	Y+2, r18	; 0x02
	results[Z_AXIS] = (int16_t) sum[Z_AXIS];
     596:	c7 01       	movw	r24, r14
     598:	b6 01       	movw	r22, r12
     59a:	a3 01       	movw	r20, r6
     59c:	92 01       	movw	r18, r4
     59e:	0e 94 05 11 	call	0x220a	; 0x220a <__divmodsi4>
     5a2:	3d 83       	std	Y+5, r19	; 0x05
     5a4:	2c 83       	std	Y+4, r18	; 0x04
}
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	1f 91       	pop	r17
     5ac:	0f 91       	pop	r16
     5ae:	ff 90       	pop	r15
     5b0:	ef 90       	pop	r14
     5b2:	df 90       	pop	r13
     5b4:	cf 90       	pop	r12
     5b6:	bf 90       	pop	r11
     5b8:	af 90       	pop	r10
     5ba:	9f 90       	pop	r9
     5bc:	8f 90       	pop	r8
     5be:	7f 90       	pop	r7
     5c0:	6f 90       	pop	r6
     5c2:	5f 90       	pop	r5
     5c4:	4f 90       	pop	r4
     5c6:	08 95       	ret

000005c8 <ReadGyroBufAveraged>:
	}
}

/*** Before calling this function, make sure there are samples in bufor ***/
void ReadGyroBufAveraged(int16_t gyro[3])
{
     5c8:	ef 92       	push	r14
     5ca:	ff 92       	push	r15
     5cc:	1f 93       	push	r17
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	cd b7       	in	r28, 0x3d	; 61
     5d4:	de b7       	in	r29, 0x3e	; 62
     5d6:	c8 57       	subi	r28, 0x78	; 120
     5d8:	d1 09       	sbc	r29, r1
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	de bf       	out	0x3e, r29	; 62
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	cd bf       	out	0x3d, r28	; 61
     5e4:	7c 01       	movw	r14, r24
	int16_t temp_buf[3][SAMPLES_BUFF_SIZE];	//bufor to store samples
	uint8_t samples;		//number of samples in bufor

	samples = SamplesGyroBuf();
     5e6:	0e 94 cc 01 	call	0x398	; 0x398 <SamplesGyroBuf>
     5ea:	18 2f       	mov	r17, r24

	ReadGyroBuf(temp_buf, samples);
     5ec:	68 2f       	mov	r22, r24
     5ee:	ce 01       	movw	r24, r28
     5f0:	01 96       	adiw	r24, 0x01	; 1
     5f2:	0e 94 de 01 	call	0x3bc	; 0x3bc <ReadGyroBuf>
	AveragingLinearMPU6050(temp_buf, samples, gyro);
     5f6:	a7 01       	movw	r20, r14
     5f8:	61 2f       	mov	r22, r17
     5fa:	ce 01       	movw	r24, r28
     5fc:	01 96       	adiw	r24, 0x01	; 1
     5fe:	0e 94 64 02 	call	0x4c8	; 0x4c8 <AveragingLinearMPU6050>
}
     602:	c8 58       	subi	r28, 0x88	; 136
     604:	df 4f       	sbci	r29, 0xFF	; 255
     606:	0f b6       	in	r0, 0x3f	; 63
     608:	f8 94       	cli
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	cd bf       	out	0x3d, r28	; 61
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	ff 90       	pop	r15
     618:	ef 90       	pop	r14
     61a:	08 95       	ret

0000061c <AveragingWeightingMPU6050>:
	results[Y_AXIS] = (int16_t) sum[Y_AXIS];
	results[Z_AXIS] = (int16_t) sum[Z_AXIS];
}

void AveragingWeightingMPU6050(int16_t data[3][SAMPLES_BUFF_SIZE], uint8_t samples, int16_t results[3])
{
     61c:	2f 92       	push	r2
     61e:	3f 92       	push	r3
     620:	4f 92       	push	r4
     622:	5f 92       	push	r5
     624:	6f 92       	push	r6
     626:	7f 92       	push	r7
     628:	8f 92       	push	r8
     62a:	9f 92       	push	r9
     62c:	af 92       	push	r10
     62e:	bf 92       	push	r11
     630:	cf 92       	push	r12
     632:	df 92       	push	r13
     634:	ef 92       	push	r14
     636:	ff 92       	push	r15
     638:	0f 93       	push	r16
     63a:	1f 93       	push	r17
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	cd b7       	in	r28, 0x3d	; 61
     642:	de b7       	in	r29, 0x3e	; 62
     644:	27 97       	sbiw	r28, 0x07	; 7
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	f8 94       	cli
     64a:	de bf       	out	0x3e, r29	; 62
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	cd bf       	out	0x3d, r28	; 61
     650:	5e 83       	std	Y+6, r21	; 0x06
     652:	4d 83       	std	Y+5, r20	; 0x05
	sum[0] = 0;
	sum[1] = 0;
	sum[2] = 0;
	uint8_t average = 0;

	for(uint8_t i = 0; i < samples; i++)
     654:	66 23       	and	r22, r22
     656:	09 f4       	brne	.+2      	; 0x65a <AveragingWeightingMPU6050+0x3e>
     658:	66 c0       	rjmp	.+204    	; 0x726 <AveragingWeightingMPU6050+0x10a>
     65a:	8c 01       	movw	r16, r24
     65c:	fc 01       	movw	r30, r24
     65e:	b8 96       	adiw	r30, 0x28	; 40
     660:	61 50       	subi	r22, 0x01	; 1
     662:	26 2e       	mov	r2, r22
     664:	31 2c       	mov	r3, r1
     666:	25 e1       	ldi	r18, 0x15	; 21
     668:	22 0e       	add	r2, r18
     66a:	31 1c       	adc	r3, r1
     66c:	22 0c       	add	r2, r2
     66e:	33 1c       	adc	r3, r3
     670:	28 0e       	add	r2, r24
     672:	39 1e       	adc	r3, r25
     674:	c1 2c       	mov	r12, r1
     676:	d1 2c       	mov	r13, r1
     678:	76 01       	movw	r14, r12
     67a:	c3 94       	inc	r12
     67c:	19 82       	std	Y+1, r1	; 0x01
     67e:	1a 82       	std	Y+2, r1	; 0x02
     680:	1b 82       	std	Y+3, r1	; 0x03
     682:	1c 82       	std	Y+4, r1	; 0x04
     684:	41 2c       	mov	r4, r1
     686:	51 2c       	mov	r5, r1
     688:	32 01       	movw	r6, r4
     68a:	81 2c       	mov	r8, r1
     68c:	91 2c       	mov	r9, r1
     68e:	54 01       	movw	r10, r8
     690:	1f 82       	std	Y+7, r1	; 0x07
	{
		average += (i+1)*(i+1);
     692:	4f 81       	ldd	r20, Y+7	; 0x07
     694:	cc 9c       	mul	r12, r12
     696:	40 0d       	add	r20, r0
     698:	11 24       	eor	r1, r1
     69a:	4f 83       	std	Y+7, r20	; 0x07
		sum[X_AXIS] += ((int32_t)data[X_AXIS][i] * (i+1)*(i+1));
     69c:	d8 01       	movw	r26, r16
     69e:	8d 91       	ld	r24, X+
     6a0:	9d 91       	ld	r25, X+
     6a2:	8d 01       	movw	r16, r26
     6a4:	dc 01       	movw	r26, r24
     6a6:	a7 01       	movw	r20, r14
     6a8:	96 01       	movw	r18, r12
     6aa:	0e 94 4b 11 	call	0x2296	; 0x2296 <__mulshisi3>
     6ae:	9b 01       	movw	r18, r22
     6b0:	ac 01       	movw	r20, r24
     6b2:	c7 01       	movw	r24, r14
     6b4:	b6 01       	movw	r22, r12
     6b6:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__mulsi3>
     6ba:	29 81       	ldd	r18, Y+1	; 0x01
     6bc:	3a 81       	ldd	r19, Y+2	; 0x02
     6be:	4b 81       	ldd	r20, Y+3	; 0x03
     6c0:	5c 81       	ldd	r21, Y+4	; 0x04
     6c2:	26 0f       	add	r18, r22
     6c4:	37 1f       	adc	r19, r23
     6c6:	48 1f       	adc	r20, r24
     6c8:	59 1f       	adc	r21, r25
     6ca:	29 83       	std	Y+1, r18	; 0x01
     6cc:	3a 83       	std	Y+2, r19	; 0x02
     6ce:	4b 83       	std	Y+3, r20	; 0x03
     6d0:	5c 83       	std	Y+4, r21	; 0x04
		sum[Y_AXIS] += ((int32_t)data[Y_AXIS][i] * (i+1)*(i+1));
     6d2:	a1 91       	ld	r26, Z+
     6d4:	b1 91       	ld	r27, Z+
     6d6:	a7 01       	movw	r20, r14
     6d8:	96 01       	movw	r18, r12
     6da:	0e 94 4b 11 	call	0x2296	; 0x2296 <__mulshisi3>
     6de:	9b 01       	movw	r18, r22
     6e0:	ac 01       	movw	r20, r24
     6e2:	c7 01       	movw	r24, r14
     6e4:	b6 01       	movw	r22, r12
     6e6:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__mulsi3>
     6ea:	46 0e       	add	r4, r22
     6ec:	57 1e       	adc	r5, r23
     6ee:	68 1e       	adc	r6, r24
     6f0:	79 1e       	adc	r7, r25
		sum[Z_AXIS] += ((int32_t)data[Z_AXIS][i] * (i+1)*(i+1));
     6f2:	a6 a1       	ldd	r26, Z+38	; 0x26
     6f4:	b7 a1       	ldd	r27, Z+39	; 0x27
     6f6:	a7 01       	movw	r20, r14
     6f8:	96 01       	movw	r18, r12
     6fa:	0e 94 4b 11 	call	0x2296	; 0x2296 <__mulshisi3>
     6fe:	9b 01       	movw	r18, r22
     700:	ac 01       	movw	r20, r24
     702:	c7 01       	movw	r24, r14
     704:	b6 01       	movw	r22, r12
     706:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__mulsi3>
     70a:	86 0e       	add	r8, r22
     70c:	97 1e       	adc	r9, r23
     70e:	a8 1e       	adc	r10, r24
     710:	b9 1e       	adc	r11, r25
     712:	3f ef       	ldi	r19, 0xFF	; 255
     714:	c3 1a       	sub	r12, r19
     716:	d3 0a       	sbc	r13, r19
     718:	e3 0a       	sbc	r14, r19
     71a:	f3 0a       	sbc	r15, r19
	sum[0] = 0;
	sum[1] = 0;
	sum[2] = 0;
	uint8_t average = 0;

	for(uint8_t i = 0; i < samples; i++)
     71c:	e2 15       	cp	r30, r2
     71e:	f3 05       	cpc	r31, r3
     720:	09 f0       	breq	.+2      	; 0x724 <AveragingWeightingMPU6050+0x108>
     722:	b7 cf       	rjmp	.-146    	; 0x692 <AveragingWeightingMPU6050+0x76>
     724:	0b c0       	rjmp	.+22     	; 0x73c <AveragingWeightingMPU6050+0x120>
}

void AveragingWeightingMPU6050(int16_t data[3][SAMPLES_BUFF_SIZE], uint8_t samples, int16_t results[3])
{
	int32_t sum[3];
	sum[0] = 0;
     726:	19 82       	std	Y+1, r1	; 0x01
     728:	1a 82       	std	Y+2, r1	; 0x02
     72a:	1b 82       	std	Y+3, r1	; 0x03
     72c:	1c 82       	std	Y+4, r1	; 0x04
	sum[1] = 0;
     72e:	41 2c       	mov	r4, r1
     730:	51 2c       	mov	r5, r1
     732:	32 01       	movw	r6, r4
	sum[2] = 0;
     734:	81 2c       	mov	r8, r1
     736:	91 2c       	mov	r9, r1
     738:	54 01       	movw	r10, r8
	uint8_t average = 0;
     73a:	1f 82       	std	Y+7, r1	; 0x07
		sum[X_AXIS] += ((int32_t)data[X_AXIS][i] * (i+1)*(i+1));
		sum[Y_AXIS] += ((int32_t)data[Y_AXIS][i] * (i+1)*(i+1));
		sum[Z_AXIS] += ((int32_t)data[Z_AXIS][i] * (i+1)*(i+1));
	}

	sum[X_AXIS] /= (int32_t) average;
     73c:	ff 81       	ldd	r31, Y+7	; 0x07
     73e:	cf 2e       	mov	r12, r31
     740:	d1 2c       	mov	r13, r1
     742:	e1 2c       	mov	r14, r1
     744:	f1 2c       	mov	r15, r1
	sum[Y_AXIS] /= (int32_t) average;
	sum[Z_AXIS] /= (int32_t) average;

	results[X_AXIS] = (int16_t) sum[X_AXIS];
     746:	69 81       	ldd	r22, Y+1	; 0x01
     748:	7a 81       	ldd	r23, Y+2	; 0x02
     74a:	8b 81       	ldd	r24, Y+3	; 0x03
     74c:	9c 81       	ldd	r25, Y+4	; 0x04
     74e:	a7 01       	movw	r20, r14
     750:	96 01       	movw	r18, r12
     752:	0e 94 05 11 	call	0x220a	; 0x220a <__divmodsi4>
     756:	ad 81       	ldd	r26, Y+5	; 0x05
     758:	be 81       	ldd	r27, Y+6	; 0x06
     75a:	2d 93       	st	X+, r18
     75c:	3c 93       	st	X, r19
	results[Y_AXIS] = (int16_t) sum[Y_AXIS];
     75e:	c3 01       	movw	r24, r6
     760:	b2 01       	movw	r22, r4
     762:	a7 01       	movw	r20, r14
     764:	96 01       	movw	r18, r12
     766:	0e 94 05 11 	call	0x220a	; 0x220a <__divmodsi4>
     76a:	ed 81       	ldd	r30, Y+5	; 0x05
     76c:	fe 81       	ldd	r31, Y+6	; 0x06
     76e:	33 83       	std	Z+3, r19	; 0x03
     770:	22 83       	std	Z+2, r18	; 0x02
	results[Z_AXIS] = (int16_t) sum[Z_AXIS];
     772:	c5 01       	movw	r24, r10
     774:	b4 01       	movw	r22, r8
     776:	a7 01       	movw	r20, r14
     778:	96 01       	movw	r18, r12
     77a:	0e 94 05 11 	call	0x220a	; 0x220a <__divmodsi4>
     77e:	ad 81       	ldd	r26, Y+5	; 0x05
     780:	be 81       	ldd	r27, Y+6	; 0x06
     782:	15 96       	adiw	r26, 0x05	; 5
     784:	3c 93       	st	X, r19
     786:	2e 93       	st	-X, r18
     788:	14 97       	sbiw	r26, 0x04	; 4
     78a:	27 96       	adiw	r28, 0x07	; 7
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	f8 94       	cli
     790:	de bf       	out	0x3e, r29	; 62
     792:	0f be       	out	0x3f, r0	; 63
     794:	cd bf       	out	0x3d, r28	; 61
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	1f 91       	pop	r17
     79c:	0f 91       	pop	r16
     79e:	ff 90       	pop	r15
     7a0:	ef 90       	pop	r14
     7a2:	df 90       	pop	r13
     7a4:	cf 90       	pop	r12
     7a6:	bf 90       	pop	r11
     7a8:	af 90       	pop	r10
     7aa:	9f 90       	pop	r9
     7ac:	8f 90       	pop	r8
     7ae:	7f 90       	pop	r7
     7b0:	6f 90       	pop	r6
     7b2:	5f 90       	pop	r5
     7b4:	4f 90       	pop	r4
     7b6:	3f 90       	pop	r3
     7b8:	2f 90       	pop	r2
     7ba:	08 95       	ret

000007bc <ReadAccBufAveraged>:
	AveragingLinearMPU6050(temp_buf, samples, gyro);
}

/*** Before calling this function, make sure there are samples in bufor ***/
void ReadAccBufAveraged(int16_t acc[3])
{
     7bc:	ef 92       	push	r14
     7be:	ff 92       	push	r15
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
     7ca:	c8 57       	subi	r28, 0x78	; 120
     7cc:	d1 09       	sbc	r29, r1
     7ce:	0f b6       	in	r0, 0x3f	; 63
     7d0:	f8 94       	cli
     7d2:	de bf       	out	0x3e, r29	; 62
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	cd bf       	out	0x3d, r28	; 61
     7d8:	7c 01       	movw	r14, r24
	int16_t temp_buf[3][SAMPLES_BUFF_SIZE];	//bufor to store samples
	uint8_t samples;	//number of samples in bufor

	samples = SamplesAccBuf();
     7da:	0e 94 d5 01 	call	0x3aa	; 0x3aa <SamplesAccBuf>
     7de:	18 2f       	mov	r17, r24

	ReadAccBuf(temp_buf, samples);
     7e0:	68 2f       	mov	r22, r24
     7e2:	ce 01       	movw	r24, r28
     7e4:	01 96       	adiw	r24, 0x01	; 1
     7e6:	0e 94 21 02 	call	0x442	; 0x442 <ReadAccBuf>
	AveragingWeightingMPU6050(temp_buf, samples, acc);
     7ea:	a7 01       	movw	r20, r14
     7ec:	61 2f       	mov	r22, r17
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 0e 03 	call	0x61c	; 0x61c <AveragingWeightingMPU6050>
}
     7f6:	c8 58       	subi	r28, 0x88	; 136
     7f8:	df 4f       	sbci	r29, 0xFF	; 255
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	f8 94       	cli
     7fe:	de bf       	out	0x3e, r29	; 62
     800:	0f be       	out	0x3f, r0	; 63
     802:	cd bf       	out	0x3d, r28	; 61
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	1f 91       	pop	r17
     80a:	ff 90       	pop	r15
     80c:	ef 90       	pop	r14
     80e:	08 95       	ret

00000810 <ProcessAngle>:
#include "Uart.h"
#include "Common.h"


double ProcessAngle(int16_t width, int16_t high)
{
     810:	cf 92       	push	r12
     812:	df 92       	push	r13
     814:	ef 92       	push	r14
     816:	ff 92       	push	r15
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
	double angle = 0;
	if (width != 0)	//for 0 width atan can be 0 or 180, but should be 0
     81c:	00 97       	sbiw	r24, 0x00	; 0
     81e:	c1 f1       	breq	.+112    	; 0x890 <ProcessAngle+0x80>
     820:	ec 01       	movw	r28, r24
	{
		angle = atan((double)high / (double)width);
     822:	07 2e       	mov	r0, r23
     824:	00 0c       	add	r0, r0
     826:	88 0b       	sbc	r24, r24
     828:	99 0b       	sbc	r25, r25
     82a:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__floatsisf>
     82e:	6b 01       	movw	r12, r22
     830:	7c 01       	movw	r14, r24
     832:	be 01       	movw	r22, r28
     834:	0d 2e       	mov	r0, r29
     836:	00 0c       	add	r0, r0
     838:	88 0b       	sbc	r24, r24
     83a:	99 0b       	sbc	r25, r25
     83c:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__floatsisf>
     840:	9b 01       	movw	r18, r22
     842:	ac 01       	movw	r20, r24
     844:	c7 01       	movw	r24, r14
     846:	b6 01       	movw	r22, r12
     848:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <__divsf3>
     84c:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <atan>
		/* Process to correct angles */
		if (width > 0)
     850:	1c 16       	cp	r1, r28
     852:	1d 06       	cpc	r1, r29
     854:	4c f4       	brge	.+18     	; 0x868 <ProcessAngle+0x58>
			angle = M_PI_2 - angle;
     856:	9b 01       	movw	r18, r22
     858:	ac 01       	movw	r20, r24
     85a:	6b ed       	ldi	r22, 0xDB	; 219
     85c:	7f e0       	ldi	r23, 0x0F	; 15
     85e:	89 ec       	ldi	r24, 0xC9	; 201
     860:	9f e3       	ldi	r25, 0x3F	; 63
     862:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__subsf3>
     866:	07 c0       	rjmp	.+14     	; 0x876 <ProcessAngle+0x66>
		else
			angle = (M_PI_2 + angle) * (-1);
     868:	2b ed       	ldi	r18, 0xDB	; 219
     86a:	3f e0       	ldi	r19, 0x0F	; 15
     86c:	49 ec       	ldi	r20, 0xC9	; 201
     86e:	5f e3       	ldi	r21, 0x3F	; 63
     870:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__addsf3>
     874:	90 58       	subi	r25, 0x80	; 128

		angle = (angle * 180) / M_PI;
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	44 e3       	ldi	r20, 0x34	; 52
     87c:	53 e4       	ldi	r21, 0x43	; 67
     87e:	0e 94 84 10 	call	0x2108	; 0x2108 <__mulsf3>
     882:	2b ed       	ldi	r18, 0xDB	; 219
     884:	3f e0       	ldi	r19, 0x0F	; 15
     886:	49 e4       	ldi	r20, 0x49	; 73
     888:	50 e4       	ldi	r21, 0x40	; 64
     88a:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <__divsf3>
     88e:	03 c0       	rjmp	.+6      	; 0x896 <ProcessAngle+0x86>
#include "Common.h"


double ProcessAngle(int16_t width, int16_t high)
{
	double angle = 0;
     890:	60 e0       	ldi	r22, 0x00	; 0
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	cb 01       	movw	r24, r22
			angle = (M_PI_2 + angle) * (-1);

		angle = (angle * 180) / M_PI;
	}
	return angle;
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	ff 90       	pop	r15
     89c:	ef 90       	pop	r14
     89e:	df 90       	pop	r13
     8a0:	cf 90       	pop	r12
     8a2:	08 95       	ret

000008a4 <I2C_start>:
	I2C_start();
	I2C_write(SLA + 1);
	byte = I2C_read(NACK);
	I2C_stop();
	return byte;
}
     8a4:	84 ea       	ldi	r24, 0xA4	; 164
     8a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     8aa:	ec eb       	ldi	r30, 0xBC	; 188
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	80 81       	ld	r24, Z
     8b0:	88 23       	and	r24, r24
     8b2:	ec f7       	brge	.-6      	; 0x8ae <I2C_start+0xa>
     8b4:	08 95       	ret

000008b6 <I2C_stop>:
     8b6:	84 e9       	ldi	r24, 0x94	; 148
     8b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     8bc:	ec eb       	ldi	r30, 0xBC	; 188
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	80 81       	ld	r24, Z
     8c2:	84 fd       	sbrc	r24, 4
     8c4:	fd cf       	rjmp	.-6      	; 0x8c0 <I2C_stop+0xa>
     8c6:	08 95       	ret

000008c8 <I2C_write>:
     8c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     8cc:	84 e8       	ldi	r24, 0x84	; 132
     8ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     8d2:	ec eb       	ldi	r30, 0xBC	; 188
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	80 81       	ld	r24, Z
     8d8:	88 23       	and	r24, r24
     8da:	ec f7       	brge	.-6      	; 0x8d6 <I2C_write+0xe>
     8dc:	08 95       	ret

000008de <I2C_read>:
     8de:	20 e4       	ldi	r18, 0x40	; 64
     8e0:	82 9f       	mul	r24, r18
     8e2:	c0 01       	movw	r24, r0
     8e4:	11 24       	eor	r1, r1
     8e6:	84 68       	ori	r24, 0x84	; 132
     8e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     8ec:	ec eb       	ldi	r30, 0xBC	; 188
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	80 81       	ld	r24, Z
     8f2:	88 23       	and	r24, r24
     8f4:	ec f7       	brge	.-6      	; 0x8f0 <I2C_read+0x12>
     8f6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     8fa:	08 95       	ret

000008fc <I2C_write_byte>:
     8fc:	1f 93       	push	r17
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	18 2f       	mov	r17, r24
     904:	d6 2f       	mov	r29, r22
     906:	c4 2f       	mov	r28, r20
     908:	0e 94 52 04 	call	0x8a4	; 0x8a4 <I2C_start>
     90c:	81 2f       	mov	r24, r17
     90e:	88 0f       	add	r24, r24
     910:	0e 94 64 04 	call	0x8c8	; 0x8c8 <I2C_write>
     914:	8d 2f       	mov	r24, r29
     916:	0e 94 64 04 	call	0x8c8	; 0x8c8 <I2C_write>
     91a:	8c 2f       	mov	r24, r28
     91c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <I2C_write>
     920:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <I2C_stop>
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	1f 91       	pop	r17
     92a:	08 95       	ret

0000092c <I2C_read_buf>:


void I2C_read_buf(uint8_t SLA, uint8_t adr, uint8_t len, uint8_t *buf) {
     92c:	ef 92       	push	r14
     92e:	ff 92       	push	r15
     930:	0f 93       	push	r16
     932:	1f 93       	push	r17
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	16 2f       	mov	r17, r22
     93a:	d4 2f       	mov	r29, r20
     93c:	e2 2e       	mov	r14, r18
     93e:	f3 2e       	mov	r15, r19
	SLA = (SLA<<1);
     940:	c8 2f       	mov	r28, r24
     942:	cc 0f       	add	r28, r28
	I2C_start();
     944:	0e 94 52 04 	call	0x8a4	; 0x8a4 <I2C_start>
	I2C_write(SLA);
     948:	8c 2f       	mov	r24, r28
     94a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <I2C_write>
	I2C_write(adr);
     94e:	81 2f       	mov	r24, r17
     950:	0e 94 64 04 	call	0x8c8	; 0x8c8 <I2C_write>
	I2C_start();
     954:	0e 94 52 04 	call	0x8a4	; 0x8a4 <I2C_start>
	I2C_write(SLA + 1);
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	8c 0f       	add	r24, r28
     95c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <I2C_write>
	while (len--) *buf++ = I2C_read( len ? ACK : NACK );
     960:	cf ef       	ldi	r28, 0xFF	; 255
     962:	cd 0f       	add	r28, r29
     964:	dd 23       	and	r29, r29
     966:	89 f0       	breq	.+34     	; 0x98a <I2C_read_buf+0x5e>
     968:	0e 2d       	mov	r16, r14
     96a:	1f 2d       	mov	r17, r15
     96c:	d1 e0       	ldi	r29, 0x01	; 1
     96e:	f1 2c       	mov	r15, r1
     970:	8d 2f       	mov	r24, r29
     972:	c1 11       	cpse	r28, r1
     974:	01 c0       	rjmp	.+2      	; 0x978 <I2C_read_buf+0x4c>
     976:	8f 2d       	mov	r24, r15
     978:	0e 94 6f 04 	call	0x8de	; 0x8de <I2C_read>
     97c:	f8 01       	movw	r30, r16
     97e:	81 93       	st	Z+, r24
     980:	8f 01       	movw	r16, r30
     982:	8c 2f       	mov	r24, r28
     984:	c1 50       	subi	r28, 0x01	; 1
     986:	81 11       	cpse	r24, r1
     988:	f3 cf       	rjmp	.-26     	; 0x970 <I2C_read_buf+0x44>
	I2C_stop();
     98a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <I2C_stop>
}
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	ff 90       	pop	r15
     998:	ef 90       	pop	r14
     99a:	08 95       	ret

0000099c <main>:
#define LED_OFF PORTB &= ~(1<<PB5)
#define LED_TGL PORTB ^=  (1<<PB5)

int main(void)
{
	pos_x = 0;
     99c:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <pos_x>
     9a0:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <pos_x+0x1>
     9a4:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <pos_x+0x2>
     9a8:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <pos_x+0x3>
	pos_y = 0;
     9ac:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <pos_y>
     9b0:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <pos_y+0x1>
     9b4:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <pos_y+0x2>
     9b8:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <pos_y+0x3>
//	InitTWI();
	DDRB = (1<<PB5);
     9bc:	80 e2       	ldi	r24, 0x20	; 32
     9be:	84 b9       	out	0x04, r24	; 4
	TWSR0 = 0x00;
     9c0:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR0 = 0x0C;
     9c4:	8c e0       	ldi	r24, 0x0C	; 12
     9c6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWCR0 = (1<<TWEN);	//enable TWI
     9ca:	84 e0       	ldi	r24, 0x04	; 4
     9cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

// 	test = I2C_read_byte(0x68, 0x75);
// 	test = test & 0b01111110;

	InitUartCOM();
     9d0:	0e 94 a4 0c 	call	0x1948	; 0x1948 <InitUartCOM>
	sei();
     9d4:	78 94       	sei
	SendLine("Uart dziala");
     9d6:	84 e0       	ldi	r24, 0x04	; 4
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SendLine>

	test_counter = 200;
     9de:	88 ec       	ldi	r24, 0xC8	; 200
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <test_counter+0x1>
     9e6:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <test_counter>

	CalibrateMPU6050(gyro_offset, acc_offset);
     9ea:	6c e0       	ldi	r22, 0x0C	; 12
     9ec:	72 e0       	ldi	r23, 0x02	; 2
     9ee:	86 e1       	ldi	r24, 0x16	; 22
     9f0:	92 e0       	ldi	r25, 0x02	; 2
     9f2:	0e 94 16 05 	call	0xa2c	; 0xa2c <CalibrateMPU6050>
     9f6:	8a e0       	ldi	r24, 0x0A	; 10

	for (uint8_t i=0; i<10; i++){
		LED_TGL;
     9f8:	20 e2       	ldi	r18, 0x20	; 32
     9fa:	95 b1       	in	r25, 0x05	; 5
     9fc:	92 27       	eor	r25, r18
     9fe:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a00:	3f ef       	ldi	r19, 0xFF	; 255
     a02:	41 ee       	ldi	r20, 0xE1	; 225
     a04:	94 e0       	ldi	r25, 0x04	; 4
     a06:	31 50       	subi	r19, 0x01	; 1
     a08:	40 40       	sbci	r20, 0x00	; 0
     a0a:	90 40       	sbci	r25, 0x00	; 0
     a0c:	e1 f7       	brne	.-8      	; 0xa06 <main+0x6a>
     a0e:	00 c0       	rjmp	.+0      	; 0xa10 <main+0x74>
     a10:	00 00       	nop
     a12:	81 50       	subi	r24, 0x01	; 1

	test_counter = 200;

	CalibrateMPU6050(gyro_offset, acc_offset);

	for (uint8_t i=0; i<10; i++){
     a14:	91 f7       	brne	.-28     	; 0x9fa <main+0x5e>
		LED_TGL;
		_delay_ms(100);
	}

	InitMPU6050();
     a16:	0e 94 12 07 	call	0xe24	; 0xe24 <InitMPU6050>
	InitCommonTimer();
     a1a:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <InitCommonTimer>

    while (1) 
    {
		CheckRxBuffor();
     a1e:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <CheckRxBuffor>
		ReadMPU6050();
     a22:	0e 94 76 07 	call	0xeec	; 0xeec <ReadMPU6050>
		CheckCommonTimer();
     a26:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <CheckCommonTimer>
     a2a:	f9 cf       	rjmp	.-14     	; 0xa1e <main+0x82>

00000a2c <CalibrateMPU6050>:
#include "Uart.h"
#include "Common.h"
#include "i2c_twi.h"

void CalibrateMPU6050(int16_t gyro_offset[], int16_t acc_offset[])
{
     a2c:	2f 92       	push	r2
     a2e:	3f 92       	push	r3
     a30:	4f 92       	push	r4
     a32:	5f 92       	push	r5
     a34:	6f 92       	push	r6
     a36:	7f 92       	push	r7
     a38:	8f 92       	push	r8
     a3a:	9f 92       	push	r9
     a3c:	af 92       	push	r10
     a3e:	bf 92       	push	r11
     a40:	cf 92       	push	r12
     a42:	df 92       	push	r13
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	cf 93       	push	r28
     a4e:	df 93       	push	r29
     a50:	cd b7       	in	r28, 0x3d	; 61
     a52:	de b7       	in	r29, 0x3e	; 62
     a54:	a4 97       	sbiw	r28, 0x24	; 36
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	f8 94       	cli
     a5a:	de bf       	out	0x3e, r29	; 62
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	cd bf       	out	0x3d, r28	; 61
     a60:	9a a3       	std	Y+34, r25	; 0x22
     a62:	89 a3       	std	Y+33, r24	; 0x21
     a64:	7c a3       	std	Y+36, r23	; 0x24
     a66:	6b a3       	std	Y+35, r22	; 0x23
	int32_t gyro_bias[3] = {0, 0, 0};
	int32_t accel_bias[3] = {0, 0, 0};
	packet_total = 0;

	// reset device, reset all registers, clear gyro and accelerometer bias registers
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
     a68:	40 e8       	ldi	r20, 0x80	; 128
     a6a:	6b e6       	ldi	r22, 0x6B	; 107
     a6c:	88 e6       	ldi	r24, 0x68	; 104
     a6e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
     a72:	2f ef       	ldi	r18, 0xFF	; 255
     a74:	31 ee       	ldi	r19, 0xE1	; 225
     a76:	44 e0       	ldi	r20, 0x04	; 4
     a78:	21 50       	subi	r18, 0x01	; 1
     a7a:	30 40       	sbci	r19, 0x00	; 0
     a7c:	40 40       	sbci	r20, 0x00	; 0
     a7e:	e1 f7       	brne	.-8      	; 0xa78 <CalibrateMPU6050+0x4c>
     a80:	00 c0       	rjmp	.+0      	; 0xa82 <CalibrateMPU6050+0x56>
     a82:	00 00       	nop
	_delay_ms(100);

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x01);
     a84:	41 e0       	ldi	r20, 0x01	; 1
     a86:	6b e6       	ldi	r22, 0x6B	; 107
     a88:	88 e6       	ldi	r24, 0x68	; 104
     a8a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_2, 0x00);
     a8e:	40 e0       	ldi	r20, 0x00	; 0
     a90:	6c e6       	ldi	r22, 0x6C	; 108
     a92:	88 e6       	ldi	r24, 0x68	; 104
     a94:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
     a98:	5f ef       	ldi	r21, 0xFF	; 255
     a9a:	63 ec       	ldi	r22, 0xC3	; 195
     a9c:	79 e0       	ldi	r23, 0x09	; 9
     a9e:	51 50       	subi	r21, 0x01	; 1
     aa0:	60 40       	sbci	r22, 0x00	; 0
     aa2:	70 40       	sbci	r23, 0x00	; 0
     aa4:	e1 f7       	brne	.-8      	; 0xa9e <CalibrateMPU6050+0x72>
     aa6:	00 c0       	rjmp	.+0      	; 0xaa8 <CalibrateMPU6050+0x7c>
     aa8:	00 00       	nop
	_delay_ms(200);

	// Configure device for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	68 e3       	ldi	r22, 0x38	; 56
     aae:	88 e6       	ldi	r24, 0x68	; 104
     ab0:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
     ab4:	40 e0       	ldi	r20, 0x00	; 0
     ab6:	63 e2       	ldi	r22, 0x23	; 35
     ab8:	88 e6       	ldi	r24, 0x68	; 104
     aba:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
     abe:	40 e0       	ldi	r20, 0x00	; 0
     ac0:	6b e6       	ldi	r22, 0x6B	; 107
     ac2:	88 e6       	ldi	r24, 0x68	; 104
     ac4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
     ac8:	40 e0       	ldi	r20, 0x00	; 0
     aca:	64 e2       	ldi	r22, 0x24	; 36
     acc:	88 e6       	ldi	r24, 0x68	; 104
     ace:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
     ad2:	40 e0       	ldi	r20, 0x00	; 0
     ad4:	6a e6       	ldi	r22, 0x6A	; 106
     ad6:	88 e6       	ldi	r24, 0x68	; 104
     ad8:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
     adc:	4c e0       	ldi	r20, 0x0C	; 12
     ade:	6a e6       	ldi	r22, 0x6A	; 106
     ae0:	88 e6       	ldi	r24, 0x68	; 104
     ae2:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
     ae6:	8f e5       	ldi	r24, 0x5F	; 95
     ae8:	9a ee       	ldi	r25, 0xEA	; 234
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	f1 f7       	brne	.-4      	; 0xaea <CalibrateMPU6050+0xbe>
     aee:	00 c0       	rjmp	.+0      	; 0xaf0 <CalibrateMPU6050+0xc4>
     af0:	00 00       	nop
	_delay_ms(15);

	// Configure MPU6050 gyro and accelerometer for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
     af2:	41 e0       	ldi	r20, 0x01	; 1
     af4:	6a e1       	ldi	r22, 0x1A	; 26
     af6:	88 e6       	ldi	r24, 0x68	; 104
     af8:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
     afc:	40 e0       	ldi	r20, 0x00	; 0
     afe:	69 e1       	ldi	r22, 0x19	; 25
     b00:	88 e6       	ldi	r24, 0x68	; 104
     b02:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	6b e1       	ldi	r22, 0x1B	; 27
     b0a:	88 e6       	ldi	r24, 0x68	; 104
     b0c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
     b10:	40 e0       	ldi	r20, 0x00	; 0
     b12:	6c e1       	ldi	r22, 0x1C	; 28
     b14:	88 e6       	ldi	r24, 0x68	; 104
     b16:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
     b1a:	40 e4       	ldi	r20, 0x40	; 64
     b1c:	6a e6       	ldi	r22, 0x6A	; 106
     b1e:	88 e6       	ldi	r24, 0x68	; 104
     b20:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 1024 bytes in MPU-6050)
     b24:	48 e7       	ldi	r20, 0x78	; 120
     b26:	63 e2       	ldi	r22, 0x23	; 35
     b28:	88 e6       	ldi	r24, 0x68	; 104
     b2a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
     b2e:	af e1       	ldi	r26, 0x1F	; 31
     b30:	be e4       	ldi	r27, 0x4E	; 78
     b32:	11 97       	sbiw	r26, 0x01	; 1
     b34:	f1 f7       	brne	.-4      	; 0xb32 <CalibrateMPU6050+0x106>
     b36:	00 c0       	rjmp	.+0      	; 0xb38 <CalibrateMPU6050+0x10c>
     b38:	00 00       	nop
     b3a:	bf ef       	ldi	r27, 0xFF	; 255
     b3c:	ef e8       	ldi	r30, 0x8F	; 143
     b3e:	f1 e0       	ldi	r31, 0x01	; 1
     b40:	b1 50       	subi	r27, 0x01	; 1
     b42:	e0 40       	sbci	r30, 0x00	; 0
     b44:	f0 40       	sbci	r31, 0x00	; 0
     b46:	e1 f7       	brne	.-8      	; 0xb40 <CalibrateMPU6050+0x114>
     b48:	00 c0       	rjmp	.+0      	; 0xb4a <CalibrateMPU6050+0x11e>
     b4a:	00 00       	nop

void CalibrateMPU6050(int16_t gyro_offset[], int16_t acc_offset[])
{
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, jj, packet_count, packet_total, fifo_count;
	int32_t gyro_bias[3] = {0, 0, 0};
     b4c:	19 8e       	std	Y+25, r1	; 0x19
     b4e:	1a 8e       	std	Y+26, r1	; 0x1a
     b50:	1b 8e       	std	Y+27, r1	; 0x1b
     b52:	1c 8e       	std	Y+28, r1	; 0x1c
     b54:	41 2c       	mov	r4, r1
     b56:	51 2c       	mov	r5, r1
     b58:	32 01       	movw	r6, r4
     b5a:	81 2c       	mov	r8, r1
     b5c:	91 2c       	mov	r9, r1
     b5e:	54 01       	movw	r10, r8
	int32_t accel_bias[3] = {0, 0, 0};
     b60:	1d 8a       	std	Y+21, r1	; 0x15
     b62:	1e 8a       	std	Y+22, r1	; 0x16
     b64:	1f 8a       	std	Y+23, r1	; 0x17
     b66:	18 8e       	std	Y+24, r1	; 0x18
     b68:	19 8a       	std	Y+17, r1	; 0x11
     b6a:	1a 8a       	std	Y+18, r1	; 0x12
     b6c:	1b 8a       	std	Y+19, r1	; 0x13
     b6e:	1c 8a       	std	Y+20, r1	; 0x14
     b70:	1d 86       	std	Y+13, r1	; 0x0d
     b72:	1e 86       	std	Y+14, r1	; 0x0e
     b74:	1f 86       	std	Y+15, r1	; 0x0f
     b76:	18 8a       	std	Y+16, r1	; 0x10
	packet_total = 0;
     b78:	c1 2c       	mov	r12, r1
     b7a:	d1 2c       	mov	r13, r1
	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 1024 bytes in MPU-6050)
	_delay_ms(5);

	for (jj = 0; jj < 20; jj++)	//read samples for 1 second
     b7c:	21 2c       	mov	r2, r1
     b7e:	31 2c       	mov	r3, r1
     b80:	12 c0       	rjmp	.+36     	; 0xba6 <CalibrateMPU6050+0x17a>
     b82:	2f ef       	ldi	r18, 0xFF	; 255
     b84:	3f e8       	ldi	r19, 0x8F	; 143
     b86:	41 e0       	ldi	r20, 0x01	; 1
     b88:	21 50       	subi	r18, 0x01	; 1
     b8a:	30 40       	sbci	r19, 0x00	; 0
     b8c:	40 40       	sbci	r20, 0x00	; 0
     b8e:	e1 f7       	brne	.-8      	; 0xb88 <CalibrateMPU6050+0x15c>
     b90:	00 c0       	rjmp	.+0      	; 0xb92 <CalibrateMPU6050+0x166>
     b92:	00 00       	nop
	{
		_delay_ms(32); // accumulate 50 samples in 50 milliseconds = 600 bytes
		// At end of sample accumulation, turn off FIFO sensor read
		if (jj == 19)	// Disable gyro and accelerometer sensors for FIFO
     b94:	53 e1       	ldi	r21, 0x13	; 19
     b96:	25 16       	cp	r2, r21
     b98:	31 04       	cpc	r3, r1
     b9a:	29 f4       	brne	.+10     	; 0xba6 <CalibrateMPU6050+0x17a>
			I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x00);
     b9c:	40 e0       	ldi	r20, 0x00	; 0
     b9e:	63 e2       	ldi	r22, 0x23	; 35
     ba0:	88 e6       	ldi	r24, 0x68	; 104
     ba2:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
		I2C_read_buf(MPU6050_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
     ba6:	9e 01       	movw	r18, r28
     ba8:	2f 5f       	subi	r18, 0xFF	; 255
     baa:	3f 4f       	sbci	r19, 0xFF	; 255
     bac:	42 e0       	ldi	r20, 0x02	; 2
     bae:	62 e7       	ldi	r22, 0x72	; 114
     bb0:	88 e6       	ldi	r24, 0x68	; 104
     bb2:	0e 94 96 04 	call	0x92c	; 0x92c <I2C_read_buf>
		fifo_count = ((uint16_t)data[0] << 8) | data[1];

		packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
     bb6:	29 81       	ldd	r18, Y+1	; 0x01
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	32 2f       	mov	r19, r18
     bbc:	22 27       	eor	r18, r18
     bbe:	8a 81       	ldd	r24, Y+2	; 0x02
     bc0:	28 2b       	or	r18, r24
     bc2:	ab ea       	ldi	r26, 0xAB	; 171
     bc4:	ba ea       	ldi	r27, 0xAA	; 170
     bc6:	0e 94 2a 11 	call	0x2254	; 0x2254 <__umulhisi3>
     bca:	7c 01       	movw	r14, r24
     bcc:	f6 94       	lsr	r15
     bce:	e7 94       	ror	r14
     bd0:	f6 94       	lsr	r15
     bd2:	e7 94       	ror	r14
     bd4:	f6 94       	lsr	r15
     bd6:	e7 94       	ror	r14

		for (ii = 0; ii < packet_count; ii++) 
     bd8:	e1 14       	cp	r14, r1
     bda:	f1 04       	cpc	r15, r1
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <CalibrateMPU6050+0x1b4>
     bde:	8c c0       	rjmp	.+280    	; 0xcf8 <CalibrateMPU6050+0x2cc>
     be0:	00 e0       	ldi	r16, 0x00	; 0
     be2:	10 e0       	ldi	r17, 0x00	; 0
		{
			int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
			I2C_read_buf(MPU6050_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
     be4:	9e 01       	movw	r18, r28
     be6:	2f 5f       	subi	r18, 0xFF	; 255
     be8:	3f 4f       	sbci	r19, 0xFF	; 255
     bea:	4c e0       	ldi	r20, 0x0C	; 12
     bec:	64 e7       	ldi	r22, 0x74	; 116
     bee:	88 e6       	ldi	r24, 0x68	; 104
     bf0:	0e 94 96 04 	call	0x92c	; 0x92c <I2C_read_buf>
			if (packet_total < 1024)
     bf4:	c1 14       	cp	r12, r1
     bf6:	64 e0       	ldi	r22, 0x04	; 4
     bf8:	d6 06       	cpc	r13, r22
     bfa:	08 f0       	brcs	.+2      	; 0xbfe <CalibrateMPU6050+0x1d2>
     bfc:	77 c0       	rjmp	.+238    	; 0xcec <CalibrateMPU6050+0x2c0>
			{
				packet_total++;
     bfe:	7f ef       	ldi	r23, 0xFF	; 255
     c00:	c7 1a       	sub	r12, r23
     c02:	d7 0a       	sbc	r13, r23
				accel_temp[2] = (int16_t) (((int16_t)data[4] << 8)  | data[5] ) ;
				gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8)  | data[7] ) ;
				gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8)  | data[9] ) ;
				gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
		
				accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	98 2f       	mov	r25, r24
     c0a:	88 27       	eor	r24, r24
     c0c:	2a 81       	ldd	r18, Y+2	; 0x02
     c0e:	82 2b       	or	r24, r18
     c10:	09 2e       	mov	r0, r25
     c12:	00 0c       	add	r0, r0
     c14:	aa 0b       	sbc	r26, r26
     c16:	bb 0b       	sbc	r27, r27
     c18:	2d 89       	ldd	r18, Y+21	; 0x15
     c1a:	3e 89       	ldd	r19, Y+22	; 0x16
     c1c:	4f 89       	ldd	r20, Y+23	; 0x17
     c1e:	58 8d       	ldd	r21, Y+24	; 0x18
     c20:	28 0f       	add	r18, r24
     c22:	39 1f       	adc	r19, r25
     c24:	4a 1f       	adc	r20, r26
     c26:	5b 1f       	adc	r21, r27
     c28:	2d 8b       	std	Y+21, r18	; 0x15
     c2a:	3e 8b       	std	Y+22, r19	; 0x16
     c2c:	4f 8b       	std	Y+23, r20	; 0x17
     c2e:	58 8f       	std	Y+24, r21	; 0x18
				accel_bias[1] += (int32_t) accel_temp[1];
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	98 2f       	mov	r25, r24
     c36:	88 27       	eor	r24, r24
     c38:	2c 81       	ldd	r18, Y+4	; 0x04
     c3a:	82 2b       	or	r24, r18
     c3c:	09 2e       	mov	r0, r25
     c3e:	00 0c       	add	r0, r0
     c40:	aa 0b       	sbc	r26, r26
     c42:	bb 0b       	sbc	r27, r27
     c44:	49 89       	ldd	r20, Y+17	; 0x11
     c46:	5a 89       	ldd	r21, Y+18	; 0x12
     c48:	6b 89       	ldd	r22, Y+19	; 0x13
     c4a:	7c 89       	ldd	r23, Y+20	; 0x14
     c4c:	48 0f       	add	r20, r24
     c4e:	59 1f       	adc	r21, r25
     c50:	6a 1f       	adc	r22, r26
     c52:	7b 1f       	adc	r23, r27
     c54:	49 8b       	std	Y+17, r20	; 0x11
     c56:	5a 8b       	std	Y+18, r21	; 0x12
     c58:	6b 8b       	std	Y+19, r22	; 0x13
     c5a:	7c 8b       	std	Y+20, r23	; 0x14
				accel_bias[2] += (int32_t) accel_temp[2];
     c5c:	8d 81       	ldd	r24, Y+5	; 0x05
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	98 2f       	mov	r25, r24
     c62:	88 27       	eor	r24, r24
     c64:	2e 81       	ldd	r18, Y+6	; 0x06
     c66:	82 2b       	or	r24, r18
     c68:	09 2e       	mov	r0, r25
     c6a:	00 0c       	add	r0, r0
     c6c:	aa 0b       	sbc	r26, r26
     c6e:	bb 0b       	sbc	r27, r27
     c70:	2d 85       	ldd	r18, Y+13	; 0x0d
     c72:	3e 85       	ldd	r19, Y+14	; 0x0e
     c74:	4f 85       	ldd	r20, Y+15	; 0x0f
     c76:	58 89       	ldd	r21, Y+16	; 0x10
     c78:	28 0f       	add	r18, r24
     c7a:	39 1f       	adc	r19, r25
     c7c:	4a 1f       	adc	r20, r26
     c7e:	5b 1f       	adc	r21, r27
     c80:	2d 87       	std	Y+13, r18	; 0x0d
     c82:	3e 87       	std	Y+14, r19	; 0x0e
     c84:	4f 87       	std	Y+15, r20	; 0x0f
     c86:	58 8b       	std	Y+16, r21	; 0x10
				gyro_bias[0]  += (int32_t) gyro_temp[0];
     c88:	8f 81       	ldd	r24, Y+7	; 0x07
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	98 2f       	mov	r25, r24
     c8e:	88 27       	eor	r24, r24
     c90:	28 85       	ldd	r18, Y+8	; 0x08
     c92:	82 2b       	or	r24, r18
     c94:	09 2e       	mov	r0, r25
     c96:	00 0c       	add	r0, r0
     c98:	aa 0b       	sbc	r26, r26
     c9a:	bb 0b       	sbc	r27, r27
     c9c:	49 8d       	ldd	r20, Y+25	; 0x19
     c9e:	5a 8d       	ldd	r21, Y+26	; 0x1a
     ca0:	6b 8d       	ldd	r22, Y+27	; 0x1b
     ca2:	7c 8d       	ldd	r23, Y+28	; 0x1c
     ca4:	48 0f       	add	r20, r24
     ca6:	59 1f       	adc	r21, r25
     ca8:	6a 1f       	adc	r22, r26
     caa:	7b 1f       	adc	r23, r27
     cac:	49 8f       	std	Y+25, r20	; 0x19
     cae:	5a 8f       	std	Y+26, r21	; 0x1a
     cb0:	6b 8f       	std	Y+27, r22	; 0x1b
     cb2:	7c 8f       	std	Y+28, r23	; 0x1c
				gyro_bias[1]  += (int32_t) gyro_temp[1];
     cb4:	89 85       	ldd	r24, Y+9	; 0x09
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	98 2f       	mov	r25, r24
     cba:	88 27       	eor	r24, r24
     cbc:	2a 85       	ldd	r18, Y+10	; 0x0a
     cbe:	82 2b       	or	r24, r18
     cc0:	09 2e       	mov	r0, r25
     cc2:	00 0c       	add	r0, r0
     cc4:	aa 0b       	sbc	r26, r26
     cc6:	bb 0b       	sbc	r27, r27
     cc8:	48 0e       	add	r4, r24
     cca:	59 1e       	adc	r5, r25
     ccc:	6a 1e       	adc	r6, r26
     cce:	7b 1e       	adc	r7, r27
				gyro_bias[2]  += (int32_t) gyro_temp[2];
     cd0:	8b 85       	ldd	r24, Y+11	; 0x0b
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	98 2f       	mov	r25, r24
     cd6:	88 27       	eor	r24, r24
     cd8:	2c 85       	ldd	r18, Y+12	; 0x0c
     cda:	82 2b       	or	r24, r18
     cdc:	09 2e       	mov	r0, r25
     cde:	00 0c       	add	r0, r0
     ce0:	aa 0b       	sbc	r26, r26
     ce2:	bb 0b       	sbc	r27, r27
     ce4:	88 0e       	add	r8, r24
     ce6:	99 1e       	adc	r9, r25
     ce8:	aa 1e       	adc	r10, r26
     cea:	bb 1e       	adc	r11, r27
		I2C_read_buf(MPU6050_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
		fifo_count = ((uint16_t)data[0] << 8) | data[1];

		packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging

		for (ii = 0; ii < packet_count; ii++) 
     cec:	0f 5f       	subi	r16, 0xFF	; 255
     cee:	1f 4f       	sbci	r17, 0xFF	; 255
     cf0:	e0 16       	cp	r14, r16
     cf2:	f1 06       	cpc	r15, r17
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <CalibrateMPU6050+0x2cc>
     cf6:	76 cf       	rjmp	.-276    	; 0xbe4 <CalibrateMPU6050+0x1b8>
	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 1024 bytes in MPU-6050)
	_delay_ms(5);

	for (jj = 0; jj < 20; jj++)	//read samples for 1 second
     cf8:	5f ef       	ldi	r21, 0xFF	; 255
     cfa:	25 1a       	sub	r2, r21
     cfc:	35 0a       	sbc	r3, r21
     cfe:	64 e1       	ldi	r22, 0x14	; 20
     d00:	26 16       	cp	r2, r22
     d02:	31 04       	cpc	r3, r1
     d04:	09 f0       	breq	.+2      	; 0xd08 <CalibrateMPU6050+0x2dc>
     d06:	3d cf       	rjmp	.-390    	; 0xb82 <CalibrateMPU6050+0x156>
				gyro_bias[2]  += (int32_t) gyro_temp[2];
			}
		}
	}

	accel_bias[0] /= (int32_t) packet_total; // Normalize sums to get average count biases
     d08:	c6 01       	movw	r24, r12
     d0a:	a0 e0       	ldi	r26, 0x00	; 0
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	8d 8f       	std	Y+29, r24	; 0x1d
     d10:	9e 8f       	std	Y+30, r25	; 0x1e
     d12:	af 8f       	std	Y+31, r26	; 0x1f
     d14:	b8 a3       	std	Y+32, r27	; 0x20
     d16:	6d 89       	ldd	r22, Y+21	; 0x15
     d18:	7e 89       	ldd	r23, Y+22	; 0x16
     d1a:	8f 89       	ldd	r24, Y+23	; 0x17
     d1c:	98 8d       	ldd	r25, Y+24	; 0x18
     d1e:	2d 8d       	ldd	r18, Y+29	; 0x1d
     d20:	3e 8d       	ldd	r19, Y+30	; 0x1e
     d22:	4f 8d       	ldd	r20, Y+31	; 0x1f
     d24:	58 a1       	ldd	r21, Y+32	; 0x20
     d26:	0e 94 05 11 	call	0x220a	; 0x220a <__divmodsi4>
     d2a:	2d 8b       	std	Y+21, r18	; 0x15
     d2c:	3e 8b       	std	Y+22, r19	; 0x16
     d2e:	4f 8b       	std	Y+23, r20	; 0x17
     d30:	58 8f       	std	Y+24, r21	; 0x18
	accel_bias[1] /= (int32_t) packet_total;
     d32:	69 89       	ldd	r22, Y+17	; 0x11
     d34:	7a 89       	ldd	r23, Y+18	; 0x12
     d36:	8b 89       	ldd	r24, Y+19	; 0x13
     d38:	9c 89       	ldd	r25, Y+20	; 0x14
     d3a:	2d 8d       	ldd	r18, Y+29	; 0x1d
     d3c:	3e 8d       	ldd	r19, Y+30	; 0x1e
     d3e:	4f 8d       	ldd	r20, Y+31	; 0x1f
     d40:	58 a1       	ldd	r21, Y+32	; 0x20
     d42:	0e 94 05 11 	call	0x220a	; 0x220a <__divmodsi4>
     d46:	29 8b       	std	Y+17, r18	; 0x11
     d48:	3a 8b       	std	Y+18, r19	; 0x12
     d4a:	4b 8b       	std	Y+19, r20	; 0x13
     d4c:	5c 8b       	std	Y+20, r21	; 0x14
	accel_bias[2] /= (int32_t) packet_total;
     d4e:	6d 85       	ldd	r22, Y+13	; 0x0d
     d50:	7e 85       	ldd	r23, Y+14	; 0x0e
     d52:	8f 85       	ldd	r24, Y+15	; 0x0f
     d54:	98 89       	ldd	r25, Y+16	; 0x10
     d56:	2d 8d       	ldd	r18, Y+29	; 0x1d
     d58:	3e 8d       	ldd	r19, Y+30	; 0x1e
     d5a:	4f 8d       	ldd	r20, Y+31	; 0x1f
     d5c:	58 a1       	ldd	r21, Y+32	; 0x20
     d5e:	0e 94 05 11 	call	0x220a	; 0x220a <__divmodsi4>
     d62:	69 01       	movw	r12, r18
     d64:	7a 01       	movw	r14, r20
	gyro_bias[0]  /= (int32_t) packet_total;
     d66:	69 8d       	ldd	r22, Y+25	; 0x19
     d68:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d6e:	2d 8d       	ldd	r18, Y+29	; 0x1d
     d70:	3e 8d       	ldd	r19, Y+30	; 0x1e
     d72:	4f 8d       	ldd	r20, Y+31	; 0x1f
     d74:	58 a1       	ldd	r21, Y+32	; 0x20
     d76:	0e 94 05 11 	call	0x220a	; 0x220a <__divmodsi4>
     d7a:	2d 87       	std	Y+13, r18	; 0x0d
     d7c:	3e 87       	std	Y+14, r19	; 0x0e
     d7e:	4f 87       	std	Y+15, r20	; 0x0f
     d80:	58 8b       	std	Y+16, r21	; 0x10
	gyro_bias[1]  /= (int32_t) packet_total;
     d82:	c3 01       	movw	r24, r6
     d84:	b2 01       	movw	r22, r4
     d86:	2d 8d       	ldd	r18, Y+29	; 0x1d
     d88:	3e 8d       	ldd	r19, Y+30	; 0x1e
     d8a:	4f 8d       	ldd	r20, Y+31	; 0x1f
     d8c:	58 a1       	ldd	r21, Y+32	; 0x20
     d8e:	0e 94 05 11 	call	0x220a	; 0x220a <__divmodsi4>
     d92:	29 01       	movw	r4, r18
     d94:	3a 01       	movw	r6, r20
	gyro_bias[2]  /= (int32_t) packet_total;
     d96:	c5 01       	movw	r24, r10
     d98:	b4 01       	movw	r22, r8
     d9a:	2d 8d       	ldd	r18, Y+29	; 0x1d
     d9c:	3e 8d       	ldd	r19, Y+30	; 0x1e
     d9e:	4f 8d       	ldd	r20, Y+31	; 0x1f
     da0:	58 a1       	ldd	r21, Y+32	; 0x20
     da2:	0e 94 05 11 	call	0x220a	; 0x220a <__divmodsi4>

	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
     da6:	1c 14       	cp	r1, r12
     da8:	1d 04       	cpc	r1, r13
     daa:	1e 04       	cpc	r1, r14
     dac:	1f 04       	cpc	r1, r15
     dae:	34 f4       	brge	.+12     	; 0xdbc <CalibrateMPU6050+0x390>
     db0:	d7 01       	movw	r26, r14
     db2:	c6 01       	movw	r24, r12
     db4:	90 54       	subi	r25, 0x40	; 64
     db6:	a1 09       	sbc	r26, r1
     db8:	b1 09       	sbc	r27, r1
     dba:	05 c0       	rjmp	.+10     	; 0xdc6 <CalibrateMPU6050+0x39a>
	else {accel_bias[2] += (int32_t) accelsensitivity;}
     dbc:	d7 01       	movw	r26, r14
     dbe:	c6 01       	movw	r24, r12
     dc0:	90 5c       	subi	r25, 0xC0	; 192
     dc2:	af 4f       	sbci	r26, 0xFF	; 255
     dc4:	bf 4f       	sbci	r27, 0xFF	; 255
	
	gyro_offset[0] = (int16_t) gyro_bias[0];
     dc6:	6d 85       	ldd	r22, Y+13	; 0x0d
     dc8:	7e 85       	ldd	r23, Y+14	; 0x0e
     dca:	e9 a1       	ldd	r30, Y+33	; 0x21
     dcc:	fa a1       	ldd	r31, Y+34	; 0x22
     dce:	71 83       	std	Z+1, r23	; 0x01
     dd0:	60 83       	st	Z, r22
	gyro_offset[1] = (int16_t) gyro_bias[1];
     dd2:	53 82       	std	Z+3, r5	; 0x03
     dd4:	42 82       	std	Z+2, r4	; 0x02
	gyro_offset[2] = (int16_t) gyro_bias[2];
     dd6:	35 83       	std	Z+5, r19	; 0x05
     dd8:	24 83       	std	Z+4, r18	; 0x04

	acc_offset[0]  = (int16_t) accel_bias[0];
     dda:	2d 89       	ldd	r18, Y+21	; 0x15
     ddc:	3e 89       	ldd	r19, Y+22	; 0x16
     dde:	eb a1       	ldd	r30, Y+35	; 0x23
     de0:	fc a1       	ldd	r31, Y+36	; 0x24
     de2:	31 83       	std	Z+1, r19	; 0x01
     de4:	20 83       	st	Z, r18
	acc_offset[1]  = (int16_t) accel_bias[1];
     de6:	49 89       	ldd	r20, Y+17	; 0x11
     de8:	5a 89       	ldd	r21, Y+18	; 0x12
     dea:	53 83       	std	Z+3, r21	; 0x03
     dec:	42 83       	std	Z+2, r20	; 0x02
	acc_offset[2]  = (int16_t) accel_bias[2];
     dee:	95 83       	std	Z+5, r25	; 0x05
     df0:	84 83       	std	Z+4, r24	; 0x04
}
     df2:	a4 96       	adiw	r28, 0x24	; 36
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	cd bf       	out	0x3d, r28	; 61
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	1f 91       	pop	r17
     e04:	0f 91       	pop	r16
     e06:	ff 90       	pop	r15
     e08:	ef 90       	pop	r14
     e0a:	df 90       	pop	r13
     e0c:	cf 90       	pop	r12
     e0e:	bf 90       	pop	r11
     e10:	af 90       	pop	r10
     e12:	9f 90       	pop	r9
     e14:	8f 90       	pop	r8
     e16:	7f 90       	pop	r7
     e18:	6f 90       	pop	r6
     e1a:	5f 90       	pop	r5
     e1c:	4f 90       	pop	r4
     e1e:	3f 90       	pop	r3
     e20:	2f 90       	pop	r2
     e22:	08 95       	ret

00000e24 <InitMPU6050>:


void InitMPU6050(void)
{
	// reset device, reset all registers, clear gyro and accelerometer bias registers
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
     e24:	40 e8       	ldi	r20, 0x80	; 128
     e26:	6b e6       	ldi	r22, 0x6B	; 107
     e28:	88 e6       	ldi	r24, 0x68	; 104
     e2a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
     e2e:	2f ef       	ldi	r18, 0xFF	; 255
     e30:	81 ee       	ldi	r24, 0xE1	; 225
     e32:	94 e0       	ldi	r25, 0x04	; 4
     e34:	21 50       	subi	r18, 0x01	; 1
     e36:	80 40       	sbci	r24, 0x00	; 0
     e38:	90 40       	sbci	r25, 0x00	; 0
     e3a:	e1 f7       	brne	.-8      	; 0xe34 <InitMPU6050+0x10>
     e3c:	00 c0       	rjmp	.+0      	; 0xe3e <InitMPU6050+0x1a>
     e3e:	00 00       	nop
	_delay_ms(100);

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x01);
     e40:	41 e0       	ldi	r20, 0x01	; 1
     e42:	6b e6       	ldi	r22, 0x6B	; 107
     e44:	88 e6       	ldi	r24, 0x68	; 104
     e46:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_2, 0x00);
     e4a:	40 e0       	ldi	r20, 0x00	; 0
     e4c:	6c e6       	ldi	r22, 0x6C	; 108
     e4e:	88 e6       	ldi	r24, 0x68	; 104
     e50:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
     e54:	2f ef       	ldi	r18, 0xFF	; 255
     e56:	83 ec       	ldi	r24, 0xC3	; 195
     e58:	99 e0       	ldi	r25, 0x09	; 9
     e5a:	21 50       	subi	r18, 0x01	; 1
     e5c:	80 40       	sbci	r24, 0x00	; 0
     e5e:	90 40       	sbci	r25, 0x00	; 0
     e60:	e1 f7       	brne	.-8      	; 0xe5a <InitMPU6050+0x36>
     e62:	00 c0       	rjmp	.+0      	; 0xe64 <InitMPU6050+0x40>
     e64:	00 00       	nop
	_delay_ms(200);

	// Configure device for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
     e66:	40 e0       	ldi	r20, 0x00	; 0
     e68:	68 e3       	ldi	r22, 0x38	; 56
     e6a:	88 e6       	ldi	r24, 0x68	; 104
     e6c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
     e70:	40 e0       	ldi	r20, 0x00	; 0
     e72:	63 e2       	ldi	r22, 0x23	; 35
     e74:	88 e6       	ldi	r24, 0x68	; 104
     e76:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
     e7a:	40 e0       	ldi	r20, 0x00	; 0
     e7c:	6b e6       	ldi	r22, 0x6B	; 107
     e7e:	88 e6       	ldi	r24, 0x68	; 104
     e80:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
     e84:	40 e0       	ldi	r20, 0x00	; 0
     e86:	64 e2       	ldi	r22, 0x24	; 36
     e88:	88 e6       	ldi	r24, 0x68	; 104
     e8a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
     e8e:	40 e0       	ldi	r20, 0x00	; 0
     e90:	6a e6       	ldi	r22, 0x6A	; 106
     e92:	88 e6       	ldi	r24, 0x68	; 104
     e94:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
     e98:	4c e0       	ldi	r20, 0x0C	; 12
     e9a:	6a e6       	ldi	r22, 0x6A	; 106
     e9c:	88 e6       	ldi	r24, 0x68	; 104
     e9e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
     ea2:	8f e5       	ldi	r24, 0x5F	; 95
     ea4:	9a ee       	ldi	r25, 0xEA	; 234
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	f1 f7       	brne	.-4      	; 0xea6 <InitMPU6050+0x82>
     eaa:	00 c0       	rjmp	.+0      	; 0xeac <InitMPU6050+0x88>
     eac:	00 00       	nop
	_delay_ms(15);

	// Configure MPU6050 gyro and accelerometer for bias calculation
	I2C_write_byte(MPU6050_ADDRESS, CONFIG, 0x03);      // Set low-pass filter to 44 Hz
     eae:	43 e0       	ldi	r20, 0x03	; 3
     eb0:	6a e1       	ldi	r22, 0x1A	; 26
     eb2:	88 e6       	ldi	r24, 0x68	; 104
     eb4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, SMPLRT_DIV, 4);  // Set sample rate to 250 Hz
     eb8:	44 e0       	ldi	r20, 0x04	; 4
     eba:	69 e1       	ldi	r22, 0x19	; 25
     ebc:	88 e6       	ldi	r24, 0x68	; 104
     ebe:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, GYRO_CONFIG, 0x08);  // Set gyro full-scale to 500 degrees per second
     ec2:	48 e0       	ldi	r20, 0x08	; 8
     ec4:	6b e1       	ldi	r22, 0x1B	; 27
     ec6:	88 e6       	ldi	r24, 0x68	; 104
     ec8:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
     ecc:	40 e0       	ldi	r20, 0x00	; 0
     ece:	6c e1       	ldi	r22, 0x1C	; 28
     ed0:	88 e6       	ldi	r24, 0x68	; 104
     ed2:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>

	I2C_write_byte(MPU6050_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
     ed6:	40 e4       	ldi	r20, 0x40	; 64
     ed8:	6a e6       	ldi	r22, 0x6A	; 106
     eda:	88 e6       	ldi	r24, 0x68	; 104
     edc:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
	I2C_write_byte(MPU6050_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 1024 bytes in MPU-6050)
     ee0:	48 e7       	ldi	r20, 0x78	; 120
     ee2:	63 e2       	ldi	r22, 0x23	; 35
     ee4:	88 e6       	ldi	r24, 0x68	; 104
     ee6:	0e 94 7e 04 	call	0x8fc	; 0x8fc <I2C_write_byte>
     eea:	08 95       	ret

00000eec <ReadMPU6050>:
}

void ReadMPU6050(void)
{
     eec:	8f 92       	push	r8
     eee:	9f 92       	push	r9
     ef0:	af 92       	push	r10
     ef2:	bf 92       	push	r11
     ef4:	cf 92       	push	r12
     ef6:	df 92       	push	r13
     ef8:	ef 92       	push	r14
     efa:	ff 92       	push	r15
     efc:	0f 93       	push	r16
     efe:	1f 93       	push	r17
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	68 97       	sbiw	r28, 0x18	; 24
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, fifo_count, packet_count;
	uint8_t data[12];
	int16_t gyro[3];
	int16_t acc[3];

	I2C_read_buf(MPU6050_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
     f14:	9e 01       	movw	r18, r28
     f16:	2f 5f       	subi	r18, 0xFF	; 255
     f18:	3f 4f       	sbci	r19, 0xFF	; 255
     f1a:	42 e0       	ldi	r20, 0x02	; 2
     f1c:	62 e7       	ldi	r22, 0x72	; 114
     f1e:	88 e6       	ldi	r24, 0x68	; 104
     f20:	0e 94 96 04 	call	0x92c	; 0x92c <I2C_read_buf>
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	9b ea       	ldi	r25, 0xAB	; 171
     f28:	89 9f       	mul	r24, r25
     f2a:	c1 2c       	mov	r12, r1
     f2c:	11 24       	eor	r1, r1
     f2e:	c6 94       	lsr	r12
     f30:	c6 94       	lsr	r12
     f32:	c6 94       	lsr	r12

	for (i = 0; i < packet_count; i++)
     f34:	09 f4       	brne	.+2      	; 0xf38 <ReadMPU6050+0x4c>
     f36:	6b c0       	rjmp	.+214    	; 0x100e <ReadMPU6050+0x122>
     f38:	d1 2c       	mov	r13, r1
		acc[2] = (int16_t) (((int16_t)data[4] << 8)  | data[5] ) ;
		gyro[0]  = (int16_t) (((int16_t)data[6] << 8)  | data[7] ) ;
		gyro[1]  = (int16_t) (((int16_t)data[8] << 8)  | data[9] ) ;
		gyro[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
			
		acc[0] -= acc_offset[0];
     f3a:	0f 2e       	mov	r0, r31
     f3c:	fc e0       	ldi	r31, 0x0C	; 12
     f3e:	ef 2e       	mov	r14, r31
     f40:	f2 e0       	ldi	r31, 0x02	; 2
     f42:	ff 2e       	mov	r15, r31
     f44:	f0 2d       	mov	r31, r0
		acc[1] -= acc_offset[1];
		acc[2] -= acc_offset[2];
		gyro[0] -= gyro_offset[0];
     f46:	06 e1       	ldi	r16, 0x16	; 22
     f48:	12 e0       	ldi	r17, 0x02	; 2
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging

	for (i = 0; i < packet_count; i++)
	{
		I2C_read_buf(MPU6050_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
     f4a:	9e 01       	movw	r18, r28
     f4c:	2f 5f       	subi	r18, 0xFF	; 255
     f4e:	3f 4f       	sbci	r19, 0xFF	; 255
     f50:	4c e0       	ldi	r20, 0x0C	; 12
     f52:	64 e7       	ldi	r22, 0x74	; 116
     f54:	88 e6       	ldi	r24, 0x68	; 104
     f56:	0e 94 96 04 	call	0x92c	; 0x92c <I2C_read_buf>
		acc[0] = (int16_t) (((int16_t)data[0] << 8)  | data[1] ) ;  // Form signed 16-bit integer for each sample in FIFO
		acc[1] = (int16_t) (((int16_t)data[2] << 8)  | data[3] ) ;
     f5a:	eb 81       	ldd	r30, Y+3	; 0x03
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	fe 2f       	mov	r31, r30
     f60:	ee 27       	eor	r30, r30
     f62:	8c 81       	ldd	r24, Y+4	; 0x04
     f64:	4f 01       	movw	r8, r30
     f66:	88 2a       	or	r8, r24
		acc[2] = (int16_t) (((int16_t)data[4] << 8)  | data[5] ) ;
     f68:	6d 81       	ldd	r22, Y+5	; 0x05
     f6a:	70 e0       	ldi	r23, 0x00	; 0
     f6c:	76 2f       	mov	r23, r22
     f6e:	66 27       	eor	r22, r22
     f70:	8e 81       	ldd	r24, Y+6	; 0x06
     f72:	68 2b       	or	r22, r24
		gyro[0]  = (int16_t) (((int16_t)data[6] << 8)  | data[7] ) ;
     f74:	4f 81       	ldd	r20, Y+7	; 0x07
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	54 2f       	mov	r21, r20
     f7a:	44 27       	eor	r20, r20
     f7c:	88 85       	ldd	r24, Y+8	; 0x08
     f7e:	48 2b       	or	r20, r24
		gyro[1]  = (int16_t) (((int16_t)data[8] << 8)  | data[9] ) ;
     f80:	29 85       	ldd	r18, Y+9	; 0x09
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	32 2f       	mov	r19, r18
     f86:	22 27       	eor	r18, r18
     f88:	8a 85       	ldd	r24, Y+10	; 0x0a
     f8a:	28 2b       	or	r18, r24
		gyro[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
     f8c:	8b 85       	ldd	r24, Y+11	; 0x0b
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	98 2f       	mov	r25, r24
     f92:	88 27       	eor	r24, r24
     f94:	ac 85       	ldd	r26, Y+12	; 0x0c
     f96:	8a 2b       	or	r24, r26
			
		acc[0] -= acc_offset[0];
     f98:	a9 81       	ldd	r26, Y+1	; 0x01
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	ba 2f       	mov	r27, r26
     f9e:	aa 27       	eor	r26, r26
     fa0:	ba 80       	ldd	r11, Y+2	; 0x02
     fa2:	ab 29       	or	r26, r11
     fa4:	f7 01       	movw	r30, r14
     fa6:	a0 80       	ld	r10, Z
     fa8:	b1 80       	ldd	r11, Z+1	; 0x01
     faa:	aa 19       	sub	r26, r10
     fac:	bb 09       	sbc	r27, r11
     fae:	bc 8b       	std	Y+20, r27	; 0x14
     fb0:	ab 8b       	std	Y+19, r26	; 0x13
		acc[1] -= acc_offset[1];
     fb2:	a2 81       	ldd	r26, Z+2	; 0x02
     fb4:	b3 81       	ldd	r27, Z+3	; 0x03
     fb6:	f4 01       	movw	r30, r8
     fb8:	ea 1b       	sub	r30, r26
     fba:	fb 0b       	sbc	r31, r27
     fbc:	fe 8b       	std	Y+22, r31	; 0x16
     fbe:	ed 8b       	std	Y+21, r30	; 0x15
		acc[2] -= acc_offset[2];
     fc0:	d7 01       	movw	r26, r14
     fc2:	14 96       	adiw	r26, 0x04	; 4
     fc4:	ed 91       	ld	r30, X+
     fc6:	fc 91       	ld	r31, X
     fc8:	15 97       	sbiw	r26, 0x05	; 5
     fca:	6e 1b       	sub	r22, r30
     fcc:	7f 0b       	sbc	r23, r31
     fce:	78 8f       	std	Y+24, r23	; 0x18
     fd0:	6f 8b       	std	Y+23, r22	; 0x17
		gyro[0] -= gyro_offset[0];
     fd2:	f8 01       	movw	r30, r16
     fd4:	60 81       	ld	r22, Z
     fd6:	71 81       	ldd	r23, Z+1	; 0x01
     fd8:	46 1b       	sub	r20, r22
     fda:	57 0b       	sbc	r21, r23
     fdc:	5e 87       	std	Y+14, r21	; 0x0e
     fde:	4d 87       	std	Y+13, r20	; 0x0d
		gyro[1] -= gyro_offset[1];
     fe0:	42 81       	ldd	r20, Z+2	; 0x02
     fe2:	53 81       	ldd	r21, Z+3	; 0x03
     fe4:	24 1b       	sub	r18, r20
     fe6:	35 0b       	sbc	r19, r21
     fe8:	38 8b       	std	Y+16, r19	; 0x10
     fea:	2f 87       	std	Y+15, r18	; 0x0f
		gyro[2] -= gyro_offset[2];
     fec:	24 81       	ldd	r18, Z+4	; 0x04
     fee:	35 81       	ldd	r19, Z+5	; 0x05
     ff0:	82 1b       	sub	r24, r18
     ff2:	93 0b       	sbc	r25, r19
     ff4:	9a 8b       	std	Y+18, r25	; 0x12
     ff6:	89 8b       	std	Y+17, r24	; 0x11

		PlaceInGyroBuffor(gyro);
     ff8:	ce 01       	movw	r24, r28
     ffa:	0d 96       	adiw	r24, 0x0d	; 13
     ffc:	0e 94 ba 00 	call	0x174	; 0x174 <PlaceInGyroBuffor>
		PlaceInAccBuffor(acc);
    1000:	ce 01       	movw	r24, r28
    1002:	43 96       	adiw	r24, 0x13	; 19
    1004:	0e 94 ee 00 	call	0x1dc	; 0x1dc <PlaceInAccBuffor>

	I2C_read_buf(MPU6050_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging

	for (i = 0; i < packet_count; i++)
    1008:	d3 94       	inc	r13
    100a:	cd 10       	cpse	r12, r13
    100c:	9e cf       	rjmp	.-196    	; 0xf4a <ReadMPU6050+0x5e>
		gyro[2] -= gyro_offset[2];

		PlaceInGyroBuffor(gyro);
		PlaceInAccBuffor(acc);
	}
    100e:	68 96       	adiw	r28, 0x18	; 24
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	de bf       	out	0x3e, r29	; 62
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	ff 90       	pop	r15
    1024:	ef 90       	pop	r14
    1026:	df 90       	pop	r13
    1028:	cf 90       	pop	r12
    102a:	bf 90       	pop	r11
    102c:	af 90       	pop	r10
    102e:	9f 90       	pop	r9
    1030:	8f 90       	pop	r8
    1032:	08 95       	ret

00001034 <er_service>:
		
}

int8_t er_service(char * params)
{
	SendLine("Uart is working");
    1034:	80 e1       	ldi	r24, 0x10	; 16
    1036:	91 e0       	ldi	r25, 0x01	; 1
    1038:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <SendLine>
	return 0;
}
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	08 95       	ret

00001040 <er_read>:

int8_t er_read(char * params)
{
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	2c 97       	sbiw	r28, 0x0c	; 12
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	de bf       	out	0x3e, r29	; 62
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	cd bf       	out	0x3d, r28	; 61
	int16_t gyro[3];
	int16_t acc[3];
	
	ReadGyroSample_ViewOnly(gyro);
    1054:	ce 01       	movw	r24, r28
    1056:	01 96       	adiw	r24, 0x01	; 1
    1058:	0e 94 7e 01 	call	0x2fc	; 0x2fc <ReadGyroSample_ViewOnly>
	ReadAccSample_ViewOnly(acc);
    105c:	ce 01       	movw	r24, r28
    105e:	07 96       	adiw	r24, 0x07	; 7
    1060:	0e 94 a5 01 	call	0x34a	; 0x34a <ReadAccSample_ViewOnly>

	SendStringInt("G X ", gyro[0]);
    1064:	49 81       	ldd	r20, Y+1	; 0x01
    1066:	5a 81       	ldd	r21, Y+2	; 0x02
    1068:	05 2e       	mov	r0, r21
    106a:	00 0c       	add	r0, r0
    106c:	66 0b       	sbc	r22, r22
    106e:	77 0b       	sbc	r23, r23
    1070:	80 e2       	ldi	r24, 0x20	; 32
    1072:	91 e0       	ldi	r25, 0x01	; 1
    1074:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <SendStringInt>
	SendStringInt("G Y ", gyro[1]);
    1078:	4b 81       	ldd	r20, Y+3	; 0x03
    107a:	5c 81       	ldd	r21, Y+4	; 0x04
    107c:	05 2e       	mov	r0, r21
    107e:	00 0c       	add	r0, r0
    1080:	66 0b       	sbc	r22, r22
    1082:	77 0b       	sbc	r23, r23
    1084:	85 e2       	ldi	r24, 0x25	; 37
    1086:	91 e0       	ldi	r25, 0x01	; 1
    1088:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <SendStringInt>
	SendStringInt("G Z ", gyro[2]);
    108c:	4d 81       	ldd	r20, Y+5	; 0x05
    108e:	5e 81       	ldd	r21, Y+6	; 0x06
    1090:	05 2e       	mov	r0, r21
    1092:	00 0c       	add	r0, r0
    1094:	66 0b       	sbc	r22, r22
    1096:	77 0b       	sbc	r23, r23
    1098:	8a e2       	ldi	r24, 0x2A	; 42
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <SendStringInt>
	SendStringInt("A X ", acc[0]);
    10a0:	4f 81       	ldd	r20, Y+7	; 0x07
    10a2:	58 85       	ldd	r21, Y+8	; 0x08
    10a4:	05 2e       	mov	r0, r21
    10a6:	00 0c       	add	r0, r0
    10a8:	66 0b       	sbc	r22, r22
    10aa:	77 0b       	sbc	r23, r23
    10ac:	8f e2       	ldi	r24, 0x2F	; 47
    10ae:	91 e0       	ldi	r25, 0x01	; 1
    10b0:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <SendStringInt>
	SendStringInt("A Y ", acc[1]);
    10b4:	49 85       	ldd	r20, Y+9	; 0x09
    10b6:	5a 85       	ldd	r21, Y+10	; 0x0a
    10b8:	05 2e       	mov	r0, r21
    10ba:	00 0c       	add	r0, r0
    10bc:	66 0b       	sbc	r22, r22
    10be:	77 0b       	sbc	r23, r23
    10c0:	84 e3       	ldi	r24, 0x34	; 52
    10c2:	91 e0       	ldi	r25, 0x01	; 1
    10c4:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <SendStringInt>
	SendStringInt("A Z ", acc[2]);
    10c8:	4b 85       	ldd	r20, Y+11	; 0x0b
    10ca:	5c 85       	ldd	r21, Y+12	; 0x0c
    10cc:	05 2e       	mov	r0, r21
    10ce:	00 0c       	add	r0, r0
    10d0:	66 0b       	sbc	r22, r22
    10d2:	77 0b       	sbc	r23, r23
    10d4:	89 e3       	ldi	r24, 0x39	; 57
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <SendStringInt>

	return 0;
}
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	2c 96       	adiw	r28, 0x0c	; 12
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	08 95       	ret

000010f0 <er_buf>:

int8_t er_buf(char * params)
{
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	00 d0       	rcall	.+0      	; 0x10f6 <er_buf+0x6>
    10f6:	00 d0       	rcall	.+0      	; 0x10f8 <er_buf+0x8>
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <er_buf+0xa>
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
	int16_t data[3];

	if (SamplesGyroBuf())
    10fe:	0e 94 cc 01 	call	0x398	; 0x398 <SamplesGyroBuf>
    1102:	88 23       	and	r24, r24
    1104:	c1 f0       	breq	.+48     	; 0x1136 <er_buf+0x46>
	{
		ReadGyroBufAveraged(data);
    1106:	ce 01       	movw	r24, r28
    1108:	01 96       	adiw	r24, 0x01	; 1
    110a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <ReadGyroBufAveraged>

 	 	SendStringInt("G X ", data[0]);
    110e:	49 81       	ldd	r20, Y+1	; 0x01
    1110:	5a 81       	ldd	r21, Y+2	; 0x02
    1112:	05 2e       	mov	r0, r21
    1114:	00 0c       	add	r0, r0
    1116:	66 0b       	sbc	r22, r22
    1118:	77 0b       	sbc	r23, r23
    111a:	80 e2       	ldi	r24, 0x20	; 32
    111c:	91 e0       	ldi	r25, 0x01	; 1
    111e:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <SendStringInt>
 	 	SendStringInt("G Y ", data[1]);
    1122:	4b 81       	ldd	r20, Y+3	; 0x03
    1124:	5c 81       	ldd	r21, Y+4	; 0x04
    1126:	05 2e       	mov	r0, r21
    1128:	00 0c       	add	r0, r0
    112a:	66 0b       	sbc	r22, r22
    112c:	77 0b       	sbc	r23, r23
    112e:	85 e2       	ldi	r24, 0x25	; 37
    1130:	91 e0       	ldi	r25, 0x01	; 1
    1132:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <SendStringInt>
// 	 	SendStringInt("G Z ", data[2]);
	}

 	if (SamplesAccBuf())
    1136:	0e 94 d5 01 	call	0x3aa	; 0x3aa <SamplesAccBuf>
    113a:	88 23       	and	r24, r24
    113c:	11 f1       	breq	.+68     	; 0x1182 <er_buf+0x92>
 	{
		ReadAccBufAveraged(data);
    113e:	ce 01       	movw	r24, r28
    1140:	01 96       	adiw	r24, 0x01	; 1
    1142:	0e 94 de 03 	call	0x7bc	; 0x7bc <ReadAccBufAveraged>

		SendStringInt("A X ", data[0]);
    1146:	49 81       	ldd	r20, Y+1	; 0x01
    1148:	5a 81       	ldd	r21, Y+2	; 0x02
    114a:	05 2e       	mov	r0, r21
    114c:	00 0c       	add	r0, r0
    114e:	66 0b       	sbc	r22, r22
    1150:	77 0b       	sbc	r23, r23
    1152:	8f e2       	ldi	r24, 0x2F	; 47
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <SendStringInt>
		SendStringInt("A Y ", data[1]);
    115a:	4b 81       	ldd	r20, Y+3	; 0x03
    115c:	5c 81       	ldd	r21, Y+4	; 0x04
    115e:	05 2e       	mov	r0, r21
    1160:	00 0c       	add	r0, r0
    1162:	66 0b       	sbc	r22, r22
    1164:	77 0b       	sbc	r23, r23
    1166:	84 e3       	ldi	r24, 0x34	; 52
    1168:	91 e0       	ldi	r25, 0x01	; 1
    116a:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <SendStringInt>
		SendStringInt("A Z ", data[2]);
    116e:	4d 81       	ldd	r20, Y+5	; 0x05
    1170:	5e 81       	ldd	r21, Y+6	; 0x06
    1172:	05 2e       	mov	r0, r21
    1174:	00 0c       	add	r0, r0
    1176:	66 0b       	sbc	r22, r22
    1178:	77 0b       	sbc	r23, r23
    117a:	89 e3       	ldi	r24, 0x39	; 57
    117c:	91 e0       	ldi	r25, 0x01	; 1
    117e:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <SendStringInt>
 	}

	SendStringInt("S ", SamplesAccBuf());
    1182:	0e 94 d5 01 	call	0x3aa	; 0x3aa <SamplesAccBuf>
    1186:	48 2f       	mov	r20, r24
    1188:	50 e0       	ldi	r21, 0x00	; 0
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	8e e3       	ldi	r24, 0x3E	; 62
    1190:	91 e0       	ldi	r25, 0x01	; 1
    1192:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <SendStringInt>
	return 0;
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	26 96       	adiw	r28, 0x06	; 6
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	cd bf       	out	0x3d, r28	; 61
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	08 95       	ret

000011aa <ProcessString>:
	{"ER_BUF", er_buf},
};


void ProcessString(uint8_t start, uint8_t stop)
{
    11aa:	4f 92       	push	r4
    11ac:	5f 92       	push	r5
    11ae:	6f 92       	push	r6
    11b0:	8f 92       	push	r8
    11b2:	9f 92       	push	r9
    11b4:	af 92       	push	r10
    11b6:	bf 92       	push	r11
    11b8:	cf 92       	push	r12
    11ba:	df 92       	push	r13
    11bc:	ef 92       	push	r14
    11be:	ff 92       	push	r15
    11c0:	0f 93       	push	r16
    11c2:	1f 93       	push	r17
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	a2 97       	sbiw	r28, 0x22	; 34
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	fe 01       	movw	r30, r28
    11da:	31 96       	adiw	r30, 0x01	; 1
    11dc:	9e 01       	movw	r18, r28
    11de:	2f 5d       	subi	r18, 0xDF	; 223
    11e0:	3f 4f       	sbci	r19, 0xFF	; 255
	char string[RX_SIZE];
	uint8_t i;	//counter value

	for (i=0; i<RX_SIZE; i++)
	{
		string[i] = 0;
    11e2:	11 92       	st	Z+, r1
	
	//	stop = (stop +1) & RX_SIZE_BIN;
	char string[RX_SIZE];
	uint8_t i;	//counter value

	for (i=0; i<RX_SIZE; i++)
    11e4:	2e 17       	cp	r18, r30
    11e6:	3f 07       	cpc	r19, r31
    11e8:	e1 f7       	brne	.-8      	; 0x11e2 <ProcessString+0x38>
	}

	i=0;

	// Assign rX string to command
	while (start!=stop)
    11ea:	86 17       	cp	r24, r22
    11ec:	99 f0       	breq	.+38     	; 0x1214 <ProcessString+0x6a>
    11ee:	10 e0       	ldi	r17, 0x00	; 0
	{
		string[i] = RxBuffor[start];
    11f0:	a1 e0       	ldi	r26, 0x01	; 1
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	ac 0f       	add	r26, r28
    11f6:	bd 1f       	adc	r27, r29
    11f8:	a1 0f       	add	r26, r17
    11fa:	b1 1d       	adc	r27, r1
    11fc:	e8 2f       	mov	r30, r24
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	e6 5e       	subi	r30, 0xE6	; 230
    1202:	fc 4f       	sbci	r31, 0xFC	; 252
    1204:	90 81       	ld	r25, Z
    1206:	9c 93       	st	X, r25
		start = (start + 1) & RX_SIZE_BIN;
    1208:	8f 5f       	subi	r24, 0xFF	; 255
    120a:	8f 71       	andi	r24, 0x1F	; 31
		i++;
    120c:	1f 5f       	subi	r17, 0xFF	; 255
	}

	i=0;

	// Assign rX string to command
	while (start!=stop)
    120e:	68 13       	cpse	r22, r24
    1210:	ef cf       	rjmp	.-34     	; 0x11f0 <ProcessString+0x46>
    1212:	01 c0       	rjmp	.+2      	; 0x1216 <ProcessString+0x6c>
    1214:	10 e0       	ldi	r17, 0x00	; 0
	}

	char * rest;
	char * begining;

	begining = strtok_r(string, " ", &rest);
    1216:	ae 01       	movw	r20, r28
    1218:	4f 5d       	subi	r20, 0xDF	; 223
    121a:	5f 4f       	sbci	r21, 0xFF	; 255
    121c:	6f e4       	ldi	r22, 0x4F	; 79
    121e:	71 e0       	ldi	r23, 0x01	; 1
    1220:	ce 01       	movw	r24, r28
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	0e 94 96 11 	call	0x232c	; 0x232c <strtok_r>
    1228:	5c 01       	movw	r10, r24

	uint8_t j;
	uint8_t command_length;
	uint8_t string_length = strlen(begining);
    122a:	fc 01       	movw	r30, r24
    122c:	01 90       	ld	r0, Z+
    122e:	00 20       	and	r0, r0
    1230:	e9 f7       	brne	.-6      	; 0x122c <ProcessString+0x82>
    1232:	31 97       	sbiw	r30, 0x01	; 1
    1234:	6e 2e       	mov	r6, r30
    1236:	68 1a       	sub	r6, r24
    1238:	0f 2e       	mov	r0, r31
    123a:	f4 ef       	ldi	r31, 0xF4	; 244
    123c:	ef 2e       	mov	r14, r31
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	ff 2e       	mov	r15, r31
    1242:	f0 2d       	mov	r31, r0
    1244:	c1 2c       	mov	r12, r1
    1246:	d1 2c       	mov	r13, r1
	for (j=0; j < RX_COMMANDS; j++)
    1248:	00 e0       	ldi	r16, 0x00	; 0
	{
		command_length = strlen_P(ER_commands[j].command);
		
		if (command_length == string_length)
		{
			if (0 == strncasecmp_P(begining, ER_commands[j].command, i))
    124a:	81 2e       	mov	r8, r17
    124c:	91 2c       	mov	r9, r1
#else
extern size_t __strlen_P(const char *) __ATTR_CONST__;  /* internal helper function */
__attribute__((__always_inline__)) static __inline__ size_t strlen_P(const char * s);
static __inline__ size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
    124e:	c7 01       	movw	r24, r14
    1250:	0e 94 75 11 	call	0x22ea	; 0x22ea <__strlen_P>
	uint8_t string_length = strlen(begining);
	for (j=0; j < RX_COMMANDS; j++)
	{
		command_length = strlen_P(ER_commands[j].command);
		
		if (command_length == string_length)
    1254:	68 12       	cpse	r6, r24
    1256:	18 c0       	rjmp	.+48     	; 0x1288 <ProcessString+0xde>
		{
			if (0 == strncasecmp_P(begining, ER_commands[j].command, i))
    1258:	a4 01       	movw	r20, r8
    125a:	b7 01       	movw	r22, r14
    125c:	c5 01       	movw	r24, r10
    125e:	0e 94 7e 11 	call	0x22fc	; 0x22fc <strncasecmp_P>
    1262:	89 2b       	or	r24, r25
    1264:	89 f4       	brne	.+34     	; 0x1288 <ProcessString+0xde>
			{
				_er_srv = (void *)pgm_read_word(&ER_commands[j].ER_service);
    1266:	86 e1       	ldi	r24, 0x16	; 22
    1268:	8c 9d       	mul	r24, r12
    126a:	f0 01       	movw	r30, r0
    126c:	8d 9d       	mul	r24, r13
    126e:	f0 0d       	add	r31, r0
    1270:	11 24       	eor	r1, r1
    1272:	e8 5f       	subi	r30, 0xF8	; 248
    1274:	fe 4f       	sbci	r31, 0xFE	; 254
    1276:	25 91       	lpm	r18, Z+
    1278:	34 91       	lpm	r19, Z
				_er_srv(rest);
    127a:	89 a1       	ldd	r24, Y+33	; 0x21
    127c:	9a a1       	ldd	r25, Y+34	; 0x22
    127e:	f9 01       	movw	r30, r18
    1280:	09 95       	icall
				break;
			}
		}
	}
	if (j==RX_COMMANDS)
    1282:	03 30       	cpi	r16, 0x03	; 3
    1284:	a1 f4       	brne	.+40     	; 0x12ae <ProcessString+0x104>
    1286:	09 c0       	rjmp	.+18     	; 0x129a <ProcessString+0xf0>
	begining = strtok_r(string, " ", &rest);

	uint8_t j;
	uint8_t command_length;
	uint8_t string_length = strlen(begining);
	for (j=0; j < RX_COMMANDS; j++)
    1288:	0f 5f       	subi	r16, 0xFF	; 255
    128a:	ff ef       	ldi	r31, 0xFF	; 255
    128c:	cf 1a       	sub	r12, r31
    128e:	df 0a       	sbc	r13, r31
    1290:	86 e1       	ldi	r24, 0x16	; 22
    1292:	e8 0e       	add	r14, r24
    1294:	f1 1c       	adc	r15, r1
    1296:	03 30       	cpi	r16, 0x03	; 3
    1298:	d1 f6       	brne	.-76     	; 0x124e <ProcessString+0xa4>
			}
		}
	}
	if (j==RX_COMMANDS)
	{
		SendString("Wrong command: ");
    129a:	81 e4       	ldi	r24, 0x41	; 65
    129c:	91 e0       	ldi	r25, 0x01	; 1
    129e:	0e 94 bc 0c 	call	0x1978	; 0x1978 <SendString>
		SendString(string);
    12a2:	ce 01       	movw	r24, r28
    12a4:	01 96       	adiw	r24, 0x01	; 1
    12a6:	0e 94 bc 0c 	call	0x1978	; 0x1978 <SendString>
		SendEnter();
    12aa:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <SendEnter>
	}
		
}
    12ae:	a2 96       	adiw	r28, 0x22	; 34
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	ff 90       	pop	r15
    12c4:	ef 90       	pop	r14
    12c6:	df 90       	pop	r13
    12c8:	cf 90       	pop	r12
    12ca:	bf 90       	pop	r11
    12cc:	af 90       	pop	r10
    12ce:	9f 90       	pop	r9
    12d0:	8f 90       	pop	r8
    12d2:	6f 90       	pop	r6
    12d4:	5f 90       	pop	r5
    12d6:	4f 90       	pop	r4
    12d8:	08 95       	ret

000012da <test>:
		}
	}
}

void test(void)
{
    12da:	4f 92       	push	r4
    12dc:	5f 92       	push	r5
    12de:	6f 92       	push	r6
    12e0:	7f 92       	push	r7
    12e2:	8f 92       	push	r8
    12e4:	9f 92       	push	r9
    12e6:	af 92       	push	r10
    12e8:	bf 92       	push	r11
    12ea:	cf 92       	push	r12
    12ec:	df 92       	push	r13
    12ee:	ef 92       	push	r14
    12f0:	ff 92       	push	r15
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	64 97       	sbiw	r28, 0x14	; 20
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
	test_counter = 20;
    1306:	84 e1       	ldi	r24, 0x14	; 20
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <test_counter+0x1>
    130e:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <test_counter>
	int32_t pomocnicza;
	int16_t gyro[3], acc[3];
	if (SamplesGyroBuf())
    1312:	0e 94 cc 01 	call	0x398	; 0x398 <SamplesGyroBuf>
    1316:	88 23       	and	r24, r24
    1318:	21 f0       	breq	.+8      	; 0x1322 <test+0x48>
		ReadGyroBufAveraged(gyro);
    131a:	ce 01       	movw	r24, r28
    131c:	01 96       	adiw	r24, 0x01	; 1
    131e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <ReadGyroBufAveraged>

	if (SamplesAccBuf())
    1322:	0e 94 d5 01 	call	0x3aa	; 0x3aa <SamplesAccBuf>
    1326:	88 23       	and	r24, r24
    1328:	21 f0       	breq	.+8      	; 0x1332 <test+0x58>
		ReadAccBufAveraged(acc);
    132a:	ce 01       	movw	r24, r28
    132c:	07 96       	adiw	r24, 0x07	; 7
    132e:	0e 94 de 03 	call	0x7bc	; 0x7bc <ReadAccBufAveraged>
	
	double x_pos_acc = ProcessAngle(acc[Y_AXIS], acc[Z_AXIS]);
    1332:	6b 85       	ldd	r22, Y+11	; 0x0b
    1334:	7c 85       	ldd	r23, Y+12	; 0x0c
    1336:	89 85       	ldd	r24, Y+9	; 0x09
    1338:	9a 85       	ldd	r25, Y+10	; 0x0a
    133a:	0e 94 08 04 	call	0x810	; 0x810 <ProcessAngle>
    133e:	2b 01       	movw	r4, r22
    1340:	3c 01       	movw	r6, r24
	double y_pos_acc = (ProcessAngle(acc[X_AXIS], acc[Z_AXIS]) * (-1));
    1342:	6b 85       	ldd	r22, Y+11	; 0x0b
    1344:	7c 85       	ldd	r23, Y+12	; 0x0c
    1346:	8f 81       	ldd	r24, Y+7	; 0x07
    1348:	98 85       	ldd	r25, Y+8	; 0x08
    134a:	0e 94 08 04 	call	0x810	; 0x810 <ProcessAngle>
    134e:	6b 01       	movw	r12, r22
    1350:	7c 01       	movw	r14, r24
	int32_t pos_acc;

	x_pos_acc *= 1;
	y_pos_acc *= 1;

	int32_t x_pos_gyro = (int32_t)gyro[X_AXIS] * 100;
    1352:	a9 81       	ldd	r26, Y+1	; 0x01
    1354:	ba 81       	ldd	r27, Y+2	; 0x02
    1356:	24 e6       	ldi	r18, 0x64	; 100
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	0e 94 39 11 	call	0x2272	; 0x2272 <__usmulhisi3>
    135e:	4b 01       	movw	r8, r22
    1360:	5c 01       	movw	r10, r24
	int32_t y_pos_gyro = (int32_t)gyro[Y_AXIS] * 100;
    1362:	ab 81       	ldd	r26, Y+3	; 0x03
    1364:	bc 81       	ldd	r27, Y+4	; 0x04
    1366:	0e 94 39 11 	call	0x2272	; 0x2272 <__usmulhisi3>
    136a:	6d 87       	std	Y+13, r22	; 0x0d
    136c:	7e 87       	std	Y+14, r23	; 0x0e
    136e:	8f 87       	std	Y+15, r24	; 0x0f
    1370:	98 8b       	std	Y+16, r25	; 0x10

 	x_pos_gyro = x_pos_gyro / (50 * 65);
 	y_pos_gyro = y_pos_gyro / (50 * 65);

	pos_acc = (int32_t)x_pos_acc;
	pomocnicza = pos_x + x_pos_gyro;
    1372:	c5 01       	movw	r24, r10
    1374:	b4 01       	movw	r22, r8
    1376:	22 eb       	ldi	r18, 0xB2	; 178
    1378:	3c e0       	ldi	r19, 0x0C	; 12
    137a:	40 e0       	ldi	r20, 0x00	; 0
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	0e 94 05 11 	call	0x220a	; 0x220a <__divmodsi4>
    1382:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <pos_x>
    1386:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <pos_x+0x1>
    138a:	a0 91 20 02 	lds	r26, 0x0220	; 0x800220 <pos_x+0x2>
    138e:	b0 91 21 02 	lds	r27, 0x0221	; 0x800221 <pos_x+0x3>
    1392:	28 0f       	add	r18, r24
    1394:	39 1f       	adc	r19, r25
    1396:	4a 1f       	adc	r20, r26
    1398:	5b 1f       	adc	r21, r27
	pomocnicza *= 99;
    139a:	a3 e6       	ldi	r26, 0x63	; 99
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	0e 94 40 11 	call	0x2280	; 0x2280 <__muluhisi3>
    13a2:	69 8b       	std	Y+17, r22	; 0x11
    13a4:	7a 8b       	std	Y+18, r23	; 0x12
    13a6:	8b 8b       	std	Y+19, r24	; 0x13
    13a8:	9c 8b       	std	Y+20, r25	; 0x14
	pomocnicza /= 100;
	pos_x = pos_acc + pomocnicza;
    13aa:	c3 01       	movw	r24, r6
    13ac:	b2 01       	movw	r22, r4
    13ae:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixsfsi>
    13b2:	4b 01       	movw	r8, r22
    13b4:	5c 01       	movw	r10, r24
    13b6:	0f 2e       	mov	r0, r31
    13b8:	f4 e6       	ldi	r31, 0x64	; 100
    13ba:	4f 2e       	mov	r4, r31
    13bc:	51 2c       	mov	r5, r1
    13be:	61 2c       	mov	r6, r1
    13c0:	71 2c       	mov	r7, r1
    13c2:	f0 2d       	mov	r31, r0
    13c4:	69 89       	ldd	r22, Y+17	; 0x11
    13c6:	7a 89       	ldd	r23, Y+18	; 0x12
    13c8:	8b 89       	ldd	r24, Y+19	; 0x13
    13ca:	9c 89       	ldd	r25, Y+20	; 0x14
    13cc:	a3 01       	movw	r20, r6
    13ce:	92 01       	movw	r18, r4
    13d0:	0e 94 05 11 	call	0x220a	; 0x220a <__divmodsi4>
    13d4:	ba 01       	movw	r22, r20
    13d6:	a9 01       	movw	r20, r18
    13d8:	48 0d       	add	r20, r8
    13da:	59 1d       	adc	r21, r9
    13dc:	6a 1d       	adc	r22, r10
    13de:	7b 1d       	adc	r23, r11
    13e0:	40 93 1e 02 	sts	0x021E, r20	; 0x80021e <pos_x>
    13e4:	50 93 1f 02 	sts	0x021F, r21	; 0x80021f <pos_x+0x1>
    13e8:	60 93 20 02 	sts	0x0220, r22	; 0x800220 <pos_x+0x2>
    13ec:	70 93 21 02 	sts	0x0221, r23	; 0x800221 <pos_x+0x3>
	SendStringInt("B X ", pos_x);
    13f0:	81 e5       	ldi	r24, 0x51	; 81
    13f2:	91 e0       	ldi	r25, 0x01	; 1
    13f4:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <SendStringInt>

	pos_acc = (int32_t)y_pos_acc;
	pomocnicza = pos_y + y_pos_gyro;
    13f8:	6d 85       	ldd	r22, Y+13	; 0x0d
    13fa:	7e 85       	ldd	r23, Y+14	; 0x0e
    13fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    13fe:	98 89       	ldd	r25, Y+16	; 0x10
    1400:	22 eb       	ldi	r18, 0xB2	; 178
    1402:	3c e0       	ldi	r19, 0x0C	; 12
    1404:	40 e0       	ldi	r20, 0x00	; 0
    1406:	50 e0       	ldi	r21, 0x00	; 0
    1408:	0e 94 05 11 	call	0x220a	; 0x220a <__divmodsi4>
    140c:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <pos_y>
    1410:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <pos_y+0x1>
    1414:	a0 91 14 02 	lds	r26, 0x0214	; 0x800214 <pos_y+0x2>
    1418:	b0 91 15 02 	lds	r27, 0x0215	; 0x800215 <pos_y+0x3>
    141c:	28 0f       	add	r18, r24
    141e:	39 1f       	adc	r19, r25
    1420:	4a 1f       	adc	r20, r26
    1422:	5b 1f       	adc	r21, r27
	pomocnicza *= 99;
    1424:	a3 e6       	ldi	r26, 0x63	; 99
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	0e 94 40 11 	call	0x2280	; 0x2280 <__muluhisi3>
    142c:	6d 87       	std	Y+13, r22	; 0x0d
    142e:	7e 87       	std	Y+14, r23	; 0x0e
    1430:	8f 87       	std	Y+15, r24	; 0x0f
    1432:	98 8b       	std	Y+16, r25	; 0x10
	pomocnicza /= 100;
	pos_y = pos_acc + pomocnicza;
    1434:	c7 01       	movw	r24, r14
    1436:	b6 01       	movw	r22, r12
    1438:	90 58       	subi	r25, 0x80	; 128
    143a:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixsfsi>
    143e:	4b 01       	movw	r8, r22
    1440:	5c 01       	movw	r10, r24
    1442:	6d 85       	ldd	r22, Y+13	; 0x0d
    1444:	7e 85       	ldd	r23, Y+14	; 0x0e
    1446:	8f 85       	ldd	r24, Y+15	; 0x0f
    1448:	98 89       	ldd	r25, Y+16	; 0x10
    144a:	a3 01       	movw	r20, r6
    144c:	92 01       	movw	r18, r4
    144e:	0e 94 05 11 	call	0x220a	; 0x220a <__divmodsi4>
    1452:	ba 01       	movw	r22, r20
    1454:	a9 01       	movw	r20, r18
    1456:	48 0d       	add	r20, r8
    1458:	59 1d       	adc	r21, r9
    145a:	6a 1d       	adc	r22, r10
    145c:	7b 1d       	adc	r23, r11
    145e:	40 93 12 02 	sts	0x0212, r20	; 0x800212 <pos_y>
    1462:	50 93 13 02 	sts	0x0213, r21	; 0x800213 <pos_y+0x1>
    1466:	60 93 14 02 	sts	0x0214, r22	; 0x800214 <pos_y+0x2>
    146a:	70 93 15 02 	sts	0x0215, r23	; 0x800215 <pos_y+0x3>
	SendStringInt("B Y ", pos_y);
    146e:	86 e5       	ldi	r24, 0x56	; 86
    1470:	91 e0       	ldi	r25, 0x01	; 1
    1472:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <SendStringInt>
}
    1476:	64 96       	adiw	r28, 0x14	; 20
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	f8 94       	cli
    147c:	de bf       	out	0x3e, r29	; 62
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	cd bf       	out	0x3d, r28	; 61
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	ff 90       	pop	r15
    1488:	ef 90       	pop	r14
    148a:	df 90       	pop	r13
    148c:	cf 90       	pop	r12
    148e:	bf 90       	pop	r11
    1490:	af 90       	pop	r10
    1492:	9f 90       	pop	r9
    1494:	8f 90       	pop	r8
    1496:	7f 90       	pop	r7
    1498:	6f 90       	pop	r6
    149a:	5f 90       	pop	r5
    149c:	4f 90       	pop	r4
    149e:	08 95       	ret

000014a0 <InitCommonTimer>:
	{&test_counter, test},
};

void InitCommonTimer(void)
{
	TIMSK0 |= (1<<TOIE0);			//Overflow interupt enable
    14a0:	ee e6       	ldi	r30, 0x6E	; 110
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	81 60       	ori	r24, 0x01	; 1
    14a8:	80 83       	st	Z, r24
	TCCR0B |= (1<<CS01)| (1<<CS00);	//Prescaler 64
    14aa:	85 b5       	in	r24, 0x25	; 37
    14ac:	83 60       	ori	r24, 0x03	; 3
    14ae:	85 bd       	out	0x25, r24	; 37
    14b0:	08 95       	ret

000014b2 <CheckCommonTimer>:
void CheckCommonTimer(void)
{
	uint8_t i;
	for (i=0; i<COMMON_TIMERS;i++)
	{
		if (*decrement_common[i].counter == 0)
    14b2:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    14b6:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    14ba:	80 81       	ld	r24, Z
    14bc:	91 81       	ldd	r25, Z+1	; 0x01
    14be:	89 2b       	or	r24, r25
    14c0:	29 f4       	brne	.+10     	; 0x14cc <CheckCommonTimer+0x1a>
		{
			decrement_common[i].timer_service();
    14c2:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_start+0x2>
    14c6:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_start+0x3>
    14ca:	09 95       	icall
    14cc:	08 95       	ret

000014ce <__vector_16>:
	pos_y = pos_acc + pomocnicza;
	SendStringInt("B Y ", pos_y);
}

ISR (TIMER0_OVF_vect)	//each 1,024ms
{
    14ce:	1f 92       	push	r1
    14d0:	0f 92       	push	r0
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	0f 92       	push	r0
    14d6:	11 24       	eor	r1, r1
    14d8:	2f 93       	push	r18
    14da:	8f 93       	push	r24
    14dc:	9f 93       	push	r25
    14de:	ef 93       	push	r30
    14e0:	ff 93       	push	r31
	uint8_t i;
	for (i=0; i<COMMON_TIMERS;i++)
	{
		if (*decrement_common[i].counter != 0 && *decrement_common[i].counter != 0xFFFF)
    14e2:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    14e6:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    14ea:	80 81       	ld	r24, Z
    14ec:	91 81       	ldd	r25, Z+1	; 0x01
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	8e 3f       	cpi	r24, 0xFE	; 254
    14f2:	2f ef       	ldi	r18, 0xFF	; 255
    14f4:	92 07       	cpc	r25, r18
    14f6:	10 f4       	brcc	.+4      	; 0x14fc <__vector_16+0x2e>
		{
			*decrement_common[i].counter = *decrement_common[i].counter - 1;
    14f8:	91 83       	std	Z+1, r25	; 0x01
    14fa:	80 83       	st	Z, r24
		}
	}
    14fc:	ff 91       	pop	r31
    14fe:	ef 91       	pop	r30
    1500:	9f 91       	pop	r25
    1502:	8f 91       	pop	r24
    1504:	2f 91       	pop	r18
    1506:	0f 90       	pop	r0
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	0f 90       	pop	r0
    150c:	1f 90       	pop	r1
    150e:	18 95       	reti

00001510 <__vector_24>:
void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
}

ISR (TWI0_vect)	//TWI finished vector
{	//TWI interrupt
    1510:	1f 92       	push	r1
    1512:	0f 92       	push	r0
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	0f 92       	push	r0
    1518:	11 24       	eor	r1, r1
    151a:	2f 93       	push	r18
    151c:	3f 93       	push	r19
    151e:	4f 93       	push	r20
    1520:	5f 93       	push	r21
    1522:	8f 93       	push	r24
    1524:	9f 93       	push	r25
    1526:	af 93       	push	r26
    1528:	bf 93       	push	r27
    152a:	ef 93       	push	r30
    152c:	ff 93       	push	r31

	uint8_t SLA = ((uint8_t)twi_bufor[twi_buf_pos.tail].sla << 1);
    152e:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    1532:	e6 95       	lsr	r30
    1534:	e6 95       	lsr	r30
    1536:	e6 95       	lsr	r30
    1538:	e7 70       	andi	r30, 0x07	; 7
    153a:	4e 2f       	mov	r20, r30
    153c:	50 e0       	ldi	r21, 0x00	; 0
    153e:	84 e1       	ldi	r24, 0x14	; 20
    1540:	e8 9f       	mul	r30, r24
    1542:	f0 01       	movw	r30, r0
    1544:	11 24       	eor	r1, r1
    1546:	e6 58       	subi	r30, 0x86	; 134
    1548:	fd 4f       	sbci	r31, 0xFD	; 253
    154a:	80 81       	ld	r24, Z
    154c:	28 2f       	mov	r18, r24
    154e:	2e 7f       	andi	r18, 0xFE	; 254
	uint8_t REG = twi_bufor[twi_buf_pos.tail].reg;
	
	switch (twi_bufor[twi_buf_pos.tail].status){
    1550:	e3 89       	ldd	r30, Z+19	; 0x13
    1552:	8e 2f       	mov	r24, r30
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	fc 01       	movw	r30, r24
    1558:	34 97       	sbiw	r30, 0x04	; 4
    155a:	e9 30       	cpi	r30, 0x09	; 9
    155c:	f1 05       	cpc	r31, r1
    155e:	08 f0       	brcs	.+2      	; 0x1562 <__vector_24+0x52>
    1560:	e4 c1       	rjmp	.+968    	; 0x192a <__vector_24+0x41a>
    1562:	e6 5a       	subi	r30, 0xA6	; 166
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__tablejump2__>
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    156a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    156e:	85 e8       	ldi	r24, 0x85	; 133
    1570:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	uint8_t REG = twi_bufor[twi_buf_pos.tail].reg;
	
	switch (twi_bufor[twi_buf_pos.tail].status){
		case start:
			TWI_write(SLA);
			twi_bufor[twi_buf_pos.tail].status = write_adress;
    1574:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    1578:	e6 95       	lsr	r30
    157a:	e6 95       	lsr	r30
    157c:	e6 95       	lsr	r30
    157e:	e7 70       	andi	r30, 0x07	; 7
    1580:	84 e1       	ldi	r24, 0x14	; 20
    1582:	e8 9f       	mul	r30, r24
    1584:	f0 01       	movw	r30, r0
    1586:	11 24       	eor	r1, r1
    1588:	e6 58       	subi	r30, 0x86	; 134
    158a:	fd 4f       	sbci	r31, 0xFD	; 253
    158c:	85 e0       	ldi	r24, 0x05	; 5
    158e:	83 8b       	std	Z+19, r24	; 0x13
			break;
    1590:	cc c1       	rjmp	.+920    	; 0x192a <__vector_24+0x41a>

ISR (TWI0_vect)	//TWI finished vector
{	//TWI interrupt

	uint8_t SLA = ((uint8_t)twi_bufor[twi_buf_pos.tail].sla << 1);
	uint8_t REG = twi_bufor[twi_buf_pos.tail].reg;
    1592:	84 e1       	ldi	r24, 0x14	; 20
    1594:	84 9f       	mul	r24, r20
    1596:	f0 01       	movw	r30, r0
    1598:	85 9f       	mul	r24, r21
    159a:	f0 0d       	add	r31, r0
    159c:	11 24       	eor	r1, r1
    159e:	e6 58       	subi	r30, 0x86	; 134
    15a0:	fd 4f       	sbci	r31, 0xFD	; 253
    15a2:	91 81       	ldd	r25, Z+1	; 0x01
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    15a4:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    15a8:	95 e8       	ldi	r25, 0x85	; 133
    15aa:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			twi_bufor[twi_buf_pos.tail].status = write_adress;
			break;

		case write_adress:
			TWI_write(REG);
			twi_bufor[twi_buf_pos.tail].status = write_register;
    15ae:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    15b2:	e6 95       	lsr	r30
    15b4:	e6 95       	lsr	r30
    15b6:	e6 95       	lsr	r30
    15b8:	e7 70       	andi	r30, 0x07	; 7
    15ba:	8e 9f       	mul	r24, r30
    15bc:	f0 01       	movw	r30, r0
    15be:	11 24       	eor	r1, r1
    15c0:	e6 58       	subi	r30, 0x86	; 134
    15c2:	fd 4f       	sbci	r31, 0xFD	; 253
    15c4:	86 e0       	ldi	r24, 0x06	; 6
    15c6:	83 8b       	std	Z+19, r24	; 0x13
			break;
    15c8:	b0 c1       	rjmp	.+864    	; 0x192a <__vector_24+0x41a>

		case write_register:
			if (twi_bufor[twi_buf_pos.tail].read)	//check if reading is required
    15ca:	84 e1       	ldi	r24, 0x14	; 20
    15cc:	84 9f       	mul	r24, r20
    15ce:	f0 01       	movw	r30, r0
    15d0:	85 9f       	mul	r24, r21
    15d2:	f0 0d       	add	r31, r0
    15d4:	11 24       	eor	r1, r1
    15d6:	e6 58       	subi	r30, 0x86	; 134
    15d8:	fd 4f       	sbci	r31, 0xFD	; 253
    15da:	80 81       	ld	r24, Z
    15dc:	80 ff       	sbrs	r24, 0
    15de:	12 c0       	rjmp	.+36     	; 0x1604 <__vector_24+0xf4>
}

//low level functions

void TWI_start(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA)|(1<<TWIE);
    15e0:	85 ea       	ldi	r24, 0xA5	; 165
    15e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

		case write_register:
			if (twi_bufor[twi_buf_pos.tail].read)	//check if reading is required
			{
				TWI_start();
				twi_bufor[twi_buf_pos.tail].status = restart;
    15e6:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    15ea:	e6 95       	lsr	r30
    15ec:	e6 95       	lsr	r30
    15ee:	e6 95       	lsr	r30
    15f0:	e7 70       	andi	r30, 0x07	; 7
    15f2:	84 e1       	ldi	r24, 0x14	; 20
    15f4:	e8 9f       	mul	r30, r24
    15f6:	f0 01       	movw	r30, r0
    15f8:	11 24       	eor	r1, r1
    15fa:	e6 58       	subi	r30, 0x86	; 134
    15fc:	fd 4f       	sbci	r31, 0xFD	; 253
    15fe:	87 e0       	ldi	r24, 0x07	; 7
    1600:	83 8b       	std	Z+19, r24	; 0x13
    1602:	93 c1       	rjmp	.+806    	; 0x192a <__vector_24+0x41a>
			}
			else	//process writing
			{
				if (twi_bufor[twi_buf_pos.tail].lenght > 1){	//if more than 1 char to write
    1604:	84 e1       	ldi	r24, 0x14	; 20
    1606:	84 9f       	mul	r24, r20
    1608:	f0 01       	movw	r30, r0
    160a:	85 9f       	mul	r24, r21
    160c:	f0 0d       	add	r31, r0
    160e:	11 24       	eor	r1, r1
    1610:	e6 58       	subi	r30, 0x86	; 134
    1612:	fd 4f       	sbci	r31, 0xFD	; 253
    1614:	87 85       	ldd	r24, Z+15	; 0x0f
    1616:	82 30       	cpi	r24, 0x02	; 2
    1618:	e8 f0       	brcs	.+58     	; 0x1654 <__vector_24+0x144>
					TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
    161a:	84 e1       	ldi	r24, 0x14	; 20
    161c:	84 9f       	mul	r24, r20
    161e:	f0 01       	movw	r30, r0
    1620:	85 9f       	mul	r24, r21
    1622:	f0 0d       	add	r31, r0
    1624:	11 24       	eor	r1, r1
    1626:	e6 58       	subi	r30, 0x86	; 134
    1628:	fd 4f       	sbci	r31, 0xFD	; 253
    162a:	92 81       	ldd	r25, Z+2	; 0x02
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    162c:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    1630:	95 e8       	ldi	r25, 0x85	; 133
    1632:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			}
			else	//process writing
			{
				if (twi_bufor[twi_buf_pos.tail].lenght > 1){	//if more than 1 char to write
					TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
					twi_bufor[twi_buf_pos.tail].status = write;
    1636:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    163a:	e6 95       	lsr	r30
    163c:	e6 95       	lsr	r30
    163e:	e6 95       	lsr	r30
    1640:	e7 70       	andi	r30, 0x07	; 7
    1642:	8e 9f       	mul	r24, r30
    1644:	f0 01       	movw	r30, r0
    1646:	11 24       	eor	r1, r1
    1648:	e6 58       	subi	r30, 0x86	; 134
    164a:	fd 4f       	sbci	r31, 0xFD	; 253
    164c:	8b e0       	ldi	r24, 0x0B	; 11
    164e:	83 8b       	std	Z+19, r24	; 0x13
					twi_bufor[twi_buf_pos.tail].buf_pos = 0;
    1650:	14 86       	std	Z+12, r1	; 0x0c
    1652:	1b c0       	rjmp	.+54     	; 0x168a <__vector_24+0x17a>
				}

				else {	//only 1 byte to send
					TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
    1654:	84 e1       	ldi	r24, 0x14	; 20
    1656:	84 9f       	mul	r24, r20
    1658:	f0 01       	movw	r30, r0
    165a:	85 9f       	mul	r24, r21
    165c:	f0 0d       	add	r31, r0
    165e:	11 24       	eor	r1, r1
    1660:	e6 58       	subi	r30, 0x86	; 134
    1662:	fd 4f       	sbci	r31, 0xFD	; 253
    1664:	92 81       	ldd	r25, Z+2	; 0x02
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    1666:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    166a:	95 e8       	ldi	r25, 0x85	; 133
    166c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
					twi_bufor[twi_buf_pos.tail].buf_pos = 0;
				}

				else {	//only 1 byte to send
					TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
					twi_bufor[twi_buf_pos.tail].status = last_byte_write;
    1670:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    1674:	e6 95       	lsr	r30
    1676:	e6 95       	lsr	r30
    1678:	e6 95       	lsr	r30
    167a:	e7 70       	andi	r30, 0x07	; 7
    167c:	8e 9f       	mul	r24, r30
    167e:	f0 01       	movw	r30, r0
    1680:	11 24       	eor	r1, r1
    1682:	e6 58       	subi	r30, 0x86	; 134
    1684:	fd 4f       	sbci	r31, 0xFD	; 253
    1686:	8c e0       	ldi	r24, 0x0C	; 12
    1688:	83 8b       	std	Z+19, r24	; 0x13
				}
				twi_bufor[twi_buf_pos.tail].lenght --;
    168a:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    168e:	e6 95       	lsr	r30
    1690:	e6 95       	lsr	r30
    1692:	e6 95       	lsr	r30
    1694:	e7 70       	andi	r30, 0x07	; 7
    1696:	84 e1       	ldi	r24, 0x14	; 20
    1698:	e8 9f       	mul	r30, r24
    169a:	f0 01       	movw	r30, r0
    169c:	11 24       	eor	r1, r1
    169e:	e6 58       	subi	r30, 0x86	; 134
    16a0:	fd 4f       	sbci	r31, 0xFD	; 253
    16a2:	87 85       	ldd	r24, Z+15	; 0x0f
    16a4:	81 50       	subi	r24, 0x01	; 1
    16a6:	87 87       	std	Z+15, r24	; 0x0f
    16a8:	40 c1       	rjmp	.+640    	; 0x192a <__vector_24+0x41a>
			}
			break;

		case restart:
			SLA++;
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	82 0f       	add	r24, r18
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    16ae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    16b2:	85 e8       	ldi	r24, 0x85	; 133
    16b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;

		case restart:
			SLA++;
			TWI_write(SLA);
			twi_bufor[twi_buf_pos.tail].status = set_to_read;
    16b8:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    16bc:	e6 95       	lsr	r30
    16be:	e6 95       	lsr	r30
    16c0:	e6 95       	lsr	r30
    16c2:	e7 70       	andi	r30, 0x07	; 7
    16c4:	84 e1       	ldi	r24, 0x14	; 20
    16c6:	e8 9f       	mul	r30, r24
    16c8:	f0 01       	movw	r30, r0
    16ca:	11 24       	eor	r1, r1
    16cc:	e6 58       	subi	r30, 0x86	; 134
    16ce:	fd 4f       	sbci	r31, 0xFD	; 253
    16d0:	88 e0       	ldi	r24, 0x08	; 8
    16d2:	83 8b       	std	Z+19, r24	; 0x13
			break;
    16d4:	2a c1       	rjmp	.+596    	; 0x192a <__vector_24+0x41a>

		case set_to_read:
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){
    16d6:	84 e1       	ldi	r24, 0x14	; 20
    16d8:	84 9f       	mul	r24, r20
    16da:	f0 01       	movw	r30, r0
    16dc:	85 9f       	mul	r24, r21
    16de:	f0 0d       	add	r31, r0
    16e0:	11 24       	eor	r1, r1
    16e2:	e6 58       	subi	r30, 0x86	; 134
    16e4:	fd 4f       	sbci	r31, 0xFD	; 253
    16e6:	87 85       	ldd	r24, Z+15	; 0x0f
    16e8:	82 30       	cpi	r24, 0x02	; 2
    16ea:	90 f0       	brcs	.+36     	; 0x1710 <__vector_24+0x200>
	TWDR0 = bajt;
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
}

void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
    16ec:	85 ec       	ldi	r24, 0xC5	; 197
    16ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;

		case set_to_read:
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){
				TWI_read(ACK);
				twi_bufor[twi_buf_pos.tail].status = read;
    16f2:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    16f6:	e6 95       	lsr	r30
    16f8:	e6 95       	lsr	r30
    16fa:	e6 95       	lsr	r30
    16fc:	e7 70       	andi	r30, 0x07	; 7
    16fe:	84 e1       	ldi	r24, 0x14	; 20
    1700:	e8 9f       	mul	r30, r24
    1702:	f0 01       	movw	r30, r0
    1704:	11 24       	eor	r1, r1
    1706:	e6 58       	subi	r30, 0x86	; 134
    1708:	fd 4f       	sbci	r31, 0xFD	; 253
    170a:	89 e0       	ldi	r24, 0x09	; 9
    170c:	83 8b       	std	Z+19, r24	; 0x13
    170e:	11 c0       	rjmp	.+34     	; 0x1732 <__vector_24+0x222>
	TWDR0 = bajt;
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
}

void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
    1710:	85 e8       	ldi	r24, 0x85	; 133
    1712:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

			}
			
			else{
				TWI_read(NACK);
				twi_bufor[twi_buf_pos.tail].status = stop_reading;
    1716:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    171a:	e6 95       	lsr	r30
    171c:	e6 95       	lsr	r30
    171e:	e6 95       	lsr	r30
    1720:	e7 70       	andi	r30, 0x07	; 7
    1722:	84 e1       	ldi	r24, 0x14	; 20
    1724:	e8 9f       	mul	r30, r24
    1726:	f0 01       	movw	r30, r0
    1728:	11 24       	eor	r1, r1
    172a:	e6 58       	subi	r30, 0x86	; 134
    172c:	fd 4f       	sbci	r31, 0xFD	; 253
    172e:	8a e0       	ldi	r24, 0x0A	; 10
    1730:	83 8b       	std	Z+19, r24	; 0x13
			}

			twi_bufor[twi_buf_pos.tail].lenght --;
    1732:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    1736:	e6 95       	lsr	r30
    1738:	e6 95       	lsr	r30
    173a:	e6 95       	lsr	r30
    173c:	e7 70       	andi	r30, 0x07	; 7
    173e:	84 e1       	ldi	r24, 0x14	; 20
    1740:	e8 9f       	mul	r30, r24
    1742:	f0 01       	movw	r30, r0
    1744:	11 24       	eor	r1, r1
    1746:	e6 58       	subi	r30, 0x86	; 134
    1748:	fd 4f       	sbci	r31, 0xFD	; 253
    174a:	87 85       	ldd	r24, Z+15	; 0x0f
    174c:	81 50       	subi	r24, 0x01	; 1
    174e:	87 87       	std	Z+15, r24	; 0x0f
			break;
    1750:	ec c0       	rjmp	.+472    	; 0x192a <__vector_24+0x41a>

		case read:
			*twi_bufor[twi_buf_pos.tail].bufor_ref++ = TWDR0;	//read received byte
    1752:	84 e1       	ldi	r24, 0x14	; 20
    1754:	84 9f       	mul	r24, r20
    1756:	f0 01       	movw	r30, r0
    1758:	85 9f       	mul	r24, r21
    175a:	f0 0d       	add	r31, r0
    175c:	11 24       	eor	r1, r1
    175e:	e6 58       	subi	r30, 0x86	; 134
    1760:	fd 4f       	sbci	r31, 0xFD	; 253
    1762:	a5 85       	ldd	r26, Z+13	; 0x0d
    1764:	b6 85       	ldd	r27, Z+14	; 0x0e
    1766:	9d 01       	movw	r18, r26
    1768:	2f 5f       	subi	r18, 0xFF	; 255
    176a:	3f 4f       	sbci	r19, 0xFF	; 255
    176c:	36 87       	std	Z+14, r19	; 0x0e
    176e:	25 87       	std	Z+13, r18	; 0x0d
    1770:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1774:	9c 93       	st	X, r25
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){
    1776:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    177a:	e6 95       	lsr	r30
    177c:	e6 95       	lsr	r30
    177e:	e6 95       	lsr	r30
    1780:	e7 70       	andi	r30, 0x07	; 7
    1782:	8e 9f       	mul	r24, r30
    1784:	f0 01       	movw	r30, r0
    1786:	11 24       	eor	r1, r1
    1788:	e6 58       	subi	r30, 0x86	; 134
    178a:	fd 4f       	sbci	r31, 0xFD	; 253
    178c:	87 85       	ldd	r24, Z+15	; 0x0f
    178e:	82 30       	cpi	r24, 0x02	; 2
    1790:	90 f0       	brcs	.+36     	; 0x17b6 <__vector_24+0x2a6>
	TWDR0 = bajt;
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
}

void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
    1792:	85 ec       	ldi	r24, 0xC5	; 197
    1794:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

		case read:
			*twi_bufor[twi_buf_pos.tail].bufor_ref++ = TWDR0;	//read received byte
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){
				TWI_read(ACK);	//going to read more
				twi_bufor[twi_buf_pos.tail].status = read;
    1798:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    179c:	e6 95       	lsr	r30
    179e:	e6 95       	lsr	r30
    17a0:	e6 95       	lsr	r30
    17a2:	e7 70       	andi	r30, 0x07	; 7
    17a4:	84 e1       	ldi	r24, 0x14	; 20
    17a6:	e8 9f       	mul	r30, r24
    17a8:	f0 01       	movw	r30, r0
    17aa:	11 24       	eor	r1, r1
    17ac:	e6 58       	subi	r30, 0x86	; 134
    17ae:	fd 4f       	sbci	r31, 0xFD	; 253
    17b0:	89 e0       	ldi	r24, 0x09	; 9
    17b2:	83 8b       	std	Z+19, r24	; 0x13
    17b4:	11 c0       	rjmp	.+34     	; 0x17d8 <__vector_24+0x2c8>
	TWDR0 = bajt;
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
}

void TWI_read(uint8_t ack) {
	TWCR0 = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN)|(1<<TWIE);
    17b6:	85 e8       	ldi	r24, 0x85	; 133
    17b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				TWI_read(ACK);	//going to read more
				twi_bufor[twi_buf_pos.tail].status = read;
			}
			else{
				TWI_read(NACK);	//finishing reading
				twi_bufor[twi_buf_pos.tail].status = stop_reading;
    17bc:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    17c0:	e6 95       	lsr	r30
    17c2:	e6 95       	lsr	r30
    17c4:	e6 95       	lsr	r30
    17c6:	e7 70       	andi	r30, 0x07	; 7
    17c8:	84 e1       	ldi	r24, 0x14	; 20
    17ca:	e8 9f       	mul	r30, r24
    17cc:	f0 01       	movw	r30, r0
    17ce:	11 24       	eor	r1, r1
    17d0:	e6 58       	subi	r30, 0x86	; 134
    17d2:	fd 4f       	sbci	r31, 0xFD	; 253
    17d4:	8a e0       	ldi	r24, 0x0A	; 10
    17d6:	83 8b       	std	Z+19, r24	; 0x13
			}
			twi_bufor[twi_buf_pos.tail].lenght --;
    17d8:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    17dc:	e6 95       	lsr	r30
    17de:	e6 95       	lsr	r30
    17e0:	e6 95       	lsr	r30
    17e2:	e7 70       	andi	r30, 0x07	; 7
    17e4:	84 e1       	ldi	r24, 0x14	; 20
    17e6:	e8 9f       	mul	r30, r24
    17e8:	f0 01       	movw	r30, r0
    17ea:	11 24       	eor	r1, r1
    17ec:	e6 58       	subi	r30, 0x86	; 134
    17ee:	fd 4f       	sbci	r31, 0xFD	; 253
    17f0:	87 85       	ldd	r24, Z+15	; 0x0f
    17f2:	81 50       	subi	r24, 0x01	; 1
    17f4:	87 87       	std	Z+15, r24	; 0x0f
			break;
    17f6:	99 c0       	rjmp	.+306    	; 0x192a <__vector_24+0x41a>

		case stop_reading:
			*twi_bufor[twi_buf_pos.tail].bufor_ref++ = TWDR0;	//read last received byte
    17f8:	84 e1       	ldi	r24, 0x14	; 20
    17fa:	84 9f       	mul	r24, r20
    17fc:	f0 01       	movw	r30, r0
    17fe:	85 9f       	mul	r24, r21
    1800:	f0 0d       	add	r31, r0
    1802:	11 24       	eor	r1, r1
    1804:	e6 58       	subi	r30, 0x86	; 134
    1806:	fd 4f       	sbci	r31, 0xFD	; 253
    1808:	a5 85       	ldd	r26, Z+13	; 0x0d
    180a:	b6 85       	ldd	r27, Z+14	; 0x0e
    180c:	9d 01       	movw	r18, r26
    180e:	2f 5f       	subi	r18, 0xFF	; 255
    1810:	3f 4f       	sbci	r19, 0xFF	; 255
    1812:	36 87       	std	Z+14, r19	; 0x0e
    1814:	25 87       	std	Z+13, r18	; 0x0d
    1816:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    181a:	9c 93       	st	X, r25
			*twi_bufor[twi_buf_pos.tail].flag_register = twi_bufor[twi_buf_pos.tail].flag_mask;	//set read done flag
    181c:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    1820:	e6 95       	lsr	r30
    1822:	e6 95       	lsr	r30
    1824:	e6 95       	lsr	r30
    1826:	e7 70       	andi	r30, 0x07	; 7
    1828:	8e 9f       	mul	r24, r30
    182a:	f0 01       	movw	r30, r0
    182c:	11 24       	eor	r1, r1
    182e:	e6 58       	subi	r30, 0x86	; 134
    1830:	fd 4f       	sbci	r31, 0xFD	; 253
    1832:	a0 89       	ldd	r26, Z+16	; 0x10
    1834:	b1 89       	ldd	r27, Z+17	; 0x11
    1836:	92 89       	ldd	r25, Z+18	; 0x12
    1838:	9c 93       	st	X, r25
void TWI_start(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA)|(1<<TWIE);
}

void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
    183a:	95 e9       	ldi	r25, 0x95	; 149
    183c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

		case stop_reading:
			*twi_bufor[twi_buf_pos.tail].bufor_ref++ = TWDR0;	//read last received byte
			*twi_bufor[twi_buf_pos.tail].flag_register = twi_bufor[twi_buf_pos.tail].flag_mask;	//set read done flag
			TWI_stop();
			twi_bufor[twi_buf_pos.tail].status = done;
    1840:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    1844:	e6 95       	lsr	r30
    1846:	e6 95       	lsr	r30
    1848:	e6 95       	lsr	r30
    184a:	e7 70       	andi	r30, 0x07	; 7
    184c:	8e 9f       	mul	r24, r30
    184e:	f0 01       	movw	r30, r0
    1850:	11 24       	eor	r1, r1
    1852:	e6 58       	subi	r30, 0x86	; 134
    1854:	fd 4f       	sbci	r31, 0xFD	; 253
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	83 8b       	std	Z+19, r24	; 0x13
			break;
    185a:	67 c0       	rjmp	.+206    	; 0x192a <__vector_24+0x41a>

		case write:
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){	//if more than 1 char to write
    185c:	84 e1       	ldi	r24, 0x14	; 20
    185e:	84 9f       	mul	r24, r20
    1860:	f0 01       	movw	r30, r0
    1862:	85 9f       	mul	r24, r21
    1864:	f0 0d       	add	r31, r0
    1866:	11 24       	eor	r1, r1
    1868:	e6 58       	subi	r30, 0x86	; 134
    186a:	fd 4f       	sbci	r31, 0xFD	; 253
    186c:	87 85       	ldd	r24, Z+15	; 0x0f
    186e:	82 30       	cpi	r24, 0x02	; 2
    1870:	e8 f0       	brcs	.+58     	; 0x18ac <__vector_24+0x39c>
				TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
    1872:	84 e1       	ldi	r24, 0x14	; 20
    1874:	84 9f       	mul	r24, r20
    1876:	f0 01       	movw	r30, r0
    1878:	85 9f       	mul	r24, r21
    187a:	f0 0d       	add	r31, r0
    187c:	11 24       	eor	r1, r1
    187e:	e6 58       	subi	r30, 0x86	; 134
    1880:	fd 4f       	sbci	r31, 0xFD	; 253
    1882:	92 81       	ldd	r25, Z+2	; 0x02
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    1884:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    1888:	95 e8       	ldi	r25, 0x85	; 133
    188a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;

		case write:
			if (twi_bufor[twi_buf_pos.tail].lenght > 1){	//if more than 1 char to write
				TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
				twi_bufor[twi_buf_pos.tail].status = write;
    188e:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    1892:	e6 95       	lsr	r30
    1894:	e6 95       	lsr	r30
    1896:	e6 95       	lsr	r30
    1898:	e7 70       	andi	r30, 0x07	; 7
    189a:	8e 9f       	mul	r24, r30
    189c:	f0 01       	movw	r30, r0
    189e:	11 24       	eor	r1, r1
    18a0:	e6 58       	subi	r30, 0x86	; 134
    18a2:	fd 4f       	sbci	r31, 0xFD	; 253
    18a4:	8b e0       	ldi	r24, 0x0B	; 11
    18a6:	83 8b       	std	Z+19, r24	; 0x13
				twi_bufor[twi_buf_pos.tail].buf_pos = 0;
    18a8:	14 86       	std	Z+12, r1	; 0x0c
    18aa:	1b c0       	rjmp	.+54     	; 0x18e2 <__vector_24+0x3d2>
			}

			else {	//only 1 byte to send
				TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
    18ac:	84 e1       	ldi	r24, 0x14	; 20
    18ae:	84 9f       	mul	r24, r20
    18b0:	f0 01       	movw	r30, r0
    18b2:	85 9f       	mul	r24, r21
    18b4:	f0 0d       	add	r31, r0
    18b6:	11 24       	eor	r1, r1
    18b8:	e6 58       	subi	r30, 0x86	; 134
    18ba:	fd 4f       	sbci	r31, 0xFD	; 253
    18bc:	92 81       	ldd	r25, Z+2	; 0x02
void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
}

void TWI_write(uint8_t bajt) {
	TWDR0 = bajt;
    18be:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWIE);
    18c2:	95 e8       	ldi	r25, 0x85	; 133
    18c4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				twi_bufor[twi_buf_pos.tail].buf_pos = 0;
			}

			else {	//only 1 byte to send
				TWI_write(twi_bufor[twi_buf_pos.tail].bufor[0]);
				twi_bufor[twi_buf_pos.tail].status = last_byte_write;
    18c8:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    18cc:	e6 95       	lsr	r30
    18ce:	e6 95       	lsr	r30
    18d0:	e6 95       	lsr	r30
    18d2:	e7 70       	andi	r30, 0x07	; 7
    18d4:	8e 9f       	mul	r24, r30
    18d6:	f0 01       	movw	r30, r0
    18d8:	11 24       	eor	r1, r1
    18da:	e6 58       	subi	r30, 0x86	; 134
    18dc:	fd 4f       	sbci	r31, 0xFD	; 253
    18de:	8c e0       	ldi	r24, 0x0C	; 12
    18e0:	83 8b       	std	Z+19, r24	; 0x13
			}
			twi_bufor[twi_buf_pos.tail].lenght --;
    18e2:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    18e6:	e6 95       	lsr	r30
    18e8:	e6 95       	lsr	r30
    18ea:	e6 95       	lsr	r30
    18ec:	e7 70       	andi	r30, 0x07	; 7
    18ee:	84 e1       	ldi	r24, 0x14	; 20
    18f0:	e8 9f       	mul	r30, r24
    18f2:	f0 01       	movw	r30, r0
    18f4:	11 24       	eor	r1, r1
    18f6:	e6 58       	subi	r30, 0x86	; 134
    18f8:	fd 4f       	sbci	r31, 0xFD	; 253
    18fa:	87 85       	ldd	r24, Z+15	; 0x0f
    18fc:	81 50       	subi	r24, 0x01	; 1
    18fe:	87 87       	std	Z+15, r24	; 0x0f
			break;
    1900:	14 c0       	rjmp	.+40     	; 0x192a <__vector_24+0x41a>
void TWI_start(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA)|(1<<TWIE);
}

void TWI_stop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWIE);
    1902:	85 e9       	ldi	r24, 0x95	; 149
    1904:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			twi_bufor[twi_buf_pos.tail].lenght --;
			break;

		case last_byte_write:
			TWI_stop();
			twi_bufor[twi_buf_pos.tail].status = done;
    1908:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_buf_pos>
    190c:	e6 95       	lsr	r30
    190e:	e6 95       	lsr	r30
    1910:	e6 95       	lsr	r30
    1912:	e7 70       	andi	r30, 0x07	; 7
    1914:	84 e1       	ldi	r24, 0x14	; 20
    1916:	e8 9f       	mul	r30, r24
    1918:	f0 01       	movw	r30, r0
    191a:	11 24       	eor	r1, r1
    191c:	e6 58       	subi	r30, 0x86	; 134
    191e:	fd 4f       	sbci	r31, 0xFD	; 253
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	83 8b       	std	Z+19, r24	; 0x13
			twi_reset_counter = 0xFF;	//turn of timer, sending procedure finished correctly
    1924:	8f ef       	ldi	r24, 0xFF	; 255
    1926:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <twi_reset_counter>

		default:

			break;
	}
    192a:	ff 91       	pop	r31
    192c:	ef 91       	pop	r30
    192e:	bf 91       	pop	r27
    1930:	af 91       	pop	r26
    1932:	9f 91       	pop	r25
    1934:	8f 91       	pop	r24
    1936:	5f 91       	pop	r21
    1938:	4f 91       	pop	r20
    193a:	3f 91       	pop	r19
    193c:	2f 91       	pop	r18
    193e:	0f 90       	pop	r0
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	0f 90       	pop	r0
    1944:	1f 90       	pop	r1
    1946:	18 95       	reti

00001948 <InitUartCOM>:
void SendStringUint(char string[], uint16_t number)
{
	SendString(string);
	SendUint(number);
	SendEnter();
}
    1948:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <InitUartCOM_HW>
    194c:	08 95       	ret

0000194e <ReceiveChar>:
    194e:	88 23       	and	r24, r24
    1950:	91 f0       	breq	.+36     	; 0x1976 <ReceiveChar+0x28>
    1952:	8a 30       	cpi	r24, 0x0A	; 10
    1954:	81 f0       	breq	.+32     	; 0x1976 <ReceiveChar+0x28>
    1956:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <RxHead>
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	e6 5e       	subi	r30, 0xE6	; 230
    195e:	fc 4f       	sbci	r31, 0xFC	; 252
    1960:	80 83       	st	Z, r24
    1962:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <RxHead>
    1966:	8f 5f       	subi	r24, 0xFF	; 255
    1968:	8f 71       	andi	r24, 0x1F	; 31
    196a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <RxHead>
    196e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <RxHead>
    1972:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <RxTail>
    1976:	08 95       	ret

00001978 <SendString>:
    1978:	0f 93       	push	r16
    197a:	1f 93       	push	r17
    197c:	cf 93       	push	r28
    197e:	fc 01       	movw	r30, r24
    1980:	80 81       	ld	r24, Z
    1982:	88 23       	and	r24, r24
    1984:	59 f0       	breq	.+22     	; 0x199c <SendString+0x24>
    1986:	8f 01       	movw	r16, r30
    1988:	c0 e0       	ldi	r28, 0x00	; 0
    198a:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <PutCharToBuffor>
    198e:	cf 5f       	subi	r28, 0xFF	; 255
    1990:	f8 01       	movw	r30, r16
    1992:	ec 0f       	add	r30, r28
    1994:	f1 1d       	adc	r31, r1
    1996:	80 81       	ld	r24, Z
    1998:	81 11       	cpse	r24, r1
    199a:	f7 cf       	rjmp	.-18     	; 0x198a <SendString+0x12>
    199c:	cf 91       	pop	r28
    199e:	1f 91       	pop	r17
    19a0:	0f 91       	pop	r16
    19a2:	08 95       	ret

000019a4 <SendEnter>:
    19a4:	8d e0       	ldi	r24, 0x0D	; 13
    19a6:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <PutCharToBuffor>
    19aa:	8a e0       	ldi	r24, 0x0A	; 10
    19ac:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <PutCharToBuffor>
    19b0:	08 95       	ret

000019b2 <SendLine>:
    19b2:	0e 94 bc 0c 	call	0x1978	; 0x1978 <SendString>
    19b6:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <SendEnter>
    19ba:	08 95       	ret

000019bc <SendInt>:
    19bc:	4f 92       	push	r4
    19be:	5f 92       	push	r5
    19c0:	6f 92       	push	r6
    19c2:	7f 92       	push	r7
    19c4:	8f 92       	push	r8
    19c6:	9f 92       	push	r9
    19c8:	af 92       	push	r10
    19ca:	bf 92       	push	r11
    19cc:	cf 92       	push	r12
    19ce:	df 92       	push	r13
    19d0:	ef 92       	push	r14
    19d2:	ff 92       	push	r15
    19d4:	0f 93       	push	r16
    19d6:	1f 93       	push	r17
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	a8 97       	sbiw	r28, 0x28	; 40
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	f8 94       	cli
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	cd bf       	out	0x3d, r28	; 61
    19ec:	6b 01       	movw	r12, r22
    19ee:	7c 01       	movw	r14, r24
    19f0:	fe 01       	movw	r30, r28
    19f2:	75 96       	adiw	r30, 0x15	; 21
    19f4:	8e 01       	movw	r16, r28
    19f6:	0f 5f       	subi	r16, 0xFF	; 255
    19f8:	1f 4f       	sbci	r17, 0xFF	; 255
    19fa:	ce 01       	movw	r24, r28
    19fc:	4d 96       	adiw	r24, 0x1d	; 29
    19fe:	d8 01       	movw	r26, r16
    1a00:	11 92       	st	Z+, r1
    1a02:	1d 92       	st	X+, r1
    1a04:	e8 17       	cp	r30, r24
    1a06:	f9 07       	cpc	r31, r25
    1a08:	d9 f7       	brne	.-10     	; 0x1a00 <SendInt+0x44>
    1a0a:	ff 20       	and	r15, r15
    1a0c:	0c f0       	brlt	.+2      	; 0x1a10 <SendInt+0x54>
    1a0e:	5d c0       	rjmp	.+186    	; 0x1aca <SendInt+0x10e>
    1a10:	81 c0       	rjmp	.+258    	; 0x1b14 <SendInt+0x158>
    1a12:	5e 01       	movw	r10, r28
    1a14:	26 e1       	ldi	r18, 0x16	; 22
    1a16:	a2 0e       	add	r10, r18
    1a18:	b1 1c       	adc	r11, r1
    1a1a:	99 24       	eor	r9, r9
    1a1c:	93 94       	inc	r9
    1a1e:	0f 2e       	mov	r0, r31
    1a20:	fa e0       	ldi	r31, 0x0A	; 10
    1a22:	4f 2e       	mov	r4, r31
    1a24:	51 2c       	mov	r5, r1
    1a26:	61 2c       	mov	r6, r1
    1a28:	71 2c       	mov	r7, r1
    1a2a:	f0 2d       	mov	r31, r0
    1a2c:	01 c0       	rjmp	.+2      	; 0x1a30 <SendInt+0x74>
    1a2e:	98 2e       	mov	r9, r24
    1a30:	c7 01       	movw	r24, r14
    1a32:	b6 01       	movw	r22, r12
    1a34:	a3 01       	movw	r20, r6
    1a36:	92 01       	movw	r18, r4
    1a38:	0e 94 05 11 	call	0x220a	; 0x220a <__divmodsi4>
    1a3c:	20 e3       	ldi	r18, 0x30	; 48
    1a3e:	26 0f       	add	r18, r22
    1a40:	d5 01       	movw	r26, r10
    1a42:	2d 93       	st	X+, r18
    1a44:	5d 01       	movw	r10, r26
    1a46:	a7 01       	movw	r20, r14
    1a48:	96 01       	movw	r18, r12
    1a4a:	26 1b       	sub	r18, r22
    1a4c:	37 0b       	sbc	r19, r23
    1a4e:	48 0b       	sbc	r20, r24
    1a50:	59 0b       	sbc	r21, r25
    1a52:	ca 01       	movw	r24, r20
    1a54:	b9 01       	movw	r22, r18
    1a56:	a3 01       	movw	r20, r6
    1a58:	92 01       	movw	r18, r4
    1a5a:	0e 94 05 11 	call	0x220a	; 0x220a <__divmodsi4>
    1a5e:	69 01       	movw	r12, r18
    1a60:	7a 01       	movw	r14, r20
    1a62:	23 2b       	or	r18, r19
    1a64:	24 2b       	or	r18, r20
    1a66:	25 2b       	or	r18, r21
    1a68:	21 f0       	breq	.+8      	; 0x1a72 <SendInt+0xb6>
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	89 0d       	add	r24, r9
    1a6e:	84 31       	cpi	r24, 0x14	; 20
    1a70:	f1 f6       	brne	.-68     	; 0x1a2e <SendInt+0x72>
    1a72:	21 e0       	ldi	r18, 0x01	; 1
    1a74:	29 0d       	add	r18, r9
    1a76:	88 20       	and	r8, r8
    1a78:	54 f4       	brge	.+20     	; 0x1a8e <SendInt+0xd2>
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <SendInt+0xc4>
    1a7c:	21 e0       	ldi	r18, 0x01	; 1
    1a7e:	91 2c       	mov	r9, r1
    1a80:	fe 01       	movw	r30, r28
    1a82:	e2 0f       	add	r30, r18
    1a84:	f1 1d       	adc	r31, r1
    1a86:	8d e2       	ldi	r24, 0x2D	; 45
    1a88:	85 8b       	std	Z+21, r24	; 0x15
    1a8a:	22 e0       	ldi	r18, 0x02	; 2
    1a8c:	29 0d       	add	r18, r9
    1a8e:	21 11       	cpse	r18, r1
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <SendInt+0xda>
    1a92:	0f c0       	rjmp	.+30     	; 0x1ab2 <SendInt+0xf6>
    1a94:	21 e0       	ldi	r18, 0x01	; 1
    1a96:	e5 e1       	ldi	r30, 0x15	; 21
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	ec 0f       	add	r30, r28
    1a9c:	fd 1f       	adc	r31, r29
    1a9e:	e2 0f       	add	r30, r18
    1aa0:	f1 1d       	adc	r31, r1
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	92 91       	ld	r25, -Z
    1aa6:	d8 01       	movw	r26, r16
    1aa8:	9d 93       	st	X+, r25
    1aaa:	8d 01       	movw	r16, r26
    1aac:	8f 5f       	subi	r24, 0xFF	; 255
    1aae:	82 17       	cp	r24, r18
    1ab0:	c8 f3       	brcs	.-14     	; 0x1aa4 <SendInt+0xe8>
    1ab2:	e1 e0       	ldi	r30, 0x01	; 1
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	ec 0f       	add	r30, r28
    1ab8:	fd 1f       	adc	r31, r29
    1aba:	e2 0f       	add	r30, r18
    1abc:	f1 1d       	adc	r31, r1
    1abe:	10 82       	st	Z, r1
    1ac0:	ce 01       	movw	r24, r28
    1ac2:	01 96       	adiw	r24, 0x01	; 1
    1ac4:	0e 94 bc 0c 	call	0x1978	; 0x1978 <SendString>
    1ac8:	53 c0       	rjmp	.+166    	; 0x1b70 <SendInt+0x1b4>
    1aca:	0f 2e       	mov	r0, r31
    1acc:	fa e0       	ldi	r31, 0x0A	; 10
    1ace:	8f 2e       	mov	r8, r31
    1ad0:	91 2c       	mov	r9, r1
    1ad2:	a1 2c       	mov	r10, r1
    1ad4:	b1 2c       	mov	r11, r1
    1ad6:	f0 2d       	mov	r31, r0
    1ad8:	c7 01       	movw	r24, r14
    1ada:	b6 01       	movw	r22, r12
    1adc:	a5 01       	movw	r20, r10
    1ade:	94 01       	movw	r18, r8
    1ae0:	0e 94 05 11 	call	0x220a	; 0x220a <__divmodsi4>
    1ae4:	20 e3       	ldi	r18, 0x30	; 48
    1ae6:	26 0f       	add	r18, r22
    1ae8:	2d 8b       	std	Y+21, r18	; 0x15
    1aea:	a7 01       	movw	r20, r14
    1aec:	96 01       	movw	r18, r12
    1aee:	26 1b       	sub	r18, r22
    1af0:	37 0b       	sbc	r19, r23
    1af2:	48 0b       	sbc	r20, r24
    1af4:	59 0b       	sbc	r21, r25
    1af6:	ca 01       	movw	r24, r20
    1af8:	b9 01       	movw	r22, r18
    1afa:	a5 01       	movw	r20, r10
    1afc:	94 01       	movw	r18, r8
    1afe:	0e 94 05 11 	call	0x220a	; 0x220a <__divmodsi4>
    1b02:	69 01       	movw	r12, r18
    1b04:	7a 01       	movw	r14, r20
    1b06:	23 2b       	or	r18, r19
    1b08:	24 2b       	or	r18, r20
    1b0a:	25 2b       	or	r18, r21
    1b0c:	19 f2       	breq	.-122    	; 0x1a94 <SendInt+0xd8>
    1b0e:	88 24       	eor	r8, r8
    1b10:	83 94       	inc	r8
    1b12:	7f cf       	rjmp	.-258    	; 0x1a12 <SendInt+0x56>
    1b14:	f0 94       	com	r15
    1b16:	e0 94       	com	r14
    1b18:	d0 94       	com	r13
    1b1a:	c0 94       	com	r12
    1b1c:	c1 1c       	adc	r12, r1
    1b1e:	d1 1c       	adc	r13, r1
    1b20:	e1 1c       	adc	r14, r1
    1b22:	f1 1c       	adc	r15, r1
    1b24:	0f 2e       	mov	r0, r31
    1b26:	fa e0       	ldi	r31, 0x0A	; 10
    1b28:	8f 2e       	mov	r8, r31
    1b2a:	91 2c       	mov	r9, r1
    1b2c:	a1 2c       	mov	r10, r1
    1b2e:	b1 2c       	mov	r11, r1
    1b30:	f0 2d       	mov	r31, r0
    1b32:	c7 01       	movw	r24, r14
    1b34:	b6 01       	movw	r22, r12
    1b36:	a5 01       	movw	r20, r10
    1b38:	94 01       	movw	r18, r8
    1b3a:	0e 94 05 11 	call	0x220a	; 0x220a <__divmodsi4>
    1b3e:	20 e3       	ldi	r18, 0x30	; 48
    1b40:	26 0f       	add	r18, r22
    1b42:	2d 8b       	std	Y+21, r18	; 0x15
    1b44:	a7 01       	movw	r20, r14
    1b46:	96 01       	movw	r18, r12
    1b48:	26 1b       	sub	r18, r22
    1b4a:	37 0b       	sbc	r19, r23
    1b4c:	48 0b       	sbc	r20, r24
    1b4e:	59 0b       	sbc	r21, r25
    1b50:	ca 01       	movw	r24, r20
    1b52:	b9 01       	movw	r22, r18
    1b54:	a5 01       	movw	r20, r10
    1b56:	94 01       	movw	r18, r8
    1b58:	0e 94 05 11 	call	0x220a	; 0x220a <__divmodsi4>
    1b5c:	69 01       	movw	r12, r18
    1b5e:	7a 01       	movw	r14, r20
    1b60:	23 2b       	or	r18, r19
    1b62:	24 2b       	or	r18, r20
    1b64:	25 2b       	or	r18, r21
    1b66:	09 f4       	brne	.+2      	; 0x1b6a <SendInt+0x1ae>
    1b68:	89 cf       	rjmp	.-238    	; 0x1a7c <SendInt+0xc0>
    1b6a:	88 24       	eor	r8, r8
    1b6c:	8a 94       	dec	r8
    1b6e:	51 cf       	rjmp	.-350    	; 0x1a12 <SendInt+0x56>
    1b70:	a8 96       	adiw	r28, 0x28	; 40
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	de bf       	out	0x3e, r29	; 62
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	cd bf       	out	0x3d, r28	; 61
    1b7c:	df 91       	pop	r29
    1b7e:	cf 91       	pop	r28
    1b80:	1f 91       	pop	r17
    1b82:	0f 91       	pop	r16
    1b84:	ff 90       	pop	r15
    1b86:	ef 90       	pop	r14
    1b88:	df 90       	pop	r13
    1b8a:	cf 90       	pop	r12
    1b8c:	bf 90       	pop	r11
    1b8e:	af 90       	pop	r10
    1b90:	9f 90       	pop	r9
    1b92:	8f 90       	pop	r8
    1b94:	7f 90       	pop	r7
    1b96:	6f 90       	pop	r6
    1b98:	5f 90       	pop	r5
    1b9a:	4f 90       	pop	r4
    1b9c:	08 95       	ret

00001b9e <SendStringInt>:
    1b9e:	cf 92       	push	r12
    1ba0:	df 92       	push	r13
    1ba2:	ef 92       	push	r14
    1ba4:	ff 92       	push	r15
    1ba6:	6a 01       	movw	r12, r20
    1ba8:	7b 01       	movw	r14, r22
    1baa:	0e 94 bc 0c 	call	0x1978	; 0x1978 <SendString>
    1bae:	c7 01       	movw	r24, r14
    1bb0:	b6 01       	movw	r22, r12
    1bb2:	0e 94 de 0c 	call	0x19bc	; 0x19bc <SendInt>
    1bb6:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <SendEnter>
    1bba:	ff 90       	pop	r15
    1bbc:	ef 90       	pop	r14
    1bbe:	df 90       	pop	r13
    1bc0:	cf 90       	pop	r12
    1bc2:	08 95       	ret

00001bc4 <CheckRxBuffor>:
		string[pozycja] = 0;
		SendString(string);
}

void CheckRxBuffor(void)
{
    1bc4:	cf 93       	push	r28
	if (RxHead != RxTail)	//Check if buffer is not empty
    1bc6:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <RxHead>
    1bca:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <RxTail>
    1bce:	98 17       	cp	r25, r24
    1bd0:	29 f1       	breq	.+74     	; 0x1c1c <CheckRxBuffor+0x58>
	{
		uint8_t i = RxTail;
    1bd2:	c0 91 63 01 	lds	r28, 0x0163	; 0x800163 <RxTail>

		while(i != RxHead)	//search for end of line
    1bd6:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <RxHead>
    1bda:	c8 17       	cp	r28, r24
    1bdc:	f9 f0       	breq	.+62     	; 0x1c1c <CheckRxBuffor+0x58>
		{
			//If end of line process Command
			
			if (RxBuffor[i] == 13)
    1bde:	ec 2f       	mov	r30, r28
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	e6 5e       	subi	r30, 0xE6	; 230
    1be4:	fc 4f       	sbci	r31, 0xFC	; 252
    1be6:	80 81       	ld	r24, Z
    1be8:	8d 30       	cpi	r24, 0x0D	; 13
    1bea:	91 f4       	brne	.+36     	; 0x1c10 <CheckRxBuffor+0x4c>
    1bec:	07 c0       	rjmp	.+14     	; 0x1bfc <CheckRxBuffor+0x38>
    1bee:	ec 2f       	mov	r30, r28
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	e6 5e       	subi	r30, 0xE6	; 230
    1bf4:	fc 4f       	sbci	r31, 0xFC	; 252
    1bf6:	80 81       	ld	r24, Z
    1bf8:	8d 30       	cpi	r24, 0x0D	; 13
    1bfa:	51 f4       	brne	.+20     	; 0x1c10 <CheckRxBuffor+0x4c>
			{
				ProcessString(RxTail, i);
    1bfc:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <RxTail>
    1c00:	6c 2f       	mov	r22, r28
    1c02:	0e 94 d5 08 	call	0x11aa	; 0x11aa <ProcessString>
				i = (i+1) & RX_SIZE_BIN;
    1c06:	cf 5f       	subi	r28, 0xFF	; 255
    1c08:	cf 71       	andi	r28, 0x1F	; 31
				RxTail = i;
    1c0a:	c0 93 63 01 	sts	0x0163, r28	; 0x800163 <RxTail>
				break;
    1c0e:	06 c0       	rjmp	.+12     	; 0x1c1c <CheckRxBuffor+0x58>
			}

			i = (i+1) & RX_SIZE_BIN;
    1c10:	cf 5f       	subi	r28, 0xFF	; 255
    1c12:	cf 71       	andi	r28, 0x1F	; 31
{
	if (RxHead != RxTail)	//Check if buffer is not empty
	{
		uint8_t i = RxTail;

		while(i != RxHead)	//search for end of line
    1c14:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <RxHead>
    1c18:	8c 13       	cpse	r24, r28
    1c1a:	e9 cf       	rjmp	.-46     	; 0x1bee <CheckRxBuffor+0x2a>
			}

			i = (i+1) & RX_SIZE_BIN;
		}
	}
    1c1c:	cf 91       	pop	r28
    1c1e:	08 95       	ret

00001c20 <InitUartCOM_HW>:


	UBRR0 = 9;	//100k at 16MHz clock

	//Init COM Uart
	UCSR0B = (1<<RXEN0) | (1<<RXCIE0) |
    1c20:	83 e0       	ldi	r24, 0x03	; 3
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1c28:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1c2c:	88 ed       	ldi	r24, 0xD8	; 216
    1c2e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1c32:	08 95       	ret

00001c34 <PutCharToBuffor>:
}


void PutCharToBuffor(uint8_t x)
{
	if ((UCSR0A & (1<<UDRE0)) && (TxHead == TxTail))	//check if can put next char
    1c34:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1c38:	95 ff       	sbrs	r25, 5
    1c3a:	09 c0       	rjmp	.+18     	; 0x1c4e <PutCharToBuffor+0x1a>
    1c3c:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <TxHead>
    1c40:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <TxTail>
    1c44:	29 13       	cpse	r18, r25
    1c46:	03 c0       	rjmp	.+6      	; 0x1c4e <PutCharToBuffor+0x1a>
	{
		UDR0 = x;		
    1c48:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1c4c:	08 95       	ret
	}
	else	//if not ready put char to sending queue
	{
		TxBuffor[TxHead] = x;
    1c4e:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <TxHead>
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	e6 5c       	subi	r30, 0xC6	; 198
    1c56:	fc 4f       	sbci	r31, 0xFC	; 252
    1c58:	80 83       	st	Z, r24
		TxHead = (TxHead+1) & TX_SIZE_BIN;
    1c5a:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <TxHead>
    1c5e:	8f 5f       	subi	r24, 0xFF	; 255
    1c60:	8f 77       	andi	r24, 0x7F	; 127
    1c62:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <TxHead>
    1c66:	08 95       	ret

00001c68 <__vector_20>:
	}
}


ISR (USART0_TX_vect)
{
    1c68:	1f 92       	push	r1
    1c6a:	0f 92       	push	r0
    1c6c:	0f b6       	in	r0, 0x3f	; 63
    1c6e:	0f 92       	push	r0
    1c70:	11 24       	eor	r1, r1
    1c72:	8f 93       	push	r24
    1c74:	9f 93       	push	r25
    1c76:	ef 93       	push	r30
    1c78:	ff 93       	push	r31
	if (TxTail == TxHead)
    1c7a:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <TxTail>
    1c7e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <TxHead>
    1c82:	98 13       	cpse	r25, r24
    1c84:	03 c0       	rjmp	.+6      	; 0x1c8c <__vector_20+0x24>
	{
		uint8_t x = UDR0;
    1c86:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1c8a:	0e c0       	rjmp	.+28     	; 0x1ca8 <__vector_20+0x40>
	}

	else
	{
		UDR0 = TxBuffor[TxTail];
    1c8c:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <TxTail>
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	e6 5c       	subi	r30, 0xC6	; 198
    1c94:	fc 4f       	sbci	r31, 0xFC	; 252
    1c96:	80 81       	ld	r24, Z
    1c98:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		TxTail = (TxTail+1) & TX_SIZE_BIN;
    1c9c:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <TxTail>
    1ca0:	8f 5f       	subi	r24, 0xFF	; 255
    1ca2:	8f 77       	andi	r24, 0x7F	; 127
    1ca4:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <TxTail>
	}
}
    1ca8:	ff 91       	pop	r31
    1caa:	ef 91       	pop	r30
    1cac:	9f 91       	pop	r25
    1cae:	8f 91       	pop	r24
    1cb0:	0f 90       	pop	r0
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	0f 90       	pop	r0
    1cb6:	1f 90       	pop	r1
    1cb8:	18 95       	reti

00001cba <__vector_18>:

ISR (USART0_RX_vect)	//COM Rx
{
    1cba:	1f 92       	push	r1
    1cbc:	0f 92       	push	r0
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	0f 92       	push	r0
    1cc2:	11 24       	eor	r1, r1
    1cc4:	2f 93       	push	r18
    1cc6:	3f 93       	push	r19
    1cc8:	4f 93       	push	r20
    1cca:	5f 93       	push	r21
    1ccc:	6f 93       	push	r22
    1cce:	7f 93       	push	r23
    1cd0:	8f 93       	push	r24
    1cd2:	9f 93       	push	r25
    1cd4:	af 93       	push	r26
    1cd6:	bf 93       	push	r27
    1cd8:	ef 93       	push	r30
    1cda:	ff 93       	push	r31
// 	uint8_t x = UDR0;
// 	ReceiveChar(x);
// 	PutCharToBuffor(x);
	ReceiveChar(UDR0);
    1cdc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1ce0:	0e 94 a7 0c 	call	0x194e	; 0x194e <ReceiveChar>
    1ce4:	ff 91       	pop	r31
    1ce6:	ef 91       	pop	r30
    1ce8:	bf 91       	pop	r27
    1cea:	af 91       	pop	r26
    1cec:	9f 91       	pop	r25
    1cee:	8f 91       	pop	r24
    1cf0:	7f 91       	pop	r23
    1cf2:	6f 91       	pop	r22
    1cf4:	5f 91       	pop	r21
    1cf6:	4f 91       	pop	r20
    1cf8:	3f 91       	pop	r19
    1cfa:	2f 91       	pop	r18
    1cfc:	0f 90       	pop	r0
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	0f 90       	pop	r0
    1d02:	1f 90       	pop	r1
    1d04:	18 95       	reti

00001d06 <__subsf3>:
    1d06:	50 58       	subi	r21, 0x80	; 128

00001d08 <__addsf3>:
    1d08:	bb 27       	eor	r27, r27
    1d0a:	aa 27       	eor	r26, r26
    1d0c:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__addsf3x>
    1d10:	0c 94 42 10 	jmp	0x2084	; 0x2084 <__fp_round>
    1d14:	0e 94 34 10 	call	0x2068	; 0x2068 <__fp_pscA>
    1d18:	38 f0       	brcs	.+14     	; 0x1d28 <__addsf3+0x20>
    1d1a:	0e 94 3b 10 	call	0x2076	; 0x2076 <__fp_pscB>
    1d1e:	20 f0       	brcs	.+8      	; 0x1d28 <__addsf3+0x20>
    1d20:	39 f4       	brne	.+14     	; 0x1d30 <__addsf3+0x28>
    1d22:	9f 3f       	cpi	r25, 0xFF	; 255
    1d24:	19 f4       	brne	.+6      	; 0x1d2c <__addsf3+0x24>
    1d26:	26 f4       	brtc	.+8      	; 0x1d30 <__addsf3+0x28>
    1d28:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <__fp_nan>
    1d2c:	0e f4       	brtc	.+2      	; 0x1d30 <__addsf3+0x28>
    1d2e:	e0 95       	com	r30
    1d30:	e7 fb       	bst	r30, 7
    1d32:	0c 94 04 10 	jmp	0x2008	; 0x2008 <__fp_inf>

00001d36 <__addsf3x>:
    1d36:	e9 2f       	mov	r30, r25
    1d38:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__fp_split3>
    1d3c:	58 f3       	brcs	.-42     	; 0x1d14 <__addsf3+0xc>
    1d3e:	ba 17       	cp	r27, r26
    1d40:	62 07       	cpc	r22, r18
    1d42:	73 07       	cpc	r23, r19
    1d44:	84 07       	cpc	r24, r20
    1d46:	95 07       	cpc	r25, r21
    1d48:	20 f0       	brcs	.+8      	; 0x1d52 <__addsf3x+0x1c>
    1d4a:	79 f4       	brne	.+30     	; 0x1d6a <__addsf3x+0x34>
    1d4c:	a6 f5       	brtc	.+104    	; 0x1db6 <__addsf3x+0x80>
    1d4e:	0c 94 75 10 	jmp	0x20ea	; 0x20ea <__fp_zero>
    1d52:	0e f4       	brtc	.+2      	; 0x1d56 <__addsf3x+0x20>
    1d54:	e0 95       	com	r30
    1d56:	0b 2e       	mov	r0, r27
    1d58:	ba 2f       	mov	r27, r26
    1d5a:	a0 2d       	mov	r26, r0
    1d5c:	0b 01       	movw	r0, r22
    1d5e:	b9 01       	movw	r22, r18
    1d60:	90 01       	movw	r18, r0
    1d62:	0c 01       	movw	r0, r24
    1d64:	ca 01       	movw	r24, r20
    1d66:	a0 01       	movw	r20, r0
    1d68:	11 24       	eor	r1, r1
    1d6a:	ff 27       	eor	r31, r31
    1d6c:	59 1b       	sub	r21, r25
    1d6e:	99 f0       	breq	.+38     	; 0x1d96 <__addsf3x+0x60>
    1d70:	59 3f       	cpi	r21, 0xF9	; 249
    1d72:	50 f4       	brcc	.+20     	; 0x1d88 <__addsf3x+0x52>
    1d74:	50 3e       	cpi	r21, 0xE0	; 224
    1d76:	68 f1       	brcs	.+90     	; 0x1dd2 <__addsf3x+0x9c>
    1d78:	1a 16       	cp	r1, r26
    1d7a:	f0 40       	sbci	r31, 0x00	; 0
    1d7c:	a2 2f       	mov	r26, r18
    1d7e:	23 2f       	mov	r18, r19
    1d80:	34 2f       	mov	r19, r20
    1d82:	44 27       	eor	r20, r20
    1d84:	58 5f       	subi	r21, 0xF8	; 248
    1d86:	f3 cf       	rjmp	.-26     	; 0x1d6e <__addsf3x+0x38>
    1d88:	46 95       	lsr	r20
    1d8a:	37 95       	ror	r19
    1d8c:	27 95       	ror	r18
    1d8e:	a7 95       	ror	r26
    1d90:	f0 40       	sbci	r31, 0x00	; 0
    1d92:	53 95       	inc	r21
    1d94:	c9 f7       	brne	.-14     	; 0x1d88 <__addsf3x+0x52>
    1d96:	7e f4       	brtc	.+30     	; 0x1db6 <__addsf3x+0x80>
    1d98:	1f 16       	cp	r1, r31
    1d9a:	ba 0b       	sbc	r27, r26
    1d9c:	62 0b       	sbc	r22, r18
    1d9e:	73 0b       	sbc	r23, r19
    1da0:	84 0b       	sbc	r24, r20
    1da2:	ba f0       	brmi	.+46     	; 0x1dd2 <__addsf3x+0x9c>
    1da4:	91 50       	subi	r25, 0x01	; 1
    1da6:	a1 f0       	breq	.+40     	; 0x1dd0 <__addsf3x+0x9a>
    1da8:	ff 0f       	add	r31, r31
    1daa:	bb 1f       	adc	r27, r27
    1dac:	66 1f       	adc	r22, r22
    1dae:	77 1f       	adc	r23, r23
    1db0:	88 1f       	adc	r24, r24
    1db2:	c2 f7       	brpl	.-16     	; 0x1da4 <__addsf3x+0x6e>
    1db4:	0e c0       	rjmp	.+28     	; 0x1dd2 <__addsf3x+0x9c>
    1db6:	ba 0f       	add	r27, r26
    1db8:	62 1f       	adc	r22, r18
    1dba:	73 1f       	adc	r23, r19
    1dbc:	84 1f       	adc	r24, r20
    1dbe:	48 f4       	brcc	.+18     	; 0x1dd2 <__addsf3x+0x9c>
    1dc0:	87 95       	ror	r24
    1dc2:	77 95       	ror	r23
    1dc4:	67 95       	ror	r22
    1dc6:	b7 95       	ror	r27
    1dc8:	f7 95       	ror	r31
    1dca:	9e 3f       	cpi	r25, 0xFE	; 254
    1dcc:	08 f0       	brcs	.+2      	; 0x1dd0 <__addsf3x+0x9a>
    1dce:	b0 cf       	rjmp	.-160    	; 0x1d30 <__addsf3+0x28>
    1dd0:	93 95       	inc	r25
    1dd2:	88 0f       	add	r24, r24
    1dd4:	08 f0       	brcs	.+2      	; 0x1dd8 <__addsf3x+0xa2>
    1dd6:	99 27       	eor	r25, r25
    1dd8:	ee 0f       	add	r30, r30
    1dda:	97 95       	ror	r25
    1ddc:	87 95       	ror	r24
    1dde:	08 95       	ret

00001de0 <atan>:
    1de0:	df 93       	push	r29
    1de2:	dd 27       	eor	r29, r29
    1de4:	b9 2f       	mov	r27, r25
    1de6:	bf 77       	andi	r27, 0x7F	; 127
    1de8:	40 e8       	ldi	r20, 0x80	; 128
    1dea:	5f e3       	ldi	r21, 0x3F	; 63
    1dec:	16 16       	cp	r1, r22
    1dee:	17 06       	cpc	r1, r23
    1df0:	48 07       	cpc	r20, r24
    1df2:	5b 07       	cpc	r21, r27
    1df4:	18 f4       	brcc	.+6      	; 0x1dfc <atan+0x1c>
    1df6:	d9 2f       	mov	r29, r25
    1df8:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <inverse>
    1dfc:	9f 93       	push	r25
    1dfe:	8f 93       	push	r24
    1e00:	7f 93       	push	r23
    1e02:	6f 93       	push	r22
    1e04:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <square>
    1e08:	e6 ec       	ldi	r30, 0xC6	; 198
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	0e 94 0d 10 	call	0x201a	; 0x201a <__fp_powser>
    1e10:	0e 94 42 10 	call	0x2084	; 0x2084 <__fp_round>
    1e14:	2f 91       	pop	r18
    1e16:	3f 91       	pop	r19
    1e18:	4f 91       	pop	r20
    1e1a:	5f 91       	pop	r21
    1e1c:	0e 94 97 10 	call	0x212e	; 0x212e <__mulsf3x>
    1e20:	dd 23       	and	r29, r29
    1e22:	51 f0       	breq	.+20     	; 0x1e38 <atan+0x58>
    1e24:	90 58       	subi	r25, 0x80	; 128
    1e26:	a2 ea       	ldi	r26, 0xA2	; 162
    1e28:	2a ed       	ldi	r18, 0xDA	; 218
    1e2a:	3f e0       	ldi	r19, 0x0F	; 15
    1e2c:	49 ec       	ldi	r20, 0xC9	; 201
    1e2e:	5f e3       	ldi	r21, 0x3F	; 63
    1e30:	d0 78       	andi	r29, 0x80	; 128
    1e32:	5d 27       	eor	r21, r29
    1e34:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__addsf3x>
    1e38:	df 91       	pop	r29
    1e3a:	0c 94 42 10 	jmp	0x2084	; 0x2084 <__fp_round>

00001e3e <__divsf3>:
    1e3e:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__divsf3x>
    1e42:	0c 94 42 10 	jmp	0x2084	; 0x2084 <__fp_round>
    1e46:	0e 94 3b 10 	call	0x2076	; 0x2076 <__fp_pscB>
    1e4a:	58 f0       	brcs	.+22     	; 0x1e62 <__divsf3+0x24>
    1e4c:	0e 94 34 10 	call	0x2068	; 0x2068 <__fp_pscA>
    1e50:	40 f0       	brcs	.+16     	; 0x1e62 <__divsf3+0x24>
    1e52:	29 f4       	brne	.+10     	; 0x1e5e <__divsf3+0x20>
    1e54:	5f 3f       	cpi	r21, 0xFF	; 255
    1e56:	29 f0       	breq	.+10     	; 0x1e62 <__divsf3+0x24>
    1e58:	0c 94 04 10 	jmp	0x2008	; 0x2008 <__fp_inf>
    1e5c:	51 11       	cpse	r21, r1
    1e5e:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__fp_szero>
    1e62:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <__fp_nan>

00001e66 <__divsf3x>:
    1e66:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__fp_split3>
    1e6a:	68 f3       	brcs	.-38     	; 0x1e46 <__divsf3+0x8>

00001e6c <__divsf3_pse>:
    1e6c:	99 23       	and	r25, r25
    1e6e:	b1 f3       	breq	.-20     	; 0x1e5c <__divsf3+0x1e>
    1e70:	55 23       	and	r21, r21
    1e72:	91 f3       	breq	.-28     	; 0x1e58 <__divsf3+0x1a>
    1e74:	95 1b       	sub	r25, r21
    1e76:	55 0b       	sbc	r21, r21
    1e78:	bb 27       	eor	r27, r27
    1e7a:	aa 27       	eor	r26, r26
    1e7c:	62 17       	cp	r22, r18
    1e7e:	73 07       	cpc	r23, r19
    1e80:	84 07       	cpc	r24, r20
    1e82:	38 f0       	brcs	.+14     	; 0x1e92 <__divsf3_pse+0x26>
    1e84:	9f 5f       	subi	r25, 0xFF	; 255
    1e86:	5f 4f       	sbci	r21, 0xFF	; 255
    1e88:	22 0f       	add	r18, r18
    1e8a:	33 1f       	adc	r19, r19
    1e8c:	44 1f       	adc	r20, r20
    1e8e:	aa 1f       	adc	r26, r26
    1e90:	a9 f3       	breq	.-22     	; 0x1e7c <__divsf3_pse+0x10>
    1e92:	35 d0       	rcall	.+106    	; 0x1efe <__divsf3_pse+0x92>
    1e94:	0e 2e       	mov	r0, r30
    1e96:	3a f0       	brmi	.+14     	; 0x1ea6 <__divsf3_pse+0x3a>
    1e98:	e0 e8       	ldi	r30, 0x80	; 128
    1e9a:	32 d0       	rcall	.+100    	; 0x1f00 <__divsf3_pse+0x94>
    1e9c:	91 50       	subi	r25, 0x01	; 1
    1e9e:	50 40       	sbci	r21, 0x00	; 0
    1ea0:	e6 95       	lsr	r30
    1ea2:	00 1c       	adc	r0, r0
    1ea4:	ca f7       	brpl	.-14     	; 0x1e98 <__divsf3_pse+0x2c>
    1ea6:	2b d0       	rcall	.+86     	; 0x1efe <__divsf3_pse+0x92>
    1ea8:	fe 2f       	mov	r31, r30
    1eaa:	29 d0       	rcall	.+82     	; 0x1efe <__divsf3_pse+0x92>
    1eac:	66 0f       	add	r22, r22
    1eae:	77 1f       	adc	r23, r23
    1eb0:	88 1f       	adc	r24, r24
    1eb2:	bb 1f       	adc	r27, r27
    1eb4:	26 17       	cp	r18, r22
    1eb6:	37 07       	cpc	r19, r23
    1eb8:	48 07       	cpc	r20, r24
    1eba:	ab 07       	cpc	r26, r27
    1ebc:	b0 e8       	ldi	r27, 0x80	; 128
    1ebe:	09 f0       	breq	.+2      	; 0x1ec2 <__divsf3_pse+0x56>
    1ec0:	bb 0b       	sbc	r27, r27
    1ec2:	80 2d       	mov	r24, r0
    1ec4:	bf 01       	movw	r22, r30
    1ec6:	ff 27       	eor	r31, r31
    1ec8:	93 58       	subi	r25, 0x83	; 131
    1eca:	5f 4f       	sbci	r21, 0xFF	; 255
    1ecc:	3a f0       	brmi	.+14     	; 0x1edc <__divsf3_pse+0x70>
    1ece:	9e 3f       	cpi	r25, 0xFE	; 254
    1ed0:	51 05       	cpc	r21, r1
    1ed2:	78 f0       	brcs	.+30     	; 0x1ef2 <__divsf3_pse+0x86>
    1ed4:	0c 94 04 10 	jmp	0x2008	; 0x2008 <__fp_inf>
    1ed8:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__fp_szero>
    1edc:	5f 3f       	cpi	r21, 0xFF	; 255
    1ede:	e4 f3       	brlt	.-8      	; 0x1ed8 <__divsf3_pse+0x6c>
    1ee0:	98 3e       	cpi	r25, 0xE8	; 232
    1ee2:	d4 f3       	brlt	.-12     	; 0x1ed8 <__divsf3_pse+0x6c>
    1ee4:	86 95       	lsr	r24
    1ee6:	77 95       	ror	r23
    1ee8:	67 95       	ror	r22
    1eea:	b7 95       	ror	r27
    1eec:	f7 95       	ror	r31
    1eee:	9f 5f       	subi	r25, 0xFF	; 255
    1ef0:	c9 f7       	brne	.-14     	; 0x1ee4 <__divsf3_pse+0x78>
    1ef2:	88 0f       	add	r24, r24
    1ef4:	91 1d       	adc	r25, r1
    1ef6:	96 95       	lsr	r25
    1ef8:	87 95       	ror	r24
    1efa:	97 f9       	bld	r25, 7
    1efc:	08 95       	ret
    1efe:	e1 e0       	ldi	r30, 0x01	; 1
    1f00:	66 0f       	add	r22, r22
    1f02:	77 1f       	adc	r23, r23
    1f04:	88 1f       	adc	r24, r24
    1f06:	bb 1f       	adc	r27, r27
    1f08:	62 17       	cp	r22, r18
    1f0a:	73 07       	cpc	r23, r19
    1f0c:	84 07       	cpc	r24, r20
    1f0e:	ba 07       	cpc	r27, r26
    1f10:	20 f0       	brcs	.+8      	; 0x1f1a <__divsf3_pse+0xae>
    1f12:	62 1b       	sub	r22, r18
    1f14:	73 0b       	sbc	r23, r19
    1f16:	84 0b       	sbc	r24, r20
    1f18:	ba 0b       	sbc	r27, r26
    1f1a:	ee 1f       	adc	r30, r30
    1f1c:	88 f7       	brcc	.-30     	; 0x1f00 <__divsf3_pse+0x94>
    1f1e:	e0 95       	com	r30
    1f20:	08 95       	ret

00001f22 <__fixsfsi>:
    1f22:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__fixunssfsi>
    1f26:	68 94       	set
    1f28:	b1 11       	cpse	r27, r1
    1f2a:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__fp_szero>
    1f2e:	08 95       	ret

00001f30 <__fixunssfsi>:
    1f30:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__fp_splitA>
    1f34:	88 f0       	brcs	.+34     	; 0x1f58 <__fixunssfsi+0x28>
    1f36:	9f 57       	subi	r25, 0x7F	; 127
    1f38:	98 f0       	brcs	.+38     	; 0x1f60 <__fixunssfsi+0x30>
    1f3a:	b9 2f       	mov	r27, r25
    1f3c:	99 27       	eor	r25, r25
    1f3e:	b7 51       	subi	r27, 0x17	; 23
    1f40:	b0 f0       	brcs	.+44     	; 0x1f6e <__fixunssfsi+0x3e>
    1f42:	e1 f0       	breq	.+56     	; 0x1f7c <__fixunssfsi+0x4c>
    1f44:	66 0f       	add	r22, r22
    1f46:	77 1f       	adc	r23, r23
    1f48:	88 1f       	adc	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	1a f0       	brmi	.+6      	; 0x1f54 <__fixunssfsi+0x24>
    1f4e:	ba 95       	dec	r27
    1f50:	c9 f7       	brne	.-14     	; 0x1f44 <__fixunssfsi+0x14>
    1f52:	14 c0       	rjmp	.+40     	; 0x1f7c <__fixunssfsi+0x4c>
    1f54:	b1 30       	cpi	r27, 0x01	; 1
    1f56:	91 f0       	breq	.+36     	; 0x1f7c <__fixunssfsi+0x4c>
    1f58:	0e 94 75 10 	call	0x20ea	; 0x20ea <__fp_zero>
    1f5c:	b1 e0       	ldi	r27, 0x01	; 1
    1f5e:	08 95       	ret
    1f60:	0c 94 75 10 	jmp	0x20ea	; 0x20ea <__fp_zero>
    1f64:	67 2f       	mov	r22, r23
    1f66:	78 2f       	mov	r23, r24
    1f68:	88 27       	eor	r24, r24
    1f6a:	b8 5f       	subi	r27, 0xF8	; 248
    1f6c:	39 f0       	breq	.+14     	; 0x1f7c <__fixunssfsi+0x4c>
    1f6e:	b9 3f       	cpi	r27, 0xF9	; 249
    1f70:	cc f3       	brlt	.-14     	; 0x1f64 <__fixunssfsi+0x34>
    1f72:	86 95       	lsr	r24
    1f74:	77 95       	ror	r23
    1f76:	67 95       	ror	r22
    1f78:	b3 95       	inc	r27
    1f7a:	d9 f7       	brne	.-10     	; 0x1f72 <__fixunssfsi+0x42>
    1f7c:	3e f4       	brtc	.+14     	; 0x1f8c <__fixunssfsi+0x5c>
    1f7e:	90 95       	com	r25
    1f80:	80 95       	com	r24
    1f82:	70 95       	com	r23
    1f84:	61 95       	neg	r22
    1f86:	7f 4f       	sbci	r23, 0xFF	; 255
    1f88:	8f 4f       	sbci	r24, 0xFF	; 255
    1f8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8c:	08 95       	ret

00001f8e <__floatunsisf>:
    1f8e:	e8 94       	clt
    1f90:	09 c0       	rjmp	.+18     	; 0x1fa4 <__floatsisf+0x12>

00001f92 <__floatsisf>:
    1f92:	97 fb       	bst	r25, 7
    1f94:	3e f4       	brtc	.+14     	; 0x1fa4 <__floatsisf+0x12>
    1f96:	90 95       	com	r25
    1f98:	80 95       	com	r24
    1f9a:	70 95       	com	r23
    1f9c:	61 95       	neg	r22
    1f9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa0:	8f 4f       	sbci	r24, 0xFF	; 255
    1fa2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa4:	99 23       	and	r25, r25
    1fa6:	a9 f0       	breq	.+42     	; 0x1fd2 <__floatsisf+0x40>
    1fa8:	f9 2f       	mov	r31, r25
    1faa:	96 e9       	ldi	r25, 0x96	; 150
    1fac:	bb 27       	eor	r27, r27
    1fae:	93 95       	inc	r25
    1fb0:	f6 95       	lsr	r31
    1fb2:	87 95       	ror	r24
    1fb4:	77 95       	ror	r23
    1fb6:	67 95       	ror	r22
    1fb8:	b7 95       	ror	r27
    1fba:	f1 11       	cpse	r31, r1
    1fbc:	f8 cf       	rjmp	.-16     	; 0x1fae <__floatsisf+0x1c>
    1fbe:	fa f4       	brpl	.+62     	; 0x1ffe <__floatsisf+0x6c>
    1fc0:	bb 0f       	add	r27, r27
    1fc2:	11 f4       	brne	.+4      	; 0x1fc8 <__floatsisf+0x36>
    1fc4:	60 ff       	sbrs	r22, 0
    1fc6:	1b c0       	rjmp	.+54     	; 0x1ffe <__floatsisf+0x6c>
    1fc8:	6f 5f       	subi	r22, 0xFF	; 255
    1fca:	7f 4f       	sbci	r23, 0xFF	; 255
    1fcc:	8f 4f       	sbci	r24, 0xFF	; 255
    1fce:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd0:	16 c0       	rjmp	.+44     	; 0x1ffe <__floatsisf+0x6c>
    1fd2:	88 23       	and	r24, r24
    1fd4:	11 f0       	breq	.+4      	; 0x1fda <__floatsisf+0x48>
    1fd6:	96 e9       	ldi	r25, 0x96	; 150
    1fd8:	11 c0       	rjmp	.+34     	; 0x1ffc <__floatsisf+0x6a>
    1fda:	77 23       	and	r23, r23
    1fdc:	21 f0       	breq	.+8      	; 0x1fe6 <__floatsisf+0x54>
    1fde:	9e e8       	ldi	r25, 0x8E	; 142
    1fe0:	87 2f       	mov	r24, r23
    1fe2:	76 2f       	mov	r23, r22
    1fe4:	05 c0       	rjmp	.+10     	; 0x1ff0 <__floatsisf+0x5e>
    1fe6:	66 23       	and	r22, r22
    1fe8:	71 f0       	breq	.+28     	; 0x2006 <__floatsisf+0x74>
    1fea:	96 e8       	ldi	r25, 0x86	; 134
    1fec:	86 2f       	mov	r24, r22
    1fee:	70 e0       	ldi	r23, 0x00	; 0
    1ff0:	60 e0       	ldi	r22, 0x00	; 0
    1ff2:	2a f0       	brmi	.+10     	; 0x1ffe <__floatsisf+0x6c>
    1ff4:	9a 95       	dec	r25
    1ff6:	66 0f       	add	r22, r22
    1ff8:	77 1f       	adc	r23, r23
    1ffa:	88 1f       	adc	r24, r24
    1ffc:	da f7       	brpl	.-10     	; 0x1ff4 <__floatsisf+0x62>
    1ffe:	88 0f       	add	r24, r24
    2000:	96 95       	lsr	r25
    2002:	87 95       	ror	r24
    2004:	97 f9       	bld	r25, 7
    2006:	08 95       	ret

00002008 <__fp_inf>:
    2008:	97 f9       	bld	r25, 7
    200a:	9f 67       	ori	r25, 0x7F	; 127
    200c:	80 e8       	ldi	r24, 0x80	; 128
    200e:	70 e0       	ldi	r23, 0x00	; 0
    2010:	60 e0       	ldi	r22, 0x00	; 0
    2012:	08 95       	ret

00002014 <__fp_nan>:
    2014:	9f ef       	ldi	r25, 0xFF	; 255
    2016:	80 ec       	ldi	r24, 0xC0	; 192
    2018:	08 95       	ret

0000201a <__fp_powser>:
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	1f 93       	push	r17
    2020:	0f 93       	push	r16
    2022:	ff 92       	push	r15
    2024:	ef 92       	push	r14
    2026:	df 92       	push	r13
    2028:	7b 01       	movw	r14, r22
    202a:	8c 01       	movw	r16, r24
    202c:	68 94       	set
    202e:	06 c0       	rjmp	.+12     	; 0x203c <__fp_powser+0x22>
    2030:	da 2e       	mov	r13, r26
    2032:	ef 01       	movw	r28, r30
    2034:	0e 94 97 10 	call	0x212e	; 0x212e <__mulsf3x>
    2038:	fe 01       	movw	r30, r28
    203a:	e8 94       	clt
    203c:	a5 91       	lpm	r26, Z+
    203e:	25 91       	lpm	r18, Z+
    2040:	35 91       	lpm	r19, Z+
    2042:	45 91       	lpm	r20, Z+
    2044:	55 91       	lpm	r21, Z+
    2046:	a6 f3       	brts	.-24     	; 0x2030 <__fp_powser+0x16>
    2048:	ef 01       	movw	r28, r30
    204a:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__addsf3x>
    204e:	fe 01       	movw	r30, r28
    2050:	97 01       	movw	r18, r14
    2052:	a8 01       	movw	r20, r16
    2054:	da 94       	dec	r13
    2056:	69 f7       	brne	.-38     	; 0x2032 <__fp_powser+0x18>
    2058:	df 90       	pop	r13
    205a:	ef 90       	pop	r14
    205c:	ff 90       	pop	r15
    205e:	0f 91       	pop	r16
    2060:	1f 91       	pop	r17
    2062:	cf 91       	pop	r28
    2064:	df 91       	pop	r29
    2066:	08 95       	ret

00002068 <__fp_pscA>:
    2068:	00 24       	eor	r0, r0
    206a:	0a 94       	dec	r0
    206c:	16 16       	cp	r1, r22
    206e:	17 06       	cpc	r1, r23
    2070:	18 06       	cpc	r1, r24
    2072:	09 06       	cpc	r0, r25
    2074:	08 95       	ret

00002076 <__fp_pscB>:
    2076:	00 24       	eor	r0, r0
    2078:	0a 94       	dec	r0
    207a:	12 16       	cp	r1, r18
    207c:	13 06       	cpc	r1, r19
    207e:	14 06       	cpc	r1, r20
    2080:	05 06       	cpc	r0, r21
    2082:	08 95       	ret

00002084 <__fp_round>:
    2084:	09 2e       	mov	r0, r25
    2086:	03 94       	inc	r0
    2088:	00 0c       	add	r0, r0
    208a:	11 f4       	brne	.+4      	; 0x2090 <__fp_round+0xc>
    208c:	88 23       	and	r24, r24
    208e:	52 f0       	brmi	.+20     	; 0x20a4 <__fp_round+0x20>
    2090:	bb 0f       	add	r27, r27
    2092:	40 f4       	brcc	.+16     	; 0x20a4 <__fp_round+0x20>
    2094:	bf 2b       	or	r27, r31
    2096:	11 f4       	brne	.+4      	; 0x209c <__fp_round+0x18>
    2098:	60 ff       	sbrs	r22, 0
    209a:	04 c0       	rjmp	.+8      	; 0x20a4 <__fp_round+0x20>
    209c:	6f 5f       	subi	r22, 0xFF	; 255
    209e:	7f 4f       	sbci	r23, 0xFF	; 255
    20a0:	8f 4f       	sbci	r24, 0xFF	; 255
    20a2:	9f 4f       	sbci	r25, 0xFF	; 255
    20a4:	08 95       	ret

000020a6 <__fp_split3>:
    20a6:	57 fd       	sbrc	r21, 7
    20a8:	90 58       	subi	r25, 0x80	; 128
    20aa:	44 0f       	add	r20, r20
    20ac:	55 1f       	adc	r21, r21
    20ae:	59 f0       	breq	.+22     	; 0x20c6 <__fp_splitA+0x10>
    20b0:	5f 3f       	cpi	r21, 0xFF	; 255
    20b2:	71 f0       	breq	.+28     	; 0x20d0 <__fp_splitA+0x1a>
    20b4:	47 95       	ror	r20

000020b6 <__fp_splitA>:
    20b6:	88 0f       	add	r24, r24
    20b8:	97 fb       	bst	r25, 7
    20ba:	99 1f       	adc	r25, r25
    20bc:	61 f0       	breq	.+24     	; 0x20d6 <__fp_splitA+0x20>
    20be:	9f 3f       	cpi	r25, 0xFF	; 255
    20c0:	79 f0       	breq	.+30     	; 0x20e0 <__fp_splitA+0x2a>
    20c2:	87 95       	ror	r24
    20c4:	08 95       	ret
    20c6:	12 16       	cp	r1, r18
    20c8:	13 06       	cpc	r1, r19
    20ca:	14 06       	cpc	r1, r20
    20cc:	55 1f       	adc	r21, r21
    20ce:	f2 cf       	rjmp	.-28     	; 0x20b4 <__fp_split3+0xe>
    20d0:	46 95       	lsr	r20
    20d2:	f1 df       	rcall	.-30     	; 0x20b6 <__fp_splitA>
    20d4:	08 c0       	rjmp	.+16     	; 0x20e6 <__fp_splitA+0x30>
    20d6:	16 16       	cp	r1, r22
    20d8:	17 06       	cpc	r1, r23
    20da:	18 06       	cpc	r1, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	f1 cf       	rjmp	.-30     	; 0x20c2 <__fp_splitA+0xc>
    20e0:	86 95       	lsr	r24
    20e2:	71 05       	cpc	r23, r1
    20e4:	61 05       	cpc	r22, r1
    20e6:	08 94       	sec
    20e8:	08 95       	ret

000020ea <__fp_zero>:
    20ea:	e8 94       	clt

000020ec <__fp_szero>:
    20ec:	bb 27       	eor	r27, r27
    20ee:	66 27       	eor	r22, r22
    20f0:	77 27       	eor	r23, r23
    20f2:	cb 01       	movw	r24, r22
    20f4:	97 f9       	bld	r25, 7
    20f6:	08 95       	ret

000020f8 <inverse>:
    20f8:	9b 01       	movw	r18, r22
    20fa:	ac 01       	movw	r20, r24
    20fc:	60 e0       	ldi	r22, 0x00	; 0
    20fe:	70 e0       	ldi	r23, 0x00	; 0
    2100:	80 e8       	ldi	r24, 0x80	; 128
    2102:	9f e3       	ldi	r25, 0x3F	; 63
    2104:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__divsf3>

00002108 <__mulsf3>:
    2108:	0e 94 97 10 	call	0x212e	; 0x212e <__mulsf3x>
    210c:	0c 94 42 10 	jmp	0x2084	; 0x2084 <__fp_round>
    2110:	0e 94 34 10 	call	0x2068	; 0x2068 <__fp_pscA>
    2114:	38 f0       	brcs	.+14     	; 0x2124 <__mulsf3+0x1c>
    2116:	0e 94 3b 10 	call	0x2076	; 0x2076 <__fp_pscB>
    211a:	20 f0       	brcs	.+8      	; 0x2124 <__mulsf3+0x1c>
    211c:	95 23       	and	r25, r21
    211e:	11 f0       	breq	.+4      	; 0x2124 <__mulsf3+0x1c>
    2120:	0c 94 04 10 	jmp	0x2008	; 0x2008 <__fp_inf>
    2124:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <__fp_nan>
    2128:	11 24       	eor	r1, r1
    212a:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__fp_szero>

0000212e <__mulsf3x>:
    212e:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__fp_split3>
    2132:	70 f3       	brcs	.-36     	; 0x2110 <__mulsf3+0x8>

00002134 <__mulsf3_pse>:
    2134:	95 9f       	mul	r25, r21
    2136:	c1 f3       	breq	.-16     	; 0x2128 <__mulsf3+0x20>
    2138:	95 0f       	add	r25, r21
    213a:	50 e0       	ldi	r21, 0x00	; 0
    213c:	55 1f       	adc	r21, r21
    213e:	62 9f       	mul	r22, r18
    2140:	f0 01       	movw	r30, r0
    2142:	72 9f       	mul	r23, r18
    2144:	bb 27       	eor	r27, r27
    2146:	f0 0d       	add	r31, r0
    2148:	b1 1d       	adc	r27, r1
    214a:	63 9f       	mul	r22, r19
    214c:	aa 27       	eor	r26, r26
    214e:	f0 0d       	add	r31, r0
    2150:	b1 1d       	adc	r27, r1
    2152:	aa 1f       	adc	r26, r26
    2154:	64 9f       	mul	r22, r20
    2156:	66 27       	eor	r22, r22
    2158:	b0 0d       	add	r27, r0
    215a:	a1 1d       	adc	r26, r1
    215c:	66 1f       	adc	r22, r22
    215e:	82 9f       	mul	r24, r18
    2160:	22 27       	eor	r18, r18
    2162:	b0 0d       	add	r27, r0
    2164:	a1 1d       	adc	r26, r1
    2166:	62 1f       	adc	r22, r18
    2168:	73 9f       	mul	r23, r19
    216a:	b0 0d       	add	r27, r0
    216c:	a1 1d       	adc	r26, r1
    216e:	62 1f       	adc	r22, r18
    2170:	83 9f       	mul	r24, r19
    2172:	a0 0d       	add	r26, r0
    2174:	61 1d       	adc	r22, r1
    2176:	22 1f       	adc	r18, r18
    2178:	74 9f       	mul	r23, r20
    217a:	33 27       	eor	r19, r19
    217c:	a0 0d       	add	r26, r0
    217e:	61 1d       	adc	r22, r1
    2180:	23 1f       	adc	r18, r19
    2182:	84 9f       	mul	r24, r20
    2184:	60 0d       	add	r22, r0
    2186:	21 1d       	adc	r18, r1
    2188:	82 2f       	mov	r24, r18
    218a:	76 2f       	mov	r23, r22
    218c:	6a 2f       	mov	r22, r26
    218e:	11 24       	eor	r1, r1
    2190:	9f 57       	subi	r25, 0x7F	; 127
    2192:	50 40       	sbci	r21, 0x00	; 0
    2194:	9a f0       	brmi	.+38     	; 0x21bc <__mulsf3_pse+0x88>
    2196:	f1 f0       	breq	.+60     	; 0x21d4 <__mulsf3_pse+0xa0>
    2198:	88 23       	and	r24, r24
    219a:	4a f0       	brmi	.+18     	; 0x21ae <__mulsf3_pse+0x7a>
    219c:	ee 0f       	add	r30, r30
    219e:	ff 1f       	adc	r31, r31
    21a0:	bb 1f       	adc	r27, r27
    21a2:	66 1f       	adc	r22, r22
    21a4:	77 1f       	adc	r23, r23
    21a6:	88 1f       	adc	r24, r24
    21a8:	91 50       	subi	r25, 0x01	; 1
    21aa:	50 40       	sbci	r21, 0x00	; 0
    21ac:	a9 f7       	brne	.-22     	; 0x2198 <__mulsf3_pse+0x64>
    21ae:	9e 3f       	cpi	r25, 0xFE	; 254
    21b0:	51 05       	cpc	r21, r1
    21b2:	80 f0       	brcs	.+32     	; 0x21d4 <__mulsf3_pse+0xa0>
    21b4:	0c 94 04 10 	jmp	0x2008	; 0x2008 <__fp_inf>
    21b8:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__fp_szero>
    21bc:	5f 3f       	cpi	r21, 0xFF	; 255
    21be:	e4 f3       	brlt	.-8      	; 0x21b8 <__mulsf3_pse+0x84>
    21c0:	98 3e       	cpi	r25, 0xE8	; 232
    21c2:	d4 f3       	brlt	.-12     	; 0x21b8 <__mulsf3_pse+0x84>
    21c4:	86 95       	lsr	r24
    21c6:	77 95       	ror	r23
    21c8:	67 95       	ror	r22
    21ca:	b7 95       	ror	r27
    21cc:	f7 95       	ror	r31
    21ce:	e7 95       	ror	r30
    21d0:	9f 5f       	subi	r25, 0xFF	; 255
    21d2:	c1 f7       	brne	.-16     	; 0x21c4 <__mulsf3_pse+0x90>
    21d4:	fe 2b       	or	r31, r30
    21d6:	88 0f       	add	r24, r24
    21d8:	91 1d       	adc	r25, r1
    21da:	96 95       	lsr	r25
    21dc:	87 95       	ror	r24
    21de:	97 f9       	bld	r25, 7
    21e0:	08 95       	ret

000021e2 <square>:
    21e2:	9b 01       	movw	r18, r22
    21e4:	ac 01       	movw	r20, r24
    21e6:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__mulsf3>

000021ea <__mulsi3>:
    21ea:	db 01       	movw	r26, r22
    21ec:	8f 93       	push	r24
    21ee:	9f 93       	push	r25
    21f0:	0e 94 40 11 	call	0x2280	; 0x2280 <__muluhisi3>
    21f4:	bf 91       	pop	r27
    21f6:	af 91       	pop	r26
    21f8:	a2 9f       	mul	r26, r18
    21fa:	80 0d       	add	r24, r0
    21fc:	91 1d       	adc	r25, r1
    21fe:	a3 9f       	mul	r26, r19
    2200:	90 0d       	add	r25, r0
    2202:	b2 9f       	mul	r27, r18
    2204:	90 0d       	add	r25, r0
    2206:	11 24       	eor	r1, r1
    2208:	08 95       	ret

0000220a <__divmodsi4>:
    220a:	05 2e       	mov	r0, r21
    220c:	97 fb       	bst	r25, 7
    220e:	1e f4       	brtc	.+6      	; 0x2216 <__divmodsi4+0xc>
    2210:	00 94       	com	r0
    2212:	0e 94 1c 11 	call	0x2238	; 0x2238 <__negsi2>
    2216:	57 fd       	sbrc	r21, 7
    2218:	07 d0       	rcall	.+14     	; 0x2228 <__divmodsi4_neg2>
    221a:	0e 94 53 11 	call	0x22a6	; 0x22a6 <__udivmodsi4>
    221e:	07 fc       	sbrc	r0, 7
    2220:	03 d0       	rcall	.+6      	; 0x2228 <__divmodsi4_neg2>
    2222:	4e f4       	brtc	.+18     	; 0x2236 <__divmodsi4_exit>
    2224:	0c 94 1c 11 	jmp	0x2238	; 0x2238 <__negsi2>

00002228 <__divmodsi4_neg2>:
    2228:	50 95       	com	r21
    222a:	40 95       	com	r20
    222c:	30 95       	com	r19
    222e:	21 95       	neg	r18
    2230:	3f 4f       	sbci	r19, 0xFF	; 255
    2232:	4f 4f       	sbci	r20, 0xFF	; 255
    2234:	5f 4f       	sbci	r21, 0xFF	; 255

00002236 <__divmodsi4_exit>:
    2236:	08 95       	ret

00002238 <__negsi2>:
    2238:	90 95       	com	r25
    223a:	80 95       	com	r24
    223c:	70 95       	com	r23
    223e:	61 95       	neg	r22
    2240:	7f 4f       	sbci	r23, 0xFF	; 255
    2242:	8f 4f       	sbci	r24, 0xFF	; 255
    2244:	9f 4f       	sbci	r25, 0xFF	; 255
    2246:	08 95       	ret

00002248 <__tablejump2__>:
    2248:	ee 0f       	add	r30, r30
    224a:	ff 1f       	adc	r31, r31
    224c:	05 90       	lpm	r0, Z+
    224e:	f4 91       	lpm	r31, Z
    2250:	e0 2d       	mov	r30, r0
    2252:	09 94       	ijmp

00002254 <__umulhisi3>:
    2254:	a2 9f       	mul	r26, r18
    2256:	b0 01       	movw	r22, r0
    2258:	b3 9f       	mul	r27, r19
    225a:	c0 01       	movw	r24, r0
    225c:	a3 9f       	mul	r26, r19
    225e:	70 0d       	add	r23, r0
    2260:	81 1d       	adc	r24, r1
    2262:	11 24       	eor	r1, r1
    2264:	91 1d       	adc	r25, r1
    2266:	b2 9f       	mul	r27, r18
    2268:	70 0d       	add	r23, r0
    226a:	81 1d       	adc	r24, r1
    226c:	11 24       	eor	r1, r1
    226e:	91 1d       	adc	r25, r1
    2270:	08 95       	ret

00002272 <__usmulhisi3>:
    2272:	0e 94 2a 11 	call	0x2254	; 0x2254 <__umulhisi3>

00002276 <__usmulhisi3_tail>:
    2276:	b7 ff       	sbrs	r27, 7
    2278:	08 95       	ret
    227a:	82 1b       	sub	r24, r18
    227c:	93 0b       	sbc	r25, r19
    227e:	08 95       	ret

00002280 <__muluhisi3>:
    2280:	0e 94 2a 11 	call	0x2254	; 0x2254 <__umulhisi3>
    2284:	a5 9f       	mul	r26, r21
    2286:	90 0d       	add	r25, r0
    2288:	b4 9f       	mul	r27, r20
    228a:	90 0d       	add	r25, r0
    228c:	a4 9f       	mul	r26, r20
    228e:	80 0d       	add	r24, r0
    2290:	91 1d       	adc	r25, r1
    2292:	11 24       	eor	r1, r1
    2294:	08 95       	ret

00002296 <__mulshisi3>:
    2296:	b7 ff       	sbrs	r27, 7
    2298:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__muluhisi3>

0000229c <__mulohisi3>:
    229c:	0e 94 40 11 	call	0x2280	; 0x2280 <__muluhisi3>
    22a0:	82 1b       	sub	r24, r18
    22a2:	93 0b       	sbc	r25, r19
    22a4:	08 95       	ret

000022a6 <__udivmodsi4>:
    22a6:	a1 e2       	ldi	r26, 0x21	; 33
    22a8:	1a 2e       	mov	r1, r26
    22aa:	aa 1b       	sub	r26, r26
    22ac:	bb 1b       	sub	r27, r27
    22ae:	fd 01       	movw	r30, r26
    22b0:	0d c0       	rjmp	.+26     	; 0x22cc <__udivmodsi4_ep>

000022b2 <__udivmodsi4_loop>:
    22b2:	aa 1f       	adc	r26, r26
    22b4:	bb 1f       	adc	r27, r27
    22b6:	ee 1f       	adc	r30, r30
    22b8:	ff 1f       	adc	r31, r31
    22ba:	a2 17       	cp	r26, r18
    22bc:	b3 07       	cpc	r27, r19
    22be:	e4 07       	cpc	r30, r20
    22c0:	f5 07       	cpc	r31, r21
    22c2:	20 f0       	brcs	.+8      	; 0x22cc <__udivmodsi4_ep>
    22c4:	a2 1b       	sub	r26, r18
    22c6:	b3 0b       	sbc	r27, r19
    22c8:	e4 0b       	sbc	r30, r20
    22ca:	f5 0b       	sbc	r31, r21

000022cc <__udivmodsi4_ep>:
    22cc:	66 1f       	adc	r22, r22
    22ce:	77 1f       	adc	r23, r23
    22d0:	88 1f       	adc	r24, r24
    22d2:	99 1f       	adc	r25, r25
    22d4:	1a 94       	dec	r1
    22d6:	69 f7       	brne	.-38     	; 0x22b2 <__udivmodsi4_loop>
    22d8:	60 95       	com	r22
    22da:	70 95       	com	r23
    22dc:	80 95       	com	r24
    22de:	90 95       	com	r25
    22e0:	9b 01       	movw	r18, r22
    22e2:	ac 01       	movw	r20, r24
    22e4:	bd 01       	movw	r22, r26
    22e6:	cf 01       	movw	r24, r30
    22e8:	08 95       	ret

000022ea <__strlen_P>:
    22ea:	fc 01       	movw	r30, r24
    22ec:	05 90       	lpm	r0, Z+
    22ee:	00 20       	and	r0, r0
    22f0:	e9 f7       	brne	.-6      	; 0x22ec <__strlen_P+0x2>
    22f2:	80 95       	com	r24
    22f4:	90 95       	com	r25
    22f6:	8e 0f       	add	r24, r30
    22f8:	9f 1f       	adc	r25, r31
    22fa:	08 95       	ret

000022fc <strncasecmp_P>:
    22fc:	fb 01       	movw	r30, r22
    22fe:	dc 01       	movw	r26, r24
    2300:	41 50       	subi	r20, 0x01	; 1
    2302:	50 40       	sbci	r21, 0x00	; 0
    2304:	88 f0       	brcs	.+34     	; 0x2328 <strncasecmp_P+0x2c>
    2306:	8d 91       	ld	r24, X+
    2308:	81 34       	cpi	r24, 0x41	; 65
    230a:	1c f0       	brlt	.+6      	; 0x2312 <strncasecmp_P+0x16>
    230c:	8b 35       	cpi	r24, 0x5B	; 91
    230e:	0c f4       	brge	.+2      	; 0x2312 <strncasecmp_P+0x16>
    2310:	80 5e       	subi	r24, 0xE0	; 224
    2312:	65 91       	lpm	r22, Z+
    2314:	61 34       	cpi	r22, 0x41	; 65
    2316:	1c f0       	brlt	.+6      	; 0x231e <strncasecmp_P+0x22>
    2318:	6b 35       	cpi	r22, 0x5B	; 91
    231a:	0c f4       	brge	.+2      	; 0x231e <strncasecmp_P+0x22>
    231c:	60 5e       	subi	r22, 0xE0	; 224
    231e:	86 1b       	sub	r24, r22
    2320:	61 11       	cpse	r22, r1
    2322:	71 f3       	breq	.-36     	; 0x2300 <strncasecmp_P+0x4>
    2324:	99 0b       	sbc	r25, r25
    2326:	08 95       	ret
    2328:	88 1b       	sub	r24, r24
    232a:	fc cf       	rjmp	.-8      	; 0x2324 <strncasecmp_P+0x28>

0000232c <strtok_r>:
    232c:	fa 01       	movw	r30, r20
    232e:	a1 91       	ld	r26, Z+
    2330:	b0 81       	ld	r27, Z
    2332:	00 97       	sbiw	r24, 0x00	; 0
    2334:	19 f4       	brne	.+6      	; 0x233c <strtok_r+0x10>
    2336:	10 97       	sbiw	r26, 0x00	; 0
    2338:	e1 f0       	breq	.+56     	; 0x2372 <strtok_r+0x46>
    233a:	cd 01       	movw	r24, r26
    233c:	dc 01       	movw	r26, r24
    233e:	cd 01       	movw	r24, r26
    2340:	0d 90       	ld	r0, X+
    2342:	00 20       	and	r0, r0
    2344:	11 f4       	brne	.+4      	; 0x234a <strtok_r+0x1e>
    2346:	c0 01       	movw	r24, r0
    2348:	13 c0       	rjmp	.+38     	; 0x2370 <strtok_r+0x44>
    234a:	fb 01       	movw	r30, r22
    234c:	21 91       	ld	r18, Z+
    234e:	22 23       	and	r18, r18
    2350:	19 f0       	breq	.+6      	; 0x2358 <strtok_r+0x2c>
    2352:	20 15       	cp	r18, r0
    2354:	d9 f7       	brne	.-10     	; 0x234c <strtok_r+0x20>
    2356:	f3 cf       	rjmp	.-26     	; 0x233e <strtok_r+0x12>
    2358:	fb 01       	movw	r30, r22
    235a:	21 91       	ld	r18, Z+
    235c:	20 15       	cp	r18, r0
    235e:	19 f4       	brne	.+6      	; 0x2366 <strtok_r+0x3a>
    2360:	1e 92       	st	-X, r1
    2362:	11 96       	adiw	r26, 0x01	; 1
    2364:	06 c0       	rjmp	.+12     	; 0x2372 <strtok_r+0x46>
    2366:	22 23       	and	r18, r18
    2368:	c1 f7       	brne	.-16     	; 0x235a <strtok_r+0x2e>
    236a:	0d 90       	ld	r0, X+
    236c:	00 20       	and	r0, r0
    236e:	a1 f7       	brne	.-24     	; 0x2358 <strtok_r+0x2c>
    2370:	d0 01       	movw	r26, r0
    2372:	fa 01       	movw	r30, r20
    2374:	a1 93       	st	Z+, r26
    2376:	b0 83       	st	Z, r27
    2378:	08 95       	ret

0000237a <vfprintf>:
    237a:	ab e0       	ldi	r26, 0x0B	; 11
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	e3 ec       	ldi	r30, 0xC3	; 195
    2380:	f1 e1       	ldi	r31, 0x11	; 17
    2382:	0c 94 4e 14 	jmp	0x289c	; 0x289c <__prologue_saves__>
    2386:	6c 01       	movw	r12, r24
    2388:	7b 01       	movw	r14, r22
    238a:	8a 01       	movw	r16, r20
    238c:	fc 01       	movw	r30, r24
    238e:	17 82       	std	Z+7, r1	; 0x07
    2390:	16 82       	std	Z+6, r1	; 0x06
    2392:	83 81       	ldd	r24, Z+3	; 0x03
    2394:	81 ff       	sbrs	r24, 1
    2396:	cc c1       	rjmp	.+920    	; 0x2730 <vfprintf+0x3b6>
    2398:	ce 01       	movw	r24, r28
    239a:	01 96       	adiw	r24, 0x01	; 1
    239c:	3c 01       	movw	r6, r24
    239e:	f6 01       	movw	r30, r12
    23a0:	93 81       	ldd	r25, Z+3	; 0x03
    23a2:	f7 01       	movw	r30, r14
    23a4:	93 fd       	sbrc	r25, 3
    23a6:	85 91       	lpm	r24, Z+
    23a8:	93 ff       	sbrs	r25, 3
    23aa:	81 91       	ld	r24, Z+
    23ac:	7f 01       	movw	r14, r30
    23ae:	88 23       	and	r24, r24
    23b0:	09 f4       	brne	.+2      	; 0x23b4 <vfprintf+0x3a>
    23b2:	ba c1       	rjmp	.+884    	; 0x2728 <vfprintf+0x3ae>
    23b4:	85 32       	cpi	r24, 0x25	; 37
    23b6:	39 f4       	brne	.+14     	; 0x23c6 <vfprintf+0x4c>
    23b8:	93 fd       	sbrc	r25, 3
    23ba:	85 91       	lpm	r24, Z+
    23bc:	93 ff       	sbrs	r25, 3
    23be:	81 91       	ld	r24, Z+
    23c0:	7f 01       	movw	r14, r30
    23c2:	85 32       	cpi	r24, 0x25	; 37
    23c4:	29 f4       	brne	.+10     	; 0x23d0 <vfprintf+0x56>
    23c6:	b6 01       	movw	r22, r12
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	0e 94 b4 13 	call	0x2768	; 0x2768 <fputc>
    23ce:	e7 cf       	rjmp	.-50     	; 0x239e <vfprintf+0x24>
    23d0:	91 2c       	mov	r9, r1
    23d2:	21 2c       	mov	r2, r1
    23d4:	31 2c       	mov	r3, r1
    23d6:	ff e1       	ldi	r31, 0x1F	; 31
    23d8:	f3 15       	cp	r31, r3
    23da:	d8 f0       	brcs	.+54     	; 0x2412 <vfprintf+0x98>
    23dc:	8b 32       	cpi	r24, 0x2B	; 43
    23de:	79 f0       	breq	.+30     	; 0x23fe <vfprintf+0x84>
    23e0:	38 f4       	brcc	.+14     	; 0x23f0 <vfprintf+0x76>
    23e2:	80 32       	cpi	r24, 0x20	; 32
    23e4:	79 f0       	breq	.+30     	; 0x2404 <vfprintf+0x8a>
    23e6:	83 32       	cpi	r24, 0x23	; 35
    23e8:	a1 f4       	brne	.+40     	; 0x2412 <vfprintf+0x98>
    23ea:	23 2d       	mov	r18, r3
    23ec:	20 61       	ori	r18, 0x10	; 16
    23ee:	1d c0       	rjmp	.+58     	; 0x242a <vfprintf+0xb0>
    23f0:	8d 32       	cpi	r24, 0x2D	; 45
    23f2:	61 f0       	breq	.+24     	; 0x240c <vfprintf+0x92>
    23f4:	80 33       	cpi	r24, 0x30	; 48
    23f6:	69 f4       	brne	.+26     	; 0x2412 <vfprintf+0x98>
    23f8:	23 2d       	mov	r18, r3
    23fa:	21 60       	ori	r18, 0x01	; 1
    23fc:	16 c0       	rjmp	.+44     	; 0x242a <vfprintf+0xb0>
    23fe:	83 2d       	mov	r24, r3
    2400:	82 60       	ori	r24, 0x02	; 2
    2402:	38 2e       	mov	r3, r24
    2404:	e3 2d       	mov	r30, r3
    2406:	e4 60       	ori	r30, 0x04	; 4
    2408:	3e 2e       	mov	r3, r30
    240a:	2a c0       	rjmp	.+84     	; 0x2460 <vfprintf+0xe6>
    240c:	f3 2d       	mov	r31, r3
    240e:	f8 60       	ori	r31, 0x08	; 8
    2410:	1d c0       	rjmp	.+58     	; 0x244c <vfprintf+0xd2>
    2412:	37 fc       	sbrc	r3, 7
    2414:	2d c0       	rjmp	.+90     	; 0x2470 <vfprintf+0xf6>
    2416:	20 ed       	ldi	r18, 0xD0	; 208
    2418:	28 0f       	add	r18, r24
    241a:	2a 30       	cpi	r18, 0x0A	; 10
    241c:	40 f0       	brcs	.+16     	; 0x242e <vfprintf+0xb4>
    241e:	8e 32       	cpi	r24, 0x2E	; 46
    2420:	b9 f4       	brne	.+46     	; 0x2450 <vfprintf+0xd6>
    2422:	36 fc       	sbrc	r3, 6
    2424:	81 c1       	rjmp	.+770    	; 0x2728 <vfprintf+0x3ae>
    2426:	23 2d       	mov	r18, r3
    2428:	20 64       	ori	r18, 0x40	; 64
    242a:	32 2e       	mov	r3, r18
    242c:	19 c0       	rjmp	.+50     	; 0x2460 <vfprintf+0xe6>
    242e:	36 fe       	sbrs	r3, 6
    2430:	06 c0       	rjmp	.+12     	; 0x243e <vfprintf+0xc4>
    2432:	8a e0       	ldi	r24, 0x0A	; 10
    2434:	98 9e       	mul	r9, r24
    2436:	20 0d       	add	r18, r0
    2438:	11 24       	eor	r1, r1
    243a:	92 2e       	mov	r9, r18
    243c:	11 c0       	rjmp	.+34     	; 0x2460 <vfprintf+0xe6>
    243e:	ea e0       	ldi	r30, 0x0A	; 10
    2440:	2e 9e       	mul	r2, r30
    2442:	20 0d       	add	r18, r0
    2444:	11 24       	eor	r1, r1
    2446:	22 2e       	mov	r2, r18
    2448:	f3 2d       	mov	r31, r3
    244a:	f0 62       	ori	r31, 0x20	; 32
    244c:	3f 2e       	mov	r3, r31
    244e:	08 c0       	rjmp	.+16     	; 0x2460 <vfprintf+0xe6>
    2450:	8c 36       	cpi	r24, 0x6C	; 108
    2452:	21 f4       	brne	.+8      	; 0x245c <vfprintf+0xe2>
    2454:	83 2d       	mov	r24, r3
    2456:	80 68       	ori	r24, 0x80	; 128
    2458:	38 2e       	mov	r3, r24
    245a:	02 c0       	rjmp	.+4      	; 0x2460 <vfprintf+0xe6>
    245c:	88 36       	cpi	r24, 0x68	; 104
    245e:	41 f4       	brne	.+16     	; 0x2470 <vfprintf+0xf6>
    2460:	f7 01       	movw	r30, r14
    2462:	93 fd       	sbrc	r25, 3
    2464:	85 91       	lpm	r24, Z+
    2466:	93 ff       	sbrs	r25, 3
    2468:	81 91       	ld	r24, Z+
    246a:	7f 01       	movw	r14, r30
    246c:	81 11       	cpse	r24, r1
    246e:	b3 cf       	rjmp	.-154    	; 0x23d6 <vfprintf+0x5c>
    2470:	98 2f       	mov	r25, r24
    2472:	9f 7d       	andi	r25, 0xDF	; 223
    2474:	95 54       	subi	r25, 0x45	; 69
    2476:	93 30       	cpi	r25, 0x03	; 3
    2478:	28 f4       	brcc	.+10     	; 0x2484 <vfprintf+0x10a>
    247a:	0c 5f       	subi	r16, 0xFC	; 252
    247c:	1f 4f       	sbci	r17, 0xFF	; 255
    247e:	9f e3       	ldi	r25, 0x3F	; 63
    2480:	99 83       	std	Y+1, r25	; 0x01
    2482:	0d c0       	rjmp	.+26     	; 0x249e <vfprintf+0x124>
    2484:	83 36       	cpi	r24, 0x63	; 99
    2486:	31 f0       	breq	.+12     	; 0x2494 <vfprintf+0x11a>
    2488:	83 37       	cpi	r24, 0x73	; 115
    248a:	71 f0       	breq	.+28     	; 0x24a8 <vfprintf+0x12e>
    248c:	83 35       	cpi	r24, 0x53	; 83
    248e:	09 f0       	breq	.+2      	; 0x2492 <vfprintf+0x118>
    2490:	59 c0       	rjmp	.+178    	; 0x2544 <vfprintf+0x1ca>
    2492:	21 c0       	rjmp	.+66     	; 0x24d6 <vfprintf+0x15c>
    2494:	f8 01       	movw	r30, r16
    2496:	80 81       	ld	r24, Z
    2498:	89 83       	std	Y+1, r24	; 0x01
    249a:	0e 5f       	subi	r16, 0xFE	; 254
    249c:	1f 4f       	sbci	r17, 0xFF	; 255
    249e:	88 24       	eor	r8, r8
    24a0:	83 94       	inc	r8
    24a2:	91 2c       	mov	r9, r1
    24a4:	53 01       	movw	r10, r6
    24a6:	13 c0       	rjmp	.+38     	; 0x24ce <vfprintf+0x154>
    24a8:	28 01       	movw	r4, r16
    24aa:	f2 e0       	ldi	r31, 0x02	; 2
    24ac:	4f 0e       	add	r4, r31
    24ae:	51 1c       	adc	r5, r1
    24b0:	f8 01       	movw	r30, r16
    24b2:	a0 80       	ld	r10, Z
    24b4:	b1 80       	ldd	r11, Z+1	; 0x01
    24b6:	36 fe       	sbrs	r3, 6
    24b8:	03 c0       	rjmp	.+6      	; 0x24c0 <vfprintf+0x146>
    24ba:	69 2d       	mov	r22, r9
    24bc:	70 e0       	ldi	r23, 0x00	; 0
    24be:	02 c0       	rjmp	.+4      	; 0x24c4 <vfprintf+0x14a>
    24c0:	6f ef       	ldi	r22, 0xFF	; 255
    24c2:	7f ef       	ldi	r23, 0xFF	; 255
    24c4:	c5 01       	movw	r24, r10
    24c6:	0e 94 a9 13 	call	0x2752	; 0x2752 <strnlen>
    24ca:	4c 01       	movw	r8, r24
    24cc:	82 01       	movw	r16, r4
    24ce:	f3 2d       	mov	r31, r3
    24d0:	ff 77       	andi	r31, 0x7F	; 127
    24d2:	3f 2e       	mov	r3, r31
    24d4:	16 c0       	rjmp	.+44     	; 0x2502 <vfprintf+0x188>
    24d6:	28 01       	movw	r4, r16
    24d8:	22 e0       	ldi	r18, 0x02	; 2
    24da:	42 0e       	add	r4, r18
    24dc:	51 1c       	adc	r5, r1
    24de:	f8 01       	movw	r30, r16
    24e0:	a0 80       	ld	r10, Z
    24e2:	b1 80       	ldd	r11, Z+1	; 0x01
    24e4:	36 fe       	sbrs	r3, 6
    24e6:	03 c0       	rjmp	.+6      	; 0x24ee <vfprintf+0x174>
    24e8:	69 2d       	mov	r22, r9
    24ea:	70 e0       	ldi	r23, 0x00	; 0
    24ec:	02 c0       	rjmp	.+4      	; 0x24f2 <vfprintf+0x178>
    24ee:	6f ef       	ldi	r22, 0xFF	; 255
    24f0:	7f ef       	ldi	r23, 0xFF	; 255
    24f2:	c5 01       	movw	r24, r10
    24f4:	0e 94 9e 13 	call	0x273c	; 0x273c <strnlen_P>
    24f8:	4c 01       	movw	r8, r24
    24fa:	f3 2d       	mov	r31, r3
    24fc:	f0 68       	ori	r31, 0x80	; 128
    24fe:	3f 2e       	mov	r3, r31
    2500:	82 01       	movw	r16, r4
    2502:	33 fc       	sbrc	r3, 3
    2504:	1b c0       	rjmp	.+54     	; 0x253c <vfprintf+0x1c2>
    2506:	82 2d       	mov	r24, r2
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	88 16       	cp	r8, r24
    250c:	99 06       	cpc	r9, r25
    250e:	b0 f4       	brcc	.+44     	; 0x253c <vfprintf+0x1c2>
    2510:	b6 01       	movw	r22, r12
    2512:	80 e2       	ldi	r24, 0x20	; 32
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	0e 94 b4 13 	call	0x2768	; 0x2768 <fputc>
    251a:	2a 94       	dec	r2
    251c:	f4 cf       	rjmp	.-24     	; 0x2506 <vfprintf+0x18c>
    251e:	f5 01       	movw	r30, r10
    2520:	37 fc       	sbrc	r3, 7
    2522:	85 91       	lpm	r24, Z+
    2524:	37 fe       	sbrs	r3, 7
    2526:	81 91       	ld	r24, Z+
    2528:	5f 01       	movw	r10, r30
    252a:	b6 01       	movw	r22, r12
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	0e 94 b4 13 	call	0x2768	; 0x2768 <fputc>
    2532:	21 10       	cpse	r2, r1
    2534:	2a 94       	dec	r2
    2536:	21 e0       	ldi	r18, 0x01	; 1
    2538:	82 1a       	sub	r8, r18
    253a:	91 08       	sbc	r9, r1
    253c:	81 14       	cp	r8, r1
    253e:	91 04       	cpc	r9, r1
    2540:	71 f7       	brne	.-36     	; 0x251e <vfprintf+0x1a4>
    2542:	e8 c0       	rjmp	.+464    	; 0x2714 <vfprintf+0x39a>
    2544:	84 36       	cpi	r24, 0x64	; 100
    2546:	11 f0       	breq	.+4      	; 0x254c <vfprintf+0x1d2>
    2548:	89 36       	cpi	r24, 0x69	; 105
    254a:	41 f5       	brne	.+80     	; 0x259c <vfprintf+0x222>
    254c:	f8 01       	movw	r30, r16
    254e:	37 fe       	sbrs	r3, 7
    2550:	07 c0       	rjmp	.+14     	; 0x2560 <vfprintf+0x1e6>
    2552:	60 81       	ld	r22, Z
    2554:	71 81       	ldd	r23, Z+1	; 0x01
    2556:	82 81       	ldd	r24, Z+2	; 0x02
    2558:	93 81       	ldd	r25, Z+3	; 0x03
    255a:	0c 5f       	subi	r16, 0xFC	; 252
    255c:	1f 4f       	sbci	r17, 0xFF	; 255
    255e:	08 c0       	rjmp	.+16     	; 0x2570 <vfprintf+0x1f6>
    2560:	60 81       	ld	r22, Z
    2562:	71 81       	ldd	r23, Z+1	; 0x01
    2564:	07 2e       	mov	r0, r23
    2566:	00 0c       	add	r0, r0
    2568:	88 0b       	sbc	r24, r24
    256a:	99 0b       	sbc	r25, r25
    256c:	0e 5f       	subi	r16, 0xFE	; 254
    256e:	1f 4f       	sbci	r17, 0xFF	; 255
    2570:	f3 2d       	mov	r31, r3
    2572:	ff 76       	andi	r31, 0x6F	; 111
    2574:	3f 2e       	mov	r3, r31
    2576:	97 ff       	sbrs	r25, 7
    2578:	09 c0       	rjmp	.+18     	; 0x258c <vfprintf+0x212>
    257a:	90 95       	com	r25
    257c:	80 95       	com	r24
    257e:	70 95       	com	r23
    2580:	61 95       	neg	r22
    2582:	7f 4f       	sbci	r23, 0xFF	; 255
    2584:	8f 4f       	sbci	r24, 0xFF	; 255
    2586:	9f 4f       	sbci	r25, 0xFF	; 255
    2588:	f0 68       	ori	r31, 0x80	; 128
    258a:	3f 2e       	mov	r3, r31
    258c:	2a e0       	ldi	r18, 0x0A	; 10
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	a3 01       	movw	r20, r6
    2592:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <__ultoa_invert>
    2596:	88 2e       	mov	r8, r24
    2598:	86 18       	sub	r8, r6
    259a:	45 c0       	rjmp	.+138    	; 0x2626 <vfprintf+0x2ac>
    259c:	85 37       	cpi	r24, 0x75	; 117
    259e:	31 f4       	brne	.+12     	; 0x25ac <vfprintf+0x232>
    25a0:	23 2d       	mov	r18, r3
    25a2:	2f 7e       	andi	r18, 0xEF	; 239
    25a4:	b2 2e       	mov	r11, r18
    25a6:	2a e0       	ldi	r18, 0x0A	; 10
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	25 c0       	rjmp	.+74     	; 0x25f6 <vfprintf+0x27c>
    25ac:	93 2d       	mov	r25, r3
    25ae:	99 7f       	andi	r25, 0xF9	; 249
    25b0:	b9 2e       	mov	r11, r25
    25b2:	8f 36       	cpi	r24, 0x6F	; 111
    25b4:	c1 f0       	breq	.+48     	; 0x25e6 <vfprintf+0x26c>
    25b6:	18 f4       	brcc	.+6      	; 0x25be <vfprintf+0x244>
    25b8:	88 35       	cpi	r24, 0x58	; 88
    25ba:	79 f0       	breq	.+30     	; 0x25da <vfprintf+0x260>
    25bc:	b5 c0       	rjmp	.+362    	; 0x2728 <vfprintf+0x3ae>
    25be:	80 37       	cpi	r24, 0x70	; 112
    25c0:	19 f0       	breq	.+6      	; 0x25c8 <vfprintf+0x24e>
    25c2:	88 37       	cpi	r24, 0x78	; 120
    25c4:	21 f0       	breq	.+8      	; 0x25ce <vfprintf+0x254>
    25c6:	b0 c0       	rjmp	.+352    	; 0x2728 <vfprintf+0x3ae>
    25c8:	e9 2f       	mov	r30, r25
    25ca:	e0 61       	ori	r30, 0x10	; 16
    25cc:	be 2e       	mov	r11, r30
    25ce:	b4 fe       	sbrs	r11, 4
    25d0:	0d c0       	rjmp	.+26     	; 0x25ec <vfprintf+0x272>
    25d2:	fb 2d       	mov	r31, r11
    25d4:	f4 60       	ori	r31, 0x04	; 4
    25d6:	bf 2e       	mov	r11, r31
    25d8:	09 c0       	rjmp	.+18     	; 0x25ec <vfprintf+0x272>
    25da:	34 fe       	sbrs	r3, 4
    25dc:	0a c0       	rjmp	.+20     	; 0x25f2 <vfprintf+0x278>
    25de:	29 2f       	mov	r18, r25
    25e0:	26 60       	ori	r18, 0x06	; 6
    25e2:	b2 2e       	mov	r11, r18
    25e4:	06 c0       	rjmp	.+12     	; 0x25f2 <vfprintf+0x278>
    25e6:	28 e0       	ldi	r18, 0x08	; 8
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	05 c0       	rjmp	.+10     	; 0x25f6 <vfprintf+0x27c>
    25ec:	20 e1       	ldi	r18, 0x10	; 16
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	02 c0       	rjmp	.+4      	; 0x25f6 <vfprintf+0x27c>
    25f2:	20 e1       	ldi	r18, 0x10	; 16
    25f4:	32 e0       	ldi	r19, 0x02	; 2
    25f6:	f8 01       	movw	r30, r16
    25f8:	b7 fe       	sbrs	r11, 7
    25fa:	07 c0       	rjmp	.+14     	; 0x260a <vfprintf+0x290>
    25fc:	60 81       	ld	r22, Z
    25fe:	71 81       	ldd	r23, Z+1	; 0x01
    2600:	82 81       	ldd	r24, Z+2	; 0x02
    2602:	93 81       	ldd	r25, Z+3	; 0x03
    2604:	0c 5f       	subi	r16, 0xFC	; 252
    2606:	1f 4f       	sbci	r17, 0xFF	; 255
    2608:	06 c0       	rjmp	.+12     	; 0x2616 <vfprintf+0x29c>
    260a:	60 81       	ld	r22, Z
    260c:	71 81       	ldd	r23, Z+1	; 0x01
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	0e 5f       	subi	r16, 0xFE	; 254
    2614:	1f 4f       	sbci	r17, 0xFF	; 255
    2616:	a3 01       	movw	r20, r6
    2618:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <__ultoa_invert>
    261c:	88 2e       	mov	r8, r24
    261e:	86 18       	sub	r8, r6
    2620:	fb 2d       	mov	r31, r11
    2622:	ff 77       	andi	r31, 0x7F	; 127
    2624:	3f 2e       	mov	r3, r31
    2626:	36 fe       	sbrs	r3, 6
    2628:	0d c0       	rjmp	.+26     	; 0x2644 <vfprintf+0x2ca>
    262a:	23 2d       	mov	r18, r3
    262c:	2e 7f       	andi	r18, 0xFE	; 254
    262e:	a2 2e       	mov	r10, r18
    2630:	89 14       	cp	r8, r9
    2632:	58 f4       	brcc	.+22     	; 0x264a <vfprintf+0x2d0>
    2634:	34 fe       	sbrs	r3, 4
    2636:	0b c0       	rjmp	.+22     	; 0x264e <vfprintf+0x2d4>
    2638:	32 fc       	sbrc	r3, 2
    263a:	09 c0       	rjmp	.+18     	; 0x264e <vfprintf+0x2d4>
    263c:	83 2d       	mov	r24, r3
    263e:	8e 7e       	andi	r24, 0xEE	; 238
    2640:	a8 2e       	mov	r10, r24
    2642:	05 c0       	rjmp	.+10     	; 0x264e <vfprintf+0x2d4>
    2644:	b8 2c       	mov	r11, r8
    2646:	a3 2c       	mov	r10, r3
    2648:	03 c0       	rjmp	.+6      	; 0x2650 <vfprintf+0x2d6>
    264a:	b8 2c       	mov	r11, r8
    264c:	01 c0       	rjmp	.+2      	; 0x2650 <vfprintf+0x2d6>
    264e:	b9 2c       	mov	r11, r9
    2650:	a4 fe       	sbrs	r10, 4
    2652:	0f c0       	rjmp	.+30     	; 0x2672 <vfprintf+0x2f8>
    2654:	fe 01       	movw	r30, r28
    2656:	e8 0d       	add	r30, r8
    2658:	f1 1d       	adc	r31, r1
    265a:	80 81       	ld	r24, Z
    265c:	80 33       	cpi	r24, 0x30	; 48
    265e:	21 f4       	brne	.+8      	; 0x2668 <vfprintf+0x2ee>
    2660:	9a 2d       	mov	r25, r10
    2662:	99 7e       	andi	r25, 0xE9	; 233
    2664:	a9 2e       	mov	r10, r25
    2666:	09 c0       	rjmp	.+18     	; 0x267a <vfprintf+0x300>
    2668:	a2 fe       	sbrs	r10, 2
    266a:	06 c0       	rjmp	.+12     	; 0x2678 <vfprintf+0x2fe>
    266c:	b3 94       	inc	r11
    266e:	b3 94       	inc	r11
    2670:	04 c0       	rjmp	.+8      	; 0x267a <vfprintf+0x300>
    2672:	8a 2d       	mov	r24, r10
    2674:	86 78       	andi	r24, 0x86	; 134
    2676:	09 f0       	breq	.+2      	; 0x267a <vfprintf+0x300>
    2678:	b3 94       	inc	r11
    267a:	a3 fc       	sbrc	r10, 3
    267c:	11 c0       	rjmp	.+34     	; 0x26a0 <vfprintf+0x326>
    267e:	a0 fe       	sbrs	r10, 0
    2680:	06 c0       	rjmp	.+12     	; 0x268e <vfprintf+0x314>
    2682:	b2 14       	cp	r11, r2
    2684:	88 f4       	brcc	.+34     	; 0x26a8 <vfprintf+0x32e>
    2686:	28 0c       	add	r2, r8
    2688:	92 2c       	mov	r9, r2
    268a:	9b 18       	sub	r9, r11
    268c:	0e c0       	rjmp	.+28     	; 0x26aa <vfprintf+0x330>
    268e:	b2 14       	cp	r11, r2
    2690:	60 f4       	brcc	.+24     	; 0x26aa <vfprintf+0x330>
    2692:	b6 01       	movw	r22, r12
    2694:	80 e2       	ldi	r24, 0x20	; 32
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	0e 94 b4 13 	call	0x2768	; 0x2768 <fputc>
    269c:	b3 94       	inc	r11
    269e:	f7 cf       	rjmp	.-18     	; 0x268e <vfprintf+0x314>
    26a0:	b2 14       	cp	r11, r2
    26a2:	18 f4       	brcc	.+6      	; 0x26aa <vfprintf+0x330>
    26a4:	2b 18       	sub	r2, r11
    26a6:	02 c0       	rjmp	.+4      	; 0x26ac <vfprintf+0x332>
    26a8:	98 2c       	mov	r9, r8
    26aa:	21 2c       	mov	r2, r1
    26ac:	a4 fe       	sbrs	r10, 4
    26ae:	10 c0       	rjmp	.+32     	; 0x26d0 <vfprintf+0x356>
    26b0:	b6 01       	movw	r22, r12
    26b2:	80 e3       	ldi	r24, 0x30	; 48
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	0e 94 b4 13 	call	0x2768	; 0x2768 <fputc>
    26ba:	a2 fe       	sbrs	r10, 2
    26bc:	17 c0       	rjmp	.+46     	; 0x26ec <vfprintf+0x372>
    26be:	a1 fc       	sbrc	r10, 1
    26c0:	03 c0       	rjmp	.+6      	; 0x26c8 <vfprintf+0x34e>
    26c2:	88 e7       	ldi	r24, 0x78	; 120
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	02 c0       	rjmp	.+4      	; 0x26cc <vfprintf+0x352>
    26c8:	88 e5       	ldi	r24, 0x58	; 88
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	b6 01       	movw	r22, r12
    26ce:	0c c0       	rjmp	.+24     	; 0x26e8 <vfprintf+0x36e>
    26d0:	8a 2d       	mov	r24, r10
    26d2:	86 78       	andi	r24, 0x86	; 134
    26d4:	59 f0       	breq	.+22     	; 0x26ec <vfprintf+0x372>
    26d6:	a1 fe       	sbrs	r10, 1
    26d8:	02 c0       	rjmp	.+4      	; 0x26de <vfprintf+0x364>
    26da:	8b e2       	ldi	r24, 0x2B	; 43
    26dc:	01 c0       	rjmp	.+2      	; 0x26e0 <vfprintf+0x366>
    26de:	80 e2       	ldi	r24, 0x20	; 32
    26e0:	a7 fc       	sbrc	r10, 7
    26e2:	8d e2       	ldi	r24, 0x2D	; 45
    26e4:	b6 01       	movw	r22, r12
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	0e 94 b4 13 	call	0x2768	; 0x2768 <fputc>
    26ec:	89 14       	cp	r8, r9
    26ee:	38 f4       	brcc	.+14     	; 0x26fe <vfprintf+0x384>
    26f0:	b6 01       	movw	r22, r12
    26f2:	80 e3       	ldi	r24, 0x30	; 48
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	0e 94 b4 13 	call	0x2768	; 0x2768 <fputc>
    26fa:	9a 94       	dec	r9
    26fc:	f7 cf       	rjmp	.-18     	; 0x26ec <vfprintf+0x372>
    26fe:	8a 94       	dec	r8
    2700:	f3 01       	movw	r30, r6
    2702:	e8 0d       	add	r30, r8
    2704:	f1 1d       	adc	r31, r1
    2706:	80 81       	ld	r24, Z
    2708:	b6 01       	movw	r22, r12
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	0e 94 b4 13 	call	0x2768	; 0x2768 <fputc>
    2710:	81 10       	cpse	r8, r1
    2712:	f5 cf       	rjmp	.-22     	; 0x26fe <vfprintf+0x384>
    2714:	22 20       	and	r2, r2
    2716:	09 f4       	brne	.+2      	; 0x271a <vfprintf+0x3a0>
    2718:	42 ce       	rjmp	.-892    	; 0x239e <vfprintf+0x24>
    271a:	b6 01       	movw	r22, r12
    271c:	80 e2       	ldi	r24, 0x20	; 32
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	0e 94 b4 13 	call	0x2768	; 0x2768 <fputc>
    2724:	2a 94       	dec	r2
    2726:	f6 cf       	rjmp	.-20     	; 0x2714 <vfprintf+0x39a>
    2728:	f6 01       	movw	r30, r12
    272a:	86 81       	ldd	r24, Z+6	; 0x06
    272c:	97 81       	ldd	r25, Z+7	; 0x07
    272e:	02 c0       	rjmp	.+4      	; 0x2734 <vfprintf+0x3ba>
    2730:	8f ef       	ldi	r24, 0xFF	; 255
    2732:	9f ef       	ldi	r25, 0xFF	; 255
    2734:	2b 96       	adiw	r28, 0x0b	; 11
    2736:	e2 e1       	ldi	r30, 0x12	; 18
    2738:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__epilogue_restores__>

0000273c <strnlen_P>:
    273c:	fc 01       	movw	r30, r24
    273e:	05 90       	lpm	r0, Z+
    2740:	61 50       	subi	r22, 0x01	; 1
    2742:	70 40       	sbci	r23, 0x00	; 0
    2744:	01 10       	cpse	r0, r1
    2746:	d8 f7       	brcc	.-10     	; 0x273e <strnlen_P+0x2>
    2748:	80 95       	com	r24
    274a:	90 95       	com	r25
    274c:	8e 0f       	add	r24, r30
    274e:	9f 1f       	adc	r25, r31
    2750:	08 95       	ret

00002752 <strnlen>:
    2752:	fc 01       	movw	r30, r24
    2754:	61 50       	subi	r22, 0x01	; 1
    2756:	70 40       	sbci	r23, 0x00	; 0
    2758:	01 90       	ld	r0, Z+
    275a:	01 10       	cpse	r0, r1
    275c:	d8 f7       	brcc	.-10     	; 0x2754 <strnlen+0x2>
    275e:	80 95       	com	r24
    2760:	90 95       	com	r25
    2762:	8e 0f       	add	r24, r30
    2764:	9f 1f       	adc	r25, r31
    2766:	08 95       	ret

00002768 <fputc>:
    2768:	0f 93       	push	r16
    276a:	1f 93       	push	r17
    276c:	cf 93       	push	r28
    276e:	df 93       	push	r29
    2770:	fb 01       	movw	r30, r22
    2772:	23 81       	ldd	r18, Z+3	; 0x03
    2774:	21 fd       	sbrc	r18, 1
    2776:	03 c0       	rjmp	.+6      	; 0x277e <fputc+0x16>
    2778:	8f ef       	ldi	r24, 0xFF	; 255
    277a:	9f ef       	ldi	r25, 0xFF	; 255
    277c:	2c c0       	rjmp	.+88     	; 0x27d6 <fputc+0x6e>
    277e:	22 ff       	sbrs	r18, 2
    2780:	16 c0       	rjmp	.+44     	; 0x27ae <fputc+0x46>
    2782:	46 81       	ldd	r20, Z+6	; 0x06
    2784:	57 81       	ldd	r21, Z+7	; 0x07
    2786:	24 81       	ldd	r18, Z+4	; 0x04
    2788:	35 81       	ldd	r19, Z+5	; 0x05
    278a:	42 17       	cp	r20, r18
    278c:	53 07       	cpc	r21, r19
    278e:	44 f4       	brge	.+16     	; 0x27a0 <fputc+0x38>
    2790:	a0 81       	ld	r26, Z
    2792:	b1 81       	ldd	r27, Z+1	; 0x01
    2794:	9d 01       	movw	r18, r26
    2796:	2f 5f       	subi	r18, 0xFF	; 255
    2798:	3f 4f       	sbci	r19, 0xFF	; 255
    279a:	31 83       	std	Z+1, r19	; 0x01
    279c:	20 83       	st	Z, r18
    279e:	8c 93       	st	X, r24
    27a0:	26 81       	ldd	r18, Z+6	; 0x06
    27a2:	37 81       	ldd	r19, Z+7	; 0x07
    27a4:	2f 5f       	subi	r18, 0xFF	; 255
    27a6:	3f 4f       	sbci	r19, 0xFF	; 255
    27a8:	37 83       	std	Z+7, r19	; 0x07
    27aa:	26 83       	std	Z+6, r18	; 0x06
    27ac:	14 c0       	rjmp	.+40     	; 0x27d6 <fputc+0x6e>
    27ae:	8b 01       	movw	r16, r22
    27b0:	ec 01       	movw	r28, r24
    27b2:	fb 01       	movw	r30, r22
    27b4:	00 84       	ldd	r0, Z+8	; 0x08
    27b6:	f1 85       	ldd	r31, Z+9	; 0x09
    27b8:	e0 2d       	mov	r30, r0
    27ba:	09 95       	icall
    27bc:	89 2b       	or	r24, r25
    27be:	e1 f6       	brne	.-72     	; 0x2778 <fputc+0x10>
    27c0:	d8 01       	movw	r26, r16
    27c2:	16 96       	adiw	r26, 0x06	; 6
    27c4:	8d 91       	ld	r24, X+
    27c6:	9c 91       	ld	r25, X
    27c8:	17 97       	sbiw	r26, 0x07	; 7
    27ca:	01 96       	adiw	r24, 0x01	; 1
    27cc:	17 96       	adiw	r26, 0x07	; 7
    27ce:	9c 93       	st	X, r25
    27d0:	8e 93       	st	-X, r24
    27d2:	16 97       	sbiw	r26, 0x06	; 6
    27d4:	ce 01       	movw	r24, r28
    27d6:	df 91       	pop	r29
    27d8:	cf 91       	pop	r28
    27da:	1f 91       	pop	r17
    27dc:	0f 91       	pop	r16
    27de:	08 95       	ret

000027e0 <__ultoa_invert>:
    27e0:	fa 01       	movw	r30, r20
    27e2:	aa 27       	eor	r26, r26
    27e4:	28 30       	cpi	r18, 0x08	; 8
    27e6:	51 f1       	breq	.+84     	; 0x283c <__ultoa_invert+0x5c>
    27e8:	20 31       	cpi	r18, 0x10	; 16
    27ea:	81 f1       	breq	.+96     	; 0x284c <__ultoa_invert+0x6c>
    27ec:	e8 94       	clt
    27ee:	6f 93       	push	r22
    27f0:	6e 7f       	andi	r22, 0xFE	; 254
    27f2:	6e 5f       	subi	r22, 0xFE	; 254
    27f4:	7f 4f       	sbci	r23, 0xFF	; 255
    27f6:	8f 4f       	sbci	r24, 0xFF	; 255
    27f8:	9f 4f       	sbci	r25, 0xFF	; 255
    27fa:	af 4f       	sbci	r26, 0xFF	; 255
    27fc:	b1 e0       	ldi	r27, 0x01	; 1
    27fe:	3e d0       	rcall	.+124    	; 0x287c <__ultoa_invert+0x9c>
    2800:	b4 e0       	ldi	r27, 0x04	; 4
    2802:	3c d0       	rcall	.+120    	; 0x287c <__ultoa_invert+0x9c>
    2804:	67 0f       	add	r22, r23
    2806:	78 1f       	adc	r23, r24
    2808:	89 1f       	adc	r24, r25
    280a:	9a 1f       	adc	r25, r26
    280c:	a1 1d       	adc	r26, r1
    280e:	68 0f       	add	r22, r24
    2810:	79 1f       	adc	r23, r25
    2812:	8a 1f       	adc	r24, r26
    2814:	91 1d       	adc	r25, r1
    2816:	a1 1d       	adc	r26, r1
    2818:	6a 0f       	add	r22, r26
    281a:	71 1d       	adc	r23, r1
    281c:	81 1d       	adc	r24, r1
    281e:	91 1d       	adc	r25, r1
    2820:	a1 1d       	adc	r26, r1
    2822:	20 d0       	rcall	.+64     	; 0x2864 <__ultoa_invert+0x84>
    2824:	09 f4       	brne	.+2      	; 0x2828 <__ultoa_invert+0x48>
    2826:	68 94       	set
    2828:	3f 91       	pop	r19
    282a:	2a e0       	ldi	r18, 0x0A	; 10
    282c:	26 9f       	mul	r18, r22
    282e:	11 24       	eor	r1, r1
    2830:	30 19       	sub	r19, r0
    2832:	30 5d       	subi	r19, 0xD0	; 208
    2834:	31 93       	st	Z+, r19
    2836:	de f6       	brtc	.-74     	; 0x27ee <__ultoa_invert+0xe>
    2838:	cf 01       	movw	r24, r30
    283a:	08 95       	ret
    283c:	46 2f       	mov	r20, r22
    283e:	47 70       	andi	r20, 0x07	; 7
    2840:	40 5d       	subi	r20, 0xD0	; 208
    2842:	41 93       	st	Z+, r20
    2844:	b3 e0       	ldi	r27, 0x03	; 3
    2846:	0f d0       	rcall	.+30     	; 0x2866 <__ultoa_invert+0x86>
    2848:	c9 f7       	brne	.-14     	; 0x283c <__ultoa_invert+0x5c>
    284a:	f6 cf       	rjmp	.-20     	; 0x2838 <__ultoa_invert+0x58>
    284c:	46 2f       	mov	r20, r22
    284e:	4f 70       	andi	r20, 0x0F	; 15
    2850:	40 5d       	subi	r20, 0xD0	; 208
    2852:	4a 33       	cpi	r20, 0x3A	; 58
    2854:	18 f0       	brcs	.+6      	; 0x285c <__ultoa_invert+0x7c>
    2856:	49 5d       	subi	r20, 0xD9	; 217
    2858:	31 fd       	sbrc	r19, 1
    285a:	40 52       	subi	r20, 0x20	; 32
    285c:	41 93       	st	Z+, r20
    285e:	02 d0       	rcall	.+4      	; 0x2864 <__ultoa_invert+0x84>
    2860:	a9 f7       	brne	.-22     	; 0x284c <__ultoa_invert+0x6c>
    2862:	ea cf       	rjmp	.-44     	; 0x2838 <__ultoa_invert+0x58>
    2864:	b4 e0       	ldi	r27, 0x04	; 4
    2866:	a6 95       	lsr	r26
    2868:	97 95       	ror	r25
    286a:	87 95       	ror	r24
    286c:	77 95       	ror	r23
    286e:	67 95       	ror	r22
    2870:	ba 95       	dec	r27
    2872:	c9 f7       	brne	.-14     	; 0x2866 <__ultoa_invert+0x86>
    2874:	00 97       	sbiw	r24, 0x00	; 0
    2876:	61 05       	cpc	r22, r1
    2878:	71 05       	cpc	r23, r1
    287a:	08 95       	ret
    287c:	9b 01       	movw	r18, r22
    287e:	ac 01       	movw	r20, r24
    2880:	0a 2e       	mov	r0, r26
    2882:	06 94       	lsr	r0
    2884:	57 95       	ror	r21
    2886:	47 95       	ror	r20
    2888:	37 95       	ror	r19
    288a:	27 95       	ror	r18
    288c:	ba 95       	dec	r27
    288e:	c9 f7       	brne	.-14     	; 0x2882 <__ultoa_invert+0xa2>
    2890:	62 0f       	add	r22, r18
    2892:	73 1f       	adc	r23, r19
    2894:	84 1f       	adc	r24, r20
    2896:	95 1f       	adc	r25, r21
    2898:	a0 1d       	adc	r26, r0
    289a:	08 95       	ret

0000289c <__prologue_saves__>:
    289c:	2f 92       	push	r2
    289e:	3f 92       	push	r3
    28a0:	4f 92       	push	r4
    28a2:	5f 92       	push	r5
    28a4:	6f 92       	push	r6
    28a6:	7f 92       	push	r7
    28a8:	8f 92       	push	r8
    28aa:	9f 92       	push	r9
    28ac:	af 92       	push	r10
    28ae:	bf 92       	push	r11
    28b0:	cf 92       	push	r12
    28b2:	df 92       	push	r13
    28b4:	ef 92       	push	r14
    28b6:	ff 92       	push	r15
    28b8:	0f 93       	push	r16
    28ba:	1f 93       	push	r17
    28bc:	cf 93       	push	r28
    28be:	df 93       	push	r29
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
    28c4:	ca 1b       	sub	r28, r26
    28c6:	db 0b       	sbc	r29, r27
    28c8:	0f b6       	in	r0, 0x3f	; 63
    28ca:	f8 94       	cli
    28cc:	de bf       	out	0x3e, r29	; 62
    28ce:	0f be       	out	0x3f, r0	; 63
    28d0:	cd bf       	out	0x3d, r28	; 61
    28d2:	09 94       	ijmp

000028d4 <__epilogue_restores__>:
    28d4:	2a 88       	ldd	r2, Y+18	; 0x12
    28d6:	39 88       	ldd	r3, Y+17	; 0x11
    28d8:	48 88       	ldd	r4, Y+16	; 0x10
    28da:	5f 84       	ldd	r5, Y+15	; 0x0f
    28dc:	6e 84       	ldd	r6, Y+14	; 0x0e
    28de:	7d 84       	ldd	r7, Y+13	; 0x0d
    28e0:	8c 84       	ldd	r8, Y+12	; 0x0c
    28e2:	9b 84       	ldd	r9, Y+11	; 0x0b
    28e4:	aa 84       	ldd	r10, Y+10	; 0x0a
    28e6:	b9 84       	ldd	r11, Y+9	; 0x09
    28e8:	c8 84       	ldd	r12, Y+8	; 0x08
    28ea:	df 80       	ldd	r13, Y+7	; 0x07
    28ec:	ee 80       	ldd	r14, Y+6	; 0x06
    28ee:	fd 80       	ldd	r15, Y+5	; 0x05
    28f0:	0c 81       	ldd	r16, Y+4	; 0x04
    28f2:	1b 81       	ldd	r17, Y+3	; 0x03
    28f4:	aa 81       	ldd	r26, Y+2	; 0x02
    28f6:	b9 81       	ldd	r27, Y+1	; 0x01
    28f8:	ce 0f       	add	r28, r30
    28fa:	d1 1d       	adc	r29, r1
    28fc:	0f b6       	in	r0, 0x3f	; 63
    28fe:	f8 94       	cli
    2900:	de bf       	out	0x3e, r29	; 62
    2902:	0f be       	out	0x3f, r0	; 63
    2904:	cd bf       	out	0x3d, r28	; 61
    2906:	ed 01       	movw	r28, r26
    2908:	08 95       	ret

0000290a <_exit>:
    290a:	f8 94       	cli

0000290c <__stop_program>:
    290c:	ff cf       	rjmp	.-2      	; 0x290c <__stop_program>
